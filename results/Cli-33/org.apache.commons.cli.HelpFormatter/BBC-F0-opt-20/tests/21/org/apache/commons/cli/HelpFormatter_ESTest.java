/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:39:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0);
      int int0 = helpFormatter1.defaultWidth;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 44, "usage: ", (String) null, options1, 44, 74, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("J");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 101, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 31;
      int int1 = (-263);
      String string0 = "\"X";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("r[5\"x=.#4G", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[a>");
      helpFormatter0.defaultSyntaxPrefix = "g7X|O.";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("g7X|O.");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(16);
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 16, "3TpF<U(,yxJAEf]f8p");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YWhG@@SV//w{6", options0);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.findWrapPos(")Nsh*[]uW]D8Uza0ON", 1, 1);
      options0.addOption("", false, "usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "IqRK _1h[/l]C*", "IqRK _1h[/l]C*", (Options) null, 64, 64, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "arg", "", options0, "\n");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("@", "--", true, "arg");
      helpFormatter0.printHelp("@", options1);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.findWrapPos("@", (-1), 1);
      options1.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "jHN~>", "@", options1, 32, 32, "jHN~>", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.codePoints();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", "l_6TeA/s_xf4>-", options1, "8G'>-~", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("@", true, "--");
      helpFormatter0.printHelp("@", options1);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, "jHN~>", "@", options1, 15, 15, "jHN~>", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "[ Options: [ short ", "#$!CabobvC7D~", options0, "aw==T");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "zYf!";
      int int0 = 122;
      MockFile mockFile0 = new MockFile((String) null, "<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 122, 122, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-121);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "--", "#'x6%)bfctGaj=sf(L", options0, "#'x6%)bfctGaj=sf(L");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      int int0 = (-2);
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.setWidth((-4228));
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "[", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-759), "org.apache.commons.cli.Option", " ", (Options) null, "9)q0<,C'5X}t5]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options0.addOption("arg", "", true, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) helpFormatter3;
      objectArray0[5] = (Object) "";
      mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ":p{B";
      Options options0 = null;
      helpFormatter0.setDescPadding((-618));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":p{B", "   ", (Options) null, "   ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-768), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1078), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      int int0 = 261;
      helpFormatter0.setLeftPadding(261);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter1.printHelp(3, "usage: ", "zYf!", options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 261, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "arg";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultArgName = "arg";
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getMatchingOptions("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1327), (-1327), " gnm`Yg:Ih(bY0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      options1.addOption((String) null, (String) null, false, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter2;
      objectArray0[2] = (Object) "b,";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter2.printUsage(printWriter0, 3, "kB(KFZmVF_U6nXuHT~X", options1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "arg";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ", true, "/#Xbtv");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3, "4ZT},&Z,", options1);
      helpFormatter3.printHelp(3, "4ZT},&Z,", "usage: ", options2, "6(R%");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLeftPadding(261);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, true, "\n");
      options1.hasOption("arg");
      // Undeclared exception!
      helpFormatter1.printHelp(1, "\n", "", options1, "\n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "arg";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOption("", " ", true, "/#Xbtv");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3, "4ZT},&Z,", options1);
      helpFormatter3.setLongOptSeparator("[ option: ");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter1.createPadding(1);
      HelpFormatter helpFormatter5 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      helpFormatter0.setLeftPadding(261);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "-", options0, 1893, 1, "7", true);
      helpFormatter1.printHelp(3, "usage: ", "zYf!", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("c*['", options0);
      helpFormatter2.printHelp("L+.D`M[wU]{Q[\"f(S", "org.apache.commons.cli.Option", options0, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "usage: ", "", options0, 1, 39, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      String string0 = "arg";
      helpFormatter0.defaultArgName = "arg";
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ", false, "/#Xbtv");
      options2.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options2, 1991, 63);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("WE''~7$dk`d7");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter3.setLongOptSeparator("Ya`i<8<djICe<84");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter1.createPadding(1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2027), options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 1;
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      String string1 = " 7/>vC~";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2429), " 7/>vC~", "arg", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2909), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLeftPadding(261);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("Illegal option name '", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      mockPrintWriter0.write("|Xk}|.;q)jG$(O%:U");
      helpFormatter0.printHelp(printWriter0, 261, "Illegal option name '", (String) null, options0, 24, 24, "", true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) options0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter1 = printWriter0.printf("", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 2, "");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "X7", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", false, "kOd@]+|f*");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", false, "\n");
      helpFormatter1.printHelp("arg", options4);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      mockPrintWriter0.write("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2284), "|Xk}|.;q)jG$(O%:U", (String) null, options4, 122, 74, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption("", false, (String) null);
      helpFormatter0.printHelp("bX'V'", options1);
      int int0 = (-2565);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "arg";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "@";
      options0.addOption("@", true, (String) null);
      helpFormatter1.printHelp("--", options1);
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "sszr7?yD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // sszr7?yD
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLeftPadding(261);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("Illegal option name '", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      mockPrintWriter0.write("|Xk}|.;q)jG$(O%:U");
      helpFormatter0.printHelp(printWriter0, 261, "Illegal option name '", (String) null, options0, 24, 24, "", true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 261, options0, 24, 24);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 24, 1376, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLeftPadding(261);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, " [ARG]", "\n", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 1017, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(42, ">9", "(E5N{/YiZ{R", options0, "org.apache.commons.cli.Util");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("Jz{_TKTqE}D655>t=s#");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("");
      options1.addOption("", true, "<3`u");
      helpFormatter0.printHelp("XzsQicoIx+WVpR6k.", (String) null, options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding(74);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter1.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      mockPrintWriter0.write(" ");
      String string0 = "";
      String string1 = "+%4LA7Qp(";
      int int0 = (-2316);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 74, options1, (-2316), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.hasOption("IF5iPmV'pOf=@813\"n'");
      helpFormatter0.printHelp(261, "   ", (String) null, options0, "\n");
      Options options1 = new Options();
      helpFormatter0.printHelp(4234, "@)93%Y+}ljGZ", "", options1, "' was specified but an option from this group ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1808, "-", "", options0, 1808, 4234, "IF5iPmV'pOf=@813\"n'", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLeftPadding(261);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 294, ">");
      helpFormatter0.createPadding(117);
      helpFormatter0.setDescPadding(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("");
      mockPrintWriter0.print((-1.0));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1582, "[G)gNJmH");
      helpFormatter0.setWidth(1);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, (String) null, "--", options0, 74, 64, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(115, " 7/>vC~", (String) null, options0, (String) null, true);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-YNt*2V0}M,*mv>*", " 7/>vC~", options0, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("CiY/|");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "YP-1Tc$8\">#", "", (Options) null, "YP-1Tc$8\">#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "/#Xbtv");
      helpFormatter1.renderOptions(stringBuffer0, 74, options1, 2000, 63);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("WE''~7$dk`d7");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3, "4ZT},&Z,", options0);
      helpFormatter3.setLongOptSeparator("Ya`i<8<djICe<84");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter1.createPadding(1);
      Options options2 = new Options();
      // Undeclared exception!
      helpFormatter4.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "usage: ", options1, 74, 1, "A1GoH^1,|Kn/", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      int int0 = 24;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("line.separator", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "";
      mockPrintWriter0.print(784.3578F);
      helpFormatter0.rtrim((String) null);
      mockPrintWriter0.print(0.0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3660), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string1 = "avsp(Dd9{e:LN";
      helpFormatter0.defaultSyntaxPrefix = "avsp(Dd9{e:LN";
      String string2 = "";
      helpFormatter0.rtrim("");
      String string3 = " ]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(")Dbg@u/,@T`K:^", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')Dbg@u/,@T`K:^' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1631);
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", options0);
      helpFormatter1.printHelp("arg", "p;m5sYla3\"iZ", options0, "o/cdyxO}x", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      stringWriter0.append('-');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print(0.0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1230, "LmC\")l");
      helpFormatter0.setWidth(34);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-2468), "usage: ", "", options0, 52, 1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      mockPrintWriter0.write("dL8OLC6I");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1857), "]", "\n", options0, 24, 74, " ]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("Jz{_TKTqE}D655>t=s#");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "-");
      helpFormatter0.printHelp(" ]", "org.apache.commons.cli.HelpFormatter$1", options2, "usage: ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      int int0 = 261;
      helpFormatter0.setLeftPadding(261);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("Illegal option name '", options1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      String string0 = "5fF'BvS@h.Za&VY_DSt";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 261, "Illegal option name '", "5fF'BvS@h.Za&VY_DSt", options0, 1, (-3587), "Illegal option name '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("line.separator", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 24, "[,pr<nSP)N_ej6j", "", options0, (-1861), 24, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print((double) 74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "LmC\")l");
      helpFormatter0.setWidth((-1577));
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "!!ckzRdTc#eI]", (String) null, options0, 0, 0, "!!ckzRdTc#eI]");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setLeftPadding(261);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "\"n#z", "BR", options0, "' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(">", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":KD\u0004OL:'");
      PrintWriter printWriter0 = mockPrintWriter0.append('%');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.write("N/e8K<:-ILq:h");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 24, "", (String) null, options0, (-1388), 24, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ", false, "/#Xbtv");
      helpFormatter1.renderOptions(stringBuffer0, 1623, options2, 1991, 63);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("WE''~7$dk`d7");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3, "4ZT},&Z,", options1);
      helpFormatter3.setLongOptSeparator("Ya`i<8<djICe<84");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getOptPrefix();
      helpFormatter1.createPadding(1);
      int int0 = (-817);
      // Undeclared exception!
      try { 
        options1.addOption("\n", "usage: ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      String string0 = "W{>hKUoyGCzs1~EK";
      mockPrintWriter0.print((double) 74);
      helpFormatter0.setOptPrefix("W{>hKUoyGCzs1~EK");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "LmC\")l");
      helpFormatter0.setWidth((-1577));
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("+SH*<", "", options1, ",zYAYu");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "' was specified but an option from this group ", "--", options0, "");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "' was specified but an option from this group ", "", options1, "   ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter1.printHelp(3308, " ", "\n", options0, "bj,z.;;~%");
      helpFormatter0.findWrapPos("\n", 1, 1);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "' was specified but an option from this group ", "--", options0, "wOkE7iaz:C");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "' was specified but an option from this group ", "--", options0, "wOkE7iaz:C");
      helpFormatter0.findWrapPos("", (-1), 3);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-121);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("AF2RPS<F3j}uAG", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print(true);
      mockPrintWriter0.print((double) 74);
      helpFormatter0.printUsage(printWriter0, 74, "nVHpWl#'h[");
      helpFormatter0.setLeftPadding((-2854));
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setSyntaxPrefix(".");
      helpFormatter0.setWidth(812);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "+SH*<", options0, "w]+&@6,vV}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ", false, "/#Xbtv");
      helpFormatter1.renderOptions(stringBuffer0, 1623, options2, 1991, 63);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("WE''~7$dk`d7");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptSeparator("]");
      helpFormatter0.getOptPrefix();
      helpFormatter3.createPadding(1230);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2392, (-1198), "g]FeSAQXd|[)N");
      helpFormatter0.renderOptions(stringBuffer0, (-2116), options0, 1230, 2392);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = 10;
      Options options2 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 74, options1, 1969, 133);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 10;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(35);
      stringBuffer0.codePoints();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1201), ">");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("0:/$}~u.2+", (String) null, false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0:/$}~u.2+' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, (String) null, "usage: ", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = ",[@1/AMvU?qAdCg_8[";
      String string1 = "ylGG8ky+hT+DTBzc=";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("xTA6|", "g=WESe@3Gc^s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'xTA6|' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 13, 1230, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 13, options0, (-2116), 139);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print(true);
      mockPrintWriter0.print((double) 74);
      helpFormatter0.setOptPrefix("W{>hKUoyGCzs1~EK");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "LmC\")l");
      helpFormatter0.setWidth((-1577));
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, (String) null, "LmC\")l", options0, 74, (-465), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-121);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "s<Mff^";
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, (String) null, "#'x6%)bfctGaj=sf(L", options0, "#'x6%)bfctGaj=sf(L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-121);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-121), "K", "-", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-660);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.codePoints();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "Y&", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print((double) 74);
      helpFormatter0.setOptPrefix("W{>hKUoyGCzs1~EK");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "LmC\")l");
      helpFormatter0.setWidth('1');
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, (-1548));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("LU&&?*Hj");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('p');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintStream0.print((-2065L));
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      String string0 = "8FMW\"nSv-`]#o:Q[t $";
      helpFormatter0.setDescPadding((-683));
      helpFormatter0.getWidth();
      mockPrintWriter0.print((float) 1);
      helpFormatter0.rtrim("LU&&?*Hj");
      mockPrintWriter0.print((double) (-683));
      helpFormatter0.setOptPrefix("");
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-683), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print((double) 74);
      helpFormatter0.setOptPrefix("W{>hKUoyGCzs1~EK");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "LmC\")l");
      helpFormatter0.setWidth((-1577));
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("v,\n7.=", 1230, 1058);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("V{J#fZpFMPO# QKD");
      helpFormatter0.setLeftPadding(261);
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("V{J#fZpFMPO# QKD", options0, true);
      String string0 = "[ option: ";
      options0.getOption("--");
      String string1 = "</yqKpp=";
      MockFile mockFile0 = new MockFile(";t|", "</yqKpp=");
      File file0 = MockFile.createTempFile(",8 'DfG1qu", "[ option: ", (File) mockFile0);
      options0.helpOptions();
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile(file0, "[ option: ");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1012));
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "\n";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1330), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ")rK5";
      helpFormatter0.getDescPadding();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      String string1 = "hoy*F";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption(" ", "B", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1230;
      helpFormatter0.setLeftPadding(1230);
      helpFormatter0.setOptPrefix((String) null);
      String string0 = null;
      String string1 = "~([P!,O,(";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "LU&&?*Hj";
      MockFile mockFile0 = new MockFile("LU&&?*Hj");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('p');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintStream0.print((-2065L));
      int int0 = (-683);
      String string1 = "O]RzuHJ6~k$lk8r";
      mockPrintWriter0.append((CharSequence) "--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8FMW\"nSv-`]#o:Q[t $", "LU&&?*Hj", (Options) null, "O]RzuHJ6~k$lk8r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-1855);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o";
      StringBuffer stringBuffer0 = new StringBuffer("o");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasLongOption("");
      boolean boolean0 = false;
      Option option0 = new Option((String) null, false, "-");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption((String) null);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 9, 0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Fb63ttan};UX";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 975;
      helpFormatter0.setNewLine("ufH*))hU:RY:");
      helpFormatter0.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-660);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      stringBuffer0.codePoints();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1548), 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "MpSd6r7d[>]07l\"A";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("MpSd6r7d[>]07l\"A", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, 1, options0, 1, 1);
      helpFormatter0.setDescPadding(32);
      helpFormatter0.setDescPadding((-2232));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(13);
      helpFormatter0.setLongOptPrefix("             ");
      helpFormatter0.createPadding(13);
      helpFormatter0.setLongOptSeparator("8%");
      int int1 = 0;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("             ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '             ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-7414));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J&NA5";
      helpFormatter0.setSyntaxPrefix("J&NA5");
      int int0 = 74;
      String string1 = " | ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("CPN%%\"0[&", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'CPN%%\"0[&' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      options0.getOption("-HqmSl% Lq{vC}Xr");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(934);
      options0.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0);
      String string1 = ">";
      try { 
        MockURI.URI("--", ">", " ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: --:%3E#%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.close();
      helpFormatter0.defaultOptPrefix = "!!ckzRdTc#eI]";
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      helpFormatter0.printUsage(printWriter0, 1230, "usage: ");
      helpFormatter0.createPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      mockPrintWriter0.print(1.0F);
      helpFormatter0.rtrim("LmC\")l");
      mockPrintWriter0.print((double) 74);
      helpFormatter0.setOptPrefix("W{>hKUoyGCzs1~EK");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "LmC\")l");
      helpFormatter0.setWidth((-1577));
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "!!ckzRdTc#eI]", (String) null, options0, 0, 0, "W{>hKUoyGCzs1~EK");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-121);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "K", "", options0, "s<Mff^");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("V{J#fZpFMPO# QKD");
      helpFormatter0.setLeftPadding(261);
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("V{J#fZpFMPO# QKD", options0, true);
      String string0 = "[ option: ";
      String string1 = "</yqKpp=";
      MockFile mockFile0 = new MockFile(";t|", "</yqKpp=");
      File file0 = MockFile.createTempFile(",8 'DfG1qu", "[ option: ", (File) mockFile0);
      options0.helpOptions();
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile(file0, "[ option: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
