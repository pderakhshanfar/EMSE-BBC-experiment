/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:55:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("<", 0, 0);
      helpFormatter0.rtrim("org.apache.commons.cli.Options");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.ROOT;
      mockPrintWriter1.format(locale0, "JX>kn0a)=e", (Object[]) null);
      int int0 = 1;
      String string0 = "jV)NdNs";
      Options options0 = new Options();
      Options options1 = options0.addOption("OIm", true, "mGt%\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("--", "77n", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "\n", "\n", options0, "\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "2U`MPS");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-619));
      int int0 = (-1);
      String string0 = "org.apache.commons.cli.Util";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.Util", "$.=x?>Gdk[+U!W", options0, "$.=x?>Gdk[+U!W");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1617));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2907), "N;Gr~{z.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = 0;
      String string0 = "ptiWS";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "ptiWS");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 4193;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4193, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 108;
      helpFormatter0.setDescPadding(108);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-277), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      CharBuffer.wrap((CharSequence) "\n");
      CharBuffer.wrap((CharSequence) "--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printHelp(printWriter0, 10, "b~Iq2", "[", options1, 10, 81, "", true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter1.rtrim("--");
      helpFormatter0.printHelp(3, "--", "F!|bOk_8", options0, "F!|bOk_8");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1728);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 21, (-135), string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      Option option0 = new Option("arg", "iJ;V5y{k]1jS8Cy+C?");
      optionGroup0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4), (String) null, "", options1, 103, 1, "e}3`k-_Hq+Dm", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      CharBuffer.wrap((CharSequence) "-");
      CharBuffer.wrap((CharSequence) "-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      stringWriter2.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 117, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 117, 117, "");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      CharBuffer.wrap((CharSequence) "-");
      CharBuffer.wrap((CharSequence) "-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      stringWriter2.flush();
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "[", "kmi%yf%4i", options0, 1, 10, "[", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "Q/W;", "", options1, (-2470), 26, " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "usage: ", "arg", options0, 1, 74, "Qm>Kux", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3111);
      StringWriter stringWriter2 = stringWriter1.append('\u0019');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharBuffer.wrap((CharSequence) "arg");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "TZ5n5*[:FqEIo>1", false, "");
      stringWriter2.flush();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4055, "ohQ=", " ] [ long ", options0, 111, 10, "ohQ=", true);
      helpFormatter0.printHelp(3111, "8yBDvLR@2", "8yBDvLR@2", options1, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 111, "F]W<J 1eXfz*7X'As^o");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 1, "usage: ", "org.apache.commons.cli.ParseException", options1, 1, 3, "--", false);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 1;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "]G;>,7a0x`g1d*|H 5A", "9M@]D4k:ibnwq6F8", options0, (-2274), (-2803), " | ");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3111);
      StringWriter stringWriter2 = stringWriter1.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      mockPrintWriter0.println((double) 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "TZ5n5*[:FqEIo>1", false, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "TZ5n5*[:FqEIo>1", "", options1, 10, 10, "");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "' was specified but an option from this group ", "", options0, (-4), 1198, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 1;
      helpFormatter1.rtrim("--");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 1;
      CharBuffer.allocate(1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "arg");
      helpFormatter0.printHelp(7, "\"]j~hA-\"0R:1rDI3H_", "usage: ", options0, "[,}n*s]z@FD(uV~F");
      helpFormatter1.rtrim("arg");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(257);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 257
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, ":hf.=`'E/gMWL");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      String string0 = "";
      Options options2 = options1.addOption("", "--", true, " ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) ":hf.=`'E/gMWL";
      objectArray0[2] = (Object) option0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) optionGroup1;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-76), "hWmy9E`i%0Lf}0o", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.JAPAN;
      mockPrintWriter0.format(locale0, " ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append((CharSequence) "--");
      int int0 = (-1786);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 4143, "", "--", options0, 82, 3, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "{R^", "|bA}?\"ut@BTPc%_dZ", (Options) null, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      CharBuffer.wrap((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 84, "", "", options0, (-702), 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1277, "vxJa2c+Hd\"hn=}H8tEW", "[", options0, "D6vswWL@i'`5qt=r");
      helpFormatter0.rtrim("AH-,[");
      helpFormatter1.getDescPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2195, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1277, "vxJa2c+Hd\"hn=}H8tEW", "[", options0, "D6vswWL@i'`5qt=r");
      helpFormatter0.rtrim("AH-,[");
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter2.renderOptions(stringBuffer0, 3, options0, 82, 1414);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1277, "vxJa2c+Hd\"hn=}H8tEW", "[", options0, "D6vswWL@i'`5qt=r");
      helpFormatter0.rtrim("AH-,[");
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "arg", "", options0, (-702), 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = Locale.ROOT;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1);
      Options options1 = new Options();
      Options options2 = options1.addOption("", "-", false, "--");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 10, "ohQ=", "FzOZe", options2, 10, (-1491), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(2625);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      stringWriter1.append('y');
      CharBuffer.wrap((CharSequence) "usage: ");
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options1 = new Options();
      options1.addOption("", "TZ5n5*[:FqEIo>1", false, "\":'");
      stringWriter0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "TZ5n5*[:FqEIo>1", (String) null, options0, 74, 74, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.printHelp(3, "\n", "\n", options0, (String) null);
      helpFormatter1.rtrim((String) null);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter1, 4265, ".9", ".9", options0, 4265, 1854, (String) null, false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("c,T)iwVsAPy", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) "c,T)iwVsAPy";
      objectArray0[7] = (Object) "6\"OCKn+zn,";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printUsage(printWriter0, 395, "!UKr&$!JJ+|[ibkG7B", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, 109, "\n");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      options0.addOption("", "vk!V5i/K/NIO,%>", false, (String) null);
      stringWriter1.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1063, "ohQ=", "", options0, 4055, 69, " ] [ long ", false);
      helpFormatter0.findWrapPos("", 4055, (-832));
      helpFormatter0.printHelp("org.apache.commons.cli.Options", "ohQ=", options0, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("]", 7, (-2956));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3111);
      StringWriter stringWriter2 = stringWriter1.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "]fl~", "6X1f{G", options0, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3111);
      StringWriter stringWriter2 = stringWriter1.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      options0.addOption("arg", "TZ5n5*[:FqEIo>1", false, "");
      stringWriter2.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4055, "ohQ=", " ] [ long ", options0, 111, 10, "ohQ=", true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(91, "[ option: ", "", (Options) null, "ZknGD?_B$", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setOptPrefix("   ");
      helpFormatter0.setOptPrefix("#4nBpM=p!");
      helpFormatter0.printHelp(31, "jj#U2udvm,J o", "w", options0, "C", true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      options0.addOption("", "--", true, "j:");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 18, "|x6f2kLH4Z8kMM");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setArgName(" ] [ long ");
      helpFormatter0.defaultDescPad = (-1409);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("arg", "}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "6\"OCKn+zn,", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3, "!UKr&$!JJ+|[ibkG7B", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 74, 1, "");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("arg", "}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "6\"OCKn+zn,", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3, "!UKr&$!JJ+|[ibkG7B", options0);
      helpFormatter0.printHelp(";Ya}TAk-K~tb|V3m}(#", "", options0, "|");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "!UKr&$!JJ+|[ibkG7B");
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1258, 1258);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3111);
      StringWriter stringWriter2 = stringWriter1.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printUsage(printWriter0, 12, "", options1);
      helpFormatter0.printHelp("|", "8e;$juNa3", options1, ";Ya}TAk-K~tb|V3m}(#");
      helpFormatter0.findWrapPos("' contains an illegal character : '", 9, 9);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "6X1f{G", "", options0, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      stringWriter2.write("arg");
      Options options1 = options0.addOption((String) null, "", true, "NO_ARGS_ALLOWED");
      helpFormatter0.printOptions(mockPrintWriter0, 10, options1, 0, 0);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("#4nBpM=p!", options1);
      helpFormatter0.getOptionComparator();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(1874);
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.setOptPrefix("line.separator");
      Options options3 = new Options();
      options1.addOption("arg", "--", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-7), options2, 36, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(2431, "line.separator", "", options1, "6X1f{G");
      MockFile mockFile0 = new MockFile("K");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = 1;
      helpFormatter1.printHelp(3, "Zm;L(FCoX<c+;EM", "Zm;L(FCoX<c+;EM", options0, (String) null);
      // Undeclared exception!
      try { 
        options0.addOption("-", " ", true, "]e~Kc,ci&,KT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("#4nBpM=p!", options1);
      optionGroup0.setRequired(false);
      helpFormatter0.getOptionComparator();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(1874);
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.setOptPrefix("line.separator");
      Options options2 = new Options();
      helpFormatter0.rtrim("#4nBpM=p!");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("#4nBpM=p!", "*2");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "line.separator");
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(3111);
      StringWriter stringWriter2 = stringWriter1.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "TZ5n5*[:FqEIo>1", false, "");
      stringWriter2.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "TZ5n5*[:FqEIo>1", "", options1, 0, (-931), "TZ5n5*[:FqEIo>1", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "x+<vz");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", ".]NdC*a:aImFC-=(fm6");
      Options options3 = options2.addOption(option0);
      options3.addOption(option0);
      helpFormatter0.printHelp("arg", "arg", options3, ".]NdC*a:aImFC-=(fm6");
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "x+<vz";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) options2;
      mockPrintWriter0.format((Locale) null, " ", objectArray0);
      Options options4 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      stringWriter0.close();
      options0.hasShortOption((String) null);
      Options options1 = options0.addOption((String) null, "", true, "usage: ");
      helpFormatter0.printOptions(mockPrintWriter0, 10, options1, 0, 0);
      helpFormatter0.printHelp("' contains an illegal character : '", options0, true);
      helpFormatter0.createPadding(10);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("arg", "}");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "6\"OCKn+zn,", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3, "!UKr&$!JJ+|[ibkG7B", options0);
      helpFormatter0.printHelp(";Ya}TAk-K~tb|V3m}(#", "", options0, "|");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "usage: ", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("#4nBpM=p!", options1);
      helpFormatter0.getOptionComparator();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.createPadding(1874);
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.setOptPrefix("line.separator");
      Options options2 = new Options();
      options0.addOption("arg", "arg", true, "U2n/=QAV}");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 36, options0, 0, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "x+<vz");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", ".]NdC*a:aImFC-=(fm6");
      Options options3 = options2.addOption(option0);
      options3.addOption(option0);
      helpFormatter0.printHelp("arg", "arg", options3, ".]NdC*a:aImFC-=(fm6");
      helpFormatter0.printHelp(".]NdC*a:aImFC-=(fm6", "", options2, "org.apache.commons.cli.Options", false);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "]";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("]", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.setOptPrefix("TAPR=*aH");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-876), "", "TAPR=*aH", options1, "Illegal option name '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      helpFormatter0.rtrim("#4nBpM=p!");
      String string1 = "@jmW";
      options0.getMatchingOptions("lu");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "d", options0, "@jmW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = null;
      optionGroup0.toString();
      int int0 = (-218);
      String string1 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-218), "-", (String) null, options0, "[]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.getDescPadding();
      int int0 = (-2704);
      String string0 = "x;<K+^x";
      helpFormatter0.getWidth();
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("x;<K+^x", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'x;<K+^x' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.printHelp("@jmW", "arg", options0, "@jmW");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(">(]", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(2431, "line.separator", "line.separator", options0, "ai[3.d");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 0;
      String string0 = "[";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName((String) null);
      int int1 = (-1640);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 2032, options0, (-1640), 806);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('\"');
      CharBuffer.wrap((CharSequence) "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringWriter0.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "j:");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 10, 0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "SrFizR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-961);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2099), (-2099), "HpVZC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1119);
      helpFormatter0.setDescPadding((-1119));
      helpFormatter0.setLeftPadding(0);
      String string0 = ")THkh/:./LF:M0oYL]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")THkh/:./LF:M0oYL]", ")THkh/:./LF:M0oYL]", options0, ")THkh/:./LF:M0oYL]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(31);
      helpFormatter0.setOptPrefix("Xl:R+Ym_[}M!");
      helpFormatter0.defaultOptPrefix = "Xl:R+Ym_[}M!";
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultOptPrefix = "Xl:R+Ym_[}M!";
      helpFormatter0.defaultLongOptPrefix = ".(#]a";
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth(31);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "NO_ARGS_ALLOWED");
      helpFormatter0.printOptions(mockPrintWriter0, 10, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getOptionComparator();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 31, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b1Hl";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b1Hl", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "SrFizR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-961), (-961), "bULP+nb9PyCj@PS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2583);
      int int0 = 0;
      String string0 = "\\yQ_vj.8zh0#P}p";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding(3);
      helpFormatter0.getOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", " ", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "arg", options1, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7GeoNG*WnQm]@`g3o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&I)'(:}");
      mockPrintWriter0.append('F');
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter0.format("arg", objectArray0);
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("#4nBpM=p!", options1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(2431, "#4nBpM=p!", "line.separator", options0, "");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ov~j8";
      helpFormatter0.defaultOptPrefix = "ov~j8";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      String string1 = "KBtA3\"Mvp8o?pp";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("KBtA3\"Mvp8o?pp", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLeftPad = 1127;
      helpFormatter0.defaultLeftPad = (-188);
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      int int0 = 3657;
      helpFormatter0.setLeftPadding(3657);
      int int1 = 586;
      helpFormatter0.findWrapPos("s[Pa{ei>", (-1956), 586);
      helpFormatter0.setLongOptSeparator("yL?!<YJ");
      helpFormatter0.setLongOptSeparator("A{+l`-aK");
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append('d');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLongOptPrefix();
      String string1 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("*ZQ");
      helpFormatter0.createPadding(272);
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.setArgName("U");
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      String string1 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      int int0 = (-119);
      helpFormatter0.setLeftPadding((-119));
      String string2 = "mv.)`nBrF\\^7^\"S";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption((String) null, false, (String) null);
      Option option0 = null;
      try {
        option0 = new Option("*ZQ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*ZQ' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.ParseException", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 1001;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "p;dR%Z\"d", "kIXo^[Rmq.c,.", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "3@-L^mgF1BDB4?<");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) helpFormatter0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf((Locale) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      String string0 = "\"tW2_2^puQ(QAq~#";
      helpFormatter0.defaultLongOptPrefix = "\"tW2_2^puQ(QAq~#";
      String string1 = "org.apache.commons.cli.Option";
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      String string2 = "7:E6>k!r4 ";
      helpFormatter0.setLongOptSeparator("7:E6>k!r4 ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      String string3 = "--";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("BE*!XR@'TEV", "#X+3[[Nk0P&O", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BE*!XR@'TEV' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLeftPadding(0);
      String string1 = "`TBB?m4m.j<{U";
      File file0 = MockFile.createTempFile("`TBB?m4m.j<{U", "-");
      try { 
        MockFile.createTempFile("6'Ego[xU+iY'V=rM", "usage: ", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "Cfs7", "Cfs7", options0, "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.printHelp("@jmW", "arg", options0, "@jmW");
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/kz=_gV7r";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "";
      Options options1 = options0.addOption("arg", "", false, "");
      String string3 = "Os(l";
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "Os(l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
