/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:12:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'f';
      charArray0[2] = ' ';
      charArray0[3] = '';
      charArray0[4] = 'X';
      charArray0[5] = '^';
      charArray0[6] = 'U';
      charArray0[7] = '/';
      stringBuffer0.append(charArray0);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 496, options0, 496, 496);
      String string0 = ".5.q`aEv^";
      String string1 = "-";
      String string2 = "^sX~?Zn";
      helpFormatter0.defaultSyntaxPrefix = "^sX~?Zn";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1229, ".5.q`aEv^", "-", options0, 1, 1229, ".5.q`aEv^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = new Locale("-", "arg");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2085), 3084, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-347));
      helpFormatter0.createPadding(241);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("n%(usuvlV", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) ">";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-554), options0, (-554), (-554));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "arg", (Options) null, 3, 3, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$,VYdAg2S<[");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "$,VYdAg2S<[";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter1, (-555), (Options) null, 3, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      Option option1 = new Option("b", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1894, "[", options0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = ">7$ZRA\"8";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1@+ca");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(1951);
      helpFormatter0.createPadding(1951);
      int int0 = (-4356);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-4356), options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 0;
      String string0 = "];yp#:_F |";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I", "I", (Options) null, "^_\"0%", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("'");
      helpFormatter0.defaultArgName = "";
      MockFile mockFile0 = new MockFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Object[]) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printUsage(printWriter0, 13, "`|\"dKIk+=WKX");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.setNewLine(" ] [ long");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", " ] [ long", options0, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "--", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      helpFormatter0.setLeftPadding((-4997));
      Options options0 = new Options();
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "<", options0, "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "usage: ");
      File file0 = MockFile.createTempFile("@ARhB0)cVHgpbU", "org.apache.commons.cli.ParseException", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = (-2062);
      mockPrintWriter0.append((CharSequence) "usage: ", 3, 3);
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2062), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
      Options options1 = options0.addOption("arg", false, "usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options1, 27, 27);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      int int0 = (-3402);
      String string0 = "gMm#Vf2`Ind&]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "";
      Options options0 = new Options();
      String string2 = "wo7M`c<C_tI e07}";
      helpFormatter0.renderOptions((StringBuffer) null, 582, options0, 528, 528);
      Option option0 = null;
      try {
        option0 = new Option("wo7M`c<C_tI e07}", true, "Ozhp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'wo7M`c<C_tI e07}' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ] [ long ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "usage: ", (Object[]) null);
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      optionGroup0.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage(printWriter0, 3, " ] [ long", options2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      helpFormatter0.printUsage(printWriter0, 789, "Q~<u6P&JMM>");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("x", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "--", options2);
      helpFormatter0.findWrapPos("Q~<u6P&JMM>", 1, 789);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "A CloneNotSupportedException was thrown: ", "-", options3, (-1160), 1205, " ]");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.setSyntaxPrefix("");
      mockPrintWriter0.append('&');
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("x", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(36, "`G]\"dKk+=WKX", "", options2, "");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "'", options2);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp(789, "'", "K?4<f'k", options3, "`G]\"dKk+=WKX");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('B');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "Su@VT 4H/ibmEx(2cLi");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "NiLW$Y8eb8";
      helpFormatter0.setLongOptPrefix("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "t_pEYj6qwWuul<t", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-364), "1*Xx2h*aw;Q`eJHVB", "", options1, "1*Xx2h*aw;Q`eJHVB", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "<";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      int int0 = (-973);
      String string1 = "[ option: ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "NO_ARGS_ALLOWED", "\n", (Options) null, "<", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      helpFormatter0.printUsage(printWriter0, 789, "Q~<u6P&JMM>");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("x", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter0.printHelp(36, "`|\"dKIk+=WKX", "-", options2, "");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "'", options2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "--");
      Option option0 = new Option((String) null, false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("", false, "' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3664), options4, 1601, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1081), options0, 21, 63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "arg", (Options) null, " ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.createPadding(3);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("7&Z$BO{\"vG9o", 3, 0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      int int0 = (-973);
      String string1 = "[ option: ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("[", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = options0.addOption("", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter1.renderOptions(stringBuffer0, 88, options1, 0, 3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.printf("", (Object[]) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "`|\"dKIk+=WKX");
      helpFormatter0.getOptPrefix();
      mockPrintWriter1.checkError();
      helpFormatter0.printHelp(13, " ", "Nf", options0, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 13, "!R;X[Jk]HM6/0[", "", options0, 13, 1, "", true);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "NO_ARGS_ALLOWED", "-", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-539));
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = "N.i0k~;btMfo>\\A\"z";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.defaultLongOptPrefix = "N.i0k~;btMfo>A\"z";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("PT_]3<nG2z5,NzwL.,");
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("PT_]3<nG2z5,NzwL.,", (-1355), (-1355));
      helpFormatter0.getNewLine();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      helpFormatter0.printUsage(printWriter0, 789, "Q~<u6P&JMM>");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("x", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption(option0);
      helpFormatter0.printHelp(36, "`|\"dKIk+=WKX", "-", options2, "");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.printHelp(printWriter0, 36, "a? a[XpE,- GMkYnB", "`|\"dKIk+=WKX", options0, 789, 789, "^mCO", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 7, "^&+,Rd4Y(hp3-bZ=");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "arg", options1, " ");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setWidth(32);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1231), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[2];
      mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 6, "^&+,Rd4Y(hp3-bZ=");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.setWidth(33);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^&+,Rd4Y(hp3-bZ=", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      helpFormatter0.setLongOptSeparator("");
      options0.getMatchingOptions("");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("1e2", "", false, "");
      helpFormatter0.printHelp("R{|?x?:=p)=PGIi", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((-1282), " ", "", options3, "a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      helpFormatter0.setLongOptSeparator("");
      options0.getMatchingOptions("");
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "--", true, "");
      helpFormatter0.printHelp("P%", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("[");
      helpFormatter1.printHelp(74, "[", " ", options0, "");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding((-2997));
      helpFormatter0.rtrim("aWnl");
      helpFormatter0.setArgName(" | ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("aWnl", "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2997), " | ", "qMY_3? XU", options1, "aWnl", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1104, 1104, "");
      Options options0 = new Options();
      int int0 = 61;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 9, options0, 61, (-1428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(833);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding(2172);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.printHelp(74, "\n", "\"R}h'C+T3yy797LH*8", options0, "w?@DRN6B");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setDescPadding((-3522));
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp(34, "--", "cgO7 50BY", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.defaultNewLine = "[";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(77, "Q({FU&2x<a^|A(n", "ug\"#x:sR", options0, "NO_ARGS_ALLOWED");
      options0.hasShortOption("arg");
      helpFormatter0.setLongOptSeparator("");
      options0.getMatchingOptions("");
      options0.addOption("arg", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "");
      helpFormatter0.setDescPadding(4304);
      helpFormatter0.printHelp("?{_\"T", options0, false);
      helpFormatter0.printHelp(77, "?{_\"T", "?{_\"T", options0, "", false);
      helpFormatter0.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4304, "R_^1", " ", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(printWriter0, 44, "(]>pu:\":_", "2&s0M;b?f7o~E)-R,/5", options0, 44, 884, "]", false);
      helpFormatter0.printHelp(printWriter0, 44, "2&s0M;b?f7o~E)-R,/5", "W!x?0C=@2iC4Sz", options0, 60, 44, (String) null, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3808, 884, "]");
      helpFormatter0.printHelp("2&s0M;b?f7o~E)-R,/5", "W!x?0C=@2iC4Sz", options0, "/c<)=KHl4!");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 3542, 3542, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.defaultNewLine = "[";
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      helpFormatter0.setLongOptSeparator("");
      options0.getMatchingOptions("");
      Options options1 = options0.addOption("arg", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".tBaCZ[jm -~<@");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "", options1, 65, (-2156), "[", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("-", objectArray0);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding((-763));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options2, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      helpFormatter0.defaultNewLine = "[";
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      helpFormatter0.setLongOptSeparator("");
      options0.getMatchingOptions("");
      Options options1 = options0.addOption("arg", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(62);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 78, "6", "bX*}dXybb@'NtR", options1, 13, 4304, "0#6vmS1\"vtW(");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options0.getOptionGroups();
      int int0 = 884;
      mockFile0.setReadOnly();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 884, "2&s0M;b?f7o~E)-R,/5", "2&s0M;b?f7o~E)-R,/5", options0, 8, 884, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1525), "", "", options0, 8, 1598, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("(]>pu:\":_", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(833);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 316, ", ", "N3d", options0, (-3990), 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      options0.addOption("$", "5\"a'f6>CC[8F$8y6", true, "");
      helpFormatter0.setLongOptSeparator((String) null);
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(13);
      Option option0 = new Option("", "73'se1-wt{'`1,\"hZ", false, "");
      Options options1 = options0.addOption(option0);
      option0.setOptionalArg(false);
      helpFormatter0.printHelp(printWriter0, 165, "|<m-`$dji", (String) null, options0, 165, 39, "`^%Y$X", false);
      helpFormatter0.printHelp(printWriter0, (-1), "$", "-", options0, 44, 3, "zawjT", false);
      helpFormatter0.printHelp("z<Dd>/%P!1oc", "", options1, "-");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.setLongOptSeparator((String) null);
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(13);
      Option option0 = new Option("", "73'se1-wt{'`1,\"hZ", false, "");
      options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 3427, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("cp{MC;Ez{77Jig", "3s#l");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.setLongOptSeparator("Awj");
      mockPrintWriter0.print((long) 74);
      helpFormatter0.printUsage(printWriter0, 74, "3s#l");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1540));
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, (String) null, "arg", options1, 2250, 3, "' contains an illegal character : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-";
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((long) 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 5, "<");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter1.printHelp(",ZicGwbkPOII", "f5vei+\"w'X/j#+", options0, "--", true);
      helpFormatter1.findWrapPos("usage: ", 1, 1);
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("usage: ");
      helpFormatter2.printHelp(12, "-", "arg", options0, "Kz57}R");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("arg");
      options0.getMatchingOptions("--");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)39;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setSyntaxPrefix("");
      option0.toString();
      Options options2 = new Options();
      options2.hasLongOption("G-");
      helpFormatter0.printHelp(114, "IA+z|,", "[ option: arg  :: null ]", options1, "IA+z|,");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Vof`n19([0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 114, "lI@]TB;IwFS9?)>", "[ option: arg  :: null ]", options2, (-1), 114, (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.setLongOptSeparator((String) null);
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(13);
      Option option0 = new Option("", "--", false, "");
      option0.toString();
      options0.hasLongOption("-");
      helpFormatter0.printHelp(165, "om8v", "org.apacBe.commons.cliIUtil", options0, "2hp{d &");
      helpFormatter0.rtrim("om8v");
      helpFormatter0.rtrim("Cannot add value, list full.");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("--");
      options1.getMatchingOptions("--");
      String string0 = "D%";
      helpFormatter0.setSyntaxPrefix("D%");
      MockFile mockFile0 = new MockFile("[)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-350), "[)", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, (-2), (-2), "`g5~BvrCDSzB$sZ::3", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.setWidth(20);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.setLongOptSeparator((String) null);
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.setWidth(13);
      Option option0 = new Option("", "]zv&<JFx");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-54), "$R|", "G\"Y_m@1RW=?", options1, 3, 1850, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      mockPrintWriter0.printf("", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 1035, "zRa/jP4D<d");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      helpFormatter1.setWidth(25);
      helpFormatter0.getLongOptSeparator();
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("(]>pu:\":_");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp("(]>pu:\":_", "%kj]_c", options0, "", true);
      int int0 = 1;
      int int1 = (-1964);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1, (-1964));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = ":}u7[b>N9IaPD8e'";
      String string0 = "/Jddy";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/Jddy");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 10, options0, 2003, 262);
      helpFormatter0.findWrapPos(":}u7[b>N9IaPD8e'", 63, 13);
      boolean boolean0 = true;
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options0.addOption("IV7s=E1", "fORm)x $,YB+(pp!K", false, "=)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'IV7s=E1' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l-@F>W8uo-#|8{H6");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IdNt,0a|W~m");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.append('-');
      int int0 = 24;
      helpFormatter0.printWrapped(printWriter1, 24, "l-@F>W8uo-#|8{H6");
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      int int1 = 24;
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 24, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("%cCW0{'y", (Object[]) null);
      helpFormatter0.setLongOptSeparator("$");
      mockPrintWriter0.print(1L);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(13);
      Option option0 = new Option("", "cL=/>sPm9{t1-1=", false, "_} )%%ioVxhJ n '6");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "", "_} )%%ioVxhJ n '6", options0, (-2), 61, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(3, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "D%");
      helpFormatter0.printHelp("C&Yq21+3@[b6AB2F4", "-", options0, "", true);
      Option option0 = new Option("", false, "-");
      options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "<", ", ", options0, (-2), 852, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "C", options0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("--");
      options1.getMatchingOptions("--");
      option0.toString();
      helpFormatter0.printHelp(1673, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "D%", options1, "6%'|ZihmN ");
      String string0 = "<";
      String string1 = ";W d";
      String string2 = "C&Yq21+3@[b6AB2F4";
      String string3 = "\"";
      String string4 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        options1.addOption("cmdLineSyntax not provided", " ]", true, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.setLongOptSeparator((String) null);
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(13);
      Option option0 = new Option("", "73'se1-wt{'`1,\"hZ", true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp(printWriter0, 165, "|<m-`$dji", (String) null, options0, 165, 39, "`^%Y$X", false);
      helpFormatter0.printHelp(printWriter0, (-1), "$", "-", options0, 44, 1, "zawjT", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(4530, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "D%");
      helpFormatter0.printHelp("C&Yq21+3@[b6AB2F4", ";W d", options0, "", true);
      helpFormatter0.findWrapPos("", 4530, 1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.printHelp(3, "0hFvC", "", options0, "-");
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      options0.getMatchingOptions("");
      options0.addOption("arg", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "?{_\"T", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(3, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "D%");
      helpFormatter0.setDescPadding(434);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, true);
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("");
      helpFormatter0.printHelp("_K?s!~T>`|gPOde27BA", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("db 4~sqI$RI!EhUJ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-993), "usage: ", "", options0, (-1498), 434, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      helpFormatter0.setLongOptSeparator((String) null);
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printUsage(printWriter0, 2250, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(13);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2, "-", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 36, 165);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.setLongOptSeparator("w!");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1716), "w!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("'");
      helpFormatter0.defaultArgName = "";
      MockFile mockFile0 = new MockFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Object[]) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "", (Options) null, 0, (-1265), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      CharBuffer.allocate(74);
      helpFormatter0.defaultLeftPad = 3;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("bUfU", "arg", false, "");
      optionGroup0.setSelected(option0);
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.getMatchingOptions("-");
      optionGroup0.setRequired(true);
      Option option1 = new Option("arg", "A CloneNotSupportedException was thrown: ", false, "\"");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("S;=]te", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1477, (-1), "(Gv[#aA!CdZ");
      helpFormatter0.setLongOptPrefix("cFrO>K];(je*%B");
      helpFormatter0.printHelp("-", options0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2922), ">", "", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "   ";
      helpFormatter0.printHelp("   ", "<", options0, "[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1923, (String) null, "-", (Options) null, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 705, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 13, 44, ",Y*=.");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 1227, "");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(4530, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "D%");
      helpFormatter0.printHelp("C&Yq21+3@[b6AB2F4", ";W d", options0, "-", true);
      helpFormatter0.findWrapPos("X><ym4oroU", 1, 4530);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "<", "", options0, "--");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "/F#gWn?OU1C*lV";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/F#gWn?OU1C*lV");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jlUa(N2'";
      helpFormatter0.setOptPrefix("jlUa(N2'");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = 4844;
      helpFormatter0.setDescPadding(4844);
      String string1 = "7[+OO%h<:]'\\Di9{l";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("7[+OO%h<:]'Di9{l", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7[+OO%h<:]'Di9{l' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("arg");
      String string0 = "?{_\"T";
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      Comparator<Object> comparator0 = null;
      options0.getMatchingOptions("");
      Options options1 = options0.addOption("arg", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "");
      int int0 = 4304;
      helpFormatter0.setDescPadding(4304);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("?{_\"T", options0, false);
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.setArgName("usage:");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1382, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "w!", "w!", (Options) null, 0, 0, "w!", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLongOptSeparator("zfr^8;gc[A~>cp\"-|");
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "ia2K]fU?W?/B", "sV@Gj$P6cenAChu'S?", options0, "sV@Gj$P6cenAChu'S?");
      String string0 = "N\\X";
      String string1 = "<";
      helpFormatter0.printHelp("sV@Gj$P6cenAChu'S?", "]v82RMC05[7", options0, "arg", false);
      helpFormatter0.findWrapPos("NO_ARGS_ALLOWED", 0, 0);
      helpFormatter0.getOptPrefix();
      String string2 = "-r'epm>_Z8df(6it";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption(" ", ":5]", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";W d";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<", options0, "NX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "sV@Gj$P6cenAChu'S?";
      Options options0 = new Options();
      int int0 = 1946;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, " ] [ long ", "sV@Gj$P6cenAChu'S?", options0, 1946, (-1), " ] [ long ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      options0.getMatchingOptions("");
      helpFormatter0.printHelp(4530, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "", options0, "D%");
      helpFormatter0.printHelp("C&Yq21+3@[b6AB2F4", ";W d", options0, "", true);
      helpFormatter0.findWrapPos("X><ym4oroU", 1, 4530);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-159), "<", "", options0, ", ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("hYk*h>");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options3 = options2.addOption("", false, "--");
      options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "hYk*h>", "hYk*h>", options3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "-";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "4k8U@");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("{r>dS{E@tvlrdw&rCzY");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 157, options2, 157, 157);
      helpFormatter0.createPadding(1382);
      helpFormatter0.defaultNewLine = "F2Df7!n_p";
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setNewLine("[ Options: [ short ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      CharBuffer charBuffer0 = CharBuffer.allocate(74);
      helpFormatter0.defaultLeftPad = 3;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2011), "]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" :: ");
      helpFormatter0.defaultArgName = "|t'";
      helpFormatter0.setArgName(".!pU6G>nK");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      int int0 = (-722);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options0, (-722), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 0, ",Y*=.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-61);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-61), "GqVv{B\"%BfG7", "GqVv{B\"%BfG7", (Options) null, "[j.(Y^;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("vk,hgnfh7(");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('{');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "vk,hgnfh7(");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-101), 13, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3072);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\"');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--", false, "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2490, options3, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("[7WRi{&a");
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "Va t!Keh]3/hkl");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Va t!Keh]3/hkl
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptSeparator("zfr^8;gc[A~>cp\"-|");
      String string0 = "sV@Gj$P6cenAChu'S?";
      Options options0 = new Options();
      int int0 = 1946;
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, " ] [ long ", "sV@Gj$P6cenAChu'S?", options0, 1946, (-1), " ] [ long ", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 74;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "C,7c";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "C,7c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "}|f.~>z";
      helpFormatter0.setOptPrefix(".2u0FEoF`v7");
      assertEquals(".2u0FEoF`v7", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = "?{_\"T";
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("arg");
      Comparator<Object> comparator0 = null;
      options0.getMatchingOptions("");
      options0.addOption("arg", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", true, "");
      int int0 = 4304;
      helpFormatter0.setDescPadding(4304);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.printHelp("?{_\"T", options0, false);
      helpFormatter0.rtrim("");
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "'vd)/TcTkiH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 'vd)/TcTkiH
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "cdxf7z~U@\\XX>";
      helpFormatter0.setArgName("cdxf7z~U@XX>");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      Option option0 = new Option((String) null, true, "M3[");
      option0.setRequired(false);
      optionGroup0.setSelected(option0);
      options1.hasOption("(Gv[#aA!CdZ");
      options1.getMatchingOptions((String) null);
      optionGroup0.setRequired(false);
      Option option1 = new Option((String) null, "usage: ", false, "hLhI msh$w3");
      optionGroup0.addOption(option1);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("arg");
      String string0 = "nSY";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 982;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", 982, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(10);
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "          ";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 233, 1, " ]");
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      String string1 = "";
      Option option0 = null;
      try {
        option0 = new Option(">", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      helpFormatter0.defaultNewLine = " [ARG]";
      helpFormatter0.getLongOptSeparator();
      String string1 = "]";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }
}
