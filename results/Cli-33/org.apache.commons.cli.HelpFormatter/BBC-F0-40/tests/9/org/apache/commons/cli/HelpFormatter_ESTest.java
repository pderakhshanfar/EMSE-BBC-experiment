/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:09:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(" ", "usage: ", options2, "--");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "+C$)iC%PU'`'V*A", "usage: ", options2, (-2), (-2), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.createPadding(101);
      helpFormatter0.defaultArgName = "                                                                                                     ";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "vR^}$1of<Y";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "DNTVtW!");
      String string1 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", "--", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1076, "vR^}$1of<Y", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "arg");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("p9z", "\n");
      option0.setOptionalArg(true);
      optionGroup0.toString();
      options2.addOption(option1);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 117, 2661);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-2616);
      options0.hasOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xwzOh.N&?7}", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", "", true, "arg");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("p9z", "\n");
      Options options3 = options2.addOption(option1);
      helpFormatter0.printHelp(8, "_yjY<X;%$]5;c}64", "_yjY<X;%$]5;c}64", options3, (String) null, true);
      helpFormatter0.defaultDescPad = 1;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "-");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultLeftPad = 15;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(120, "R5", "SZ", (Options) null, "SZ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "T~YS%`x~U[r$~=wU`)y", "T~YS%`x~U[r$~=wU`)y", options0, "T~YS%`x~U[r$~=wU`)y", false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      String string1 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "xwzOh.N&?7}", "xwzOh.N&?7}", options0, (-1), (-2214), "xwzOh.N&?7}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      option0.setOptionalArg(true);
      options0.addOption(option0);
      helpFormatter0.defaultWidth = (-1829);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "&l\"H9", options0, "cmdLineSyntax not provided", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "^p1", false, "");
      Option option0 = new Option("arg", false, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options2);
      helpFormatter0.setLeftPadding((-1));
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", (String) null, options0, (-162), (-14), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      option0.setArgName("");
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "{py", options2, "Oj7EUiP7-", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-2707);
      String string0 = "J!";
      helpFormatter0.getDescPadding();
      String string1 = "--";
      String string2 = "cmdLineSyntax not provided";
      helpFormatter0.setLongOptPrefix("<C%F*~oY(");
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided", "<C%F*~oY(");
      File file0 = MockFile.createTempFile("arg", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, (-2707), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2");
      helpFormatter0.rtrim("u[M2TF`jEIw");
      MockFile mockFile0 = new MockFile("(nOS>%ZHQ[U", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "(nOS>%ZHQ[U";
      objectArray0[3] = (Object) "(nOS>%ZHQ[U";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.AlreadySelectedException", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "3MsVnxqG1+928GptF", true, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("2", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2795), "u[M2TF`jEIw", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2371, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, " | ", "-", options1, 3, 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`rO,R*i_1)AM");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "`rO,R*i_1)AM";
      objectArray0[1] = (Object) "Cannot add value, list full.";
      PrintWriter printWriter0 = mockPrintWriter1.printf("Cannot add value, list full.", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "v)O[gHG");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(74);
      helpFormatter0.setNewLine("");
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultWidth = 121;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 2505;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, (Options) null, 2416, 2505);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1));
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), " ", "'", options0, "=4IL}9d%ouc", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4869;
      helpFormatter0.setWidth(4869);
      String string0 = helpFormatter0.createPadding(4869);
      helpFormatter0.findWrapPos(string0, 597, 74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 671, 671, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "9q", options0, "");
      helpFormatter0.renderOptions((StringBuffer) null, 50, options0, 50, 50);
      helpFormatter0.setLeftPadding(3859);
      helpFormatter0.setLeftPadding(64);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", true, "\n");
      Options options3 = options2.addOption("arg", true, "-");
      options3.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("{", (String) null, options1, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", 0, (-757));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ", false, ">");
      helpFormatter0.setDescPadding((-2));
      options0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m}2U /q");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Vx x", "Vx x", options0, "org.apache.commons.cli.Util", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter0;
      helpFormatter0.defaultArgName = "'oQ{ShL@I+Lo";
      objectArray0[7] = (Object) helpFormatter0;
      mockPrintWriter0.format("'oQ{ShL@I+Lo", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "^{bvs\"E", "Jc;/V?D_7kBQ3 {W:X", options0, 1, 296, "?`", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      Option option0 = new Option((String) null, "5");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".lmi9XB{cWIYL9L", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(12);
      helpFormatter0.printHelp(",2|", "", options0, ",2|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.printf("", (Object[]) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "' was specified but an option from this group ", false, "line.separator");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "PY{f=EE");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption(option0);
      helpFormatter0.printHelp("P;p<JA]IKr'0zNp%", "a<H+wXxpI8QjM2.", options1, "org.apache.commons.cli.Options", false);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1251);
      helpFormatter0.printHelp(",2|", "org.apache.commons.cli.HelpFormatter", options0, ",2|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "I/>Pxy}Ux>";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) " ";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Options", objectArray0);
      helpFormatter0.printHelp(printWriter0, 107, "!kTI2cu", "", options0, 33, 107, "", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "'oQ{Sh@I+Lo";
      objectArray0[7] = (Object) helpFormatter0;
      mockPrintWriter0.format("'oQ{Sh@I+Lo", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3045, "^{bvs\"E", "Jc;/V?D_7kBQ3 {W:X", options0, 3045, 296, "?`", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("nK[/|T2Zw;k([P=", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) "-";
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("", objectArray0);
      helpFormatter0.printUsage(printWriter1, 3, "'NMO03>RG=STarK");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 16, options0, 74, 1);
      helpFormatter0.renderWrappedText(stringBuffer1, 16, 16, "");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-239), "z+", "z+", options0, "z+", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter0;
      helpFormatter0.defaultArgName = "'oQ{Sh@I+Lo";
      objectArray0[7] = (Object) helpFormatter0;
      mockPrintWriter0.format("'oQ{Sh@I+Lo", objectArray0);
      helpFormatter0.getOptionComparator();
      int int0 = (-1038);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1038), "v5%H'd*D", "", options1, "v5%H'd*D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I/>Pxy}Ux>");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "z^AQ+i)p+";
      objectArray0[1] = (Object) "I/>Pxy}Ux>";
      objectArray0[2] = (Object) "org.apache.commons.cli.Options";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "org.apache.commons.cli.Options";
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 642, " ", "{]8C[X{R7", options0, (-1), (-2391), " JOy:BO.", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "YNK; ]Jnb");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = new Option("", false, "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", " ");
      option1.setDescription("${R-|.c#S~ YdV");
      options1.hasShortOption("arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption("z|9Ta8", "arg", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'z|9Ta8' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("VF", "--", true, " ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("VF", true, "\n");
      Option option1 = new Option("arg", "--", true, "--");
      Options options4 = options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "usage: ", options3, "", false);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockFile mockFile0 = new MockFile("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      bufferedOutputStream0.flush();
      helpFormatter1.printUsage(printWriter0, 74, "", options4);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2706), "Ofq#ZZB2PF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasShortOption("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-633), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I/>Pxy}Ux>");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "z^AQ+i)p+";
      objectArray0[1] = (Object) "I/>Pxy}Ux>";
      objectArray0[2] = (Object) "org.apache.commons.cli.Options";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "org.apache.commons.cli.Options";
      objectArray0[7] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 3045, " ", " JOy:BO.", options0, 3045, 3045, "", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      int int0 = 236;
      int int1 = 336;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 32, options0, 1545, 236);
      helpFormatter0.renderWrappedText(stringBuffer1, 1545, (-682), "--");
      // Undeclared exception!
      try { 
        stringBuffer0.delete(3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-18);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("KXsNE:\"BG)V'Fde?0");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("", 64, 3743);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "", true, "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("y", true, "wa1}9}iaih<|K~hZ");
      helpFormatter0.printHelp(10, "KXsNE:\"BG)V'Fde?0", "", options3, "", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "EQd(k)'gXXV^m~Er$", false, "");
      Options options1 = options0.addOption("", "fCk,:P]", false, "arg");
      options1.addOption(option0);
      helpFormatter0.printHelp("fCk,:P]", "", options1, "fCk,:P]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "Cannot add value, list full.", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'i';
      charArray0[1] = 'N';
      stringWriter1.write(charArray0);
      charArray0[2] = 'i';
      charArray0[3] = '5';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-2665), "u)S");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("$X4(@XYE.mtc");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "$X4(@XYE.mtc", "_r", (Options) null, "$X4(@XYE.mtc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "org.apache.commons.cli.Util");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Illegal option name '", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "<", true, "[");
      options0.addOption(option0);
      helpFormatter0.printHelp("[", "v9Snsj=%Tt2", options0, ",2|", false);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-1), "j1li<&PN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLeftPadding(2094);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, " ", "usage: ", options1, "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1937), "sxtSRwHsXgBg", "D7ww@hb[V+", options0, (-1937), 788, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "", options0, "[ option: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(3, "-", "", options0, "s%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PxU_Ol@nW%eW]j=\"+p");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-950), "PxU_Ol@nW%eW]j=\"+p", (String) null, options0, 3, (-475), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "=JD3T4l7z", false, " ");
      helpFormatter0.renderOptions(stringBuffer0, 892, options1, 0, 892);
      helpFormatter0.defaultDescPad = 903;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 892, "-vbDn6>a)Qt!04i@1q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      int int0 = (-108);
      helpFormatter0.setLeftPadding((-108));
      String string0 = "i2iXaLP3(4I641iR";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ZI", "", options0, "i2iXaLP3(4I641iR");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "--", true, (String) null);
      helpFormatter0.defaultOptPrefix = "--";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup1);
      Options options3 = new Options();
      Options options4 = options3.addOption("", " ", false, "usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "-";
      objectArray0[2] = (Object) options3;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) options2;
      objectArray0[6] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 63, (String) null, options4);
      helpFormatter0.printWrapped(printWriter0, 63, "");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("D5>nK=^J[{06{/~9!C,", options0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("[ Options: [ short java.util.HashMap@0000000002 ] [ long {} ]", (-1566), 1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) byteArrayOutputStream0;
      objectArray0[6] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      helpFormatter1.printUsage(printWriter0, 3541, "org.apache.commons.cli.OptionValidator");
      int int0 = (-1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, "lu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1105));
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-1105), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 103, (Options) null, 10, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      int int0 = (-1);
      PrintWriter printWriter0 = null;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "--", true, (String) null);
      String string1 = "}YC`T,|Jh";
      options1.hasShortOption("}YC`T,|Jh");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      File file0 = MockFile.createTempFile("arg", "}Pq_>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-1294), 74, "mRV}'NZ>x~p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "4?}9");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-548), " ] [ long ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp("-", (Options) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("arg", "--", true, (String) null);
      helpFormatter0.defaultOptPrefix = "--";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 1940, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      boolean boolean0 = true;
      dataOutputStream0.writeInt(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.format("?Oq2r(*HkHt{@b-3#P", (Object[]) null);
      helpFormatter0.setLeftPadding(5037);
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "?Oq2r(*HkHt{@b-3#P", (String) null, (Options) null, 3, 0, ".`t");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      StringWriter stringWriter0 = new StringWriter(535);
      StringWriter stringWriter1 = stringWriter0.append('v');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-2852), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.defaultOptPrefix = "~=pQun";
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      int int0 = 0;
      int int1 = (-353);
      Options options0 = new Options();
      helpFormatter0.printHelp((-1), "usage: ", "usage: ", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-353), "usage: ", "usage: ", (Options) null, (-353), 0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      PrintWriter printWriter0 = null;
      String string0 = null;
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.findWrapPos("' contains an illegal character : '", 3584, 3584);
      helpFormatter0.getLongOptSeparator();
      String string1 = null;
      try { 
        MockURI.URI("[", "", "", (-4655), (String) null, "usage: ", "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: [://@:-4655?usage:%20#usage:%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 32;
      int int1 = 31;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('*');
      mockPrintWriter0.println(true);
      byte[] byteArray0 = new byte[1];
      mockPrintWriter0.println((long) 74);
      byte byte0 = (byte) (-22);
      byteArray0[0] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 17, "", "", options0, 31, (-1925), "=p", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      PrintWriter printWriter0 = null;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "--", true, (String) null);
      helpFormatter0.defaultOptPrefix = "3`sPvY|{i>wF>>E[`k'";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter1.setDescPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      int int0 = (-108);
      helpFormatter0.setLeftPadding((-108));
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "/D;", options0, (-2053), 0, "/D;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2713;
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", ",2|", options0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", (Options) null, "#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, (String) null, (Options) null, 1, 1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = (-2707);
      String string0 = "J!";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2707), (-2707), "J!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2713;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", (String) null, true, "-");
      Options options3 = options2.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-489), "", "", options3, "hsL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-390), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", ",2|", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter1 = mockPrintWriter1.format(",2|", objectArray0);
      helpFormatter0.printHelp(printWriter1, 538, "org.apache.commons.cli.OptionGroup", ",2|", options0, 2713, 538, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp(",2|", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      PrintWriter printWriter0 = null;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 1841);
      helpFormatter0.printHelp("};", options0, false);
      String string0 = "";
      String string1 = "<F'h/_J<(&";
      Options options1 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        options1.addOption("\n", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setLongOptPrefix("");
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "usage: ");
      Options options2 = options1.addOption(option0);
      int int0 = (-241);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2683), options2, (-241), (-241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.OptionGroup");
      helpFormatter0.getNewLine();
      String string1 = "Mc)0|\"sT8il%2g";
      MockFile mockFile0 = new MockFile("Mc)0|\"sT8il%2g");
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "org.apache.commons.cli.OptionGroup", 1, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('U');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 5, 5, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("_H!4(#;ISKJ\"w$`", "Q+{HDZyH0A|R;", (Options) null, "`^;$ApZ%GDzeQ(H2H", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      int int0 = 0;
      int int1 = (-353);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-353), "usage: ", "usage: ", (Options) null, (-353), 0, "Eo/\"$&XTTE&FQ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "";
          int int0 = 0;
          Options options0 = null;
          // Undeclared exception!
          helpFormatter0.printHelp(0, "NO_ARGS_ALLOWED", "", (Options) null, "NO_ARGS_ALLOWED");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("N", "N", options0, "vK");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 902;
      Options options0 = null;
      String string0 = "{V!aFzzO";
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "{V!aFzzO", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      boolean boolean0 = true;
      dataOutputStream0.writeInt(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.format("?Oq2r(*HkHt{@b-3#P", (Object[]) null);
      String string0 = "h";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "h");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Uw *N@,lR>o");
      String string0 = "";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("+*P0L2ms)", false, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+*P0L2ms)' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-923), (-923), "o");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("MuhOKL");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 1;
      stringWriter0.append((CharSequence) "--", 1, 1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((float) 3);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Ww,", "usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ww,' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-267);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1012), (String) null, ":N'&~)wFl%+WW", options0, "oGXd?y)!\"]=ly", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-764), ";V20?Q4-T)seYH 1", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "org.apache.commons.cli.Util");
      option0.setArgName("--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("--", "org.apache.commons.cli.Util", options1, "org.apache.commons.cli.Util", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("VF", "--", true, " ");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("VF", true, "\n");
      helpFormatter0.printHelp(2861, "*O<d9k53C|IH", (String) null, options3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("-", "-", options1, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "' was specified but an option from this group ", false, "line.separator");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "PY{f=EE");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOption(option0);
      helpFormatter0.printHelp(">", "a<H+wXxpI8QjM2.", options0, "P;p<JA]IKr'0zNp%", true);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "org.apache.commons.cli.Util");
      File file0 = MockFile.createTempFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "org.apache.commons.cli.Util");
      Option option1 = new Option("", "]", false, "org.apache.commons.cli.Util");
      mockPrintWriter0.println((Object) option1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printUsage(printWriter0, 2056, "org.apache.commons.cli.Util");
      helpFormatter0.getLeftPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2056, "]", options1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("VF", "--", true, " ");
      Options options2 = options1.addOption(option0);
      options2.addOption("VF", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter1.printUsage(printWriter0, (-1), "\n", options1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p1UO+=i&M");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      int int0 = 2391;
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2764, "p1UO+=i&M", options0);
      mockPrintWriter0.print('(');
      mockPrintWriter0.println('(');
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "\n", 677, 677);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)108;
      MockFile mockFile0 = new MockFile("mVcm,E", "C&@a[+<");
      MockFile mockFile1 = new MockFile(mockFile0, "aEN=]ahIEzw");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      helpFormatter0.setWidth((-1));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "--", true, (String) null);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.defaultOptPrefix = "3`sPvY|{i>wF>>E[`k'";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 937, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '@';
      charArray0[2] = 'i';
      charArray0[3] = 'N';
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1328));
      helpFormatter0.setWidth((-1));
      PrintWriter printWriter0 = null;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "--", true, (String) null);
      String string1 = "3`sPvY|{i>wF>>E[`k'";
      helpFormatter0.defaultOptPrefix = "3`sPvY|{i>wF>>E[`k'";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-71));
      assertEquals((-71), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      String string0 = "-";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("oc#R", "-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'oc#R' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 31;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptPrefix("Gq=1nK");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1284, (String) null, "Gq=1nK", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("G&rB67+4ZO6+{:DrL", "oJyaaW<X<p}OrQjr5-A", false, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'G&rB67+4ZO6+{:DrL' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
