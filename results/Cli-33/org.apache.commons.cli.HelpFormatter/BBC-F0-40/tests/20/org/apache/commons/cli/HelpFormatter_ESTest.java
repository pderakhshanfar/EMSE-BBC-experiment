/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:12:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.channels.FileChannel;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("ipv6");
      helpFormatter0.optionComparator = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setSyntaxPrefix("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("nA", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      helpFormatter0.printHelp("nA", "X@+B;[Wre{`e", options0, "yoo(:~n@`x]<'hx", true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-720));
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("H\"Wdy?O#6?P");
      helpFormatter0.printHelp(",a", "", options1, ",a", true);
      OptionGroup optionGroup2 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1581);
      Option option0 = new Option("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "arg", options0, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(3, "r,'^0PLm!|_)A", " ", options0, "\n");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultDescPad = (-2);
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "1lE>!bZ&(5r9FqkO", "1lE>!bZ&(5r9FqkO", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "Cannot add value, list full.", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2836), options0, (-1099), (-968));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("|Sb]{EYk", 0, 0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string0 = helpFormatter0.createPadding(4255);
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      mockPrintWriter0.println((String) null);
      Options options1 = options0.addOption("", "\n", false, " ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, string0, string0, options1, 408, 4255, "_f", false);
      helpFormatter0.setLongOptPrefix("");
      options0.hasOption("--");
      options0.hasOption("--");
      options1.addOption((String) null, "arg", true, "arg");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 1699, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "B7ZR~7yM'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 17;
      String string0 = "A CloneNotSupportedException as thrown: ";
      String string1 = " ]";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 618, options0, 94, 618);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      int int0 = 3340;
      helpFormatter0.defaultLeftPad = 3340;
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      String string0 = null;
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = new Options();
      options1.hasLongOption("\n");
      helpFormatter0.printHelp(13, "{jSYVxeea", "6(N", options0, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile(" | ", "SyJ^p^W8");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
      int int0 = (-1851);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "w'OCi?+6", (String) null, options0, 3, (-1851), "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 17;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "kTO**AVj", options1, "kTO**AVj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("<");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R87q^Sfb||`:y%S4$}a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("]", "eyMV3\"'g", options1, " ] [ long ", true);
      helpFormatter0.printHelp("]", options0);
      StringBuffer stringBuffer0 = new StringBuffer(16);
      int int0 = 107;
      options0.getMatchingOptions("<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 865, ".vU)");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "+`y}p@F!+\b+V");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "}MIx.I|x3", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "-", options0, "R|IJi'", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 3, "usage: ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 34;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, (Options) null, 34, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 91, (-764));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "[", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("KOdn3Mzoe*Y@?h=L%gk", "", options1, "", true);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "", (Options) null, 3, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.defaultLongOptPrefix = "[";
      int int0 = 682;
      helpFormatter0.setLeftPadding(682);
      helpFormatter0.getNewLine();
      int int1 = 340;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(340, "[", "[", (Options) null, "[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 74;
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "-", "", options0, 74, 64, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("VM$}oTK+Ow_=a");
      helpFormatter0.setWidth((-853));
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("VM$}oTK+Ow_=a");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("VM$}oTK+Ow_=a");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      Options options1 = options0.addOption((String) null, "%\" 9q|g[RF{]", true, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ber\"+e");
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.setArgName("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 36, "NN>'G _<-?7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      options0.getOptions();
      Options options1 = options0.addOption("", "", true, (String) null);
      helpFormatter0.printHelp("}9chD69y8VkzK", "Y<zFN6D_W&5x/j^fD", options0, "u>s'+qWL", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer1, 1, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B#~_63S+6:A/W-&K", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-20);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gnqIDZOQ&7%k=]");
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)2;
      byte byte0 = (byte)10;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "C.1'^ta9df8dBw";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$1", "arg", false, "C.1'^ta9df8dBw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "\n", true, "l<1K=LE]k,S");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-737), "3s.MY[1x[=ws,/4", (String) null, options2, 10, 2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) fileChannel0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) fileChannel0;
      objectArray0[4] = (Object) fileChannel0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 2957, "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(6, "usage: ", "", options0, "");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-5612), 11, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "8F>", " ", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2616, "Cannot add value, list full.", "Illegal option name '", options0, 2616, 2616, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultWidth = 19;
      Options options0 = new Options();
      helpFormatter0.printHelp(19, "usage: ", "[ option: ", options0, "[ option: ", true);
      Options options1 = new Options();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.getWidth();
      options0.addOption((String) null, "Y d4/K\"0|", true, ">j");
      // Undeclared exception!
      helpFormatter0.printHelp("3*$k$CO5", "s(fs3jNLQx", options0, "8F>", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-14), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
          Options options0 = new Options();
          helpFormatter0.getWidth();
          HelpFormatter helpFormatter1 = new HelpFormatter();
          HelpFormatter helpFormatter2 = new HelpFormatter();
          helpFormatter2.printHelp(74, "--", "-", options0, "\n");
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          HelpFormatter helpFormatter3 = new HelpFormatter();
          helpFormatter3.getWidth();
          HelpFormatter helpFormatter4 = new HelpFormatter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
          MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
          // Undeclared exception!
          helpFormatter4.printWrapped((PrintWriter) mockPrintWriter1, 0, 10, "\n");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      Options options0 = new Options();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "--", "-", options0, "\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter3.defaultWidth = 1;
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter3.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "\n", options1);
      helpFormatter0.getWidth();
      helpFormatter2.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(64);
      helpFormatter4.renderOptions(stringBuffer0, 3, options1, 2375, 74);
      helpFormatter4.printHelp("arg", options1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      Options options0 = new Options();
      helpFormatter0.printHelp(6, "g@,{?hmpI66", "{jSYVxeea", options0, ")lH_.Us");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, ")lH_.Us", "", options0, (-675), 3, "n=:&t`05BjP", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setWidth((-4));
      Options options0 = new Options();
      Options options1 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      helpFormatter0.renderOptions((StringBuffer) null, 4255, options0, 0, 4255);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int0 = 0;
      mockPrintWriter0.println((float) 74);
      int int1 = 1;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", (String) null, true, (String) null);
      Options options3 = options2.addOption("", false, " ");
      options3.getOptions();
      options3.addOption("", "", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A CloneNotSupportedException was thrown: ", false);
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-839), "NO_ARGS_ALLOWED", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setWidth((-4));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", (String) null, true, (String) null);
      Options options3 = options2.addOption("", false, " ");
      options3.getOptions();
      options3.addOption("", "", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options4 = options0.addOption(option0);
      helpFormatter0.printHelp(3, "Cannot add value, list full.", "", options4, ",f?0*4O!_2.IK");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 5;
      String string0 = "/EL'k4]'15l]ST\\-t[";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 5, "/EL'k4]'15l]ST-t[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append(1.0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringBuffer0.insert(3, 1240.776060170183);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("6y");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "cmdLineSyntax not provided", false, (String) null);
      options1.getMatchingOptions("pMpgYDSgE");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 55, "", options1);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp((-1), "arg", "Uz47x", options0, "F>'-%rvy{r");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s(fs3jNLQx");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", false, "8F>");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "5$7D$X{XCdD", options0, 2014, 13, "q}DoJ.lXU%X=#tod4=", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      Options options0 = new Options();
      helpFormatter0.printHelp(6, "g@,{?hmpI66", "{jSYVxeea", options0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "szoB}'_bA-Sm");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3168;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3168, 3168);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(31, "r/M&-|C{!8 $6<Gg", "--", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "");
      PrintWriter printWriter0 = mockPrintWriter0.append('2');
      Options options0 = new Options();
      mockPrintWriter0.println('@');
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, (-1), "arg", (String) null, options1, 101, 4255, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s(fs3jNLQx");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 55, "8F>", options0);
      helpFormatter0.defaultWidth = 55;
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2616, "s(fs3jNLQx", "s(fs3jNLQx", options0, "-");
      helpFormatter1.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter0.printf(locale0, "[", objectArray0);
      mockPrintWriter0.println('8');
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "arg", "Pw<^_CFyg$b/C9~j?", options0, 811, (-2120), "arg");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string0 = helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      helpFormatter0.printHelp(printWriter0, 9, string0, string0, options1, 408, 4255, "_f", false);
      helpFormatter0.setLongOptPrefix("");
      options0.hasOption("--");
      options0.hasOption("--");
      Options options2 = options1.addOption((String) null, "arg", true, "arg");
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp("_f", string0, options2, "J||Bj", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string0 = helpFormatter0.defaultOptPrefix;
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      helpFormatter0.printHelp(printWriter0, 9, "-", "-", options1, 408, 4255, "_f", false);
      helpFormatter0.setLongOptPrefix("");
      options0.hasOption("--");
      options0.hasOption(" ");
      options0.addOption("", "CgtU@uri", false, "");
      helpFormatter0.printHelp("a|~bIt)Ek*H|4e}:M", options1, true);
      helpFormatter0.setArgName("   ");
      helpFormatter0.printHelp("J||Bj", "--", options1, "\"Or^Ih'KT", true);
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 9, options1, 408, 408);
      helpFormatter0.renderWrappedText(stringBuffer1, 9, 408, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      Options options2 = new Options();
      options1.addOption("", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 408, "", "^,8Uao", (Options) null, (-3076), 4255, ">j:PT<~z", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "uU");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "usage: ";
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("j", true, "");
      helpFormatter0.printHelp(printWriter0, 3, ">j:PT<~z", "", options1, 3, 3, "", true);
      helpFormatter0.findWrapPos("W#P(QWC${mlFStaOJt", 3, 3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1332);
      String string0 = "XhU[^]?xt0*S?24rR{";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1332), 19, "XhU[^]?xt0*S?24rR{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "";
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('W');
      Options options1 = options0.addOption("", "usage: ", false, "arg");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 12, "   ", "", options0, 9, 2079, "", true);
      helpFormatter0.printHelp(" ", "_WM7iP-*`!9b#Be,}L", options0, ">M@.GK* ZNWw~[+<");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      char char0 = '8';
      mockPrintWriter0.append('8');
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1478, 1478, "");
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.printf("arg", objectArray0);
      Options options0 = new Options();
      String string0 = "--";
      options0.hasOption((String) null);
      // Undeclared exception!
      try { 
        options0.addOption("G<FhW*r<", "`'g?+Pi", false, "$uLqR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'G<FhW*r<' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      mockPrintWriter0.print(0L);
      String string0 = helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, string0, string0, options1, 408, 4255, "_f", false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth((-1));
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("Fjm<,LEM", 1249, 1113);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append('#');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 4044, options1, (-105), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string0 = helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      helpFormatter0.printHelp(printWriter0, 9, string0, string0, options1, 408, 4255, "_f", false);
      helpFormatter0.setLongOptPrefix("");
      options0.hasOption("--");
      options0.hasOption("--");
      options1.addOption((String) null, "arg", true, "arg");
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 1699;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 1699, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/*k\"20*li.");
      String string0 = "8F>";
      Options options0 = new Options();
      int int0 = 5;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, "]Y-n]xo9?;ot", options0);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", (String) null, (Options) null, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s(fs3jNLQx");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 55, "8F>", options0);
      helpFormatter0.defaultWidth = 55;
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2616, "s(fs3jNLQx", "s(fs3jNLQx", options0, "-");
      helpFormatter0.printHelp(118, "\"", ")?TUa;MU3%XtfE", options0, (String) null);
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      options0.addOption("", "\n", false, " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.printf("usage: ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "", (String) null, (Options) null, 2611, 1, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "";
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string1 = helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      String string2 = "_f";
      helpFormatter0.printHelp(printWriter0, 9, string1, string1, options1, 408, 4255, "_f", false);
      mockFileOutputStream0.release();
      helpFormatter0.setLongOptPrefix("");
      options0.hasOption("--");
      options0.hasOption("--");
      options1.addOption((String) null, "arg", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 114, "qnIm", "--", options1, (-3527), 0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~&\n<)h", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string0 = helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      helpFormatter0.printHelp(printWriter0, 9, string0, string0, options1, 408, 4255, "_f", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3237, 34, "#'lq");
      helpFormatter0.printOptions(printWriter0, 9, options1, 9, 0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 105, 24, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s(fs3jNLQx");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 55, "8F>", options0);
      helpFormatter0.defaultWidth = 55;
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2616, "s(fs3jNLQx", "s(fs3jNLQx", options0, "-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "s(fs3jNLQx", "[", options0, 1, 106, "", true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "The option '";
      helpFormatter0.printHelp("The option '", options1, true);
      String string1 = "azWS<C";
      MockFile mockFile0 = new MockFile(" X5d3O!=zeW;\f?=");
      // Undeclared exception!
      try { 
        MockURI.create("azWS<C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: azWS<C
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 74;
      helpFormatter0.renderWrappedText(stringBuffer0, 1419, 74, "$%PL?$#f+x\"6");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      // Undeclared exception!
      try { 
        option0.addValue(" ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2690), "", "", options0, "ZPk-`KApKJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, "l&");
      Options options1 = options0.addOption(option0);
      boolean boolean1 = false;
      Options options2 = options1.addOption("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options2, "buygXKQ^G", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", options0, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "l&");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      Options options2 = options1.addOption("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      String string1 = "--";
      options0.hasOption("");
      String string2 = "%";
      int int0 = (-11);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-11), "m L9", (String) null, options3, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Jd08^KUvO+";
      helpFormatter0.rtrim("wh0,kv:s}e");
      Options options0 = new Options();
      Options options1 = options0.addOption("262YwaK", true, "p5}D%g^*~QA");
      helpFormatter0.printHelp(" ] [ long ", options1);
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("=uK^S=&L;oql", options2, true);
      MockFile mockFile0 = new MockFile(" ] [ long ");
      File file0 = MockFile.createTempFile(" ] [ long ", "", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "-");
      mockFile0.setExecutable(false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "#j");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7.j8>C17_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1856), ">", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.getWidth();
      options0.addOption((String) null, "Y d4/K\"0|", true, ">j");
      helpFormatter0.printHelp("3*$k$CO5", "s(fs3jNLQx", options0, "8F>", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      String string0 = "";
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "_f", options1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      String string0 = "~&\\n<)h";
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2959), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(31, "Q", "Q", options0, "Q");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      int int0 = 4255;
      String string0 = helpFormatter0.createPadding(4255);
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Options options0 = new Options();
      mockPrintWriter0.println('8');
      Options options1 = options0.addOption("", "\n", false, " ");
      int int1 = 408;
      helpFormatter0.printHelp(printWriter0, 9, string0, string0, options1, 408, 4255, "_f", false);
      helpFormatter0.setLongOptPrefix("");
      options0.hasOption("--");
      String string1 = "--";
      options0.hasOption("--");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "K/xX", "%", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("SY1pZaO&");
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2647));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "jD=a0DL/0XSqE");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jD=a0DL/0XSqE
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Wk?+Z!+R,H>f:c%;STr");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      String string0 = ">t";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("cmdLineSyntax not provided", "5e[}]'ez9{D?nuGx1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7.j8>C17_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-77);
      mockFileOutputStream0.write(byteArray0);
      optionGroup0.toString();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1856), "7.j8>C17_", "", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7.j8>C17_";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7.j8>C17_");
      boolean boolean0 = true;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte) (-77);
      mockFileOutputStream0.write(byteArray0);
      optionGroup0.toString();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1856), "7.j8>C17_", "", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(6, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "g@,{?hmpI66");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "l&");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("", "arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-522);
      int int1 = 585;
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setWidth(585);
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-522), "sB:>Bd]6h=M\"{");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("4z{$6ant!X}-");
      String string0 = "'@J_)*y5/$)`-:-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'@J_)*y5/$)`-:-");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1118);
      String string0 = "\\Jd08^KUvO+";
      helpFormatter0.defaultLongOptPrefix = "Jd08^KUvO+";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLeftPad = (-1118);
      helpFormatter0.rtrim("wh0,kv:s}e");
      String string1 = "262YwaK";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("it!J^.\"9Q9kVHYqf", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s(fs3jNLQx");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "8F>", options0);
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("3*$k$CO5", "s(fs3jNLQx", options0, "8F>", false);
      assertEquals(31, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2646);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2646));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, int0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("org.apache.commons.cli.ParseException", (-2638), (-2638));
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      String string0 = null;
      String string1 = null;
      helpFormatter0.defaultNewLine = null;
      String string2 = "\"b";
      Options options0 = new Options();
      Option option0 = new Option("arg", "V%zm");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      objectArray0[8] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1281), "~&\n<)h", (String) null, (Options) null, (-607), 945, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
