/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:12:05 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", options1, true);
      Options options2 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-2234), options2, 1, 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-416));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = (-1488);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1488), (-1488), " Kti)gSxcv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K;0~5+lucIkj");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 101, 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, 0);
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "-");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ";)J");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1588, options1, 1588, 1588);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("M2_[H");
      Options options0 = new Options();
      options0.addOption((String) null, true, "--");
      helpFormatter0.printHelp("d(O5k*", (String) null, options0, "liPX~Rj;1.(~97", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "Qv_5G3xH", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1853, "n", options1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "4|xz!\"hKi");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Options options0 = new Options();
      options0.getOption("usage: ");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "'K3t4Q?B", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "j2?r:Z)]z.X");
      Options options3 = options2.addOption("YvZ", "--", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1012, "j2?r:Z)]z.X", options3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("/nV-+:@H");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.addOption((String) null, true, "");
      Options options1 = options0.addOption("arg", " ", false, " [ARG");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ozhwd[sQ$z@2-v[n", "", options1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "usage: ";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      objectArray0[1] = (Object) helpFormatter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectArray0[2] = (Object) helpFormatter0;
      helpFormatter0.setLongOptPrefix("");
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "arg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 1288, "HXL%x", "", options0, 958, 1288, "");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("}_u{r n2$>'p*", "--", options0, (String) null, true);
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      mockPrintWriter0.append('<');
      Options options1 = new Options();
      options1.getOption("Sh`3TrG';S@t");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2582, "usage: ", (String) null, options1, (-5046), (-1), "5223ojr/", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options0 = new Options();
      options0.getOption("");
      mockPrintStream0.append('1');
      helpFormatter0.printHelp(printWriter0, 1548, "usJ6Jk$z#", "usJ6Jk$z#", options0, 0, 0, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1548, "n{!l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      optionGroup0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("+zB/b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      options0.getOption("+zB/b");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "has already been selected: '", "0[", options0, 1, 12, "c4$/5.~jtN5:#/.9", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          char char0 = '9';
          String string0 = "`hKjTcpDIkF[3G=";
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`hKjTcpDIkF[3G=");
          Locale locale0 = Locale.KOREA;
          // Undeclared exception!
          helpFormatter0.printHelp(0, "RmY4`((PU", "FuFFf4", options0, " ");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('`');
      helpFormatter0.printUsage(printWriter0, 3, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      String string0 = "3~trNy\"^&nVj";
      String string1 = null;
      String string2 = "w|\\dxoE<]PEIn.m4H";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "w|dxoE<]PEIn.m4H", options0, "5].`=+i+lm~~Zs9Fa7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "5223ojr/", options0, "arg", true);
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options1 = new Options();
      options1.getOption("usage: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) helpFormatter1;
      printWriter0.printf((Locale) null, "/nV-+:@H", objectArray0);
      Options options2 = options1.addOption("arg", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1211), "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options1 = new Options();
      options0.getOption("-");
      Option option0 = new Option("arg", false, "--");
      Options options2 = options1.addOption(option0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2), "84J", "^KEL;=>[G:f:)S8)*", options2, (-1), 31, "84J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      String string0 = "Mdv?t *zsJ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Mdv?t *zsJ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("--", "^`<JBC~a,T;UvRx#", options0, (String) null, true);
      MockFile mockFile0 = new MockFile("LK6Gr.8<I'u#0'<}2", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.append('I');
      Options options1 = new Options();
      options1.getOption("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "n-+Pd$nqFm^K*=", options1, 0, 1, "arg", false);
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(1923);
      StringWriter stringWriter1 = stringWriter0.append('z');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-1), "bdv[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(" ", options1, true);
      helpFormatter0.printHelp(" ", options1, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "\n", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1565, " ", options1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("L@{^NjJq");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.OptionGroup", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 958, "", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 64, "org.apache.commons.cli.Options");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "D=c&}*4}&x5yPJ|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // D=c&}*4}&x5yPJ|
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-397), "org.apache.commons.cli.Options", "[", options0, "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "5223ojr/", options0, "arg", true);
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      mockPrintWriter0.append('<');
      Options options2 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("q1)]t|?v+*?-zf@Mf", options0, true);
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "line.separator", "", options1, 32, (-1), "usage: ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("m<E(6+ ^*(FMzvJ}brU", "", options3, "", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("usage: ");
      MockFile mockFile0 = new MockFile("", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Options options0 = new Options();
      options0.getOption("M?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "]", "[ option: ", options0, 865, (-2), "M?", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      MockFile mockFile0 = new MockFile(" ", "Wyc%H4l");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options1 = new Options();
      options1.getOption("6q=D");
      int int0 = 115;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3884, (String) null, "", options1, (-2), 115, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("DQDXS/YNHT?VDD8U", "", options1, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter1, 310, options0, 310, 102);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("' was specified but an option from this group ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "' was specified but an option from this group ");
      helpFormatter1.getDescPadding();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-545), "O([1o=FE:jSDh+7Z#O", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("+bii)T");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 22);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-821), (-821), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('`');
      String string0 = "";
      helpFormatter0.printUsage(printWriter0, 3, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "usage: ");
      int int0 = 1606;
      String string1 = "-K\"~S~m";
      printWriter1.write(1606);
      int int1 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2562), "-K\"~S~m");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/nV-+:@H";
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      String string1 = "pO\"Y=ZpCm*";
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.getOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/nV-+:@H");
      String string2 = "RQWW2n(54nTX,5WryF";
      int int0 = (-1683);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "/nV-+:@H", "RQWW2n(54nTX,5WryF", options0, 34, (-1683), "/nV-+:@H", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", (String) null, options0, "", false);
      MockFile mockFile0 = new MockFile(")O2", "org.apache.commons.cli.Util");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options1 = new Options();
      options1.getOption("akj5HK");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, (-1), "cmdLineSyntax not provided", "", options0, 74, (-1426), ")t1N~", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "5223ojr/", options0, "arg", true);
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      mockPrintWriter0.append('<');
      Options options2 = new Options();
      option0.setType(helpFormatter0);
      options2.getOption("usage: ");
      helpFormatter1.printHelp((-1), "\n", "usage: ", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(" ", options1, false);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 103, "eQ", "   ", options0, 32, (-127), "eQ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('`');
      helpFormatter0.printUsage(printWriter0, 3, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 1606, "", "-K\"~S~m", options0, 34, 1606, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-172), "arg", "yObr5wdL\".4@c*|", options0, (-2), 64, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "wj", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(13, "wj", (String) null, options1, "wj", true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, " ");
      Options options3 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "", options3, "\n", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "5223ojr/", options0, "arg", true);
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options1 = new Options();
      options1.getOption("usage: ");
      helpFormatter1.printHelp(printWriter0, 1548, "usage: ", "-", options1, 115, 0, " ", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("]");
      helpFormatter1.findWrapPos("", 1897, 13);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("arg", 33, (-796));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.ParseException", false, "--");
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "--", options1, "1Soi:\"YoR^s%DQ;", false);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2228, "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "has already been selected: '", "", options0, (-2921), (-2921), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Q", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-3568);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 33, "--", "", options0, (-3568), 19, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.setWidth(1);
      String string0 = "d&[z8-";
      // Undeclared exception!
      helpFormatter0.printHelp("+XI$%>MKvQT'", "+XI$%>MKvQT'", options0, "\"");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "wj", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options1.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      objectOutputStream0.writeInt(74);
      objectOutputStream0.writeShort(3);
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 19, "wj", (String) null, options1, 32, 2, (String) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "<vhn3eOXK:P_5`C");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter0.printHelp(" ", options1, true);
      Option option0 = new Option((String) null, "N(");
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, ".#AR", " ", options2, ".#AR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "wj", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(13, "wj", (String) null, options1, "wj", true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, " ");
      Options options3 = options0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "", options3, "\n", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.createPadding(109);
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultArgName = "*Ri`2]'";
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("wj", (String) null, options0, "");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setLeftPadding(74);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      options0.hasOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("^ g$", "5223ojr/", options0, "arg", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "wj", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, " ");
      Options options3 = options0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "", options3, "\n", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile(" ", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 53, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("/nV-+:@H", "5223ojr/", options0, "arg", true);
      helpFormatter0.rtrim("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("hL=,NCZz\u0001)-&[a");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "arg";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 123, (-1), "8 U<QU{ZT");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printHelp("^ g$", "5223ojr/", options0, "arg", true);
      helpFormatter0.rtrim("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (byte)2, options1, (byte)2, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "*Ri`2]'";
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("wj", (String) null, options0, "");
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 64, 34);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptions();
      options0.getOptions();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      helpFormatter0.printHelp("\"", "s2> '9q", options1, "d&[z8-", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("usage: ", 0, 1);
      int int0 = 10;
      helpFormatter0.findWrapPos("--", 10, 0);
      helpFormatter0.setNewLine("-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "-");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "mt~Sw$CH&-[Ik\".");
      helpFormatter0.printHelp(" :: ", options1, true);
      options0.helpOptions();
      options0.addOption("arg", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      helpFormatter0.printHelp("k", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/sVCsMNS_Ki-6O8", "v", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(" ", options1, false);
      helpFormatter0.printHelp(32, " ", " ", options1, " ", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("wj", "", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultArgName = "*Ri`2]'";
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("wj", (String) null, options0, "");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "mt~Sw$CH&-[Ik\".");
      helpFormatter0.printHelp(" :: ", options1, true);
      options0.helpOptions();
      Options options2 = options0.addOption("arg", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("k", options0);
      helpFormatter0.rtrim("   ");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.createPadding(0);
      int int0 = 1897;
      helpFormatter0.findWrapPos("[", 0, 1897);
      int int1 = 10;
      helpFormatter0.findWrapPos("", 10, 0);
      helpFormatter0.setNewLine("[");
      String string1 = "f\"R1mtn$myf/U5G=";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2, "f\"R1mtn$myf/U5G=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "wj", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 19, "", "", options2, 1537, 33, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-93);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 74, (-93), "arg");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 3, "arg");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("^ g$", "5223ojr/", options0, "arg", true);
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("[", 0, 1897);
      helpFormatter0.findWrapPos("", 10, 0);
      helpFormatter0.setNewLine("[");
      Options options0 = new Options();
      options0.addOption("", true, "<dG0E9ud>9aSh%wA");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "5223ojr/", options0, "arg", true);
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      Options options1 = new Options();
      options1.getOption("usage: ");
      helpFormatter1.printHelp(printWriter0, 1548, "usage: ", "-", options1, 115, 0, " ", false);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "Sr,?0\\-";
      helpFormatter0.setSyntaxPrefix("Sr,?0-");
      Options options0 = new Options();
      String string1 = "Illegal option name '";
      String string2 = "' contains an illegal character : '";
      helpFormatter0.printHelp("Illegal option name '", "' contains an illegal character : '", options0, "Sr,?0-");
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("[", 0, 1897);
      helpFormatter0.findWrapPos("", 10, 0);
      helpFormatter0.setNewLine("[");
      String string0 = "f\"R1mtn$myf/U5G=";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 1431;
      helpFormatter0.setWidth(1431);
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AWdI/L*&h-");
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      helpFormatter0.setWidth(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", (String) null, options0, "\n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(" ", options1, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("1&'lO0J,~P>d");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("iMXu\"k|RLRI");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 875, "?CFF `.g6VBIb>r");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "VpS3fs3vOFkzjh.";
      helpFormatter0.defaultWidth = (-2622);
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getWidth();
      int int0 = 2582;
      Options options0 = new Options();
      options0.getOption("IfX)M.4e8,\"YCb$Z`");
      Option option0 = new Option("", "-", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(2582, "}52uB#NSIz#54", "}52uB#NSIz#54", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1851), 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.setDescPadding(2);
      StringBuffer stringBuffer1 = new StringBuffer("iMXu\"k|RLRI");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 2, "usage: ");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("1&'lO0J,~P>d");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("iMXu\"k|RLRI");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "usage: ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("' was specified but an option from this group ");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setLongOptSeparator("--");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-2);
      try { 
        pipedOutputStream0.write(byteArray0, (-1136), (-314));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      helpFormatter1.setWidth(910);
      helpFormatter1.printHelp("R_", "usage: ", options0, "", true);
      helpFormatter0.rtrim("]TXC>U%;(/nLzo`");
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      helpFormatter0.printHelp(" ", options1, false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-814));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile(">", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.getLongOptSeparator();
      int int0 = 663;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 663, options0, (-2038), (-2038));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "kU/i=j;W[(+)X";
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultArgName = "";
      String string0 = "?'Cr}kcelOuu$,";
      PrintWriter printWriter0 = null;
      int int0 = 1328;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option(" ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/nV-+:@H");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "pO\"Y=ZpCm*");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", "--", false, "pO\"Y=ZpCm*");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      boolean boolean0 = false;
      Option option0 = new Option("arg", "usage: ", false, " ");
      option0.setOptionalArg(false);
      option0.setArgName("arg");
      options0.getOptions();
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", "usage: ", false, " ");
      option0.setOptionalArg(false);
      option0.setArgName("arg");
      options0.getOptions();
      Options options1 = options0.addOption(option0);
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "-";
      String string1 = "";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = true;
      options0.addOption((String) null, "-", true, "");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-93);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, (-93), "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1659), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "VpS3fs3vOFkzjh.";
      helpFormatter0.defaultWidth = (-2622);
      helpFormatter0.setSyntaxPrefix("Sr,?0-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("VpS3fs3vOFkzjh.", "VpS3fs3vOFkzjh.", options0, "VpS3fs3vOFkzjh.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = null;
      Options options0 = new Options();
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("-", "-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(")^6]TqMpwf#eS:A&@&~");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.createPadding(0);
      int int0 = 1897;
      helpFormatter0.findWrapPos("[", 0, 1897);
      int int1 = 10;
      helpFormatter0.findWrapPos("", 10, 0);
      helpFormatter0.setNewLine("[");
      String string1 = "f\"R1mtn$myf/U5G=";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "f\"R1mtn$myf/U5G=");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2076);
      int int0 = 0;
      helpFormatter0.findWrapPos("", 0, 0);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{oB{";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("p", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("{oB{", options1, true);
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-2960);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2960), "ZJZ+e9P8`}GSZG9(py", "", options1, "{oB{", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 2899;
      String string1 = "7WaI<p!bb\\";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "dt5um3j>_JD;\"~3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // dt5um3j>_JD;\"~3
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
