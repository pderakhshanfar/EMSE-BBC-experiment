/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:14:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("9X4 KGQD9eR:oL% .oj", 0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "-");
      option0.setArgName("1!c<Ei[lb,X)S=*v");
      String string1 = "arg";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1!c<Ei[lb,X)S=*v", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      option0.clone();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(62, "waR?", "arg", options2, "|ERauBP", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "we%X");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2063);
      helpFormatter0.setLongOptPrefix("kry/$}G#F.!((;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-683));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "bZ-FL#SD|\"V!`<]";
      PrintWriter printWriter0 = mockPrintWriter0.printf("bZ-FL#SD|\"V!`<]", objectArray0);
      helpFormatter0.printUsage(printWriter0, 13, "has already been selected: '", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", "TqDD]>L", options0, "has already been selected: '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "");
      Options options1 = options0.addOption(option0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      helpFormatter2.renderOptions(stringBuffer0, 1, options1, 114, 2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      option0.setArgName("-");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter1.printHelp(2, "\n", "(hMUGYr22J", options1, "usage: ", true);
      helpFormatter0.printHelp(3, "^, k4:~H`L", "@4k&NI|Ys", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLongOptPrefix("org.apahe.commons.&lizOptions");
      helpFormatter0.renderWrappedText(stringBuffer0, 35, (-3061), "org.apahe.commons.&lizOptions");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apahe.commons.&lizOptions", "org.apahe.commons.&lizOptions", (Options) null, "org.apahe.commons.&lizOptions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      int int0 = (-3916);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3916), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions((StringBuffer) null, 2505, options0, 64, 64);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 60, 64, ",i:8>d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*r3");
      Locale locale0 = new Locale("[ Options: [ short ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1826, "[", (String) null, options0, 782, 34, (String) null, true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultLeftPad = (-687);
      Option option0 = new Option("", false, "");
      helpFormatter0.setOptPrefix("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getArgName();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 684;
      Options options1 = options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", true, "org.apache.commons.cli.HelpFormatter");
      Options options2 = options1.addOption("", false, "cZub/Qjg>?A");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, 684, "vQdnUR", options2);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      boolean boolean0 = false;
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter4.printHelp(3, "arg", "usage: ", options2, "A CloneNotSupportedException was thrown: ", false);
      // Undeclared exception!
      try { 
        helpFormatter4.renderOptions((StringBuffer) null, (-3938), options3, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "z2LPfAzPMsO@y~<GkyD";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z2LPfAzPMsO@y~<GkyD");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string1 = "";
      int int0 = 127;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 127, (-3977), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-XqOlwyR");
      helpFormatter0.printHelp(74, "--", " ", options1, "--", true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter1.printHelp(33, " ", "vol\"LtQGYvAIVLM.k", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options1, 45, 971);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "usage: ", "usage: ", options0, "uWd", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 14, "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      File file0 = MockFile.createTempFile("usage: ", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1768, "");
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(3422);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 325;
      Options options0 = null;
      String string0 = "X+Tcn";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(325, " ", " ", (Options) null, "X+Tcn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "we%X");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wp9");
      Locale locale0 = Locale.ENGLISH;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", (String) null, options0, 26, 3, "[ Options: [ short ", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("H4qhU2B>&`<n-'*", 46, 0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      boolean boolean0 = false;
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1214), "Snte^qpZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, ">");
      Options options1 = options0.addOption(option0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "{qH}";
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options0, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter1.setWidth((-2));
      helpFormatter0.setLongOptPrefix("v+,,`y.");
      String string1 = "Illegal option name '";
      String string2 = "a-/8zi";
      helpFormatter0.findWrapPos("", 3, 31);
      helpFormatter0.getDescPadding();
      options0.addOption("9b", true, "");
      String string3 = "L{3]5u7~J 0F!p";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("L{3]5u7~J 0F!p", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("arg", false, " [ARG]");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, ">");
      Options options1 = options0.addOption(option0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options2 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 34, options2, 3, 31);
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 1, "org.apache.commons.cli.Options");
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options0, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix(",d");
      helpFormatter0.findWrapPos(",d", 74, (-2));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      options1.addOption("", true, (String) null);
      helpFormatter2.printHelp("-", options1, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(64, "", "", options0, "#pj?>SU7cVye''");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ENGLISH;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Ywlpx!|lS@1:um]");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "-", options0, 1, 74, "", true);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options1.getOption("i[f8?^H;fVrem4");
      Option option0 = new Option((String) null, (String) null, true, "arg");
      Options options2 = options1.addOption(option0);
      options2.getOptionGroups();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kry/$}G#F.!((;");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("_*D]'k7U");
      helpFormatter0.findWrapPos("-", 98, 34);
      helpFormatter0.getDescPadding();
      Options options3 = options1.addOption((String) null, true, " ");
      helpFormatter1.printHelp("a/d;,P '*yG", options3, true);
      helpFormatter1.printHelp(10, "\n", "_*D]'k7U", options1, "a-/8zi");
      helpFormatter1.getOptPrefix();
      helpFormatter0.createPadding(74);
      File file0 = MockFile.createTempFile("{qH}", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 66, "a-/8zi", options1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "cmdLineSyntax not provided", "a-/8zi", options1, 10, 340, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      Options options2 = options0.addOption("", true, "--");
      helpFormatter0.printHelp(3, "\n", "arg", options2, "mK:J@", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, "usage: ", true, "   ");
      options2.addOption("7g", false, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-654), "   ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "Wfwap");
      Options options1 = options0.addOption(option0);
      options1.getOptionGroups();
      helpFormatter0.setLeftPadding((-1208));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "arg", "", options0, "Wfwap", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "arg");
      options0.addOption(option0);
      Options options1 = new Options();
      options1.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.ENGLISH;
      mockPrintWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("o UG*Te,P`k");
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 32, "{qH}", "", options1, (-2), 74, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "arg");
      options0.addOption(option0);
      Options options1 = new Options();
      options1.getOptionGroups();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kry/$}G#F.!((;");
      helpFormatter1.defaultDescPad = (-1);
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options0, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setSyntaxPrefix("Illegal option name '");
      String string0 = "a-/8zi";
      helpFormatter0.findWrapPos("-", (-1), 34);
      helpFormatter0.getDescPadding();
      helpFormatter1.createPadding(2);
      Options options2 = options0.addOption((String) null, true, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("a/d;,P '*yG", options2, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("3A", "3A", false, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      boolean boolean0 = false;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3857, "usage: ", "", options1, "x8IfLR/@iFp", false);
      helpFormatter2.printHelp("\n", options0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "E";
      Option option0 = new Option((String) null, "E");
      Options options1 = options0.addOption(option0);
      option0.clearValues();
      options1.getOptions();
      options1.helpOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.getOptionGroups();
      Options options2 = options1.addOption("", true, (String) null);
      options2.getOptionGroups();
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("3A", "", false, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      boolean boolean1 = false;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3857, "usage: ", "", options1, "x8IfLR/@iFp", false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "U:D}J;1zHC 1cy?A";
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("-", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "-", "]", options0, "r,}", false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "q4op/E4", "z\"3f^B{3oQL", options0, 44, 44, "z\"3f^B{3oQL");
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage(printWriter0, 108, "UN", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(74);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-711), "arg", " ", options0, 3, 34, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      Option option0 = new Option((String) null, (String) null, true, "arg");
      Options options2 = options1.addOption(option0);
      Options options3 = new Options();
      options3.getOptionGroups();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kry/$}G#F.!((;");
      options3.addOption((String) null, "usage: ", false, "usage: ");
      options2.addOption("", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(265, "arg", "E[M&57(07F)H= q8D`", options2, "kry/$}G#F.!((;", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      helpFormatter0.setOptPrefix("_Yp$r'N4lq.PXmXV7");
      Option option0 = new Option("arg", "arg", true, ">");
      Options options2 = options1.addOption(option0);
      Options options3 = new Options();
      options3.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix(",d");
      options2.hasOption("Pp-^pp^?61ZfhXb");
      helpFormatter1.findWrapPos("a-/8zi", 2845, (-57));
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp(74, "NO_ARGS_ALLOWED", " ", options2, "", true);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", "arg", true, ">");
      Options options2 = options1.addOption(option0);
      Options options3 = new Options();
      Collection collection0 = new LinkedList<String>();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix(",d");
      helpFormatter0.findWrapPos(",d", 74, (-2));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      options2.addOption("", true, (String) null);
      helpFormatter2.printHelp("-", options2, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp(64, "", "", options1, "#pj?>SU7cVye''");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(":y");
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1, 74);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 13;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 74, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=GA");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 97, "tfHgHh{g)T8[moo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) null, 1, "arg", "", options0, 74, 1, " ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(21, "o0n17", "", options0, "", true);
      helpFormatter0.createPadding(21);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "z.~T^&[&1ejfK", objectArray0);
      helpFormatter0.printHelp(printWriter0, 21, "o0n17", "                     ", options0, 21, 39, "o0n17");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("arg");
      String string0 = "\"yAeNf.3&-j\\l;`)";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yAeNf.3&-jl;`)");
      Locale locale0 = Locale.ENGLISH;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\"yAeNf.3&-jl;`)", "-", options0, 74, 1, "-", false);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1265), "\"yAeNf.3&-jl;`)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding(2300);
      options0.toString();
      String string0 = "r,}";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-987);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 2300, (-987));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "*(7%cl0~hNVZ+";
      options0.hasOption("*(7%cl0~hNVZ+");
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, true, "");
      options1.hasOption("*(7%cl0~hNVZ+");
      String string1 = "yl0@C?vuFgF5R}l";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 64, options1, 64, (-175));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasOption("arg");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"yAeNf.3&-jl;w`)");
      Locale locale0 = Locale.ENGLISH;
      helpFormatter1.defaultSyntaxPrefix = "";
      mockPrintWriter0.printf(locale0, "--", (Object[]) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "\"yAeNf.3&-jl;w`)", "-", options0, 74, 1, "-", false);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 684;
      Options options1 = options0.addOption("", "", false, (String) null);
      Options options2 = options1.addOption("", true, "\n");
      options2.getOptionGroups();
      helpFormatter0.printHelp("]8HCA HG'jurE:l", "]8HCA HG'jurE:l", options2, "]8HCA HG'jurE:l", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.printHelp(2724, "NO_ARGS_ALLOWED", " ]", options1, "9I/qOU$*t", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.defaultSyntaxPrefix = "arg";
      int int0 = (-247);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3822, (-247), "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.printHelp(3, "D#8&UVt4p", "usage: ", options0, "]", false);
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-441), "M^s|Nv1fb#", "S RSDzSb1-!q", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("H>WOqoV");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) "H>WOqoV";
      objectArray0[2] = (Object) "--";
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("--", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 28, " ", "", options0, (-2660), 28, "#8U");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      int int0 = 56;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 8, "o0n17", "", options0, (-1103), 56, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]8HCA HG'jurE:\\l";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PI#Fh+ik");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "", "-CS&Ch_=A9A", options0, (-920), (-1799), "P[oL(9+G>t1*Eb!q;=3", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(17, "o0n17", "", options0, "", true);
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")Lg";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 374, "P[oL(9+G>t1*Eb!q;=3", "Nw[xHCX", options0, 38, 4417, ")Lg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1465, "", (String) null, (Options) null, 1465, 1465, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 4417;
      String string0 = ":kQL72L Ev4o8SmmtLA";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "usage: ", true, (String) null);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4417, ":kQL72L Ev4o8SmmtLA", ")Lg", options1, 4417, 4417, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option((String) null, (String) null, true, ">");
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("_*D]'k7U");
      helpFormatter1.setSyntaxPrefix(",d");
      helpFormatter1.findWrapPos("a-/8zi", 2845, (-57));
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("S", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-4429), "arg", "EWV}49Rv3Gh`$GwOUf", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLeftPadding(3);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "`nPjoqr");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "_]|a8er";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("_]|a8er");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1889), "]8HCA HG'jurE:l", "", options0, 0, (-3845), "t6V.9@ZskKI[N", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option((String) null, (String) null, true, ">");
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("_*D]'k7U");
      options2.hasLongOption((String) null);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter1.findWrapPos("_*D]'k7U", 1, 1);
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(17, "o0n17", "", options0, "", true);
      helpFormatter0.createPadding(17);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(13, "                 ", "C@EPj*#?", options0, "(BM3$vpzhu|d");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option((String) null, (String) null, true, ">");
      Options options2 = options1.addOption(option0);
      Options options3 = new Options();
      options3.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("_*D]'k7U");
      helpFormatter1.setSyntaxPrefix(",d");
      helpFormatter1.findWrapPos("a-/8zi", 2845, (-57));
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("S", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-965), "E':<^^1`pmvE", (String) null, options2, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 5114, 5114, " ");
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = 684;
      Options options1 = options0.addOption("arg", false, "usage: ");
      options1.addOption("", "arg", false, "usage: ");
      helpFormatter0.printHelp(684, "7g", "org.apache.commons.cli.HelpFormatter", options0, "WJ~hJy", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option((String) null, (String) null, true, ">");
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("_*D]'k7U");
      helpFormatter0.printHelp("50", "", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("Wy?d8)i_Uu\u0005");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "--");
      Options options2 = options1.addOption("", false, "");
      helpFormatter1.printHelp(74, "Wfwap", "", options2, "E[M&57(07F)H= q8D`", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", "arg", true, ">");
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.setSyntaxPrefix(",d");
      helpFormatter1.findWrapPos("a-/8zi", 2845, (-57));
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("S", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-4429), "arg", "EWV}49Rv3Gh`$GwOUf", options1, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptionGroups();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option("", "&tZU$ 'C`tghU4Cf", false, "5nBYKOInM");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp(64, "\n", "}ir", options1, "\n", false);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!&l^^`");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3845), "!&l^^`", "-", options0, (-3845), 1496, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options1 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options1.getOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("V>3^Zu8", (String) null, options1, "]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix(" ");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("&-dP|c/IKQ9r", 63, (-4451));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.getOptions();
      Option option0 = new Option((String) null, (String) null, true, ">");
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getOptionGroups();
      helpFormatter0.printHelp("{qH}", "v+,,`y.", options1, "-");
      helpFormatter0.setWidth(74);
      helpFormatter0.setLongOptPrefix("_*D]'k7U");
      helpFormatter1.setSyntaxPrefix(", ");
      helpFormatter1.findWrapPos("a-/8zi", 2845, (-57));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      File file0 = MockFile.createTempFile("usage: ", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "arg";
      helpFormatter2.getArgName();
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, " ", options0, 32, 1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1023);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cannot add value, list full.");
      options1.getOptions();
      options1.getOptionGroups();
      helpFormatter0.printHelp("Cannot add value, list full.", "", options1, (String) null);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", (-1416), 1628);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter0.printf(locale0, "", (Object[]) null);
      locale0.getDisplayVariant();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "Qz/HQbB");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, " :: ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      File file0 = MockFile.createTempFile("usage: ", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Options options2 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasOption("*(7%cl0~hNVZ+");
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, true, "");
      options1.getOption("yl0@C?vuFgF5R}l");
      options1.hasOption("}GH7L");
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "usage: ");
      File file0 = MockFile.createTempFile("Z-&{!$JdCDg'y", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 44, "' contains an illegal character : '");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options1.getOptionGroups();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "]", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 31, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1023, 1023, "");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "[ Options:  shrt ";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ Options:  shrt ", "[ Options:  shrt ", options0, "[ Options:  shrt ", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2508), 44, "-B!nu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      byteArrayOutputStream0.reset();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      String string0 = "The option '";
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "The option '", objectArray0);
      int int0 = (-525);
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 97, options0, (-250), 97);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 4082, options1, (-1), 524);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(23, "|SG*lr7t@hexP", "|SG*lr7t@hexP", options0, "|SG*lr7t@hexP", true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("mI", "", options0, "u$]7#~ZOoN{ZLH^2w");
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1416), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      File file0 = MockFile.createTempFile("usage: ", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 0, 0, "i7sJtsq6>6a7Z!D#I");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, " ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 31, "-");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      Option option0 = new Option("", "d.*^");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "< MT@~P}", " ]", options3, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qN}U'G");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.print(3);
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "p6[78&ojuI HT*16", objectArray0);
      locale0.getDisplayVariant();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "qN}U'G");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("]~6tVL*Wk8>TplFiu");
      helpFormatter0.setNewLine("\"ly");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("[KV-*{&py7Kb75~YE");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-2269));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format((Locale) null, "The option '", objectArray0);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-525), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1551);
      String string0 = " | ";
      helpFormatter0.rtrim(" | ");
      helpFormatter0.getLongOptSeparator();
      String string1 = "arg";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" | ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      options0.getOptionGroups();
      boolean boolean0 = true;
      options0.hasOption("*(7%cl0~hNVZ+");
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, true, "");
      options1.getOption("yl0@C?vuFgF5R}l");
      options1.hasOption("}GH7L");
      MockFile mockFile0 = new MockFile("--", "<");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("}GH7L", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "", "", options0, "[ Options: [ short ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = (-687);
      helpFormatter0.defaultLeftPad = (-687);
      String string0 = "";
      String string1 = "iOSWYc\\ sX";
      String string2 = "#lY";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "^z[9/Yqk|QTQ]udkU";
      options0.getMatchingOptions("^z[9/Yqk|QTQ]udkU");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 5114, 5114, " ]");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, false, "-");
      options1.helpOptions();
      String string2 = "";
      options1.hasOption("8TlbXv.");
      options0.helpOptions();
      options1.addOption("", false, "=f6%edY");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "(v{|2q]F(o_9i`R ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("y(,jUVaO(k", "(v{|2q]F(o_9i`R ", options3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = options0.getOptionGroups();
      options0.hasOption("*(7%cl0~hNVZ+");
      List list0 = options0.helpOptions();
      Options options1 = options0.addOption((String) null, true, "");
      options1.getOption("yl0@C?vuFgF5R}l");
      options1.hasOption("}GH7L");
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) list0;
      objectArray0[3] = (Object) list0;
      objectArray0[4] = (Object) collection0;
      objectArray0[5] = (Object) "yl0@C?vuFgF5R}l";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "nYJ\"b$sa`Co$WNu`Zl", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "Cannot add value, list full.", "OVW9f_6-Ll|cN", options1, (-2), (-1240), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("\n");
      helpFormatter0.setArgName("\n");
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{\\zM)&\":TJ* O>~";
      String string1 = "HXv0Z$e'@GKGW";
      Options options0 = null;
      String string2 = "*vj-Yd805V";
      helpFormatter0.defaultOptPrefix = "*vj-Yd805V";
      int int0 = 0;
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setDescPadding(0);
      String string3 = "";
      String string4 = "0f{fW)r3TCxk#Agn";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("HXv0Z$e'@GKGW", "0f{fW)r3TCxk#Agn", (Options) null, "HXv0Z$e'@GKGW", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      helpFormatter0.defaultNewLine = "bm#]ptgX8C~";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("usage: ");
      String string0 = "";
      mockPrintWriter0.print((Object) "");
      int int0 = 1030;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1030, "");
      String string1 = "";
      String string2 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", "-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(866);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(23);
      helpFormatter0.getNewLine();
      String string0 = " | ";
      helpFormatter0.findWrapPos(" | ", 23, 23);
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1041);
      helpFormatter0.setArgName("-");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.createPadding(1041);
      helpFormatter0.setArgName("/^NvuXe6?3!vW");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(2300);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(74, "-", "]", options0, "r,}", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, (String) null);
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("]8HCA HG'jurE:l", "]8HCA HG'jurE:l", options2, "]8HCA HG'jurE:l", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, (String) null);
      Options options2 = options1.addOption("", true, "\n");
      helpFormatter0.printHelp("]8HCA HG'jurE:l", "]8HCA HG'jurE:l", options2, "]8HCA HG'jurE:l", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2, 1, "Illegal option name '");
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 0, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-1416), (-1416));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2734));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "-", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("boL&rreY]Liogz ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("mI", "", options0, "u$]7#~ZOoN{ZLH^2w");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptPrefix();
      String string0 = "_L";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "mI", "%2oREI{6CSp|", options0, "_L");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 31, 31, "");
      helpFormatter0.findWrapPos("", (-478), 32);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "J/MGU";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "J/MGU", "k,ST):5z", options0, "J/MGU");
  }
}
