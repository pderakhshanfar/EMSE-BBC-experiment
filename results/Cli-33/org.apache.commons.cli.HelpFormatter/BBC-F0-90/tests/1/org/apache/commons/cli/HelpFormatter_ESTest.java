/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:01:03 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "z [./]Vg");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("z [./]Vg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultOptPrefix = "z [./]Vg";
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("--");
      helpFormatter0.defaultDescPad = 137;
      helpFormatter0.defaultLeftPad = (-981);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", (-2096), 137);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(16);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "usage: ";
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "";
      mockPrintWriter0.format(locale0, "-", objectArray0);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("   ", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("4a|YlK#", options0);
      options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 1306, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-602));
      String string0 = "DP ";
      String string1 = "9|*hDT";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("6Yw jJTJs!rHDcY");
      options0.helpOptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("DP ", "9|*hDT", options0, "9|*hDT", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("81B[");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 115, "vS#jM\"CyG5t>}", "usage: ", options0, 74, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-3040);
      String string0 = "has already been selected: '";
      String string1 = ",5=g KML";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 15, options0, 148, 1109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2132;
      int int1 = 1;
      String string0 = "jAW,m03E-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(577, "jAW,m03E-", "(AEh-E8a!5[:5vX#d&1", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("j &/79$-1aH4 !");
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "8'#>@|}ik", (String) null, options0, (-1), (-1994), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|$o.Vnm";
      helpFormatter0.setNewLine("|$o.Vnm");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(886, (String) null, "|$o.Vnm", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 27, options0, 2151, 27);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          int int0 = 0;
          helpFormatter0.setDescPadding(0);
          Options options0 = new Options();
          Options options1 = options0.addOption("I", "usage: ", true, "I");
          Options options2 = options1.addOption("I", true, "--");
          // Undeclared exception!
          helpFormatter0.printHelp(1, "arg", "", options2, "", true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 5, 5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      helpFormatter0.defaultLeftPad = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-881), "jL/j_csU", "6J5", options0, "jL/j_csU", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options1 = options0.addOption((String) null, "-", true, "arg");
      helpFormatter0.printHelp(" | ", options1, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("L4DKvlR-n?\"/3]EWe&(o", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("L4DKvlR-n?\"/3]EWe&(o", 97, (-1389));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2502));
      helpFormatter0.rtrim("org.apache.commons.cli.Options");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1178));
      Options options1 = new Options();
      String string0 = "";
      options0.hasLongOption("");
      int int0 = 1082;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "#~&");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", options2, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("Yz", "arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption((String) null, "arg", false, "--");
      options1.hasOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2410, "arg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "}(1h!tMJVst", "}(1h!tMJVst", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printUsage(printWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", "<", options0, 3, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage(printWriter0, 74, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "arg", "usage: ", options0, (-717), 1, "\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      options1.hasOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter2.renderOptions(stringBuffer0, 0, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "QF'X3ZHdE&Ry");
      options1.getOptions();
      Option option0 = new Option("", true, (String) null);
      helpFormatter0.setArgName("");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("f^M {yo7HxWr!IL)]s", "BCWE8de5r:d3ZnF", options0, "");
      option0.clone();
      options1.hasShortOption("RPyd[z}OlLFI)Wg'l");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 570, (String) null, options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-434), "arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Yz", "usage: ", true, "Yz");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-100), "Yz", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2744));
      Options options0 = new Options();
      options0.hasLongOption("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1297, "has already been selected: '", "has already been selected: '", options0, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(64);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A!91'mz9]SAo", "}Y", options0, "usage: ");
      helpFormatter0.printHelp("}Y", options0, true);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$zxD[n>7[}.");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 65, "DNdHL{+M7", "A!91'mz9]SAo", options0, 65, 65, "", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      helpFormatter0.setLeftPadding((-839));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      mockPrintWriter0.print(false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-438));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      options0.hasOption("D{Eu\"=5MRz4v6T}X");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", "Ee>|>:TWLeXiA", options0, "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "N'hW:C6q1O038", true, "");
      options1.hasOption("`w*LgN'we)xwh&^3T(G");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Yz";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "Yz");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", " ", options0, 3, 74, "-", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = (-1272);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-A-(N89-8V5Z", "-A-(N89-8V5Z", (Options) null, "-A-(N89-8V5Z", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth((-72));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 35, (String) null, "arg", options0, (-328), (-821), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLongOptPrefix();
      helpFormatter2.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "-");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(260);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1020, (-35), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", "<", options0, 3, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 26, 17);
      helpFormatter0.renderOptions(stringBuffer1, (-989), options0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Yz", "usage: ", true, "Yz");
      option0.toString();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2027, "s@n[ki8((-Ege\"S", ">UH", options0, 2027, 9, "|ErKoqV", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "QF'X3ZHdE&Ry");
      options1.getOptions();
      Option option0 = new Option("", true, (String) null);
      helpFormatter0.setArgName("");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("f^M {yo7HxWr!IL)]s", "BCWE8de5r:d3ZnF", options0, "");
      option0.clone();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 3, options1, 3, 1);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "org.apache.commons.cli.HelpFormatter$1", "", options2, 1, 1, "-", true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A!91'mz9]SAo", "", options0, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("-", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 13, "T=R=Q<=kLRWHa19P0e");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " | ", true, "s@n[ki8((-Ege\"S");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1298), "Yz", "(e6 ", options1, (-3306), 2820, "Yz", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", "", true, "");
      helpFormatter0.printHelp("MG-guo2,^s{A5Ek", options1, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "QF'X3ZHdE&Ry");
      options1.getOptions();
      Option option0 = new Option("", true, (String) null);
      helpFormatter0.setArgName("");
      options1.addOption(option0);
      helpFormatter0.printHelp("f^M {yo7HxWr!IL)]s", "BCWE8de5r:d3ZnF", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(260);
      helpFormatter0.renderWrappedText(stringBuffer0, 1020, (-35), "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A!91'mz9]SAo", "", options0, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 897, "%nV)k ", "", options0, 1905, 74, "arg", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2479), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      Options options0 = new Options();
      options0.addOption("10ex", true, "XF*TnF#w5Nmbh");
      options0.getOptions();
      Option option0 = new Option("arg", false, " ");
      helpFormatter0.setArgName("arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("!KlcbF ]$MyNq`4", "!KlcbF ]$MyNq`4", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printUsage(printWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", "<", options0, 3, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      helpFormatter0.printHelp(3, "<", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "QF'X3ZHdE&Ry");
      options1.getOptions();
      Option option0 = new Option("", true, (String) null);
      helpFormatter0.setArgName("");
      options1.addOption(option0);
      helpFormatter0.printHelp("f^M {yo7HxWr!IL)]s", "BCWE8de5r:d3ZnF", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 3, options1, 3, 1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth((-5017));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "3HY)pX");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o;78'vdrg<6o1)", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1271);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "--", false, "'7GVXF-P 2v9");
      helpFormatter0.renderOptions(stringBuffer0, 1271, options2, 1176, 1271);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "NO_ARGS_ALLOWED", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "\"2Bjg", false, (String) null);
      helpFormatter0.printHelp("#:7rL;tli08z?`", "$|-5Z@4B^", options2, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-15));
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-15), "--", "arg", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      options0.helpOptions();
      int int0 = (-657);
      helpFormatter0.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-933), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W<Kf&((S9-V[Mn k\\1";
      int int0 = (-2);
      Options options0 = new Options();
      options0.addOption("", "?nNl=^_JxwOmj[c:", true, "arg");
      options0.getOptions();
      options0.getOption("");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "arg", options0, " ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "' was specified but an option from this group ";
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "' was specified but an option from this group ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "igRq8 p)X\"Y)m(xq");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-2393);
      int int1 = 1355;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      String string0 = ":7Xo*Df>\"`?{)/XAJhm";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2393), 1355, ":7Xo*Df>\"`?{)/XAJhm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.CANADA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Tpms3b");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 13, "h|-vo-GR{A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(3, "arg", "kx]w4\"c", options0, "]Np2lcB=*C:)(s}");
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("kx]w4\"c");
      StringBuffer stringBuffer0 = new StringBuffer(3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">7BDZc7N4_");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) ">7BDZc7N4_";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "A$,.fF_ld-Y'";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) ">7BDZc7N4_";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "A$,.fF_ld-Y'", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-469), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2411);
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.OptionGroup");
      int int0 = 423;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2411, "", "[", options0, 423, 423, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      Locale locale0 = Locale.CANADA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Tpms3b");
      String string0 = "Cg#M`srb<Q";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cg#M`srb<Q", "Tpms3b", (Options) null, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 949, 74, "h|-vo-GR{A");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Locale locale0 = Locale.CANADA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Tpms3b");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.rtrim("&|sBQR&A=?,IZ-3xb");
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.printHelp("1x[a).+/[ef2_#_Lcb`", "", options0, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "\n", "l>GJF6:`)[BQ", options0, 74, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      PrintWriter printWriter0 = null;
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      options0.helpOptions();
      int int0 = (-657);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "\n", "l>GJF6:`)[BQ", options0, (-657), 1, " ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "", (Options) null, "?|-5Z@4\"^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1923, "Yr3Ebs[ko", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      Options options0 = new Options();
      String string0 = "QF'X3ZHdE&Ry";
      Options options1 = options0.addOption("arg", "-", false, "QF'X3ZHdE&Ry");
      options1.getOptions();
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "-";
      PrintWriter printWriter0 = null;
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Object>();
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "l>GJF6:`)[BQ", options0, 74, 0, "l>GJF6:`)[BQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 323, options0, 323, 3118);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Locale locale0 = Locale.forLanguageTag("--");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) " :: ";
      objectArray0[2] = (Object) comparator0;
      printWriter0.format(locale0, "", objectArray0);
      Options options1 = new Options();
      PrintWriter printWriter1 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printHelp(printWriter1, 7, ">uK{jA.Ot4(", "", options1, 2451, 3, ">uK{jA.Ot4(");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printUsage(printWriter0, 45, "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("YUQW`3f");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(2386);
      helpFormatter0.setLeftPadding(3980);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      mockFile0.setWritable(false);
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockFile0.setExecutable(true, false);
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("|JGER_8*a:;", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3980, 13, "|JGER_8*a:;");
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options0, (-3781), (-3781));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "3HY)pX");
      Options options0 = new Options();
      options0.addOption("", "3HY)pX", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp("i$", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.CANADA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "&|sBQR&A=?,IZ-3xb", (Options) null, "&|sBQR&A=?,IZ-3xb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      Options options0 = new Options();
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 323, options0, 323, 3118);
      helpFormatter0.defaultLeftPad = 1;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 828, " :: ");
      Options options1 = new Options();
      helpFormatter0.printHelp("3HY)pX", options0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-657);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuffer0.insert(0, charArray0, 681, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // offset 681, len 0, str.length 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-9));
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.helpOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "ZC", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      int int0 = (-2148);
      helpFormatter0.setWidth((-2148));
      helpFormatter0.setArgName("fA:[WOA#<}P6*");
      Options options0 = new Options();
      String string0 = null;
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = (-657);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "C*)U)", "l>GJF6:`)[BQ", options0, (-657), 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.printHelp("   ", "'", options0, "   ");
      List list0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOption(" | ");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      helpFormatter0.setWidth(1093);
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("o*AW/.|1Am=U(zBgxy", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-763), options0, 0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3126;
      String string0 = null;
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", false, " ");
      helpFormatter0.setArgName("arg");
      Options options1 = options0.addOption(option0);
      options0.getOptions();
      helpFormatter0.printHelp("--", options1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "\"#0~");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \"#0~
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      helpFormatter0.printUsage(printWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0);
      int int1 = 3;
      FileSystemHandling.createFolder(evoSuiteFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", "<", options0, 3, 26, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1225), "<", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-2866), 3, " ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      Options options0 = new Options();
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 323, options0, 323, 3118);
      helpFormatter0.defaultLeftPad = 1;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      Object[] objectArray0 = new Object[0];
      helpFormatter0.defaultLongOptPrefix = " :: ";
      mockPrintWriter0.printf((Locale) null, "Mz", objectArray0);
      helpFormatter0.printHelp(" :: ", " :: ", options0, "qiVTF", false);
      helpFormatter0.getSyntaxPrefix();
      String string1 = "YPy|7R{f+XK9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-400), "qiVTF", " :: ", options0, (-400), 3118, "YPy|7R{f+XK9", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "3HY)pX");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2507));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      PrintWriter printWriter0 = null;
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = (-657);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "\n", "l>GJF6:`)[BQ", options0, (-657), 0, " ]");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = (-657);
      String string0 = " ]";
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(3);
      String string0 = " :: ";
      String string1 = ">";
      Options options0 = new Options();
      helpFormatter0.printHelp("kx4\"c", "", options0, "|xfM(P;/'e@D13.", true);
      options0.addOption("", "arg", true, "cmdLineSyntax not provided");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("MV!dN[Y$oZ:v", "tSx7[}", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'MV!dN[Y$oZ:v' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setArgName("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = (-657);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "C*)U)", "l>GJF6:`)[BQ", options0, (-657), 0, " ]");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3518), (-3518), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1718);
      helpFormatter0.setLeftPadding(1639);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1718), " ] [ long ", "", options0, 0, 1639, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3651;
      String string0 = "azfVo";
      helpFormatter0.setSyntaxPrefix("azfVo");
      helpFormatter0.setLongOptSeparator("azfVo");
      helpFormatter0.setWidth(3);
      int int0 = (-1242);
      helpFormatter0.defaultWidth = (-1242);
      helpFormatter0.setNewLine("azfVo");
      String string1 = "";
      helpFormatter0.defaultOptPrefix = "";
      int int1 = 0;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("The option '", "--", true, "eR`uq.U a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("t6", "arg", false, "['$<Rp");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "[7BHg;:v)]H7Z7{x", "[7BHg;:v)]H7Z7{x", options1, (-2), (-3389), "['$<Rp", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(3);
      String string0 = " :: ";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      helpFormatter0.printHelp("kx4\"c", "", options0, "|xfM(P;/'e@D13.", true);
      String string2 = "cmdLineSyntax not provided";
      options0.addOption("", "arg", true, "cmdLineSyntax not provided");
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        options0.addOption("MV!dN[Y$oZ:v", "tSx7[}", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'MV!dN[Y$oZ:v' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.printHelp("   ", "'", options0, "   ");
      options0.getMatchingOptions("arg");
      options0.hasLongOption("--");
      options0.getOption(" | ");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      helpFormatter0.setWidth(1093);
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("o*AW/b|1Am=U(zBgxy", options0, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" :: ");
      Options options0 = new Options();
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printOptions(mockPrintWriter0, 323, options0, 323, 3118);
      helpFormatter0.defaultLeftPad = 1;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "";
      String string1 = "\\Mz";
      Object[] objectArray0 = new Object[0];
      helpFormatter0.defaultLongOptPrefix = " :: ";
      mockPrintWriter0.printf((Locale) null, "Mz", objectArray0);
      helpFormatter0.printHelp(" :: ", " :: ", options0, "qiVTF", true);
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-1221);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 323, "qiVTF", "tajp", options0, (-1221), 323, " :: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.hasOption("arg");
      helpFormatter0.printHelp("   ", "'", options0, "   ");
      options0.getMatchingOptions("arg");
      options0.hasLongOption("--");
      options0.getOption(" | ");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options0, false);
      helpFormatter0.setWidth(1093);
      helpFormatter0.setArgName("");
      helpFormatter0.printHelp("o*AW/b|1Am=U(zBgxy", options0, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2785;
      helpFormatter0.setWidth(2785);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "Ku~A88`\\oV=qbn[";
      MockFile mockFile0 = new MockFile((String) null, "--");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "Ku~A88`oV=qbn[", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3126;
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("arg", false, " ");
      helpFormatter0.setArgName(" ]");
      Options options1 = options0.addOption(option0);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2575);
      String string0 = "s;";
      helpFormatter0.defaultArgName = "s;";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultNewLine = "s;";
      helpFormatter0.setArgName("s;");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(0);
      helpFormatter0.findWrapPos("", 0, 2575);
      String string1 = "PPvG\\3s";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("A CloneNotSupportedException was thrown: ", "s;", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("YUQW`3f");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(2386);
      helpFormatter0.setLeftPadding(3980);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      mockFile0.setWritable(false);
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      mockFile0.setExecutable(true, false);
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("|JGER_8*a:;", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3980, 13, "|JGER_8*a:;");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "AKFO+1YA", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("N8uV$@}f$7:?0>&N", options2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1055);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4}XS");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        mockPrintWriter0.format((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "vnG3%8lu1/vSt|B$";
      helpFormatter0.setLongOptPrefix("vnG3%8lu1/vSt|B$");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "Khou8)_d)VR^6^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5h%ND$TJRp3OaAa9";
      String string1 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setOptPrefix("5h%ND$TJRp3OaAa9");
      helpFormatter0.setLongOptPrefix("5h%ND$TJRp3OaAa9");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("arg");
      int int0 = (-1071);
      String string0 = "G1J$9M`Cm3L@9";
      String string1 = "-";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[", "arg", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Locale locale0 = Locale.CANADA;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Tpms3b");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "5");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.getOptionGroups();
      HelpFormatter helpFormatter2 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println();
      mockPrintWriter0.println();
      String string0 = "3HY)pX";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "3HY)pX");
      helpFormatter0.setLongOptPrefix("3HY)pX");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("3HY)pX", options0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      String string0 = " ] [ long ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = ">tXY";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "-", true, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultNewLine = "usage: ";
      Options options0 = new Options();
      String string0 = "SvXsc_X1g!9~`85";
      options0.hasOption("");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "", true, "SvXsc_X1g!9~`85");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-257);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-257));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(2668);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{b#");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("{b#", objectArray0);
      int int0 = 9;
      String string0 = "[ Options: [ short ";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string2 = ")@{`k!C!d0~F[";
      Option option0 = null;
      try {
        option0 = new Option(" ", false, ")@{`k!C!d0~F[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("MG-guo2,^s{A5Ek", options0, false);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "46&6)y!0T$B,'x[J";
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", "-", false, "46&6)y!0T$B,'x[J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1929, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
