/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:03:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, "y", "KiX4lMdn&", options0, 64, 101, "KiX4lMdn&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l;'");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.defaultOptPrefix = "";
      int int0 = 611;
      helpFormatter0.createPadding(611);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      String string0 = "usage: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "P$");
      Options options0 = new Options();
      options0.hasOption("fReh(/~iFk");
      options0.helpOptions();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        options0.addOption(".", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-437));
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(85);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (-2), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-2716));
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Nt9:sI@{(]Nb*eU", "qK", options0, "qK", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-808));
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$", "", options0, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f8PV0F. x8%<-2");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";t`7qPBb");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.setWidth(74);
      helpFormatter0.setNewLine(";t`7qPBb");
      helpFormatter0.defaultWidth = (-1344);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "", false, "d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("N2V", "\n", false, "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.getOptionGroups();
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp("t~Y)w", "N2V", options1, "N2V", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.rtrim("[");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 64, options2, 64, 3);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options2, 74, 6);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "tI`V~{fM&PH~oXUA492");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2);
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "P;9.1D5lb!'V*b", "wVR_Z1%{v@'J[#)", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("N2V", "\n", false, "arg");
      options0.getOption("arg");
      helpFormatter0.optionComparator = null;
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", "\n", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "P;9.1D5lb!'V*b", options0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "/=OdulU-");
      Option option0 = new Option((String) null, true, "usage: ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("D", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(115, "dOXi<", "cmdLineSyntax not provided", options4, "tJ-\"", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 370, 2, "--");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 370, options0, 44, 34);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.rtrim("\"_kTNnO!#(+");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\"_kTNnO!#(+");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "\"_kTNnO!#(+");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2007, (String) null, "", (Options) null, 2007, 2007, "]ds3e7dp&M~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "L-.{m(j,k`?mp";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "arg";
      Option option0 = new Option("arg", "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      String string2 = "=:)2`O";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3281), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-695);
      String string0 = "5\\[arKnIT^no";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-695), (Options) null, (-695), 15);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-51));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 1127, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-563), "usage: ", "FGNUw;Wd6", (Options) null, 74, (-523), "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2781, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, (String) null);
      helpFormatter0.printHelp("NEp1;1U(;N51)", options2, true);
      helpFormatter0.defaultSyntaxPrefix = "has already been selected: '";
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("t", "");
      MockFile mockFile1 = new MockFile(mockFile0, "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, "usage: ", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "line.separator", (String) null, options2, (-2085), (-2085), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", false, "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("uV", (String) null, options0, "?m$vvrL*#aSOT5", false);
      helpFormatter1.findWrapPos(">", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) linkedList0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1189, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('d');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "uau|(C!&:#Z9 Vu(");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("^.zw5ot[Ty7", "", options1, "", true);
      helpFormatter0.findWrapPos(":Q%<KML&PrW6zGa!", 0, 4);
      helpFormatter0.createPadding(4);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\\u`wSA";
      // Undeclared exception!
      helpFormatter0.printHelp(1, string0, "]", (Options) null, string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      mockPrintWriter0.println((long) 1);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 8, 2169, ",70m/#H,qDn?");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2169, "-", (String) null, (Options) null, 11, 3, "ST-{N'Q6UtrD8", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "),Hv`vOq/&f9~^'J1C";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("N2V", "\n", false, "[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("--");
      options1.addOption("arg", "\n", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "P;9.1D5lb!'V*b", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QA?WMi|hbtnS%o#B9F.", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      options1.getOptionGroups();
      Option option0 = new Option((String) null, "-");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'XtWb", "", options1, "Vu}F<*=ZAEBmq%@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "~=l58l} *Kt{L:";
      options0.hasOption("arg");
      Options options1 = options0.addOption((String) null, "", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "\n";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printWrapped(printWriter0, 1, 1127, "\n");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("$", " ", options0, "arg");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      String string0 = "\\ux,2Fx([eF";
      helpFormatter1.printWrapped(printWriter0, 1, 0, string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 44, "usage: ", (String) null, options0, 74, 3, "J]};mBoOWKL_C+ gk`D", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped(printWriter0, 1, 853, "");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1197, 6, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 853, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(" ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3520), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 325);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 325, 31, "[Re97 1?~F)D#M?py\"");
      stringBuffer2.append(stringBuffer0);
      helpFormatter0.renderWrappedText(stringBuffer2, 10, 31, "[Re97 1?~F)D#M?py\"");
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 31, 10);
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 37, " ", options0);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 325, "--", "arg", options0, 3712, 10, "", false);
      helpFormatter0.printHelp("arg", options0, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped(printWriter0, 1, 853, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "-Xce3\t", "", options0, 1, 1, "-", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      helpFormatter0.printHelp("$", "org.apache.commons.cli.HelpFormatter$1", options1, "$", true);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), ":deSAv", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 31, 325);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print((long) 74);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 5605, 10, "\n");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 58, "4 S\")=VR", options0);
      mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "--", "org.apache.commons.cli.HelpFormatter", options0, 31, (-539), "S]$pSD1RF0)ao.bPS");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      MockFile mockFile0 = new MockFile((File) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print((-1L));
      helpFormatter1.printWrapped(printWriter0, 1, 1127, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter", options0);
      PrintWriter printWriter1 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printHelp(printWriter1, 1127, "usage: ", "I$Tiu!>M.<7", options0, 3088, 3, "arg");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("2DzG>a(\"-FmJz|*g<7H", (String) null, options1, "usage: ", true);
      MockFile mockFile0 = new MockFile("@LDK-+", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "@LDK-+", options1, 85, (-2), " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "line.separator", true);
      MockFile mockFile0 = new MockFile((File) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 710, "[", " | ", options0, 74, 2444, (String) null, true);
      helpFormatter1.getArgName();
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      MockFile mockFile0 = new MockFile((File) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.append('U');
      mockPrintWriter0.append('+');
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "Uh-7`\"FWev");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "#Ow", true);
      Option option0 = new Option("$", "-");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, (-472), 74, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "]");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "8ce\">tH");
      Options options2 = options1.addOption(option0);
      options1.getMatchingOptions("d|||]TIQ0%R!|}");
      MockFile mockFile0 = new MockFile("gA[seY5us@Z50iS]7^");
      mockFile0.setReadable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = new Locale("d|||]TIQ0%R!|}", "", " ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options2;
      objectArray0[3] = (Object) option0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "]", "", options2, (-2961), (-2961), "Illegal option name '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Options options0 = new Options();
      options0.addOption((String) null, false, "usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("\n", "%98\"^~x^", options0, "", true);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      Option option0 = new Option("$", "-");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 103, (-248), "b?*+Dg$Sh8;UcJa`e");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 48, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "]");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "8ce\">tH");
      Options options2 = options1.addOption(option0);
      options1.getMatchingOptions("d|||]TIQ0%R!|}");
      MockFile mockFile0 = new MockFile("gA[seY5us@Z50iS]7^");
      mockFile0.setReadable(true);
      mockFile0.setWritable(true, false);
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      helpFormatter0.printHelp("gA[seY5us@Z50iS]7^", "HtfHizDcN", options0, "Gr)/mi//s", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("]", ">O28S/u$CGL/1IwJ", options3, "", true);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      MockFile mockFile0 = new MockFile((File) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, 1127, "\n");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2034), options1, 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      PrintWriter printWriter0 = null;
      int int0 = 1372;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1372, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      helpFormatter0.printHelp("$", "org.apache.commons.cli.HelpFormatter$1", options1, "$", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "", "", options0, (-2961), (-1), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      MockFile mockFile0 = new MockFile((File) null, "");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 20, 20, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      Option option0 = new Option("$", "-");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-2), "%98\"^~x^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      helpFormatter0.printWrapped(printWriter0, (-1), 66, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 33, 66, "V9!Gj3<h./_ x*_S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-695);
      String string0 = "5\\[arKnIT^no";
      String string1 = "]";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-695), "5[arKnIT^no", "]", (Options) null, "5[arKnIT^no");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options1 = new Options();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      helpFormatter0.setDescPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, (-959), "");
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.rtrim("$");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-305), "{p9D=");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 22, (-346), "org.apache.commons.cli.Options");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(792, "-+d'8F08XP ;", "-+d'8F08XP ;", options1, "-+d'8F08XP ;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.rtrim(" ");
      helpFormatter1.setLongOptPrefix("%QPP*M%C");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      MockFile mockFile0 = new MockFile("--");
      mockFile0.setReadable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      helpFormatter0.printHelp("Gr)/mi//s", "$", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      int int0 = 3809;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3809, "{p9D=");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "[", "ahhb7#", options0, "{p9D=", false);
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-1816));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOptionGroups();
      helpFormatter0.printHelp("\n", "%98\"^~x^", options0, "", true);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 8, options1, 31, 31);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-1825));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      MockFile mockFile0 = new MockFile((File) null, "[ Options: [ short ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-2598), "[ Options: [ short ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 9, 0);
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      StringBuffer stringBuffer0 = new StringBuffer("]");
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 15);
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "{p9D=";
      stringBuffer0.insert(0, 2507.532);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-7), (-7), "{p9D=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter1, 1, options0, 1, 32);
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("PIl9StlvvK");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 9, 0);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setArgName("Whd'r,P}Y/3W33hs");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      Option option0 = new Option("$", "-");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.println((double) 74);
      mockPrintWriter0.append('U');
      helpFormatter0.printHelp("\":yHVjz", "\":yHVjz", options0, ">", true);
      helpFormatter0.rtrim("\":yHVjz");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      helpFormatter0.getSyntaxPrefix();
      options0.addOption(option0);
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1349, "");
      int int0 = 44;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 44, (Options) null, (-1722), (-1722));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 9, 0);
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "m9;Z{Sk-!gwwr`kJ");
      MockFile mockFile0 = new MockFile("$", "z6TU)");
      mockFile0.setReadable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      helpFormatter0.setLongOptPrefix("z6TU)");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setDescPadding(3809);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("hi>wI%M\"5E=\"P", "", (Options) null, "`lV2c\"p5cVgiM=", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('<');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      String string1 = "";
      stringWriter1.close();
      Option option0 = new Option("", false, "&kZ/NFw gZd");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2367, options1, 2367, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(25);
      int int0 = 3809;
      helpFormatter0.setDescPadding(3809);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 25, 3809, "{p9D=");
      helpFormatter0.getOptionComparator();
      String string0 = " ] [ long ";
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{6n_p8u=*je<'j/", "", (Options) null, "{6n_p8u=*je<'j/", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, (Options) null, 16, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      option0.setOptionalArg(true);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2034), options1, 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "\n";
      objectArray0[7] = (Object) "\n";
      mockPrintWriter0.printf("usage: ", objectArray0);
      int int0 = (-2623);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("]", "RFYrS<5;PGG5", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("");
      String string0 = " .";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("qe *tw%", " .");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  .
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("-");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = null;
      helpFormatter0.setLeftPadding(0);
      Options options0 = null;
      boolean boolean0 = false;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "zkc&19`~^h-q!";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-690), "", "gPmB+lfXEnmE~:vel", (Options) null, "zkc&19`~^h-q!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "<");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 2, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      Options options1 = options0.addOption("$", "usage: ", false, "usage: ");
      options1.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      Options options2 = options0.addOption("", false, "}p^h<suG");
      String string1 = ",f,V'";
      helpFormatter1.printHelp("-", "[", options2, ",f,V'", true);
      Option option0 = null;
      try {
        option0 = new Option("\n", "M7$`Rhk|V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "]");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "8ce\">tH");
      options1.addOption(option0);
      options1.getMatchingOptions("d|||]TIQ0%R!|}");
      MockFile mockFile0 = new MockFile("gA[seY5us@Z50iS]7^");
      mockFile0.setReadable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      helpFormatter0.printHelp("gA[seY5us@Z50iS]7^", "HtfHizDcN", options0, "Gr)/mi//s", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(">O28S/u$CGL/1IwJ", 3, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", true);
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      MockFile mockFile0 = new MockFile("$", "usage: ");
      mockFile0.setReadable(true);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2034), options1, 31, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "]");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "8ce\">tH");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 74, options1, 37, 74);
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 10, "-");
      helpFormatter1.renderOptions(stringBuffer1, 13, options1, 1, 13);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(49);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter2.getArgName();
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 4, (String) null, "-", options1, 63, (-2), "8ce\">tH", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "38Xf}JQwyITg1#>";
      helpFormatter0.defaultSyntaxPrefix = "38Xf}JQwyITg1#>";
      int int0 = 3;
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("arg", 0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      Options options0 = new Options();
      stringBuffer0.append("<r&[2");
      String string0 = null;
      Option option0 = new Option("zt", "`HE+sx5[uu=U", false, (String) null);
      String string1 = "";
      option0.setLongOpt("");
      Options options1 = options0.addOption(option0);
      Option option1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "`HE+sx5[uu=U", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("j,^", " ]", options0, "+Y6");
      helpFormatter0.setSyntaxPrefix("j,^");
      helpFormatter0.setArgName(" ]");
      String string0 = "qO?X9NhMyhfY";
      helpFormatter0.setNewLine("qO?X9NhMyhfY");
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      options0.addOption("", "W!!1+|n>~}jhMre", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      int int1 = 0;
      helpFormatter0.findWrapPos("", 9, 0);
      helpFormatter0.defaultLongOptPrefix = "$";
      String string0 = "%98\"^~x^";
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("$", "%98\"^~x^", options0, "", false);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "m9;Z{Sk-!gwwr`kJ");
      String string1 = "z6TU)";
      MockFile mockFile0 = new MockFile("$", "z6TU)");
      mockFile0.setReadable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      helpFormatter0.optionComparator = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "2By\"l", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Q_Q1-Gx[;", options0);
      helpFormatter0.setLongOptSeparator("Q_Q1-Gx[;");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("`");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "[ Options: [ short ", options0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setDescPadding(3);
      String string1 = "Rwf<&s";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("Rwf<&s", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Rwf<&s' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "$";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("$", "-");
      options0.addOption(option0);
      options0.getMatchingOptions("");
      helpFormatter0.printHelp("$", "", options0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\"');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.append('K');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "-", options0, (-4429), 375, "--", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = (-1949);
      String string0 = "MkZ9Z\"";
      helpFormatter0.setSyntaxPrefix("MkZ9Z\"");
      helpFormatter0.getArgName();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", 0, (-1949));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setDescPadding(3809);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3809, "{p9D=");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      int int0 = 3809;
      helpFormatter0.setDescPadding(3809);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3809, "{p9D=");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "}`90ouP2";
      int int0 = (-68);
      helpFormatter0.setWidth((-68));
      helpFormatter0.setOptPrefix("}`90ouP2");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-68));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-68), "}`90ouP2", "}`90ouP2", options0, "]v'8\"yIv,", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2367;
      String string0 = "'";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2367, "'", "'", (Options) null, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) charBuffer0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) charBuffer0;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      int int0 = 13;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("3{", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '3{' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
