/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:11:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-33);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t'}9!D4r-=", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "]";
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2487, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", true, "<");
      options1.getOptionGroups();
      helpFormatter0.printHelp((-1), "<", "<", options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "", options1, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "`&", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 238, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "vjv~`nTOeXj0/U]mF -");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(3, "-", "", options1, "\n", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(8, "6ItA!;]Y5@r'*/&(L", "6ItA!;]Y5@r'*/&(L", options0, "usage: ");
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "6ItA!;]Y5@r'*/&(L";
      objectArray0[6] = (Object) file0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 8, "' was specified but an option from this group ", "I", options0, 3, (-2025), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp(9, "usage: ", "N9.I]Tb.k", options0, "N9.I]Tb.k");
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 9, 9);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-410), ">)", "", options0, 9, (-410), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2009);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "Tc");
      Option option0 = new Option("4RL", "");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".", "usage: ", options3, "Y[", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1154), "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
          // Undeclared exception!
          helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "2");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2570, "@i6o", "@i6o", options0, "@i6o");
      helpFormatter0.rtrim(",}BU&l&v-Y");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "@i6o";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) ",}BU&l&v-Y";
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printOptions(printWriter0, (-87), options0, 1815, 4);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",}BU&l&v-Y", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      boolean boolean0 = false;
      helpFormatter0.printHelp((-1), "eHnAT(C1s", "y[7B", options1, ":gd%3C$", false);
      String string0 = "Y5\\)YF_=";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y5)YF_=");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1739, (-2227), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      options0.getMatchingOptions("The option '");
      int int0 = 817;
      helpFormatter0.renderOptions((StringBuffer) null, 6450, options0, 817, 817);
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, 6450, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(64, "l<v;u5hmAz&?ff[%h", "--", options0, "O7`xY+9Q3aj,KfI\"j");
      helpFormatter1.rtrim("E&9n~*pB*,J");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-87), "_Ohmw0$>K9RS.$8rV");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "--");
      Options options3 = options2.addOption((String) null, ")%S#l_MO}FG8[", false, "arg");
      helpFormatter0.printHelp("P\"l;e", "P\"l;e", options3, ")%S#l_MO}FG8[", true);
      Options options4 = new Options();
      options4.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2881, (String) null, options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "!_t8LtswUwh!\\ug5PM";
      options0.getOptions();
      helpFormatter0.printHelp(15, "8%:#Sm7S}B{voE==", string0, options0, "");
      helpFormatter0.setLeftPadding((-1516));
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "Z.rP,Y", "Z.rP,Y", options0, "[NL|?");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      int int0 = 1071;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      Object object3 = new Object();
      objectArray0[7] = object3;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-116), "1$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2130), "[ option: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('Z');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 0;
      int int1 = 2300;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 1, 2300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-4415));
      helpFormatter0.setArgName("%'?(h)xMPC");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(14, "y&~E wJ\"@dI#d.M_", "<", options1, "", false);
      helpFormatter1.setLeftPadding(2801);
      helpFormatter1.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(12);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 17, 10);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("s", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "CDt[");
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "arg", ">rU9[JHFVr)\".A8h", options0, (String) null, true);
      helpFormatter0.setLeftPadding(60);
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("@", "", true, "");
      Options options2 = options1.addOption("", true, "");
      options2.getOption("");
      options2.addOption("", "", true, "line.separator");
      helpFormatter0.printHelp(2, "\n", "\n", options2, "\n");
      helpFormatter0.setLeftPadding(1248);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", (String) null, options0, 3, 3, "Iw98^vS]`c3bKj|9", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 120, " ", (String) null, options0, 3, 74, "");
      helpFormatter1.setLeftPadding((-1323));
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "-", options0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("rv,g");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 543, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(13, "eHnAT(C1s", "", options1, " [ARG]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      helpFormatter1.printHelp(printWriter0, 41, " [ARG]", " [ARG]", options0, 41, 32, "arg");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      String string0 = "e\\^\"^";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("e^\"^", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("arg", "eHnAT(C1s", false, "--");
      options1.addOption(option0);
      helpFormatter0.printHelp(13, "eHnAT(C1s", "", options1, " [ARG]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(3, "--", "x(3}+FJ0SXY@|,ST=", options0, "\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ep,/M7Rc4j$_\"]m";
      helpFormatter0.defaultSyntaxPrefix = "ep,/M7Rc4j$_\"]m";
      helpFormatter0.defaultArgName = "ep,/M7Rc4j$_\"]m";
      helpFormatter0.setSyntaxPrefix("ep,/M7Rc4j$_\"]m");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      int int0 = (-734);
      helpFormatter0.setLeftPadding((-734));
      helpFormatter0.rtrim("k8@&T 6WiBu'dH,");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("nX{`nJAkh_DQe`8nWN", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "has already been selected: '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(110);
      helpFormatter1.findWrapPos("[[e/UHXT", (-2207), 0);
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "jA&yPl1mZ-ySH`*=O");
      option0.toString();
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) null, 1, "usage: ", (String) null, options0, 74, 2, "\n");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("HBi", false, "##49tq63P^");
      helpFormatter0.printHelp(14, "y[7B", "usage: ", options1, "##49tq63P^", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", (Object[]) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(printWriter0, (-1), "A CloneNotSupportedException was thrown: ", "f+@G9&`~0*oeu", options0, 101, 16, "f+@G9&`~0*oeu", false);
      helpFormatter0.getWidth();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), " :: ", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("HBi", false, "##49tq63P^");
      options1.addOption("", true, "\n");
      helpFormatter0.printHelp(550, "eHnAT(C1s", "HBi", options1, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter2.getDescPadding();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "od$CflR*~C3Jp2x[4#");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1124), "]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "'{H", "x(3}+FJ0SXY@|,ST=", options0, "\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2652, "[", "", options0, 64, 10, "", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'JjZkZqkwtp5");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3985;
      helpFormatter0.createPadding(3985);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int1 = 10;
      String string0 = "";
      String string1 = ".|uZlvQCnXM{j9";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string2 = ";{R,";
      StringBuffer stringBuffer0 = new StringBuffer("]");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 2, "arg");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "'JjZkZqkwtp5";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'JjZkZqkwtp5");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string1 = "N";
      options0.addOption("N", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("--", 74, (-2937));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 32, "usage: ", "\n", options0, 108, 250, (String) null, false);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('X');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      stringWriter1.close();
      Locale locale0 = Locale.forLanguageTag("A*\"M=.D)+i9ofZ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      Locale locale1 = new Locale("(cHm9=h!qS5,[(`{q%|");
      locale0.getDisplayScript(locale1);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1433;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", (Options) null, "N^>|)S_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(13, "eHnAT(C1s", "", options1, " [ARG]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(',');
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "-", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ] ? long^", "\n", options0, "-");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(13, "eHnAT(C1s", "", options1, " [ARG]", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "c(! nTPY>!/u$xuylC", "usage: ", options1, "|kUY x)Y", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, (String) null, options1, 3, 3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "'{H", "x(3}+FJ0SXY@|,ST=", options0, "\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2652, "usage: ", "", options0, 74, 17, "'{H", true);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'JjZkZqkwtp5");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("N", false, "arg");
      Option option0 = new Option("", false, "]");
      Options options2 = options1.addOption(option0);
      options2.addOption("", false, " ");
      helpFormatter0.printHelp(29, "WjDst}P'", "Ym", options2, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(74, "y[7V", "eHnAT(C1s", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[IG}3ZH0>NOo#+)");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2227), "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("._", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      options0.addOption((String) null, "--", true, "WCq_Z U:");
      File file0 = MockFile.createTempFile("JE+pT;6i&(:.Lv&s?@", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 764, (String) null, (String) null, options1, (-2557), 764, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "6#*8)H";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6#*8)H");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 120;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-431), (-431), "8$}wbs{\"?=OZ!c1kGr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 14, 14, "");
      stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-393), 967, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "");
      helpFormatter0.printHelp(29, "c}t*e;{/).dK]dbi", "", options0, "L}J\"y?BhQVC", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c}t*e;{/).dK]dbi");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "P[IG}3ZH0>NOo#+)", options0, 1, (-34), "3U 2<}~[i)pffGxD", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".f,P.J1JEG.G'08";
      int int0 = 0;
      helpFormatter0.findWrapPos(".f,P.J1JEG.G'08", 0, 0);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("HBi", false, "##49tq63P^");
      helpFormatter0.printHelp(74, "y[7B", "-", options0, "##49tq63P^", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2487, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      String string0 = "UAZ9xt_3[Y.!Cy\\di.";
      Options options0 = new Options();
      Option option0 = new Option("$dO", "UAZ9xt_3[Y.!Cydi.");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "usage: ", "UAZ9xt_3[Y.!Cydi.", options3, (-1), (-2), "1?P}<lBjAkegHJ1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(74, "y[7B", "eHnAT(C1s", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[IG}3ZH0>NOo#+)");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2227), "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("HBi", false, "##49tq63P^");
      int int0 = 74;
      boolean boolean0 = false;
      String string0 = "(jq]H24rxTqTA";
      helpFormatter0.printHelp(14, "y[7B", "(jq]H24rxTqTA", options1, "##49tq63P^", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1433, " ", "y[7B", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(74, "y[7B", "eHnAT(C1s", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[IG}3ZH0>NOo#+)");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "line.separator", "eHnAT(C1s", options1, (-2090), 74, "eHnAT(C1s", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp((-1), "Kl%N|!(_g'", "", options0, "");
      int int0 = 304;
      helpFormatter0.createPadding(304);
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      Options options1 = new Options();
      String string0 = "";
      Options options2 = options1.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      String string1 = null;
      boolean boolean0 = true;
      String string2 = "";
      helpFormatter0.printHelp("tgl>Xd$4}E#-&<0I", "\"", options3, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(304);
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "v&n.Agw6t^Hm";
      helpFormatter0.printHelp("                                                                                                                                                                                                                                                                                                                ", (String) null, options0, (String) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("v&n.Agw6t^Hm", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v&n.Agw6t^Hm' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 613, "Wn", "Wn", options0, 613, 613, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      options0.getOptionGroups();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options2 = options1.addOption("", "arg", false, "y-hXt[7B");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "-", "", options2, (-1168), (-1168), "y-hXt[7B", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = 74;
      String string0 = "eHnAT(C1s";
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "eHnAT(C1s", options1, "eHnAT(C1s", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2696), "y[7B", "-", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "vjv~`nTOeXj0/U]mF -");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(3, "-", "", options1, "\n", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1281, "", " :: ", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3650), "y[7B", " ", options1, "y[7B", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", false, "--");
      options0.addOption("", "-", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-2680), "2_H", "", options1, (-2090), 117, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 35;
      helpFormatter0.setWidth(35);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.close();
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 35, 1901, "-");
      mockFileOutputStream0.release();
      helpFormatter0.setDescPadding((-1));
      mockPrintWriter0.print(true);
      mockFileOutputStream0.release();
      String string0 = "u8)i";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        options0.addOption("u8)i", "org.apache.commons.cli.Option", false, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'u8)i' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ", ", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "S&b7f4^mL#", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(304);
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      StringBuffer stringBuffer0 = new StringBuffer(34);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3126, options2, 115, 20);
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 1817, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintStream0.println('T');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "                                                                                                                                                                                                                                                                                                                ", "", options0, 0, (-2090), ">\"&", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      Options options0 = new Options();
      options0.hasLongOption("g~@7fcv>-g7#dK<3cw");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "usage: ", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultNewLine = "\n";
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLeftPadding(64);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.close();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1233, 0, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.findWrapPos("", 34, 34);
      helpFormatter0.rtrim("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding((-547));
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.findWrapPos(" XV\"9sT*AtMV", 3, 10);
      int int0 = 45;
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      Option option0 = new Option("", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "", false, "");
      // Undeclared exception!
      try { 
        options2.addOption("o~", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'o~' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\"", "+^R:RoT\"8H[X+aB", options0, "org.apache.commons.cli.ParseException", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      Options options0 = new Options();
      options0.hasLongOption("g~@7fcv>-g7#dK<3cw");
      helpFormatter0.printHelp(959, "usage: ", "usage: ", options0, "SX!No) gPm", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultNewLine = "\n";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "ow5(_24QW.|-r,");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(304);
      String string0 = "qF#JA$J<G^Smv";
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      String string1 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = null;
      String string3 = "\"";
      String string4 = "";
      helpFormatter0.printHelp("tgl>Xd$4}E#-&<0I", "\"", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.close();
      mockFileOutputStream0.flush();
      mockFileOutputStream0.release();
      int int0 = (-1);
      helpFormatter0.setDescPadding(1608);
      mockFileOutputStream0.release();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("JS2");
      helpFormatter1.printHelp("arg", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-576), 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      Options options0 = new Options();
      int int0 = (-10);
      options0.hasShortOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-10), "g%x]Z~5eYs_HtQ", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ", ", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = (-347);
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "4L%m&}-Ver+/");
      helpFormatter0.setOptPrefix("");
      int int1 = (-3955);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-347), options2, (-3955), 3667);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLeftPadding();
      Options options2 = options1.addOption("", "--", false, "cmdLineSyntax not provided");
      Options options3 = options2.addOption("", false, "--");
      helpFormatter0.renderOptions(stringBuffer0, 34, options3, 35, 10);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultNewLine = "--";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "ow5(_24QW.|-r,");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ")'";
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("y^zLz--.", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultDescPad = 13;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = new Locale("tKMYH}?%4W!} ^8", "7gUR6~3");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-81);
      objectArray0[1] = (Object) "tKMYH}?%4W!} ^8";
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "tKMYH}?%4W!} ^8";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) comparator1;
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "@8xwKSS`", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (int) (byte) (-81), (int) (byte) (-81), "7gUR6~3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Wk>gp. )4-B)t$", options0, true);
      Options options1 = options0.addOption((String) null, true, "arg");
      Option option0 = new Option("arg", "--", false, "-");
      Options options2 = options1.addOption(option0);
      int int0 = 1242;
      int int1 = 3;
      helpFormatter0.setDescPadding(3);
      String string0 = "{DzT6ji:eg<B";
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected(option0);
      String string1 = "]";
      // Undeclared exception!
      try { 
        options2.addOption("]", "[", true, "7jo=na");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(304);
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string0 = null;
      String string1 = "";
      helpFormatter0.printHelp("tgl>Xd$4}E#-&<0I", "\"", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = null;
      String string0 = "(<xp/pZ-";
      String string1 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "j?-u=", (Options) null, "`7|ycOqBkNo:?", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      mockFileOutputStream0.close();
      mockFileOutputStream0.flush();
      mockFileOutputStream0.release();
      helpFormatter0.setDescPadding((-1));
      mockFileOutputStream0.release();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("v`wE2E:X:uB");
      // Undeclared exception!
      helpFormatter0.printHelp("arg", options0, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, (-1367), options0, 0, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1367), (String) null, "\n", options0, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1, options1, 74, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setSyntaxPrefix("b[@Q$N7*RSn/l<;");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--", 0, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
      charArray0[7] = '+';
      charArray0[8] = '+';
      stringWriter1.write(charArray0);
      helpFormatter0.defaultSyntaxPrefix = "V~o:UTbo]5_e-";
      stringWriter0.append('i');
      StringWriter stringWriter2 = stringWriter1.append('+');
      stringWriter2.append('t');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2262, (-2058), " ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("B# L``jJv =El", (-2058), 2900);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-16);
      helpFormatter0.setWidth((-16));
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      mockFileOutputStream0.close();
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-16), 1901, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1433, "", "]", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.close();
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1901, "-");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp(29, "--", "   ", options1, "RwD U@g[nB:d_US/?", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      int int0 = (-1988);
      int int1 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      String string1 = "=iSj$H9l";
      Locale locale0 = new Locale("_iAv'{\"TV?D,", "=iSj$H9l", "--");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "_iAv'{\"TV?D,";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) comparator0;
      objectArray0[7] = (Object) mockPrintWriter1;
      mockPrintWriter1.printf(locale0, " ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2405;
      helpFormatter0.setLeftPadding(2405);
      String string0 = "\"R6a";
      String string1 = ")F";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, ")F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2706;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2706, 499, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      Locale locale0 = Locale.CANADA_FRENCH;
      mockPrintWriter0.println((-1491));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.println(objectArray0[0]);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      int int0 = 322;
      helpFormatter0.printUsage(printWriter0, 322, " [ARG]");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      String string0 = "ip`Ob~/{&64JAg";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("ip`Ob~/{&64JAg", "", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ip`Ob~/{&64JAg' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "voDA<6-@2";
      Options options0 = null;
      String string1 = "(<xp/pZ-";
      helpFormatter0.defaultNewLine = "j?-u=";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("j?-u=", "voDA<6-@2", (Options) null, "(<xp/pZ-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("^m0?gr=Gf6r!9>W");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("^m0?gr=Gf6r!9>W");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      Locale locale0 = Locale.JAPANESE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArrayOutputStream0.write(byteArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "NVkfo(OL.z", (Object[]) null);
      locale0.stripExtensions();
      helpFormatter0.printWrapped(printWriter0, 44, "NVkfo(OL.z");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1728));
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "hst_ydw];", true, " ");
      String string1 = "\\xNS";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("\n", true, "/M\"&c_aB2Z6R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1433, "Wk>gp. )4-B)t$", "Wk>gp. )4-B)t$", (Options) null, "Wk>gp. )4-B)t$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X?");
      int int0 = 647;
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("|fOGiZqdD5,H(cKM", "", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|fOGiZqdD5,H(cKM' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.helpOptions();
      String string0 = "-v";
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1367), options0, (-1367), (-1367));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 304;
      helpFormatter0.createPadding(304);
      String string0 = "qF#JA$J<G^Smv";
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      String string1 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string2 = null;
      boolean boolean0 = true;
      String string3 = "usage: ";
      boolean boolean1 = false;
      String string4 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = ",:e}-bJ,tjm)vX";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", true, "");
      Options options2 = options1.addOption("", "arg", false, "y[7B");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "", options2, (-1168), (-1168), "y[7B", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 613, 613, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setSyntaxPrefix("b[@Q$N7*RSn/l<;");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--", 0, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = '+';
      charArray0[7] = '+';
      charArray0[8] = '+';
      stringWriter1.write(charArray0);
      helpFormatter0.defaultSyntaxPrefix = "V~o:UTbo]5_e-";
      stringWriter0.append('i');
      StringWriter stringWriter2 = stringWriter1.append('+');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2262, (-2058), " ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("j}]>0>e\"d88L");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(304);
      helpFormatter0.setLongOptSeparator("qF#JA$J<G^Smv");
      Options options0 = new Options();
      options0.addOption((String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, true, "azGI~}@");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-2), 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      mockFileOutputStream0.close();
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1901, "\n");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "<");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "4L%m&}-Ver+/");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-347), options2, (-3955), 3667);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
