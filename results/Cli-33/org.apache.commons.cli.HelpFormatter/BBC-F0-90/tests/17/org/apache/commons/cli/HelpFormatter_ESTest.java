/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:09:52 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("\n", 1, (-2115));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options1 = options0.addOption("", "-", false, " ");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 1, options1, 3359, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      String string1 = "1";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("1", "1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "Y";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string1 = "IAl(am& 4(5m$o1i";
      Options options0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "Y", (String) null, (Options) null, 0, 63, "Y");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(971);
      helpFormatter0.findWrapPos("", 971, 971);
      helpFormatter0.defaultNewLine = "bckxK\"^fc^&lI8Vei";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "[ARG...]");
      Options options2 = options1.addOption((String) null, "*", true, "--");
      helpFormatter0.printHelp("[ARG...]", "*", options2, "--", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("vy+|");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-2096), options1, 26, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "arg", "\n", options0, "\n");
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1453), "TMFcF/66nQ\";9m`>Vj*", "TMFcF/66nQ\";9m`>Vj*", options0, 2153, 6, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3255), (-2363), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "usage: ", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "ha$bRe#jN";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(3, "sBI|L", "usage: ", (Options) null, "=bt4}mHSR:q4(;%Z", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("", "--", true, "\n");
      helpFormatter0.printHelp("NO_ARG7_ALLOWED", "arg", options1, "arg", true);
      helpFormatter0.findWrapPos("", 537, 1732);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 537, options0, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "arg", "\n", options0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter0.printOptions(mockPrintWriter0, 111, options0, 111, 111);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, "pT", "-", options0, 0, 899, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(518);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-529), "I");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-4379);
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "$++ D:gwy.7JMon", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "&$S*uh`]p[1<A~A[", "BhakzbO!6YioJaa", options0, "z`[3[Va");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&$S*uh`]p[1<A~A[", 3, 3);
      StringWriter stringWriter2 = stringWriter1.append('c');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 4764, options0, 4764, 25);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1230, "A}6Ni]SpO!7&)P=j{m", "Illegal option name '", options0, 79, 1, "F", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "\n");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "\n");
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 101, "", options3);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MIN/LQVY9#M";
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 599;
      helpFormatter0.renderWrappedText(stringBuffer0, 599, 63, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "[ option: ";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "[ option: ";
      objectArray0[4] = (Object) "[ option: ";
      // Undeclared exception!
      try { 
        mockPrintWriter0.format(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(696, (String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "[ARG...]");
      Options options2 = options1.addOption((String) null, "*", true, (String) null);
      helpFormatter0.printHelp("[ARG...]", "_{>[C7t{0ql3@", options2, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", (String) null, options2, "v(Q`Mzg\"pLph");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("O1", "O1", (Options) null, "vq}O+/:N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 114, "");
      helpFormatter0.findWrapPos("\n", 1, (-2093));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "[ option: ", (String) null, options0, "org.apache.commons.cli.Util");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 10, "\n", "-", options0, (-2508), 1, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-124));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      int int0 = helpFormatter0.defaultDescPad;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1298), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp("<hMIHC/", "KNCAVgfuTB{5WFYz", options1, "", false);
      Option option0 = new Option("", "usage: ", false, "--");
      options0.addOption(option0);
      helpFormatter0.printHelp(13, "mTn$)QtR,BhiDa", "org.apache.commons.cli.OptionGroup", options1, "RB@J/");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "arg", "", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "MIN/LQVY9#M";
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        options0.addOption(" ", (String) null, false, "MIN/LQVY9#M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("6j2l!RL", "org.apache.commons.cli.Option");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "6j2l!RL";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "yN(IN/LQVY9#M";
      objectArray0[6] = (Object) "yN(IN/LQVY9#M";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, (String) null, "", options0, 4, 0, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 59, options1, 55, 31);
      helpFormatter0.renderOptions(stringBuffer1, 31, options1, 55, 31);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printHelp(35, "lSVh7a9j+'6$b75 U", "", options0, "[ Options: [ short ");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('G');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1613), "", "[ Options: [ short ", options0, (-1613), 35, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, "--", false, "u");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("--");
      helpFormatter1.printHelp("u", (String) null, options1, "\"cWp#,Ca+Ff&b841un", false);
      String string0 = helpFormatter1.defaultLongOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter1.renderWrappedText(stringBuffer0, 2782, (-1530), "");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "NO_ARGS_-LLOWED";
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("9('<667[&S6}?<", "N]0VZG5");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter1.printHelp(printWriter0, 74, "ZzVGQ?7BfF}6_}ZY!W", "", options0, 116, 116, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        options0.addOption("Z%", "--", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z%' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = 'P';
      charArray0[2] = '7';
      charArray0[3] = 'o';
      charArray0[4] = 'c';
      charArray0[5] = 'n';
      charArray0[6] = 'x';
      charArray0[7] = 'v';
      charArray0[8] = 'i';
      mockPrintWriter0.print(charArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "5|l-rBM^8#,", "5|l-rBM^8#,", options0, 1, 445, "=N95Waa", false);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "KNCAVgfuTB{5WFYz", "KNCAVgfuTB{5WFYz", options0, " _");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "C9r&EH", (String) null, options0, 10, 10, "%B0&wJK2x]<:gD", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 26, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "--", true, "\n");
      helpFormatter0.printHelp("arg", "", options1, "", true);
      helpFormatter0.printHelp(3, "\n", "", options1, "NO_ARGS_-LLOWED");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "--", true, "\n");
      helpFormatter0.printHelp("usage: ", "arg", options0, "i@>pPj", false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\n", "-", options2, "--");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "line.separator");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options0, 3, 44, "", true);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "*?r$+)nlYP");
      optionGroup0.setSelected(option0);
      Options options3 = options2.addOption("arg", true, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "-", options3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "MIN/LQVY9#M");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 15;
      Options options0 = new Options();
      String string0 = "Nuxddr'X;+-r#1,j6o";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nuxddr'X;+-r#1,j6o");
      int int1 = 273;
      helpFormatter0.renderOptions((StringBuffer) null, 15, options0, 273, 273);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "line.separator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      Options options2 = options1.addOption((String) null, true, "--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 18, "@A*:A!'QDWfq)3Qzc", options2);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, 790, (-709), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "org.apache.commons.cli.HelpFormatter", "--", options0, "wixhQRQj2@|),b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2219), "'", "%B0&wJK2x]<:gD", options0, 63, (-2219), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      int int0 = 1891;
      StringWriter stringWriter0 = new StringWriter(1891);
      StringWriter stringWriter1 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int1 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2824), 63, "*AEH>K:rgC");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "line.separator");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "-", options2);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 81, "D>*fsn|)%?`K}$6'Py#", "'J$6cr", options0, 81, 1, "NuU#6r^\",`a:o\"0gL]", true);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-741), options3, (-741), 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "--", true, "\n");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "usage: ", options1, " ", false);
      helpFormatter1.findWrapPos("CfT1bM", 1, 2);
      helpFormatter0.printHelp("CfT1bM", "", options0, " ", true);
      helpFormatter1.findWrapPos("usage: ", (-1), 3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(" ]", " ]", options1, " ]", false);
      helpFormatter0.setDescPadding((-2797));
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byte byte0 = (byte)114;
      byteArray0[1] = (byte)114;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("&@kUG_", "oyZk?0Ps");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 4913;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4913, "&@kUG_", "&@kUG_", options0, 4913, (-4493), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "KNCAVgfuTB{5WFYz", "KNCAVgfuTB{5WFYz", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "C9r&EH", (String) null, options0, 10, 10, "%B0&wJK2x]<:gD", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "line.separator");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 13, 4);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "line.separator");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "-", "`5", options0, "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2656, 7, "`5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (String) null, options2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "line.separator");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "-", options2);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 81, "D>*fsn|)%?`K}$6'Py#", "'J$6cr", options0, 81, 13, "NuU#6r^\",`a:o\"0gL]", true);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "--", "", options0, "[");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " [ARG]";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1933, "K<");
      helpFormatter0.findWrapPos("K<", (-2745), (-2745));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ Options: [ short ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName("{B9P$@mKVd<]");
      Option option0 = new Option("CwN3PLRR", "kZm");
      options0.getMatchingOptions("K(1=33b4I");
      Options options1 = options0.addOption(option0);
      options1.getOption(" ");
      helpFormatter0.setDescPadding(0);
      options0.hasOption("{B9P$@mKVd<]");
      helpFormatter0.printHelp("'=H<*[45+\"2", options1);
      helpFormatter0.printHelp((-1), "CwN3PLRR", "CwN3PLRR", options0, "CwN3PLRR");
      helpFormatter0.printHelp("[ Options: [ short ", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("'=H<*[45+\"2");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.findWrapPos(">F-'EU!x2O]$+!rGa:?", 13, 13);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 44, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator("usage:");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      Options options1 = new Options();
      helpFormatter0.printHelp("nl!y9", "", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nl!y9");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2874), "usage:", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-15), "EuUJG/5@{krnT", "EuUJG/5@{krnT", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator("usage:");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      Options options1 = new Options();
      helpFormatter0.printHelp("nl!y9", "", options0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("nl!y9");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "--");
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 3362, options0, 9, (-3115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      helpFormatter0.printHelp(1126, "XrNQz@Bi*DWH9R", (String) null, options1, "Jy/?Pyd|kbYwAO");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(">", "mn)5Pku]PN>I,=v", options1, ">", true);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3457, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ Options: [ short ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.setArgName("{B9P$@mKVd<]");
      Option option0 = new Option("CwN3PLRR", "kZm");
      options0.getMatchingOptions("K(1=33b4I");
      helpFormatter0.findWrapPos("CwN3PLRR", 0, 0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      options0.toString();
      options0.toString();
      helpFormatter0.printHelp(3362, " ", "The option '", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "*:&");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      helpFormatter0.printHelp("The option '", options0);
      helpFormatter0.setDescPadding(3362);
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("The option '", options1);
      helpFormatter0.setLongOptSeparator(" :: ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println("--");
      mockPrintWriter0.flush();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ Options: [ short ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("'=H<*[45+\"2", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("MIN/LQVY9#M");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding((-297));
      helpFormatter0.setArgName(" ]");
      File file0 = MockFile.createTempFile("K}R5z&4UIk", "K}R5z&4UIk");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-3033), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1564);
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8U4.h~D;pA)tQWsd", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      options0.toString();
      options0.toString();
      helpFormatter0.printHelp(3362, " ", "The option '", options0, " ");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 0, "oB#ps|Zuo8,jy7&)(");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The option '", "3&~w]JN\"_Y,$(tf~", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator("usage:");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      Options options1 = new Options();
      helpFormatter0.printHelp("nl!y9", "", options0, "");
      String string0 = "--";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.setLongOptSeparator("\n");
      Options options0 = new Options();
      options0.getMatchingOptions("<");
      options0.getOptions();
      options0.toString();
      options0.toString();
      helpFormatter0.printHelp(99, ">", "f-/d", options0, "[ Options: [ short java.util.HashMap@0000000006 ] [ long {} ]");
      helpFormatter1.printHelp(99, ")cUl1Zc", "M26{Iz=Y4q/`\"4V", options0, "M26{Iz=Y4q/`\"4V");
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.setWidth(0);
      helpFormatter1.printHelp(607, "cmdLineSyntax not provided", ")cUl1Zc", options0, ")cUl1Zc", false);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ Options: [ short ");
      helpFormatter0.setLongOptSeparator("");
      String string0 = "'=H<*[45+\"2";
      Options options0 = new Options();
      helpFormatter0.setArgName("{B9P$@mKVd<]");
      Option option0 = new Option("CwN3PLRR", "kZm");
      options0.getMatchingOptions("K(1=33b4I");
      Options options1 = options0.addOption(option0);
      options1.getOption(" ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.printHelp("'=H<*[45+\"2", options1);
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "gS$u#7qkxzRu+d";
      helpFormatter0.setOptPrefix("gS$u#7qkxzRu+d");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(3);
      helpFormatter0.setArgName("gS$u#7qkxzRu+d");
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.print(3694.66F);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println("--");
      mockPrintWriter0.flush();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3457, 3457, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 0;
      String string0 = "";
      String string1 = "?M8\\l";
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("?M8l", "?M8l", options0, "");
      // Undeclared exception!
      try { 
        options0.addOption("--", "--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Q";
      helpFormatter0.rtrim("Q");
      int int0 = (-2036);
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.hasShortOption("}VaAP1]TJ");
      String string2 = null;
      // Undeclared exception!
      try { 
        options0.addOption("--", "arg", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "arg", options0, "arg");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter1.printWrapped(printWriter0, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "0sK<YN6", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix("/gZ@$_c5");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "/gZ@$_c5", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3457, 3457, "-");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 9;
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 9, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3362;
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.defaultWidth = 3362;
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Options");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultDescPad = 3362;
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      options0.getMatchingOptions("org.apache.commons.cli.Options");
      options0.getOptions();
      options0.toString();
      options0.toString();
      helpFormatter0.printHelp(3362, " ", "The option '", options0, " ");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The option '", "3&~w]JN\"_Y,$(tf~", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2996), "rI.F,C", "rI.F,C", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-124));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1495));
      Options options0 = new Options();
      Options options1 = options0.addOption("", "ts\"6u0`P<F<(ch56", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1495), ".h |", "4'`a [<Buq eq<", options1, "ts\"6u0`P<F<(ch56", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("`yh1EJOdl-Y [>$F");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("`yh1EJOdl-Y [>$F");
      int int0 = 728;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option(", ", false, "`yh1EJOdl-Y [>$F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ', ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("cmdLineSyntax not provided");
      helpFormatter0.getDescPadding();
      String string0 = "   ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("}O.\"bNyp.!R`1{", "   ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //    
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "";
      helpFormatter0.findWrapPos("", (-445), 0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-445));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp(0, "MIN/LQVY9#M", "MIN/LQVY9#M", options0, "MIN/LQVY9#M");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ Options: [ short ";
      helpFormatter0.setNewLine("[ Options: [ short ");
      helpFormatter0.setLongOptSeparator("");
      String string1 = "'=H<*[45+\"2";
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setArgName("{B9P$@mKVd<]");
      Option option0 = new Option("CwN3PLRR", "kZm");
      options0.getMatchingOptions("K(1=33b4I");
      Options options1 = options0.addOption(option0);
      options1.getOption(" ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.printHelp("'=H<*[45+\"2", options1);
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "CwN3PLRR", "CwN3PLRR", options0, "CwN3PLRR");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nMw;K7P4GR~C=bb;.";
      helpFormatter0.setSyntaxPrefix("nMw;K7P4GR~C=bb;.");
      String string1 = "8=,r-~4 c[3?sG.";
      helpFormatter0.setArgName("8=,r-~4 c[3?sG.");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "nMw;K7P4GR~C=bb;.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1863;
      helpFormatter0.setLeftPadding(1863);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      int int0 = (-1301);
      helpFormatter0.setLeftPadding((-1301));
      String string1 = "oR=EY4*";
      helpFormatter0.setNewLine("oR=EY4*");
      String string2 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "y}[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = helpFormatter0.getDescPadding();
      assertEquals(3, int0);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 0;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
