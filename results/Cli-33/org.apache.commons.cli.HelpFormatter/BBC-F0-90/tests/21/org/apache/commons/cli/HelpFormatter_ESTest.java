/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:10:56 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.printHelp(380, "Cannot add value, list full.", "Cannot add value, list full.", options0, "Cannot add value, list full.");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultLeftPad = (-2220);
      helpFormatter0.optionComparator = comparator0;
      String string0 = " ]";
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ]");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter");
      option0.setType("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter";
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ]", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1813;
      helpFormatter0.setWidth(1813);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      stringBuffer0.append("");
      int int1 = 102;
      int int2 = 964;
      helpFormatter0.renderWrappedText(stringBuffer0, 102, 964, "lbMaWIH");
      Options options0 = new Options();
      String string0 = ">m";
      // Undeclared exception!
      try { 
        options0.addOption(">m", false, ")DtGl A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>m' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "F*Til}@h&;7md~KMET";
      int int0 = 28;
      String string1 = null;
      String string2 = "dYPA(QH/hbdv-dQq";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 114, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-924);
      String string0 = "A CloneNotSupportedException was thrown: ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.checkError();
      mockPrintStream0.println(':');
      mockPrintStream0.print(true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 114, (-1646), "A CloneNotSupportedException was thrown: ");
      helpFormatter0.setDescPadding((-924));
      helpFormatter0.getDescPadding();
      String string1 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A CloneNotSupportedException was thrown: ");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      option0.setArgName("\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "Wr~%", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("r^3");
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      Option option0 = new Option("arg", "<");
      helpFormatter0.getLongOptPrefix();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("r^3", "r^3", options1, "<");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "V@A+dyn*\\u%<o9?M'";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1455), "", "", options0, (-1455), (-1455), string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(55);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1621), options1, 55, 25);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "");
      option0.setArgName("");
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(75, "arg", "KD87BAGt$Z", options0, "", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      option0.setArgName("\n");
      optionGroup0.addOption(option0);
      options0.getMatchingOptions("arg");
      Option option1 = new Option((String) null, "KD87BAGt$Z", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp(13, "KWkuh>sUkEh%EO*zr", "KD87BAGt$Z", options1, "", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      option0.setArgName("\n");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "KD87BAGt$Z", true, "arg");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.ROOT;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "<ei6|1]!&!x0wO", "", options1, "arg");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((int) (byte) (-48), "?x1jSt,a=k{8J/9A+", "", options0, "?x1jSt,a=k{8J/9A+", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Yg.IbM7b>!1", "Yg.IbM7b>!1", options0, "Yg.IbM7b>!1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1027);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "U2p3@I", "M%E0|%6", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 64;
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      String string0 = "Z&hjh:";
      int int1 = 44;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-20), options0, 44, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "KD87BO/t1$Z";
      Option option0 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "[";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 1220, 10);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = " | ";
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3805, " :: ", " | ", (Options) null, " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      Locale locale0 = Locale.GERMANY;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) optionGroup1;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-5708), options0, (-2), 44);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("h'I/ND");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 83;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2646), "2Rp*5fos2G?d#t", "org.apache.commons.cli.AlreadySelectedException", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("7m{ktw?udP[V+");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("7m{ktw?udP[V+", "\n", (Options) null, "7m{ktw?udP[V+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("fNn{Qw\"gLU", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = null;
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1382, "aNCmhVLA", (String) null, options0, 1, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(675);
      helpFormatter0.createPadding(48);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-648), "<4AV HhSp", "has already been selected: '", (Options) null, (-983), (-2093), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string1 = "[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      String string2 = "Z&hjh:";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) options0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-322), options2, 44, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "Z&hjh:";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Z&hjh:", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "[", options2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("7m{ktw?udP[V+");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Locale locale0 = new Locale("", "RKh(a+N", "-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "gqEIc9y", "8;~mm(", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&gVC.rY0v3[(=U3", "&gVC.rY0v3[(=U3", options0, "&gVC.rY0v3[(=U3");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("&gVC.rY0v3[(=U3", "", options0, "Ax:n`_;oc;t$u})J");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 29);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-598), 796, "Ee!7H F@Vgi3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "Z&hjh:";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Z&hjh:", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "[", options2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      String string0 = "usage: ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "usage: ";
      options0.getOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((int) (byte)0, "usage: ", "C/W.", options0, "org.apache.commons.cli.OptionGroup", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = null;
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "aNCmhVLA", (String) null, options0, 1, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(48, "line.separator", " ", options0, "line.separator", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(dataOutputStream0, false, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "vmm*b{otj[gA2b>);");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "{9d_s", "org.apache.commons.cli.HelpFormatter", options0, 3, 19, "ej~jNyik0d", false);
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 2888);
      helpFormatter0.renderOptions((StringBuffer) null, 46, options0, 2888, 13);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      Options options2 = options1.addOption("arg", "arg", true, " ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "arg";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1750, "-", options2);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 1750, options1, 105, 10);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      helpFormatter1.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("T(G<!MP^K&I-", options0, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = new Locale("arg", "line.separator", ">W}D#a/wm;R");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "xCu]", "';5)}", options0, 2, 32, "", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(104);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "--", "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 382, ")Hii'r{>", (String) null, options0, 108, 104, "';5)}", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, " ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 46, "!2Km'*F0", "", options0, 10, 2462, "!2Km'*F0");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 168, "!2Km'*F0", "&>t?", options0, 882, 106, "&>t?", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      Options options2 = options1.addOption("arg", "arg", true, " ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "arg";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1750, "-", options2);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "", "' was specified but an option from this group ", options1, 1, 115, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("&gVC.rY0v3[(=U3", "&gVC.rY0v3[(=U3", options0, "&gVC.rY0v3[(=U3");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("&gVC.rY0v3[(=U3", "", options0, "Ax:n`_;oc;t$u})J");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      options0.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("KD87BO/t1$Z", (byte)3, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      boolean boolean0 = false;
      mockPrintWriter0.println(false);
      int int0 = 74;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 74, "gNu^");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      String string0 = "[";
      helpFormatter0.rtrim("[");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = (-1);
      Options options0 = new Options();
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = '?';
      charArray0[2] = 'H';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "c( k|I&mD3K7zm]G", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "ej~jNyi~k0d", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "ej~jNyi~k0d", "org.apache.commons.cli.HelpFormatter", options0, 126, 19, "xCu]", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1396), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      locale0.clone();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.findWrapPos("Illegal option name '", 0, 2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4631, (String) null, options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 121, "\n", "arg", options0, 74, 74, "-", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-238));
      Options options0 = new Options();
      options0.hasLongOption("--");
      options0.getOptionGroups();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Iri", "", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      options0.getOptionGroups();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(351);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = new Locale("xCu]", " ", "-");
      Locale locale1 = Locale.ROOT;
      Object object0 = new Object();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, 104, 351, "", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp(1502, "Q5", "", options0, "Q5");
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(2003);
      helpFormatter0.setSyntaxPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(936, "", "'}aP;", options0, "^xintvLPa$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Xs[K-H|z}J", "Xs[K-H|z}J", options0, (String) null, true);
      helpFormatter0.setWidth((-2017));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.setDescPadding(1);
      helpFormatter0.setOptPrefix("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.setLeftPadding(1516);
      helpFormatter0.setSyntaxPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-993), "5\"*JAi?R2/n=", "--", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = null;
      String string0 = "';5)}";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("tOs1h", true, "--");
      Option option0 = new Option("arg", " ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "usage: ", false, "");
      helpFormatter0.printHelp("';5)}", "';5)}", options4, "", true);
      String string1 = "Xs[K-H|z}J";
      Options options5 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option1 = new Option("", "", true, (String) null);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.toString();
      Options options6 = options5.addOption((String) null, true, "]c{1#4>#x");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "';5)}", "Xs[K-H|z}J", options6, "Xs[K-H|z}J");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Iri", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("arg");
      helpFormatter2.setDescPadding(74);
      helpFormatter1.defaultSyntaxPrefix = "";
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter2.setLeftPadding(1);
      helpFormatter2.setSyntaxPrefix("ifndE=;j5,Yf1");
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "c%$Xm]?o";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.GERMANY;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Options options2 = options1.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 17, 17, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(true);
      helpFormatter0.printHelp(1502, "Q5", "", options0, "Q5");
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.printf("arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      Options options1 = new Options();
      mockPrintWriter1.printf("arg", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 928, "]Jbu^/e`GK", "", options1, 1502, (-2452), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Locale locale1 = Locale.FRENCH;
      locale1.clone();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 415, "", "@*r;:XR& v", options0, (-977), 3, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ]");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter");
      option0.setType("org.apache.commons.cli.HelpFormatter");
      Locale locale0 = new Locale("arg", " ]", "org.apache.commons.cli.HelpFormatter");
      StringWriter stringWriter0 = new StringWriter(70);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) option0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "ej~jNyi~k0d";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " | ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 126, (String) null, "ej~jNyi~k0d", options0, (-1), 47, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      Options options2 = options1.addOption("arg", "arg", true, " ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "arg";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1750, "-", options2);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1665, (String) null, "", options0, 1, (-2), "`kO|(", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp(1502, "Q5", "", options0, "Q5");
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.printf("arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4907), "k", "", options0, (-4907), (-1939), "|CSV", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setWidth(2481);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.setDescPadding(13);
      helpFormatter0.setOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.setSyntaxPrefix(", ");
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "S_Z_YxC=j.UIB~CW V", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("X1!LT}L:YTd/[%`X");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " [ARG]";
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) null;
      mockPrintStream1.printf(" [ARG]", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2431, "q1sL#w<", "' was specified but an option from this group ", options0, 849, (-2), " [ARG]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "(y";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "JY;0[";
      objectArray0[6] = (Object) "";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter1.printf("K$'n''|ep4gv7", objectArray0);
      helpFormatter0.printHelp(printWriter0, (-1), "]Jbu^/e`GK", "(y", options0, 34, 928, "ej~jNyi~k0d", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 35, 35, "");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("xYAFB=+? :^Flr;{e\"");
      mockFile0.setExecutable(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-418);
      String string0 = "20F1:u(<Vb";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("20F1:u(<Vb", "9<'&aP(,{7+.Cdaxb", true, "9<'&aP(,{7+.Cdaxb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '20F1:u(<Vb' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-608));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "';5)}";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      options1.addOption((String) null, true, "]c{1#4>#x");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 69, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "Xs[K-H|z}J";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      options1.addOption((String) null, true, "]c{1#4>#x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string1 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "arg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      int int0 = 4631;
      helpFormatter0.printHelp(1502, "Q5", "", options0, "Q5");
      helpFormatter0.getArgName();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.findWrapPos("v{Cq1]La|^2#l;", (-1), 1502);
      MockFile mockFile0 = new MockFile("arg");
      try { 
        MockFile.createTempFile("arg", "v{Cq1]La|^2#l;", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(156);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("                                                                                                                                                            ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("arg", "arg", "x\"&9FRq#{j/V}");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "x\"&9FRq#{j/V}", objectArray0);
      helpFormatter0.printUsage(printWriter0, 156, "1+]6-O2\"n");
      helpFormatter0.createPadding(53);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "ej~jNyi~k0d", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "ej~jNyi~k0d", "org.apache.commons.cli.HelpFormatter", options0, 126, 19, "xCu]", true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[ Options: [ short ", options0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(2481);
      helpFormatter0.setNewLine("?!8o`5]MV(e*0B;A");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptPrefix("?!8o`5]MV(e*0B;A");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-423));
      helpFormatter0.setSyntaxPrefix("[ Options: [ short ");
      helpFormatter0.findWrapPos("?!8o`5]MV(e*0B;A", 0, 0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("[ Options: [ short ", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 730, 44);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1037);
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3771), 1037, "s/5w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "usage: ";
      Options options0 = new Options();
      int int0 = 31;
      String string1 = ")dvS0bd";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "usage: ", options0, ")dvS0bd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-6192);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "usage: ");
      String string2 = "/JnT=;";
      Option option0 = new Option("arg", "/JnT=;", false, "--");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.toString();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-6192), "", "", options3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write(44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9<U``X=+";
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasLongOption("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2300);
      String string1 = "kf";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2300), (-2300), "kf");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-816), "s/5w");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1378);
      String string0 = "8\"v%H]:t";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_.G{5^y");
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "8\"v%H]:t");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, " ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      option0.setArgName("\n");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "KD87BO/t1$Z", true, "arg");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-48);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.ROOT;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "<ei6|1]!&!x0wO", "", options1, "arg");
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Iri", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setNewLine("-");
      Option option0 = new Option((String) null, "usage: ", true, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(74, "arg", "-", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.hasShortOption("The option '");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      options2.addOption("", true, "aM");
      options1.hasOption("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1900, "aM", (String) null, options1, 2757, 44, (String) null, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "s/5w");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      Options options2 = options1.addOption("arg", "arg", true, " ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Option option0 = new Option("WCNd$", "   ");
      options2.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 1, "\n", "Rk:`k'`:Mr^rH", options1, 3, 1, "\n", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Option option0 = new Option("arg", true, " ]");
      option0.setLongOpt("org.apache.commons.cli.HelpFormatter");
      option0.setType("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter";
      options0.addOption(option0);
      helpFormatter0.printHelp(" ]", options0);
      int int0 = (-697);
      MockFile mockFile0 = new MockFile("Jd_DbY;[4'\"Tj");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      File file0 = MockFile.createTempFile("l,N]0,$PwIQpn0Pp!p", "", (File) mockFile1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " ]");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Iri", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "usage: ", true, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options1.getMatchingOptions("<");
      helpFormatter0.printHelp(93, "--", "NO_ARGS_ALLOWED", options2, "usage: ");
      helpFormatter2.getLongOptSeparator();
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, (-3351), "Iri");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "aM");
      options1.hasOption("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options3, 2757, 64);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "-");
      option0.setArgName("\n");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3000, "\n", "", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("[");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(19);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      Locale locale0 = new Locale("xCu]", "(y", "usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[";
      mockPrintWriter0.printf(locale0, "{9d_s", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "{9d_s", "org.apache.commons.cli.HelpFormatter", options0, 9, 19, "ej~jNyik0d", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2113), (Options) null, (-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-326);
      String string0 = "3--";
      String string1 = "*Bb#?6WI";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pl-6J752aCeXufQ<H");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "3--";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      mockPrintWriter0.println(58L);
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-326), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 415, 415, "");
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("O", "arg", false, " S:h");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options2.getMatchingOptions("-");
      helpFormatter1.printHelp((-1), "usage: ", "usage: ", options2, "arg");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "usage: ";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) mockFile0;
      PrintStream printStream0 = mockPrintStream0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.setDescPadding(1451);
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2364;
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1037);
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1037, " | ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-579), " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[ Options: [ short ", options0);
      helpFormatter0.setArgName((String) null);
      String string0 = "";
      helpFormatter0.setLongOptPrefix((String) null);
      String string1 = "arg";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      boolean boolean0 = true;
      mockPrintWriter0.println(true);
      int int0 = 420;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 420, "`jUoYV_&hgR:fe", options0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Iri", "", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setNewLine("-");
      helpFormatter1.setDescPadding((-371));
      helpFormatter1.setOptPrefix("-");
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.getLongOptPrefix();
      helpFormatter2.setLeftPadding(67);
      helpFormatter0.setSyntaxPrefix("--");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "r^3";
      helpFormatter0.setNewLine("r^3");
      helpFormatter0.setWidth(1213);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("Q5", "Q5", options0, "Q5", false);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println(false);
      int int0 = 4631;
      String string0 = null;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4631, (String) null, options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 2217, "");
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption(" S:h", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' S:h' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Yv eXKo|f]d|Q@;", true, "");
      Option option0 = new Option("arg", "K6uQ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2431, options4, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      helpFormatter0.setOptPrefix("");
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.write("[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('2');
      int int0 = (-51);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-51), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "';5)}";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      Options options2 = options1.addOption((String) null, true, "]c{1#4>#x");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "';5)}", "Xs[K-H|z}J", options2, "Xs[K-H|z}J");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "gyZX%>";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1427), "gyZX%>");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-4351), ", ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.createPadding(31);
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLeftPad = 31;
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("-", (-607), 10);
      helpFormatter0.setLeftPadding((-1453));
      helpFormatter0.setNewLine("-");
      helpFormatter0.getLongOptSeparator();
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("W-CGu", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'W-CGu' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("aN");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("aN", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 1;
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", true, "}[edtjx/!IxV/");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
