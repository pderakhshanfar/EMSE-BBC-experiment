/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:08:13 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", " | ", (Options) null, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      int int0 = 97;
      String string0 = "H{w28V)%I-uT";
      Options options0 = new Options();
      String string1 = "";
      options0.getOptions();
      // Undeclared exception!
      try { 
        options0.addOption("#mX!K", "#mX!K", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#mX!K' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[1?");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2026;
      helpFormatter0.defaultLongOptPrefix = null;
      int int0 = (-2);
      helpFormatter0.findWrapPos("W4w", (-4594), (-2));
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[1?");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "l|mxB;qV");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // l|mxB;qV
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "\n");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption("", "--", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      option0.setArgName("EW");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "Illegal option name '", "", options1, (String) null, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.defaultLeftPad = (-1);
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "4I8K/", "The option '", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "\n");
      optionGroup0.addOption(option0);
      options0.addOption("", "--", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      option0.setArgName("EW");
      options0.addOptionGroup(optionGroup0);
      option0.addValueForProcessing("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "arg", (String) null, options0, "~9lt{", false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "--";
      Object object0 = new Object();
      objectArray0[6] = object0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = (-1842);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("A CloneNotSupportedException was thrown: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-692));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "u.H@<57>`!RA@hu5,", "-", options0, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("h");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "\n", "\n", options0, "\n");
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 1287, 3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "usage: ");
      Option option0 = new Option("", false, "`'[@(#*T$$-pN/w+");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOptionGroup(optionGroup0);
      options4.addOption("arg", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.write(849);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), "", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", true, "9+X 30Du|eIs/z|");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOption("", ")q", false, "b;N2g9#IV");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-894), "b;N2g9#IV", "", options0, "Cannot add value, list full.", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.defaultDescPad = (-1948);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(3, "\n", "arg", options0, "", true);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options0, false);
      helpFormatter0.printHelp(9, "u.C@G5`!RA@hu5,", "", options0, "TAn'");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("6%l3G,Gvc\"ZU8c]'", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = (-574);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-574), (Options) null, 2450, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.findWrapPos("z'g\u0007~C", 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "?a*Z*>48OCc)Y");
      helpFormatter0.printHelp("BV[[u (R*q'uu", "(0Wpz~?*0-R=", options2, "\"", true);
      helpFormatter0.setSyntaxPrefix("\"");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "5:G&\\";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5:G&");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("arg", "llIx>^(G{-4^)!`pB;");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "llIx>^(G{-4^)!`pB;", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "=}p=n%V&#", options0, "=}p=n%V&#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(3, "\n", "arg", options0, "", true);
      helpFormatter0.createPadding(44);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("8(");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "8(");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "", options1, 3, 1, " ", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      options1.addOption((String) null, "--", true, "bR7{G");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("Yr-+V^61@POf", 3, 3);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^hJHoz&{hv3");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5:&");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("", "gG8");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 114, "^hJHoz&{hv3", (String) null, options2, (-1070), (-207), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      StringWriter stringWriter1 = new StringWriter(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-922), "$5", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";a";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      options1.addOption("arg", true, "--");
      StringWriter stringWriter0 = new StringWriter(10);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options2 = new Options();
      int int0 = 338;
      int int1 = (-381);
      String string1 = " wZIp`%l#,1_:h";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 338, "U42Ycd[[#ow;|~Q8X", "usage: ", options0, (-381), 3, " wZIp`%l#,1_:h", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5:&");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Option option0 = new Option("", "gG8");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(114, ">D,xVm", "", options2, "@", true);
      helpFormatter0.printHelp((-1), "@", "5:&", options0, "_+zO5Gr@m,(];");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t]2A_4W!j3lC`NGyK", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.HelpFormatter$1", options0);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 48);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "Ei:t", "", options0, (-1), (-1), "", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "a}uGJ0l$hfq", "", (Options) null, "a}uGJ0l$hfq", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      Options options1 = options0.addOption("arg", "-", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-4), "\n", "pa{LdGEH)SKg9_", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      Options options1 = options0.addOption("arg", "-", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter1.printHelp(1, "OnDf'+.G$)&", "arg", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":e5)G 3ele2`u[i)W");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 32, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-3347);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-3347), "lO{jB", "", options0, 12, 19, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5:&");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      options1.addOption("arg", "-", true, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "5:&", options0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, " ", "Ei:t", options0, 3, 2629, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)109;
      byteArray0[6] = (byte)97;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2H::V1zy)";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, (int) (byte)0, "2H::V1zy)");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), ";a");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 69, "2DSfOimSAo");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, " q4w=$45^J.c", "usage: ", options0, 103, 31, "983i~)*%wi", false);
      helpFormatter1.getDescPadding();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      mockFileOutputStream0.write(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%N712U!(*%");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "%N712U!(*%";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 4, "arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 97, "arg", ">", options0, 60, 74, "-");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-3229);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "cmdLineSyntax not provided");
      Options options2 = options1.addOption("arg", "\n", false, " | ");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.hasShortOption((String) null);
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-3229), options4, (-1), (-2845));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("8(");
      helpFormatter1.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1584);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 2015, "", options0);
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 338, "arg", "", options0, 2, 74, "--", false);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5:&");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options2 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "5:&", options0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      Options options4 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "\n", "", options4, "--");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1646);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 34, "8(", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3739), (String) null, "", options0, 34, (-180), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "4PYy";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "4PYy", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      Option option0 = new Option("p", "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "[", true, "--");
      options4.addOption("", true, "--");
      helpFormatter0.printHelp(";a", "", options4, "usage: ", true);
      String string0 = null;
      try { 
        MockURI.URI("k^", " :: ", "arg", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: k^://[ :: ]arg
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("-");
      helpFormatter3.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1068);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      stringWriter0.write("-");
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "]", "-", options0, 1, (-610), "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 165, ";a");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printHelp("|R<4S!>9TosTtntc", options0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultDescPad = (-2603);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("t", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      int int0 = 36;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (byte)98, (Options) null, 36, (byte)63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 165, ";a");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 165, options0, 7, 32);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "$ +*|");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":e5)G 3ele2`u[i)W");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (int) (byte) (-59), "arg", "\n", options0, (-1608), 405, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("8(");
      helpFormatter1.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1584);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 2015, "", options0);
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 338, "arg", "", options0, 2, 74, (String) null, false);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = helpFormatter1.defaultLongOptPrefix;
      mockPrintWriter0.append((CharSequence) "--");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "usage: ", " ", (Options) null, 0, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      Option option0 = new Option("p", "");
      option0.setDescription(";a");
      options2.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5:&");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options3 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "5:&", options0);
      int int0 = 74;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ";a";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) null;
      int int1 = 1842;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "", "$\"].F!=N =HN6m+U+%", options2, 1842, 10, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 9, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setWidth((-326));
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp("--", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("sI:9xneY&*+ikD{m");
      helpFormatter0.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-781), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("[ option: ", 17, 17);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.createPadding(34);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      String string0 = ".T\"0:pl1";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".T\"0:pl1");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      Option option0 = new Option("p", "zj(:)G.y;Vm#0sA");
      Options options3 = options2.addOption(option0);
      helpFormatter0.defaultLeftPad = 44;
      Options options4 = options3.addOption("", "[", true, "--");
      helpFormatter0.printHelp("-", "", options4, "usage: ", true);
      String string0 = null;
      try { 
        MockURI.URI("", " :: ", "arg", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://[ :: ]arg
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2287), ";a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1366));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 73, options0, (-1), 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0, false);
      Options options1 = new Options();
      helpFormatter0.printHelp(875, " ", " ", options0, " ", false);
      helpFormatter0.printHelp("sz`I%", (String) null, options0, "1&SR*vxp-EhE \"wgW");
      int int0 = 9;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1&SR*vxp-EhE \"wgW");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 9, options1, 875, 9);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 875, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, false);
      byte byte0 = (byte) (-1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append('^');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintStream0.print('M');
      String string1 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)1, "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      options0.addOption((String) null, false, "-");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 2;
      MockFile mockFile0 = new MockFile("bN}YB g#CEx/ ;Oy4");
      mockFile0.setLastModified(2);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, (String) null, (String) null, options0, 1, 10, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "--");
      Option option0 = new Option("p", "zj(:)G.y;Vm#0sA");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "[", true, "--");
      helpFormatter0.printHelp(";a", "", options4, "usage: ", true);
      String string0 = null;
      try { 
        MockURI.URI("k^", " :: ", "arg", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: k^://[ :: ]arg
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":e5)G 3ele2`u[i)W");
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "?,g3`Ro@|C", ":e5)G 3ele2`u[i)W", options0, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, false);
      Options options1 = options0.addOption("arg", "-", false, "\n");
      options1.addOption("", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("(_E\"rWBb[~!03'Qx", "", options1, "--", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter1.renderWrappedText(stringBuffer0, 321, 846, "E|@e~Rhnz6a)&");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      helpFormatter0.printHelp(")2", ")2", options1, "arg", false);
      Options options2 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 890, options2, 165, 890);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 890, "=_X&}S%[)^YB'LR.H#&");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer1, 890, 1, " ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "I");
      helpFormatter0.printHelp("Bdk$j>SjjTVc~4A", "x[", options1, ")2", false);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('Z');
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      PrintWriter printWriter0 = mockPrintWriter0.append('0');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 53, 44, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 74, 3, "x)JpAy'^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      int int0 = 44;
      String string0 = "sz`I%";
      helpFormatter0.printHelp("7'4nZ|$@pW:c", (String) null, options0, "}2O}N!=d5_O,*");
      String string1 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      options0.addOption("", "Y2<G|Oaps{c*[fy5Z0", true, "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "\n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)97;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "2H::V1zy)";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (int) (byte) (-87), "2H::V1zy)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, false);
      Options options1 = new Options();
      helpFormatter0.printHelp(875, "[", "", options1, "[", true);
      helpFormatter0.printHelp("[", "[", options1, "[");
      helpFormatter0.setArgName("[");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options1, "NO_ARGS_ALLOWED", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("*HO_`5y$EY");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "NO_ARGS_ALLOWED", "e^f1", options1, 3, 74, "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1403), 9, ",#*0>^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3428);
      Options options0 = new Options();
      int int0 = 875;
      String string0 = "";
      Options options1 = new Options();
      helpFormatter0.printHelp(875, "[", "[", options0, "[", false);
      String string1 = "1&SR*vxp-EhE \"wgW";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", (String) null, options0, "1&SR*vxp-EhE \"wgW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, false);
      Options options1 = options0.addOption("arg", "-", false, "\n");
      helpFormatter0.printHelp(875, "[", "", options1, "[", true);
      helpFormatter0.printHelp("[", "[", options1, "[");
      helpFormatter0.setArgName("[");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options1, "NO_ARGS_ALLOWED", true);
      String string0 = "";
      try { 
        MockURI.URI("\n", "k^", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 
         // ://k^#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-316);
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.getWidth();
      Option option0 = null;
      try {
        option0 = new Option("`Q8", "arg", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`Q8' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (int) (byte)44, "org.apache.commons.cli.Option", "^", (Options) null, (int) (byte) (-87), (int) (byte)44, "^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptPrefix();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 33, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options1 = options0.addOption("", false, "I");
      helpFormatter0.printHelp("Bdk$j>SjjTVc~4A", "x[", options1, ")2", false);
      String string1 = ", ";
      try { 
        MockURI.URI((String) null, "$2w<?D0\"q", ", ", "!");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 2: //$2w<?D0\"q,%20#!
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix((String) null);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setNewLine(">BxNhQ=TkGgg&t't2a");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 165, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(115, ";a", "I+=5.@_", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = ";a";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 165, ";a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      int int0 = (-293);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-39), (-39), ">jr;pW8##&xX`bo'J[.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.defaultWidth = 4290;
      helpFormatter0.setOptPrefix("fptBGOLWW;K.1Z@ex");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 142;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "org.apache.commons.cli.ParseException");
      String string0 = "";
      helpFormatter0.printHelp(")2", ")2", options1, "", false);
      try { 
        MockURI.URI(":", "", "", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :://
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.append((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      int int0 = (-1070);
      Options options0 = new Options();
      options0.getMatchingOptions("^rHNF<,\"@");
      Option option0 = null;
      try {
        option0 = new Option("l`x.upwZE,U$HQNDV", "usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'l`x.upwZE,U$HQNDV' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 3164, 3164);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3917, "-f?9XbQMS*RB6(v[?c}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "Zl_-C";
      helpFormatter0.setLongOptPrefix("Zl_-C");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "Zl_-C", true, "a!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.rtrim("[");
      helpFormatter0.getOptPrefix();
      int int0 = 1;
      String string1 = " | ";
      Options options0 = new Options();
      Option option0 = new Option("arg", "EGX/qI%\f;EZb|d", true, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("EGX/qI%\f;EZb|d", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'EGX/qI%\f;EZb|d' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 0, (-442), "MC`;2B0*pVHSk GVMs");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, false);
      Options options1 = new Options();
      helpFormatter0.printHelp(875, "[", "[", options0, "[", false);
      helpFormatter0.printHelp("sz`I%", (String) null, options0, "1&SR*vxp-EhE \"wgW");
      helpFormatter0.setArgName("");
      helpFormatter0.getNewLine();
      helpFormatter0.defaultDescPad = 875;
      Options options2 = options1.addOption("", " ", true, "--");
      helpFormatter0.printHelp("sz`I%", "1&SR*vxp-EhE \"wgW", options2, "_hZx(qhbU$2bj", true);
      String string0 = "";
      try { 
        MockURI.URI("?8-'i^VE#", "", "\n", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ?8-'i^VE#://%0A#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultArgName = "Sa@vqy<^lm";
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((Object) "-");
      mockPrintWriter0.println(713.7F);
      String string0 = "line.separator";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "line.separator");
      helpFormatter0.optionComparator = comparator0;
      String string1 = "HO8oddT:OoHc";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Wy>>Nl-[rp ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      int int0 = (-293);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, ">jr;pW8##&xX`bo'J[.");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultOptPrefix = "~wAp;\"ohR:jOd$0SS1";
      int int0 = (-2221);
      String string0 = "*pQ$%";
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      String string1 = null;
      boolean boolean0 = true;
      String string2 = "-)GZ[4bxoSnO";
      options0.hasOption("--");
      String string3 = "' was specified but an option from this group ";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("has already been selected: '", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'has already been selected: '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3108), "@.xm+", "$#<BlyM+ob*1]a^.", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1558);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultNewLine = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1558), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("^-P%#cGJ]uk{_C*", 32, (-3491));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 165, ";a");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(165, "", "", options0, "@.xm+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[", options0, false);
      int int0 = 875;
      Options options1 = new Options();
      helpFormatter0.printHelp(875, "[", "", options1, "[", true);
      helpFormatter0.printHelp("[", "[", options1, "[");
      helpFormatter0.setArgName("[");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options1, "NO_ARGS_ALLOWED", true);
      try { 
        MockURI.URI("\n", "k^", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 
         // ://k^#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, " ", options1, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "xrC-?]";
      helpFormatter0.setLongOptSeparator("xrC-?]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("arg");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.rtrim("8(");
      helpFormatter1.getOptionComparator();
      StringWriter stringWriter0 = new StringWriter(1584);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter2.printHelp(">", options0);
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("i=pu~aTj^8d5~orh-1z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(41);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "i=pu~aTj^8d5~orh-1z");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.setSyntaxPrefix("J'8`m3l#");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setArgName("--");
      helpFormatter1.setNewLine("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, false);
      Options options1 = options0.addOption("arg", "-", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp(3, "\n", "pa{LdGEH)SKg9_", options0, "", false);
      helpFormatter1.printHelp("arg", "", options1, "--", false);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter1.renderWrappedText(stringBuffer0, 321, 846, "E|@e~Rhnz6a)&");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setNewLine("");
      String string0 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-2), "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLeftPad = 3;
      helpFormatter0.setDescPadding((-1159));
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("--");
      String string0 = "wsUp][va&";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("wsUp][va&", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(3);
      String string0 = null;
      String string1 = ":\"PM)h{$tz!N_w(8";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, ":\"PM)h{$tz!N_w(8");
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 9, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 682, "?#db [Ip");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      int int0 = 424;
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 424, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("");
      int int1 = (-2238);
      helpFormatter0.defaultLeftPad = (-2238);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine(">BxNhQ=TkGgg&t't2a");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-", 1, 1);
      int int0 = 1;
      String string0 = "_(Sp0%BaM*1me#C#";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) printWriter0;
      objectArray0[3] = (Object) "_(Sp0%BaM*1me#C#";
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "-", false, "<Eu*Fe>l;D.k:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setLongOptPrefix("Ik7j>nPIf");
      int int0 = (-634);
      Options options0 = new Options();
      String string0 = "c6\\_c]hGj;T6@)Q>Q7t";
      boolean boolean0 = true;
      String string1 = "aqg$?.X{]tL";
      // Undeclared exception!
      try { 
        options0.addOption("X%X[{np~[", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'X%X[{np~[' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "WqOZW'-c:zA8h#!PgI9";
      helpFormatter0.defaultSyntaxPrefix = "WqOZW'-c:zA8h#!PgI9";
      helpFormatter0.getSyntaxPrefix();
      String string1 = "line.separator";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "--";
      String string0 = helpFormatter0.rtrim("Q<{7?4pk~.u");
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("Q<{7?4pk~.u", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = null;
      options2.addOption((String) null, false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":EYd";
      String string1 = " | ";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
