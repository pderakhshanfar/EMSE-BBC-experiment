/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:03:16 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-665);
      helpFormatter0.setDescPadding((-665));
      String string0 = "5p(zj}JH0";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("5p(zj}JH0", "5p(zj}JH0", (Options) null, "mI%^w0WRp;eLPe-buG");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "8jrka.VW.<O";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$Cbf", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "' contains an illegal character : '", "' contains an illegal character : '", (Options) null, "' contains an illegal character : '", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      helpFormatter0.setWidth((-3282));
      options1.hasLongOption("");
      String string0 = "<";
      options0.getOption("<");
      options1.addOption((String) null, false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YWj%{");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "}a{#R_-,*{R");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.ITALY;
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "   ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("hqLCF", "arg");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, " ", options1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3337));
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "arg", options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      int int0 = (-1260);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", false, "YA`^C@/\"vvWv-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1260), options1, 140, 140);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "P");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "fP%", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, (-4355), (-1), "P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = new Locale("arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.defaultLeftPad = (-190);
      options1.addOption("", "", true, ".QdUKM<0@yt(h.x");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "", options1, "UW'5DyEu5F,9", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultNewLine = "";
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      String string1 = "--";
      Locale locale0 = new Locale("", "H;vUi", "--");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "n(Hsl\"'%ye3:1";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "H;vUi";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) locale0;
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, "n(Hsl\"'%ye3:1", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'y'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "--", options0, "e!(ww$AmJ4f7iJ");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      int int0 = 74;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "e!(ww$AmJ4f7iJ");
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "arg", "Cannot add value, list full.", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultArgName = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I0=`!y7W=XiZOvq", "", (Options) null, "I0=`!y7W=XiZOvq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-3199));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "--", options0, "e!(ww$AmJ4f7iJ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5138, "]w);^X+:", "W\"5F$%", options1, 2, 1743, (String) null, false);
      mockPrintWriter0.print(7);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "sqiM1)Ad69$", "]w);^X+:", options0, 9, 1781, "]w);^X+:", false);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderOptions(stringBuffer0, 755, options0, 2482, 14);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.optionComparator = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '(';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, 74, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      Option option0 = new Option("", " ", true, "--");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", (String) null, options1, "arg", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Locale locale0 = Locale.ITALY;
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      options0.addOption("arg", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 9, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-478), " ", "--", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = null;
      int int0 = 86;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 114, (Options) null, 1133, 86);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp("]", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("-");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 1, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      Locale locale0 = Locale.ITALY;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      options0.addOption("", true, (String) null);
      options0.toString();
      helpFormatter1.printHelp(3, "=/rO*.#ntbAk73R", "S9988.SZf9JX", options0, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.findWrapPos("X%fot9", 1, 255);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      String string0 = null;
      String string1 = "";
      Options options1 = options0.addOption((String) null, " ", true, "");
      helpFormatter0.printHelp("q.J?G!0-\":0", options1);
      helpFormatter0.setLongOptPrefix("mOu[jd&c;-q|:<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "mOu[jd&c;-q|:<", "q.J?G!0-\":0", options0, 2062, (-1), "eYG:rTN]as ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("i(");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1666), "i(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("%a^&lfbCzY");
      options1.getOption("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 37, "_L_fBB@W[", (String) null, options1, 110, 65, "\n", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "arg");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter1.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter1.printHelp(74, "usage: ", "[ Options: [ short ", options0, " ");
      helpFormatter0.rtrim("--");
      helpFormatter0.renderOptions((StringBuffer) null, 64, options0, 34, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 64, (-728), "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("");
      options0.getOption("\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "", options1, 3, 105, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp(3, "\n", "--", options0, "e!(ww$AmJ4f7iJ");
      helpFormatter0.rtrim("e!(ww$AmJ4f7iJ");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 108, options0, 290, 290);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 290, (-3375), "");
      helpFormatter0.renderWrappedText(stringBuffer2, 290, 290, "e!(ww$AmJ4f7iJ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{dI=ZZ~2 Uq54";
      helpFormatter0.findWrapPos("{dI=ZZ~2 Uq54", 2, 2);
      String string1 = "--";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "{dI=ZZ~2 Uq54");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {dI=ZZ~2 Uq54
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp(108, "bmv(yBx", "", options0, "#ZQgg>2:xThF>");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter1.printHelp(74, "\"", "4X`08VfTy7j'", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1265, 1265, ".*WGS@)0s)Oc,");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.printHelp(3, "--", "-", options0, "~r");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      helpFormatter1.printHelp("MOu", options0);
      helpFormatter1.setLongOptPrefix("4S;");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3, 31);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 0, 1, "MOu");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-4573), "vUt5rahRk^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, "A CloneNotSupportedException was thrown: ", true, "");
      helpFormatter0.printHelp("v,ZcW", options0);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      // Undeclared exception!
      try { 
        options1.addOption("A CloneNotSupportedException was thrown: ", "", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "");
      helpFormatter0.printHelp("q.J?G!0-\":0", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 64, "2)6<m5?du=I$**bH\u0000#", " ", options1, 2, 1, "m*v%V", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption((String) null, " ", true, "");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter0);
      String string1 = ":l";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 736, ":l", "v,ZcW", options1, 4819, (-5443), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.defaultNewLine = " ";
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.createPadding(44);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter2.printHelp("8f){?1KKEES", " ", options0, "FM1Ut{0Y$PY!.z\"YH");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      mockPrintWriter1.print(1L);
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "q.J?G!0-\":0";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 7, "1N6rK/", options0);
      helpFormatter0.printOptions(printWriter0, 7, options0, 7, 7);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "");
      helpFormatter0.printHelp("q.J?G!0-\":0", options1);
      helpFormatter0.setLongOptPrefix("mOu[jd&c;-q|:<");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      options0.addOption("arg", "--", true, "q.J?G!0-\":0");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4185), "u", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "");
      helpFormatter0.printHelp("q.J?G!0-\":0", options1);
      helpFormatter0.setLongOptPrefix("mOu[jd&c;-q|:<");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      helpFormatter0.printHelp(1298, "org.apache.commons.cli.Util", "5U^RY k@GQ", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options1, "2%1;jZ%%<@1>bD^}Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "");
      helpFormatter0.setLongOptPrefix("mOu[jd&c;-q|:<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2168, "", "", options1, 2168, 110, "}aAWCt5S+~O,oELj", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("usage: ");
      options0.hasLongOption("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.getOption("org.apache.commons.cli.OptionGroup");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", (String) null, options0, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 106, 74, "");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter0.setSyntaxPrefix("v,ZcW");
      Locale locale1 = Locale.ITALY;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "");
      helpFormatter0.printHelp("q.J?G!0-\":0", options1);
      helpFormatter0.setLongOptPrefix("mOu[jd&c;-q|:<");
      helpFormatter0.printHelp(1298, "org.apache.commons.cli.Util", "5U^RY k@GQ", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      StringBuffer stringBuffer0 = new StringBuffer("' contains an illegal character : '");
      helpFormatter1.renderOptions(stringBuffer0, 9, options1, 32, 3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, " ");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options0.getMatchingOptions("--");
      options1.hasLongOption("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('d');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      optionGroup0.toString();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      FileSystemHandling.shouldAllThrowIOExceptions();
      optionGroup0.toString();
      optionGroup0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3963, "org.apache.commons.cli.OptionValidator", "[]", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth(3);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 63, "q{,Rla0m6eHFv", "[]", options1, 933, 74, "q\"5?", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.getMatchingOptions("40&|\"e^V");
      options0.hasLongOption("usage: ");
      options1.getOption(";yMz_kl1q'X?G*uWWG");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp(647, "}v/60>]H5ti03y]HY ?", (String) null, options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "NO_ARGS_ALLOWED", "<_si[[j", options0, 3218, 11, "usage: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter2.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, (-3451), options0, (-3451), 839);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      String string0 = "4<0|\"e^V";
      options0.getMatchingOptions("4<0|\"e^V");
      options0.hasLongOption("usage: ");
      options1.getOption("--");
      int int0 = 67;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "Cr\"M[{vj", "Cr\"M[{vj", options1, "urL[iY.jiXR,yc7SZ!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.defaultWidth = 1364;
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.ITALY;
      helpFormatter1.setLongOptPrefix("_+'Dt.\"Coq");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOption("arg", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "ygu#8t6pZIR^", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      options1.hasOption("vk!/2Qh)$Y");
      optionGroup0.toString();
      options0.getMatchingOptions("4<0|\"e^V");
      options0.hasLongOption("usage: ");
      options1.getOption("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.addOption("", false, "");
      String string0 = " :: ";
      helpFormatter0.printHelp("B_.", " :: ", options1, "[]", true);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setNewLine((String) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 3006;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 3006, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.getMatchingOptions("4<0|\"e^V");
      options0.hasLongOption("usage: ");
      options1.getOption("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp((-1), "[]", "' was specified but an option from this group ", options0, "}v/60>]H5ti03y]HY ?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "\n", (String) null, options1, 3, 32, "--", false);
      helpFormatter0.getNewLine();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.getMatchingOptions("4<0|\"e^V");
      options0.hasLongOption("usage: ");
      options1.getOption("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.addOption("", false, "");
      helpFormatter0.printHelp("B_.", " :: ", options1, "[]", true);
      helpFormatter0.rtrim("org.apache.commons.cli.ParseException");
      helpFormatter0.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      options1.hasLongOption("");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.printHelp(44, "lc(]X~_{>R", "", options1, "Cr\"M[{vj");
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options0.getMatchingOptions("--");
      options1.hasLongOption("");
      options0.getOption("<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      helpFormatter0.rtrim("<");
      helpFormatter0.setNewLine("");
      StringWriter stringWriter0 = new StringWriter(1399);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ").E35OhwA^?d[", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1399, "[ option: ", (String) null, options0, 64, 64, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter1.setSyntaxPrefix("");
      helpFormatter1.defaultWidth = 1364;
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.ITALY;
      helpFormatter1.setLongOptPrefix("_+'Dt.\"Coq");
      helpFormatter0.printHelp(67, "urL[iY.jiXR,yc7SZ!", "\n", options0, "Cr\"M[{vj");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, (-2), "arg", "", options0, (-576), 44, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter1.printHelp(37, " [ARG]", "|Td\"?FY%}9`PPw5'.", options0, "");
      helpFormatter0.setSyntaxPrefix("0G+}1q|ux");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      options0.hasLongOption("-");
      String string0 = null;
      options1.getOption("usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.addOption((String) null, true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "-", options1, ">", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      options0.hasOption("SU9g");
      options0.hasOption("-");
      optionGroup0.toString();
      options0.hasLongOption("-");
      int int0 = (-604);
      String string1 = "IU#rem^&sR|I8#";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options0.getMatchingOptions("--");
      options1.hasLongOption("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("x$4l+8-B9T");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "x$4l+8-B9T";
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "x$4l+8-B9T";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintStream0;
      mockPrintStream0.printf("-", objectArray0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-8), options0, 85, (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter1.setSyntaxPrefix("v,ZcW");
      helpFormatter0.getLongOptPrefix();
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "~I8fAWqW~A('";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 943, (Options) null, 943, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      String string0 = "";
      helpFormatter1.setSyntaxPrefix("v,ZcW");
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter1.setSyntaxPrefix("v,ZcW");
      helpFormatter1.defaultWidth = 1364;
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      Option option0 = new Option("SWj", "-", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("[ Options: [ short ", options1);
      helpFormatter1.setLongOptPrefix("#UIgsOD");
      Options options2 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options1);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "\"", options0, "BWY", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          PrintWriter printWriter0 = null;
          int int0 = 0;
          String string0 = "SU9g";
          Options options0 = new Options();
          Options options1 = options0.addOption("SU9g", true, "-");
          OptionGroup optionGroup0 = new OptionGroup();
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) null, 0, "SU9g", options1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options0.getMatchingOptions("--");
      options1.hasLongOption("");
      options0.getOption("<");
      options1.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      helpFormatter0.rtrim("<");
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter1.setSyntaxPrefix("v,ZcW");
      helpFormatter1.defaultWidth = 1364;
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) "MA1;8=}";
      mockPrintWriter0.printf(locale0, "MA1;8=}", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1007), "", "", options0, (-1007), 55, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print(1);
      int int0 = 85;
      mockPrintWriter0.println("U'H");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "", "w83G2c1*kzR\ruR", (Options) null, (-87), (-87), "Qpjp0p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options1.hasLongOption("");
      options0.getOption("<");
      options1.addOption((String) null, false, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      helpFormatter0.rtrim("<");
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile("Xi~iK1iG7P^MZrg", "ADaqGd_+fSM{Z_?");
      File file0 = MockFile.createTempFile("yQNf(bFz", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.setNewLine("yQNf(bFz");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "SU9g";
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      optionGroup0.toString();
      options1.hasLongOption("");
      Options options2 = options0.addOptionGroup(optionGroup0);
      int int1 = (-604);
      String string1 = "IU#rem^&sR|I8#";
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      options0.toString();
      boolean boolean0 = true;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.printHelp(44, "lc(]X~_{>R", "1", options1, "Cr\"M[{vj");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 5, "'", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionGroup");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", ",DKB{z3X*NX`v$");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "7RB!4`L0++!Jvy6!l&4");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options1.hasLongOption("");
      options0.getOption("<");
      options1.addOption((String) null, false, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      helpFormatter0.rtrim("<");
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("<");
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLeftPadding(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Collection collection0 = new LinkedList<Integer>();
      optionGroup0.toString();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      optionGroup0.toString();
      options1.hasLongOption("");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options2 = new Options();
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "[", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter1 = stringWriter0.append('j');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.println("usage: ");
      Options options0 = null;
      int int0 = (-2319);
      int int1 = 37;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-984), (Options) null, (-2319), 37);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", true, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      optionGroup0.toString();
      options1.hasLongOption("");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      int int0 = 44;
      helpFormatter0.defaultSyntaxPrefix = "";
      String string0 = "Cr\"M[{vj";
      helpFormatter0.printHelp(44, "lc(]X~_{>R", "", options1, "Cr\"M[{vj");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "SU9g", "SU9g", options1, (-604), 0, "IU#rem^&sR|I8#", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      optionGroup0.toString();
      options1.hasLongOption("");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      int int0 = 44;
      helpFormatter0.defaultSyntaxPrefix = "";
      String string0 = "Cr\"M[{vj";
      helpFormatter0.printHelp(44, "lc(]X~_{>R", "", options1, "Cr\"M[{vj");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "SU9g", "SU9g", options1, (-604), 0, "IU#rem^&sR|I8#", false);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options1.hasLongOption("");
      options0.getOption("<");
      options1.addOption((String) null, false, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      helpFormatter0.rtrim("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, (String) null, "OSyO", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "SU9g";
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      optionGroup0.toString();
      options1.hasLongOption("");
      options0.addOptionGroup(optionGroup0);
      int int1 = (-604);
      String string1 = "IU#rem^&sR|I8#";
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      boolean boolean0 = true;
      int int2 = 44;
      helpFormatter0.defaultSyntaxPrefix = "";
      String string2 = "Cr\"M[{vj";
      helpFormatter0.printHelp(44, "lc(]X~_{>R", "", options1, "Cr\"M[{vj");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("IU#rem^&sR|I8#", 0, (-235));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "q.J?G!0-\":0";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "q.J?G!0-\":0", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-8), "q.J?G!0-\":0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, " ");
      options1.hasLongOption("");
      options0.getOption("<");
      options1.addOption((String) null, false, "usage: ");
      helpFormatter0.printHelp("has already been selected: '", "x$4l+8-B9T", options1, "x$4l+8-B9T", true);
      helpFormatter0.rtrim("<");
      helpFormatter0.setNewLine("");
      MockFile mockFile0 = new MockFile("Xi~iK1iG7P^MZrg", "ADaqGd_+fSM{Z_?");
      File file0 = MockFile.createTempFile("yQNf(bFz", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), 1249, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O3");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      mockPrintWriter0.printf("-", objectArray0);
      int int0 = (-1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), " ");
      helpFormatter0.setSyntaxPrefix("\n");
      String string0 = "x";
      Options options0 = new Options();
      Option option0 = new Option("O3", "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.getOption("");
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        options2.addOption("\n", "", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = new Locale("\n", "-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "gG# K<UGG{(ix/8";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "gG# K<UGG{(ix/8", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1900), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 13;
      helpFormatter0.defaultLeftPad = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1459));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix("sVF&[*?");
      helpFormatter0.setWidth(0);
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("sVF&[*?", 2635, 2635);
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", false, "&yQ]j4H");
      String string1 = "9fC,,CD4_&N";
      Option option0 = null;
      try {
        option0 = new Option("9fC,,CD4_&N", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9fC,,CD4_&N' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      String string1 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "G6&<3`Cd;";
          StringBuffer stringBuffer0 = new StringBuffer();
          String string1 = "A CloneNotSupportedException was thrown: ";
          StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1630, 1630, "A CloneNotSupportedException was thrown: ");
          int int0 = 0;
          String string2 = "";
          helpFormatter0.renderWrappedText(stringBuffer1, 1630, 0, "");
          helpFormatter0.setLongOptSeparator("G6&<3`Cd;");
          helpFormatter0.getArgName();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor91.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1832;
      String string0 = "<";
      String string1 = "&i?!`Z";
      Options options0 = null;
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1832, "<", "&i?!`Z", (Options) null, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "q.J?G!0-\":0";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "q.J?G!0-\":0", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "q.J?G!0-\":0");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "";
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        options0.addOption("--", "1,`-;VZUO^%", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-473);
      String string0 = "<";
      String string1 = "";
      helpFormatter0.setNewLine("");
      String string2 = "";
      Options options0 = new Options();
      String string3 = "";
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print('V');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-473), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "O3";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O3");
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "\\m0>x";
      Options options0 = new Options();
      String string1 = "@7A=6h%#\"1 r~/D~.";
      Option option0 = null;
      try {
        option0 = new Option(")/p+Kd0)#2#Uq%", "@7A=6h%#\"1 r~/D~.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')/p+Kd0)#2#Uq%' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      helpFormatter1.printHelp("MOu", options0);
      options0.getMatchingOptions("line.separator");
      helpFormatter1.setLongOptPrefix("4SX");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3, 31);
      helpFormatter1.setOptPrefix("4SX");
      helpFormatter1.renderWrappedText(stringBuffer1, 6, 1, "MOu");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1172), "\n", "4SX", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("<");
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.setNewLine("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "<");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "@%fY^fR3>SOzT";
      helpFormatter0.setArgName("@%fY^fR3>SOzT");
      int int0 = (-1);
      Options options0 = new Options();
      String string1 = "]HG{4U-\":Uq;6,/";
      helpFormatter0.setOptPrefix("]HG{4U-\":Uq;6,/");
      options0.hasOption("]HG{4U-\":Uq;6,/");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(74, " ", "", options0, "--");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("arg");
      StringBuffer stringBuffer0 = new StringBuffer(79);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1142), 74, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.findWrapPos("", 0, 201);
      String string0 = "line.separator";
      StringBuffer stringBuffer0 = new StringBuffer("line.separator");
      helpFormatter0.defaultNewLine = " ";
      int int0 = (-415);
      stringBuffer0.deleteCharAt(0);
      stringBuffer0.append((Object) "");
      stringBuffer0.appendCodePoint(1252);
      stringBuffer0.append(1.0F);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-415), (-1), " ] [ long ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setLongOptSeparator("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2474), "\n", "\n", options0, "`4D{/D?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1546);
      helpFormatter0.rtrim("UDq9tTTdbLEbF<");
      MockFile mockFile0 = new MockFile("\n", "-");
      mockFile0.toURL();
      helpFormatter0.optionComparator = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "UDq9tTTdbLEbF<";
      objectArray0[1] = (Object) "UDq9tTTdbLEbF<";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "UDq9tTTdbLEbF<";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) "UDq9tTTdbLEbF<";
      mockPrintWriter0.printf(locale0, "NO_ARGS_ALLOWED", objectArray0);
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 221, "UDq9tTTdbLEbF<");
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("UDq9tTTdbLEbF<");
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SU9g", false, "-");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOptionGroups();
      optionGroup0.toString();
      options0.hasOption((String) null);
      options0.hasOption(" ");
      optionGroup0.toString();
      optionGroup0.toString();
      options1.hasLongOption("");
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SU9g", options1);
      helpFormatter0.setLongOptPrefix("");
      int int0 = 44;
      helpFormatter0.defaultSyntaxPrefix = "";
      String string0 = "Cr\"M[{vj";
      helpFormatter0.printHelp(44, "lc(]X~_{>R", "", options1, "Cr\"M[{vj");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "SU9g", "SU9g", options1, (-604), 0, "IU#rem^&sR|I8#", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1365;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      helpFormatter0.defaultLongOptPrefix = "j(L*A_mH";
      options0.hasShortOption("BS$i+ta`=^VRa");
      options0.helpOptions();
      helpFormatter0.printHelp("j(L*A_mH", options0, false);
      helpFormatter0.setLongOptSeparator("4_MZMRn{f");
      helpFormatter0.findWrapPos("j(L*A_mH", (-543), (-543));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-543));
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-1086), " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = new Locale("\n", "-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "gG# K<UGG{(ix/8";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "gG# K<UGG{(ix/8", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options0);
  }
}
