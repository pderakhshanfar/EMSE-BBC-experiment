/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:10:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 511, options0, 43, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.defaultDescPad = 13;
      helpFormatter0.setWidth(32);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(34);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "MUDR|G8/}h-7g:$q");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1833), options1, 162, 116);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ", "@zVm", options0, "@zVm");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "\"");
      helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 729, 51);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLeftPad = 1581;
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      int int0 = 3149;
      helpFormatter0.createPadding(3149);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("Ax!<L@-");
      StringBuffer stringBuffer1 = null;
      try {
        stringBuffer1 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      helpFormatter0.printHelp(103, "HjJ@,V:LupnZCo#_f", "HjJ@,V:LupnZCo#_f", options1, "HjJ@,V:LupnZCo#_f", true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "usage: ";
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
          helpFormatter0.getLeftPadding();
          helpFormatter0.getLongOptPrefix();
          Options options0 = new Options();
          Options options1 = options0.addOption("", false, "");
          helpFormatter0.setDescPadding(1);
          OptionGroup optionGroup0 = new OptionGroup();
          Options options2 = options1.addOptionGroup(optionGroup0);
          // Undeclared exception!
          helpFormatter0.printOptions((PrintWriter) null, 1, options2, 1, 1);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "vKJc(JK#E&K@i", "", options1, "vKJc(JK#E&K@i", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "arg");
      option0.setArgName("-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 38, "[", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp((-1), "%I*AEwcj3``", "", options1, " R`3;w!-W", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.setArgName("\n");
      Options options0 = new Options();
      mockPrintWriter0.println('E');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 3183, (-2564));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("`:rik%f?$oS{m0I3FP");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      helpFormatter0.createPadding(625);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`:rik%f?$oS{m0I3FP", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      boolean boolean0 = false;
      Option option1 = new Option((String) null, false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "T1)+6#zH[fS*<7:pBK", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1356);
      options0.helpOptions();
      options0.toString();
      String string0 = "";
      options0.hasOption("-");
      boolean boolean0 = true;
      String string1 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b[t6Z6[(-e^(bB}q", (String) null, options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 114, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "\n");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(3887, "r+c$!", "", options1, "[ARG...]", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("=6%{");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1071;
      int int1 = 3083;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1071, 3083, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "\n", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "ytJ", options0, "Ts-.,).P{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 32, 2939, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 62, (Options) null, 3, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 104, "a+q", (String) null, options0, 13, 64, ")", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOption("-");
      helpFormatter1.printHelp(74, "usage: ", "", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.addOption("", "[", true, "B#nfYDSfx6D*4");
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.printHelp(3, "\n", "r+c$!", options0, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1356);
      options0.toString();
      options0.hasOption("-");
      Options options1 = options0.addOption("", true, "org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "line.separator", (Options) null, "line.separator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, ">LS9qkG5<Bvwse67<)", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = helpFormatter0.defaultNewLine;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 49, (-2882), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter1.printf("mO(q,xZ", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printUsage(printWriter0, 114, "mO(q,xZ");
      helpFormatter0.printWrapped(printWriter0, 0, 13, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "h");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("h", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      Options options3 = options2.addOption((String) null, "", true, "arg");
      helpFormatter0.printHelp("W?4|dv*y8?.ymnL", "W?4|dv*y8?.ymnL", options3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 3707, "", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOption("arg");
      options0.helpOptions();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1172), "\n", "\n", options0, "t<Vr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      Option option1 = new Option("arg", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", false, "T1)+6#zH[fS*<7:pBK");
      Options options2 = options0.addOption("", false, "s5hvn5I.e_O&(v\"}");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 89, "--", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      Option option1 = new Option("arg", false, "\n");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 34, "T1)+6#zH[fS*<7:pBK", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      Option option1 = new Option("arg", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 34, "T1)+6#zH[fS*<7:pBK", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 119, 1, "8vo&");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "--", false, "");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 119, options2, 34, 115);
      helpFormatter0.renderOptions(stringBuffer2, 88, options1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", true, "org.apache.commons.cli.OptionGroup");
      options1.getOption(" ");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options1);
      helpFormatter0.printHelp((-1), "8OG~", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.setDescPadding((-4140));
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      options0.getOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*o}9");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "wO0G@r|t>U*o}9", options0);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      options0.helpOptions();
      int int0 = helpFormatter0.defaultWidth;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, (-1165), "4 fN sdMB>)#G4:VRis");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      helpFormatter0.setNewLine("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "arg";
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) "arg";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "\\i<(D=X0|\"&o9VUB{x-";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 3, "arg");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(':');
      Options options0 = new Options();
      helpFormatter0.printHelp("Yp``$43%PG^\"5'PE", "Pr]%b1MV", options0, "", false);
      mockFileOutputStream0.release();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.printHelp(printWriter0, 32, "Yp``$43%PG^\"5'PE", "Pr]%b1MV", options0, 32, 1445, "t", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      mockFileOutputStream0.release();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3254), "-", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, 1445, 32, "[B`14VDFob%XJ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("usage: ", "].");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      Options options0 = new Options();
      Option option0 = new Option("", "", false, (String) null);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 71, "].", "arg", options1, 3909, (-3225), "<6UlO5Ak}B&Ib5>5v");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Options options1 = new Options();
      helpFormatter0.printHelp(45, "--", "", options1, "org.apache.commons.cli.OptionValidator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "wO0G@r|t>U*0}9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("wO0G@r|t>U*0}9", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      Options options1 = new Options();
      options1.getOption("usage: ");
      Options options2 = options1.addOption("", false, (String) null);
      helpFormatter0.printHelp(".*`prF:", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "\n", (String) null, options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 13;
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "\n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "wO0G@r|t>U*0}9";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*0}9");
      int int0 = (-2751);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2751), "wO0G@r|t>U*0}9", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "wO0G@r|t>U*0}9";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*0}9");
      int int0 = 13;
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "wO0G@r|t>U*0}9", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int1 = HelpFormatter.DEFAULT_LEFT_PAD;
      String string1 = "eldNjR@c!TeEC0X4gc+";
      int int2 = 433;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", " ", options0, 433, 1, " ", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*0}9");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "wO0G@r|t>U*0}9", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "X{#WgoTl!EMurJyvD", "7pGUss-0y,7r^LP", options0, (-3085), 1, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*0}9");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "wO0G@r|t>U*0}9", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "wO0G@r|t>U*0}9", " ", options0, 63, 0, (String) null, false);
      mockPrintWriter0.println();
      helpFormatter0.rtrim("wO0G@r|t>U*0}9");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "wO0G@r|t>U*0}9";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*0}9");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "wO0G@r|t>U*0}9", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = helpFormatter0.defaultWidth;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "Ou re_=<oM40", options0, 74, 46, "Ou re_=<oM40", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Options options1 = options0.addOption("", false, "");
      Options options2 = new Options();
      helpFormatter0.printHelp(45, "--", "B'[iABII.'6}zEO(2:{", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "I0rl WDh$I>1j>=M", "-", options1, 74, (-2), (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.printHelp("\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", 43, (-761));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "org.apache.commons.cli.Util";
      helpFormatter0.setNewLine("org.apache.commons.cli.Util");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 13, "", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      int int0 = helpFormatter0.defaultWidth;
      String string1 = "eldNjR@c!TeEC0X4gc+";
      String string2 = " ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 64, "~T;K;z+6Jz", " ]", options0, 0, 13, "", true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "eldNjR@c!TeEC0X4gc+");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      int int0 = 13;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Options options1 = new Options();
      Options options2 = options1.addOption((String) null, false, "--");
      Options options3 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(9, "8H?v6cZG++", "", options4, "B'[iABII.'6}zEO(2:{", true);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.printHelp("   ", "B'[iABII.'6}zEO(2:{", options4, "--");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", " ", options0, 433, 1, " ", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "eldNjR@c!TeEC0X4gc+");
      helpFormatter0.printHelp(" ", "5Cy", options0, "   ");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("A8!cQF+0_");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter1.printf("mO(q,xZ", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printUsage(printWriter0, 114, "mO(q,xZ");
      helpFormatter0.printWrapped(printWriter0, 0, 13, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "h");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("h", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("W?4|dv*y8?.ymnL", "W?4|dv*y8?.ymnL", options3, "org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "", "org.apache.commons.cli.Options", options3, (-404), 114, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter1.printf("mO(q,xZ", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printUsage(printWriter0, 114, "mO(q,xZ");
      helpFormatter0.printWrapped(printWriter0, 0, 13, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "h");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("h", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      Options options3 = options2.addOption((String) null, "org.apache.commons.cli.OptionGroup", true, "arg");
      helpFormatter0.printHelp("W?4|dv*y8?.ymnL", "W?4|dv*y8?.ymnL", options3, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.findWrapPos("\n", 3, (-761));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter1.printf("mO(q,xZ", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printUsage(printWriter0, 114, "mO(q,xZ");
      helpFormatter0.printWrapped(printWriter0, 0, 13, "");
      Options options0 = new Options();
      options0.addOption("", true, "h");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "h");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 114, (-811), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp(3260, "org.apache.commons.cli.OptionValidator", ", ", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("+CLSBVvSaR%vW|)!CP", 493, 74);
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "-", "--", options0, 3, 74, " ");
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, ", ", "has already been selected: '", options0, 2479, (-2557), "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", (Object[]) null);
      int int0 = (-492);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-492), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      options0.addOption("", false, "");
      Options options1 = new Options();
      helpFormatter0.printHelp(45, "\n", "B'[iABII.'6}zEO(2:{", options0, "", true);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.printHelp(",i9uO}Iy", ")DpS", options1, "   ");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("_hoX'9");
      MockFile mockFile0 = new MockFile("]", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 977);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.setNewLine("-");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(39, "org.apache.commons.cli.HelpFormatter$1", "arg", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("99}Mr");
      Options options1 = options0.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.setNewLine("5K|AN2\"!)G4L4->`");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "usage: ", options0, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.printHelp(44, "X", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "\n", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 44, 44);
      helpFormatter0.renderWrappedText(stringBuffer1, 44, 44, "org.apache.commons.cli.HelpFormatter");
      Options options1 = options0.addOption("X", false, "usage: ");
      helpFormatter0.printHelp(13, "--", "m{R< s@ZJC(", options1, "VRcT}Ud2vOa");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.printHelp("$3D+.& +0Q sb]VG", "org.apache.commons.cli.Util", options0, (String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 355, "$3D+.& +0Q sb]VG", " ", options0, 0, 355, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".";
      Options options0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      PrintWriter printWriter0 = null;
      int int0 = 635;
      String string1 = "qI&I6* A!~<)";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2209), "", ".", (Options) null, (-2209), 635, "qI&I6* A!~<)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "!\"bU[!$Ffpx");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 52, 13, "QK<zv^bMs");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      options0.addOption("", false, "");
      Options options1 = new Options();
      helpFormatter0.printHelp(45, "--", "", options1, "org.apache.commons.cli.OptionValidator", true);
      helpFormatter0.findWrapPos("<", 113, 113);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("`:rik%f?$oS{m0I3FP");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      helpFormatter0.createPadding(625);
      // Undeclared exception!
      helpFormatter0.printHelp("`:rik%f?$oS{m0I3FP", (Options) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = ".";
      int int0 = (-2209);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int1 = (-3278);
      String string1 = "XX)>?*8}";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3278), "XX)>?*8}", "Illegal option name '", (Options) null, 8, (-2209), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1139), 2074, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("-", options0);
      int int0 = 44;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 44, (-1326), " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-357), options0, 59, (-357));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("0WTwP1pqbNA>t$WqD&");
      StringWriter stringWriter0 = new StringWriter(2224);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 36, "0WTwP1pqbNA>t$WqD&");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1439);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("-");
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", ".", (Options) null, "L;}?vR#4 ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-822), "(r", "~VNinKz:_J", options0, "~VNinKz:_J", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(36);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3691, options0, 902, 36);
      helpFormatter0.renderWrappedText(stringBuffer1, 49, 36, "_hoX'9");
      helpFormatter0.rtrim("_hoX'9");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("0WTwP1pqbNA>t$WqD&");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, " [ARG]", "-", options0, "='", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = ".";
      Options options0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1694, ".", ".", (Options) null, 1694, (-2209), ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("99}Mr");
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("' was specified but an option from this group ", options1, false);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 3437, "99}Mr");
      Options options2 = new Options();
      Option option0 = new Option("arg", false, "-");
      options2.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 1125, options2, 2183, 21);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("\n", options0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("X");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "", "", options0, "jbC.DZwvv,L@VfF", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.printf("\n", (Object[]) null);
      mockPrintWriter0.write("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1916), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.PRC;
      mockPrintWriter2.printf(locale0, "--", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1064), "_pC;7V&k32");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "!\"bU[!$Ffpx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("The option '");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("%");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3437, " ] [ long ");
      Options options0 = new Options();
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "`\\:rik%f?$oS{m0I3FP";
      helpFormatter0.setLongOptPrefix("`:rik%f?$oS{m0I3FP");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter1.getSyntaxPrefix();
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("8tYW*~(zD?e]Y7+", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8tYW*~(zD?e]Y7+' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-94), 64, "~YHev<|HDMtAt^EX&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("`:rik%f?$oS{m0I3FP");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setWidth(365);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`:rik%f?$oS{m0I3FP");
      Locale locale0 = Locale.KOREAN;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) mockPrintWriter1;
      objectArray0[7] = (Object) " ";
      objectArray0[8] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "arg", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, "[HjlQd");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "_hoX'9";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("%");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3437, " ] [ long ");
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|0Up");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("=)2<4IzBn3t2+", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 13, 2074, "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("e|E(hqV$ztpEOfz}Y)");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 241, "_hoX'9");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setWidth((-2));
      options0.hasShortOption("[ Options: [ short ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("fS|+DUy@zqtA%CU\"Bl%", "org.apache.commons.cli.HelpFormatter", options0, "org.apache.commons.cli.ParseException", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("7", (-2056), 1662);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1662, 1, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 3193;
      helpFormatter0.setNewLine("?=ut-|=QZz/(");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "34-lbaa?x'jD.WcC";
      StringBuffer stringBuffer0 = new StringBuffer("34-lbaa?x'jD.WcC");
      helpFormatter0.renderWrappedText(stringBuffer0, 1007, 0, "");
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      String string1 = "A CloneNotSupportedException was thrown: ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("P]yM_}x#WT2H", "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // A CloneNotSupportedException was thrown: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("0WTwP1pqbNA>t$WqD&");
      Options options0 = new Options();
      helpFormatter0.setDescPadding(18);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setNewLine("wO0G@r|t>U*0}9");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "wO0G@r|t>U*0}9", options0);
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      options0.helpOptions();
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", " ", options0, 433, 1, " ", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "eldNjR@c!TeEC0X4gc+");
      helpFormatter0.setLeftPadding(120);
      helpFormatter0.printHelp(" ", "5Cy", options0, "   ");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("A8!cQF+0_");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLeftPadding((-529));
      helpFormatter0.setDescPadding((-529));
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "X?P~l#nC|w=!|";
      helpFormatter0.setLongOptSeparator("X?P~l#nC|w=!|");
      helpFormatter0.createPadding(804);
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("arg");
      helpFormatter0.printHelp("\n", options0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "--");
      helpFormatter0.printUsage(printWriter0, (-1), "\n");
      mockPrintWriter2.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1747, 2196, " | ");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1601, 64, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "99}Mr";
      options0.hasShortOption("99}Mr");
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("' was specified but an option from this group ", options1, false);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(")P6es/f[2j4", "DAWF48?=5\"r}k!W]", options1, ">", true);
      String string1 = "";
      MockFile mockFile0 = new MockFile("");
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "`\\:rik%f?$oS{m0I3FP";
      helpFormatter0.setLongOptPrefix("`:rik%f?$oS{m0I3FP");
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "`:rik%f?$oS{m0I3FP");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "`\\:rik%f?$oS{m0I3FP";
      helpFormatter0.setLongOptPrefix("`:rik%f?$oS{m0I3FP");
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "`:rik%f?$oS{m0I3FP");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.OptionGroup";
      helpFormatter0.defaultLeftPad = 2759;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "zXm2!|#";
      helpFormatter0.setOptPrefix(" | ");
      helpFormatter0.setLongOptPrefix(" | ");
      helpFormatter0.setLongOptPrefix(" | ");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 852;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("4qlCY@LQos:?vVe", " | ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4qlCY@LQos:?vVe' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLongOptSeparator("0WTwP1pqbNA>t$WqD&");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      int int0 = helpFormatter0.getWidth();
      assertEquals("0WTwP1pqbNA>t$WqD&", helpFormatter0.getLongOptSeparator());
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      int int0 = 31;
      String string0 = "j7T#J!oeQd%s-`";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setArgName("j7T#J!oeQd%s-`");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption((String) null, false, (String) null);
      Option option0 = null;
      try {
        option0 = new Option("\n", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.getArgName();
      mockPrintWriter0.append((CharSequence) "arg", 0, 3);
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      Options options2 = options1.addOption("", "\"]OaY*Eb&OF'\"]8}n&v", false, " ");
      // Undeclared exception!
      try { 
        options2.addOption("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      helpFormatter0.setOptPrefix("has already been selected: '");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", (String) null, true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(32);
      helpFormatter0.getArgName();
      assertEquals(32, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setWidth((-1));
      int int0 = 0;
      String string1 = "y)z(|9dK}lm:ga)KoC";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      String string2 = " ]";
      options1.hasShortOption("6VT>");
      options1.getOptions();
      String string3 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        options1.addOption("--", " ]", false, "NO_ARGS_ALLOWED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) linkedList1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter1.format((Locale) null, "usage: ", objectArray0);
      int int0 = (-2583);
      Options options0 = new Options();
      String string0 = "h=aDx`jQ-m";
      // Undeclared exception!
      try { 
        options0.addOption("-", "h=aDx`jQ-m", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1139), 178);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("wpD*o7u!BVEi");
      helpFormatter0.setOptionComparator((Comparator) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("bjrK+EvqT88~/8J,", false, ";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bjrK+EvqT88~/8J,' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "HQ.m5/@v07+6";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        options0.addOption(", ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ', ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "has already been selected: '";
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      String string1 = "   ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      Option option0 = null;
      try {
        option0 = new Option("jQ/dCMmwbw=mQ=2!", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'jQ/dCMmwbw=mQ=2!' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "36u[-Eqg*%D8#OKX}6Z";
      helpFormatter0.setLongOptSeparator("36u[-Eqg*%D8#OKX}6Z");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
