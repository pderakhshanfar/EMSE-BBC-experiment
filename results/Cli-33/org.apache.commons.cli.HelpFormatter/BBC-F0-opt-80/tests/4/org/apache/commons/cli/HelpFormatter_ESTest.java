/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:39:41 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("]", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(13);
      StringWriter stringWriter0 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 1297, 99);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "--", false, "xn\"'IG");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Option option1 = new Option("arg", "+TeUd\u0003O<qBive");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      options1.addOptionGroup(optionGroup1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xn\"'IG");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1718, " :: ", options0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("AlsybR[@4E&]Lv;4GiU", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 65;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      int int1 = 13;
      String string0 = "4YJs<\"J@M?h$]0tV";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, (-1631), "4YJs<\"J@M?h$]0tV");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      options0.addOption("arg", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1071), options1, 14, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptPrefix();
      int int0 = 2139;
      helpFormatter0.defaultWidth = 2139;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "m@P=,Qq}Y_re^!";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options0.addOption("arg", true, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option("", ", ", true, " [ARG]");
      Options options3 = options2.addOption(option0);
      helpFormatter2.printHelp(3, "--", "arg", options3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "!:{@/.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      boolean boolean0 = false;
      int int0 = 10;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "{t[^VSTC", "8c@", options0, 10, 10, (String) null, false);
      int int1 = (-294);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "'", "MrOrsEaqQUt+", options0, (-294), 10, "mRF+&]+Ax", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3);
      helpFormatter0.setLeftPadding((-3));
      String string0 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3), (-3), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "arg", options0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("H557nG)jpF~J", options1);
      helpFormatter0.renderOptions((StringBuffer) null, 1758, options0, 1758, 1758);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(74, "I:", "arg", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(",wD~(%FkbU%", options0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      mockPrintWriter0.print("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "", options0, 641, 1, "--", false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 4337, options0, 74, 586);
      helpFormatter1.renderWrappedText(stringBuffer1, 579, 110, " ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Options options0 = new Options();
      options0.addOption("", "", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2159, "M/2K", "-", options0, "");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-4657);
      helpFormatter0.setWidth((-1278));
      Options options0 = new Options();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "<N[9dAH!jJoE", (String) null, options0, 298, 31, "org.apache.commons.cli.Option", false);
      helpFormatter0.printOptions(mockPrintWriter0, 782, options0, 298, 782);
      helpFormatter0.createPadding(298);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, (String) null);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options1);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, 3, 3, "I_+sb");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      helpFormatter0.setOptPrefix("_y@|7trkb`n`rtd+");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1346, "", "", options0, "nCL2Kacek&IKr", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      options0.hasOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1126), "arg", "usage: ", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-965));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bI7P0");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = 42;
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("E@pm?5e./");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 31, (Options) null, 31, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("", 31, 31);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("]i");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]i", " :: ", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, ";r])aJQ8?LLySR^5o#");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 830, "--", " ", options0, 119, 4, "", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "cmdLineSyntax not provided";
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "<N[9dAH!jJoE", "cmdLineSyntax not provided", options0, 1555, 31, "", true);
      helpFormatter1.printHelp(3449, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "-", options0, "cmdLineSyntax not provided", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.ITALY;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "\n", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "org.apache.commons.cli.Util", true, "usage: ");
      Option option0 = new Option((String) null, "(:\"(JVvz xYGL!UO", true, "--");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "S+20D1v7WhZl{(<R", options3);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j&/4k_|_&_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("(D?", options1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("j&/4k_|_&_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "N`8KI,", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Options options0 = new Options();
      options0.toString();
      options0.addOption("", "|w", true, (String) null);
      helpFormatter0.setLongOptSeparator("-{^\"JB>&yvC[+a^2");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "");
      helpFormatter0.createPadding(1954);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("]", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter1.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 34, options2, (-1), (-1815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 2147;
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 74, "arg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$O6");
      Locale locale0 = Locale.PRC;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "cmdLineSyntax not provided", objectArray0);
      Options options0 = new Options();
      int int0 = 0;
      String string0 = "";
      int int1 = 102;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "$O6", options0, 102, 102, "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      String string0 = "usage: ";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2609), "y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j&/4k_|_&_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("(D?", options1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("j&/4k_|_&_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "j&/4k_|_&_", "<", options1, 1555, 1162, "<", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 803, options1, (-1), 34);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(27, "9/efpd-4Q< OeJA'>T", "g&2b1,n=n?w5iy1f*+", options2, (String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.hasLongOption("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6pkRtD_uP'qb?~YEM", "6pkRtD_uP'qb?~YEM", (Options) null, "[ Options: [ short ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.forLanguageTag("");
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "", objectArray0);
      mockPrintWriter1.println((-508.10785F));
      helpFormatter0.printWrapped(printWriter1, 66, "py!q4Y:#dT3");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 907, "py!q4Y:#dT3", "org.apache.commons.cli.HelpFormatter", options1, 907, (-685), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultLeftPad = 577;
      helpFormatter0.setDescPadding(577);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(3);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      options0.hasLongOption("\n");
      helpFormatter0.printHelp(printWriter0, 3, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.setLeftPadding(9);
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 9, (-862));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.setLeftPadding(9);
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.findWrapPos("-", 9, 9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("-");
      helpFormatter1.setWidth(3);
      helpFormatter1.getWidth();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.setLeftPadding(9);
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.findWrapPos("-", 9, 9);
      helpFormatter0.setWidth((-1));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 188, "", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "", options0, "has already been selected: '", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-3190);
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "has already been selected: '");
      helpFormatter0.renderOptions(stringBuffer0, (-2336), options0, 836, 836);
      Option option0 = new Option("", " | ", false, "I-(X1,vbf");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3190), "3SBqjxAJse/p_GAnH`.", "hUz", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "'mjqeOp@+\"";
      objectArray0[7] = (Object) "org.apache.commons.cli.HelpFormatter";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1162, (String) null, "", options0, 11, (-1287), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      mockPrintWriter0.close();
      objectArray0[2] = object0;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "org.apache.commons.cli.OptionValidator");
      options0.addOption("", "usage: ", true, "tXApLxC5yph /{$l");
      helpFormatter0.setLeftPadding((-7));
      int int0 = 1200;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1200, "org.apache.commons.cli.OptionValidator", "!0;D,Pqpa&9^91", options0, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The option '");
      helpFormatter0.setArgName("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" kd\u0001Hwf?S,HQ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) " kd\u0001Hwf?S,HQ";
      objectArray0[6] = (Object) " GQHtZDK)%|";
      mockPrintWriter0.format("G`n=(P", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1921, "--", " GQHtZDK)%|", options0, 0, (-2183), " kd\u0001Hwf?S,HQ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("]", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(13);
      StringWriter stringWriter0 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4254, "+Bk69\"i<YwOM");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.printHelp(1200, "org.apache.commons.cli.OptionValidator", "!0;D,Pqpa&9^91", options0, "arg");
      helpFormatter0.setLeftPadding(1200);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options0, 9, 10, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$O6");
      Locale locale0 = Locale.PRC;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("zM*9~jKR");
      Options options0 = new Options();
      options0.addOption((String) null, "-", true, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1541, "-(zXAvRC=", (String) null, options0, 1541, 1541, "Uc", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$O6");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", " ", options0, 3, 46, "`r|mo");
      helpFormatter0.setLeftPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1200, "`r|mo", "QY-F?{1", options0, (String) null);
      helpFormatter1.setLeftPadding(1);
      helpFormatter2.getLongOptSeparator();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.findWrapPos("QvsIr;kR:DT:5M", 3, 252);
      helpFormatter0.setLongOptSeparator("arg");
      // Undeclared exception!
      try { 
        helpFormatter3.createPadding((-1870));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "-");
      File file0 = MockFile.createTempFile("arg", "--", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "XA'r>T6;Wd+Od?t=", "3O?", options0, (-2), (-1), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "0MA leOeDIZy_q5%", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, 3, 3, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.setLeftPadding(9);
      helpFormatter0.printHelp(1200, "org.apache.commons.cli.OptionValidator", "!0;D,Pqpa&9^91", options0, "arg");
      helpFormatter0.setLeftPadding(1200);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("usage: ", 3, (-491));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, ";r])aJQ8?LLySR^5o#");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "arg", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 99;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 99, 1135, "   ");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "org.apache.commons.cli.ParseException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.ParseException
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "g&2b1,n=n?w5iy1f*+", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$O6");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "$O6", "$O6", options0, 3, 3, "$O6");
      helpFormatter0.setLeftPadding(9);
      String string0 = "arg";
      helpFormatter0.printHelp(1200, "$O6", "!0;D,Pqpa&9^91", options0, "arg");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("Pte&XcFSi>H", "Pte&XcFSi>H");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Pte&XcFSi>H
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j&/4k_|_&_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("(D?", options1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("j&/4k_|_&_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2948), (String) null, "W", options0, (-2), 11, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("s,:}");
      helpFormatter1.setLeftPadding(3407);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("usage: ", 3, 0);
      helpFormatter1.setLongOptSeparator("-");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2100, "/hbX_F?4hQdMN", "@Ef-l_r5Y?", (Options) null, "/hbX_F?4hQdMN", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The option '");
      helpFormatter0.setArgName("$O6");
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.setLongOptSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2));
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-154), "/hbX_F?4hQdMN", "/hbX_F?4hQdMN", (Options) null, "/hbX_F?4hQdMN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cTnP-v[p,SM";
      Options options0 = null;
      int int0 = (-36);
      helpFormatter0.defaultOptPrefix = "cTnP-v[p,SM";
      String string1 = "8";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cTnP-v[p,SM", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      helpFormatter1.setLongOptPrefix("V$$yc?0%YML*Sz-Ur");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "usage: ", options1, 1, (-789), "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("Nhu5:+.c| |", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1974, "=", "", options0, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append('`');
      stringWriter2.getBuffer();
      helpFormatter0.printHelp(519, "has already been selected: '", "has already been selected: '", options0, "arg");
      Option option0 = new Option("arg", "&:g#mhy$-<*KJlvMG");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("arg", options1, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("lh[EyE7Im");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(3);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("-", 3, 74);
      helpFormatter0.setLongOptSeparator("arg");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j&/4k_|_&_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      helpFormatter0.setLongOptSeparator("j&/4k_|_&_");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultLeftPad = (-1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cTnP-v[p,SM";
      Options options0 = null;
      helpFormatter0.setLongOptPrefix("cTnP-v[p,SM");
      helpFormatter0.defaultOptPrefix = "cTnP-v[p,SM";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "8", "8", (Options) null, "cTnP-v[p,SM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setWidth(0);
      String string1 = "K1<1@y8";
      String string2 = "<v3-PUc]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("K1<1@y8", "usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'K1<1@y8' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cTnP-v[p,SM";
      Options options0 = null;
      int int0 = (-1);
      helpFormatter0.defaultOptPrefix = "cTnP-v[p,SM";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "8", "8", (Options) null, "cTnP-v[p,SM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "#N)RI";
      Options options0 = null;
      String string1 = "[4>\"bmrt";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#N)RI", "#N)RI", (Options) null, "[4>\"bmrt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(827);
      PrintWriter printWriter0 = null;
      String string0 = "j}064paeM^s(=6jS";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 827, "j}064paeM^s(=6jS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.getArgName();
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 13;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("-", true, "]c_fqV{[N;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The option '");
      helpFormatter0.defaultLeftPad = 31;
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.setLongOptSeparator(" ");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.setArgName("{F2+H}%P/OJq");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("G1P/Cf");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = " ";
      helpFormatter0.setNewLine(" ");
      String string1 = "";
      String string2 = "O5Uta+]";
      MockFile mockFile0 = new MockFile("-", "O5Uta+]");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "snGRywsuUO)u_@0'`N[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = new Locale("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "snGRywsuUO)u_@0'`N[";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "";
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1273), "EsiO#QBR9u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j&/4k_|_&_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("(D?", options1);
      helpFormatter0.setWidth(1555);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 490;
      String string0 = "A'%D]n||PNr";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option(" ", "arg", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 2180;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2180, 0, "XNgkD&8#PH|6`S=TY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "$O6";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$O6");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1167), "$O6", "$O6", options0, (-1167), (-1167), "$O6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("j&/4k_|_&_");
      Options options0 = new Options();
      options0.hasOption("-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("(D?", options1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("j&/4k_|_&_");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 11, "j&/4k_|_&_", "<", options1, 1555, 1162, "<", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "|w", true, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options1, 0, 0, "1q0sOV", true);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "[ option: ", "[ option: ", options0, 3029, 1921, "[ option: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.setLeftPadding(64);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptSeparator("]");
      assertEquals("usage: ", helpFormatter0.getNewLine());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      int int0 = helpFormatter1.getWidth();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "", true);
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append('`');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 32, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = " )52G";
      String string0 = " l7!c-#sU=z&|$\\|/x";
      helpFormatter0.setArgName(" l7!c-#sU=z&|$|/x");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-2751);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", 3, (-2751));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("k./~R_Zf6+sYF|B uqg");
      String string0 = "3nS\"=o";
      helpFormatter0.setSyntaxPrefix("3nS\"=o");
      helpFormatter0.getSyntaxPrefix();
      String string1 = "2]LZ<e=a3at";
      Options options0 = new Options();
      String string2 = "R;d$G,:P9-U3>";
      Option option0 = null;
      try {
        option0 = new Option("R;d$G,:P9-U3>", "{+f1+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R;d$G,:P9-U3>' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      String string0 = null;
      String string1 = "iy-Pel7 9E-|+`:E,";
      String string2 = "usage: ";
      try { 
        MockURI.URI((String) null, "iy-Pel7 9E-|+`:E,", "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 7: iy-Pel7%209E-%7C+%60:E,#usage:%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "{&,YGGY,E[?89q$");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {&,YGGY,E[?89q$
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2541));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.ROOT;
      String string0 = "z";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "z";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) "z";
      mockPrintWriter0.format(locale0, "z", objectArray0);
      int int0 = 1451;
      Options options0 = new Options();
      String string1 = "0cDf%}oy(I?";
      // Undeclared exception!
      try { 
        options0.addOption("0cDf%}oy(I?", "", false, "0cDf%}oy(I?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0cDf%}oy(I?' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("bE");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-767), 0, "bE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-150), "/hbX_F?4hQdMN", "/hbX_F?4hQdMN", (Options) null, "/hbX_F?4hQdMN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
