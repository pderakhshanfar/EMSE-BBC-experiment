/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 09:35:28 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding((-1500));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 7, "-", " ", options0, 3, 1432, "YV;G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("E'-w|");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "i Xxq-yuh`", "", options0, "org.apache.commons.cli.HelpFormatter$1", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "T";
      helpFormatter0.defaultLeftPad = (-2245);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("T", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = " ";
      MockFile mockFile0 = new MockFile("aUWwngwr'/O0[", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-907), "aUWwngwr'/O0[", " ", options0, (-907), (-2366), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("I", " ", false, " ");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("iK[6[c`Hd?M");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)104;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      optionGroup0.setRequired(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-830), "I", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1196, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      int int0 = 2249;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 2249, 2249);
      helpFormatter0.defaultArgName = "";
      int int1 = 108;
      helpFormatter0.createPadding(108);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "                                                                                                            ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "sI/";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("", 0, 31);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1200), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("Iw+Xg&}/");
      String string0 = "G|";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-764), "G|", "G|", options0, "Iw+Xg&}/", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 63, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "~DY!y@n5");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "~DY!y@n5");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("I", "", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", false, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultArgName = "";
      String string0 = "A CloneNotSupportedException was thrown: ";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3368), "A CloneNotSupportedException was thrown: ", "}", (Options) null, "}", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      options0.addOption((String) null, "arg", true, (String) null);
      Options options1 = options0.addOption("", "jn", true, "arg");
      helpFormatter0.printUsage(printWriter0, 74, "", options1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      String string0 = "";
      Options options0 = new Options();
      options0.addOption("", "--", true, "usage: ");
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      helpFormatter0.setWidth(9);
      helpFormatter0.printHelp("a}jJK,0%,`", "a}jJK,0%,`", options0, "a}jJK,0%,`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "^", "a}jJK,0%,`", options0, 22, 9, "_YqVg<@fwHxghaCY");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(9);
      String string0 = "org.apache.commons.cli.Util";
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.HelpFormatter$1", options0, "2a}jJK,0%,`");
      helpFormatter0.findWrapPos("Qa2Ip? ~Q>pC~?3%Z2&", 9, 9);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(74);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      options0.helpOptions();
      helpFormatter0.printHelp("-", "-", options1, "-", true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
      helpFormatter0.setLongOptPrefix("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("<", 1, (-144));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ")|WXLhS";
      String string1 = "";
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("r+$CF&V_WAj", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      helpFormatter0.printHelp("a}jJK,0%,`", "a}jJK,0%,`", options0, "a}jJK,0%,`");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      stringWriter2.write(34);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-5018), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 75, (Options) null, 1, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]NyF&o");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "'l[\"i=^EazCO", options0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "]NyF&o");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "{", "", options0, 3, 3, "?I3cZt5/n|WPF", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?I3cZt5/n|WPF", "line.separator", (Options) null, "?I3cZt5/n|WPF", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 74, "--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("s9p~%>:&re6BGgd@6J", "s9p~%>:&re6BGgd@6J", options1, "");
      helpFormatter0.renderOptions((StringBuffer) null, 71, options0, 2, 71);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("Z", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3097, options1, 3, 1639);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 74, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-1), 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2, "-", "usage: ", options2, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 34, (-1543), "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, (-30), "9*bG&hv|i94ax7FA");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "/T))Z?{o]Bt2t9G");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 74, options0, 31, 3);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "\n", "-", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", "(_G", options0, "gsF9nnq8/*L");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp(54, "\n", "-", options1, "usage: ");
      helpFormatter1.printHelp("arg", "=", options0, "arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 276, "arg");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter1.printHelp(1, "kr,1;&GR?rX^", "-", options1, "");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      Option option0 = new Option("", true, "z]6ZaUu{o{ibJ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "--", options1, "usage: ");
      helpFormatter0.printHelp("]", "arg", options0, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-2), (-2), "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      options1.getOption("[ Options: [ short ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "[ Options: [ short ";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, (-1), (-2), "[ Options: [ short ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ";mN&[GlZWa/Ifay.>", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      doReturn(9).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, true, "usage: ");
      options2.addOption(option0);
      helpFormatter0.printHelp("tQR{&St1i~", "n", options2, "M-5np");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("Z", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("arg", false, "'A#u%zvcj~TJ:Wq[-");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      options1.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp(2090, "=$N!69bF7%@XU/f]O", "org.apache.commons.cli.Option", options2, "[");
      Options options3 = new Options();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-881), 4094, "bLpgMlF?4.Z~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("--", "--", options2, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, (String) null, "usage: ", options1, (-2190), (-2190), "uYR?7thuR-(1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setLongOptSeparator(",00wL=F2ip3.cex=+/");
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",00wL=F2ip3.cex=+/", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 64, "");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", (String) null, options0, 64, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      String string0 = "]{d[HoCIwm+Lr.NyP";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(115, "L'W&+2h+", (String) null, (Options) null, "]{d[HoCIwm+Lr.NyP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "8@:-Tt\\+?M$+.";
      helpFormatter0.setArgName("8@:-Tt+?M$+.");
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      options0.hasOption("%q8LjD,s*IEx7,d!");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-809);
      helpFormatter0.setWidth((-809));
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("JFZI1OYNtp/+", "arg", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = object0;
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.setLongOptPrefix((String) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 637, "uYR?7thuR-(1", "uYR?7thuR-(1", options0, 10, 637, "uYR?7thuR-(1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-5509), "?I3cZt5/n|WPF", "", options1, 15, 0, "}UB9", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]NyF&o");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "-", options0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "]NyF&o");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 101, "]NyF&o", "", options0, 34, 19, "", false);
      helpFormatter0.setWidth(101);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("]5$u!$,'_CG1/NQx");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      Option option0 = new Option("_u", false, (String) null);
      option0.setRequired(false);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(21, "I7'per_3YT", "Ohgp})S6%HU\"(.@2S", options2, "_u");
      int int0 = (-1701);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1701));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      File file0 = MockFile.createTempFile("Aa^XAOA*mo#n^vu", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 0, options0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "\"";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) comparator0;
      objectArray0[6] = (Object) "\"";
      PrintWriter printWriter0 = mockPrintWriter0.format("\"", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg", 1, 3);
      helpFormatter0.printUsage(printWriter1, (-1), "\"");
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      options0.helpOptions();
      helpFormatter0.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2121), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "uYR?7thuR-(1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(5324, "arg", "", options0, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.setLongOptPrefix("}y:1p}vB3}5n#a,");
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "Gui%(vVM 2e%dGbz}Um", false, "[");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3226), options2, 3665, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter1 = new StringWriter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      mockPrintWriter0.print((Object) printWriter0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lTWRZCW#y<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3259, "^.zWoSRz", "cmdLineSyntax not provided", options0, (-22), 3259, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "-");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("pSz/LB.Z\";f9'vo{#z", "z]6ZaUu{o{ibJ", options3, "M-5np");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(9);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 3259, 9, "uYR?7thuR-(1");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2, "cmdLineSyntax not provided", " | ", options2, " | ");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("pSz/LB.Z\";f9'vo{#z");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Option option0 = new Option("WT", "--");
      Options options1 = options0.addOption(option0);
      String string0 = "3(7ihUaXoo\\u1<";
      helpFormatter0.printHelp("i6&V", string0, options1, "i6&V");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "\n", (File) null);
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption(">h", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>h' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      int int0 = (-2);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "usage: ", (-2), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "]", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(5324, "arg", "arg", options0, "raY");
      helpFormatter1.getWidth();
      helpFormatter0.setLongOptPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      PrintStream printStream0 = mockPrintStream0.append('I');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      int int0 = (-2291);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2450, "", (String) null, options0, 3259, 122, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("XW#23.lmHv!8:j79%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintWriter2.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1);
      mockPrintWriter1.checkError();
      mockPrintWriter2.append('z');
      mockPrintWriter2.println(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 4318, "", "", (Options) null, 1, 4318, "9:SpJ/GqL${0f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("S", true, "3Pe9aO@E");
      options1.addOption("", "g7i1lqE`gNZD!gMK^P", true, "9WIhoBl<?>;E($NMa");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1230), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "uYR?7thuR-(1", "uYR?7thuR-(1", options0, 3259, 1, "uYR?7thuR-(1", false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 64, (Options) null, 64, 67);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2291);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.println((Object) options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3259, "uYR?7thuR-(1", "uYR?7thuR-(1", options0, 690, (-2291), "uYR?7thuR-(1", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5324, (String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "z]6ZaUu{o{ibJ");
      options0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      OptionGroup optionGroup3 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup3);
      options1.hasOption("");
      optionGroup2.toString();
      helpFormatter0.printHelp(118, "-", "U9qx`mpm>", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "\n", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2291), "uYR?7thuR-(1", "uYR?7thuR-(1", options0, 3259, (-2291), "uYR?7thuR-(1", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(";{kHCz+yC?Ik$}mn");
      int int0 = 1398;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 1398, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      Options options0 = new Options();
      mockPrintWriter1.println(0);
      boolean boolean0 = false;
      String string0 = "";
      Option option0 = new Option("arg", "--", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "--", false, "9h7a`QL");
      options2.getOptionGroups();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 0, options2, (-2), 214);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "-");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pSz/LB.Z\";f9'vo{#z", "z]6ZaUu{o{ibJ", options3, "M-5np");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "~");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "]", options1, "~", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2134, "B,I&o", "B,I&o", options1, 0, 2242, "[");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      int int0 = (-2074);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "usage: ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options2.addOption("org.apache.commons.cli.AlreadySelectedException", "usage: ", false, "K|.a1&CqyAAHR01|h&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "z=%DQ.(hS\"AO";
      int int0 = 0;
      helpFormatter0.findWrapPos("z=%DQ.(hS\"AO", 0, 0);
      PrintWriter printWriter0 = null;
      String string1 = "hi";
      String string2 = "[ option: ";
      Options options0 = new Options();
      String string3 = "";
      Options options1 = options0.addOption("", true, "V|U");
      String string4 = "<";
      // Undeclared exception!
      try { 
        options1.addOption("<", "usage: ", true, "<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", false, ">");
      helpFormatter0.printHelp(";1sC/Hz92*", options0);
      helpFormatter0.setArgName(";1sC/Hz92*");
      helpFormatter0.findWrapPos(";1sC/Hz92*", 2253, 2253);
      Option option0 = null;
      try {
        option0 = new Option("\n", true, "uwH>A+A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b`S}=-D(";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOption("");
      helpFormatter0.printHelp("b`S}=-D(", options0, true);
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-229);
      helpFormatter0.setLeftPadding((-229));
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.createPadding(10);
      helpFormatter0.setDescPadding((-1008));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = null;
      stringBuffer0.append(1.0);
      stringBuffer0.append(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-229), (Options) null, 10, (-1008));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "jn", true, "arg");
      helpFormatter0.printUsage(printWriter0, 74, "", options1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ">");
      helpFormatter0.printHelp(";1sC/Hz92*", options0);
      helpFormatter0.setArgName("");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.printHelp(">", "kB?[A]BFXQV{2UeD0kk", options1, ">", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2253, 2253, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) charBuffer0, 0, (-2));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = (-3991);
      int int1 = 460;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "kB?[A]BFXQV{2UeD0kk", (Options) null, "c+r", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("Aa^XAOA*mo#n^vu", "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "}X~EG'<*,ofC\"Zn-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // }X~EG'<*,ofC\"Zn-
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("Cannot add value, list full.");
      helpFormatter0.setOptPrefix("(+dH");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      int int0 = helpFormatter0.findWrapPos("]", 3, 3);
      assertEquals("Cannot add value, list full.", helpFormatter0.getLongOptPrefix());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      String string0 = "";
      helpFormatter0.rtrim("");
      int int0 = (-217);
      String string1 = "C#";
      String string2 = "6%H&";
      Options options0 = new Options();
      String string3 = "";
      String string4 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
