/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:39:52 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 9;
      helpFormatter1.renderWrappedText(stringBuffer0, 9, 3, "[ option: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3691));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) ">";
      PrintWriter printWriter0 = mockPrintWriter0.format(", ", objectArray0);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PrintWriter printWriter1 = mockPrintWriter0.format("usage: ", objectArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(printWriter0, 91, ", ", "m8+.Ik))K{X~", options0, 91, 91, "=y +/!I<", true);
      helpFormatter0.printWrapped(printWriter1, 5723, 582, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(91, "dQSwQe-C`<tQa);#n", "dQSwQe-C`<tQa);#n", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 117, 117, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%oq9%z{(");
      String string0 = "vbe1Mv?Ob=7:MI#FNt2";
      helpFormatter0.setNewLine("vbe1Mv?Ob=7:MI#FNt2");
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "vbe1Mv?Ob=7:MI#FNt2", "vbe1Mv?Ob=7:MI#FNt2", options0, "org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y[3<8 Kyjs3 V}\"_");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultLeftPad = (-780);
      Options options1 = options0.addOption("", "--", true, "usage: ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "arg");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3341), "vC", "kY8ER:(", (Options) null, "vC", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 97;
      String string0 = "arg";
      String string1 = "Y~32z]3P}8)Nu]Q";
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 4, "arg", "B*48('m&_(]:X[%[a", options1, 2351, 681, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      int int0 = (-3258);
      helpFormatter0.setWidth((-3258));
      helpFormatter0.rtrim("\n");
      int int1 = 32;
      helpFormatter0.setDescPadding(32);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "/Pn";
      mockPrintWriter1.format("\n", (Object[]) null);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("arg");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      options0.addOption("", true, "/Pn");
      options0.getOptions();
      int int2 = 2926;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "/Pn");
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "xk9pO", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(61, "JP~.9oXPZEd1'4", "[", (Options) null, "ZB-\"g.4`%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 1;
      int int1 = (-2521);
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2521), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-848), "`gV");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dfjIlqKX!LU");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "|tLI");
      Option option0 = new Option("arg", "arg", false, "|tLI");
      options1.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Q<&4L?AzrP");
      Options options1 = new Options();
      helpFormatter0.printHelp("Q<&4L?AzrP", " ", options1, "_iAP/r#WhZT[H'~f", true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = new StringBuffer(1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 65, (-3026), "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-3026), 137, "_iAP/r#WhZT[H'~f");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultLeftPad = 2;
      String string1 = null;
      helpFormatter0.setArgName("J(I");
      helpFormatter0.setArgName(" +O+\"4V9gDxbfR[5s");
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Q<&4L?AzrP");
      Options options1 = options0.addOption(option0);
      String string0 = "_iAP/r#WhZT[H'~f";
      helpFormatter0.printHelp("Q<&4L?AzrP", " ", options1, "_iAP/r#WhZT[H'~f", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 65;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 65, 65);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 113, (String) null, "f@9K]r=YbRrOD/;", options0, 289, 10, "6i8%1_>1!zX*F!", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter1.findWrapPos("\n", (-1), 1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "arg", "[", options0, 1, 34, (String) null, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "6i8%1_>1!zX*F!", "cmdLineSyntax not provided", options0, 74, 3, "arg", true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 63, options0, 63, 63);
      helpFormatter0.renderOptions(stringBuffer1, 63, options0, 63, 63);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, " ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      Options options2 = options1.addOption((String) null, true, "iL`>^<kT'$M");
      options2.hasLongOption("1Hp~Qx(B");
      helpFormatter0.printHelp("mf+L=5:!", "NO_ARGS_ALLOWED", options1, "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3296, "-", (String) null, options1, 83, 408, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 408, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("+m5<sE/JyK", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      PrintStream printStream1 = mockPrintStream1.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream1, true);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) printStream1;
      objectArray1[1] = (Object) options0;
      objectArray1[2] = (Object) helpFormatter0;
      objectArray1[3] = (Object) "+m5<sE/JyK";
      Object object0 = new Object();
      objectArray1[4] = object0;
      objectArray1[5] = (Object) printStream1;
      objectArray1[6] = (Object) "+m5<sE/JyK";
      objectArray1[7] = (Object) options0;
      objectArray1[8] = (Object) mockPrintWriter0;
      options0.hasOption((String) null);
      mockPrintStream1.format("arg", objectArray1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "+m5<sE/JyK");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-376), "+m5<sE/JyK", "+m5<sE/JyK", options0, (-2605), (-2794), "E=U9#8Z)zjTMT4.'&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", false, "\n");
      options1.hasLongOption("--");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "arg", "arg", options0, 32, 32, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "--", (Options) null, "Iw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("|}X)I,-_cm10");
      Option option0 = new Option("", "Ff4)%8M{yePp19'ZR");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(U%FbCUK?[H");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", true, (String) null);
      helpFormatter1.printHelp(":M '", ":M '", options2, "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 38, 18, ":sl_4a*G_x!VP$1ELZ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "]IN~fQgQ6=k|Y9x3", true, "usage: ");
      helpFormatter0.printHelp(":sl_4a*G_x!VP$1ELZ", options3);
      helpFormatter0.setNewLine(":sl_4a*G_x!VP$1ELZ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-505), "\"", "]IN~fQgQ6=k|Y9x3", options1, "\"", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("~!T32", ".u3bz[]m", options1, "Illegal option name '", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", true, "\n");
      options1.hasLongOption("--");
      helpFormatter0.printHelp("g", "", options0, "A CloneNotSupportedException was thrown: ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      int int0 = (-3258);
      helpFormatter0.setDescPadding((-3258));
      helpFormatter0.setWidth((-3258));
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding((-1116));
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", options0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Kn-4");
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) " ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " ";
      PrintStream printStream0 = mockPrintStream0.format(locale0, " ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "79");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOptions();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("g", " | ", false, "T-B8TKUSfm.~+");
      options1.hasLongOption("--");
      StringWriter stringWriter0 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.write("");
      Options options2 = options0.addOption("arg", "", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "g", "The option '", options2, 74, (-1959), "g", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.getDescPadding();
      helpFormatter1.defaultLeftPad = 1;
      helpFormatter0.printHelp(63, "iN>u(|,4Q[C:", "usage: ", options0, "", true);
      options0.toString();
      helpFormatter0.renderOptions((StringBuffer) null, 6, options0, 31, 58);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("arg", options0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('U');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 40, "-", options1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 521, "4/@z7&");
      helpFormatter0.getArgName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.println(0.0F);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 74, 74, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Q<&4L?AzrP");
      Options options1 = options0.addOption(option0);
      String string0 = "_iAP/r#WhZT[H'~f";
      helpFormatter0.printHelp("Q<&4L?AzrP", "Illegal option name '", options1, "_iAP/r#WhZT[H'~f", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 65;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 65, 65);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      options0.helpOptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<");
      Locale locale0 = new Locale(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "LVxU$&:";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "<";
      objectArray0[3] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 725, 34, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1548), "Rv+", "Rv+", options0, 787, (-2), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("arg", options0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~t3");
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1607), "w$|gpiyQV@G8nx)[+%", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("LVxU$&:", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("#3(VTvXO#hV_a", "Illegal option name '", options1, "org.apache.commons.cli.HelpFormatter", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW~97+i");
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Integer>();
      Options options1 = options0.addOption("g", true, "g");
      options1.hasLongOption(":sD,<M<");
      StringWriter stringWriter0 = new StringWriter(19);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, ":sD,<M<", "", options0, 1, 10, "[", true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 19, 74, "VMag[sx7eM[@L7/NV");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = 34;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 58, "[", ",:B", (Options) null, (-2), 1, ",:B", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%oq9%z{(");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 563, "%oq9%z{(");
      String string0 = "vbe1Mv?Ob=7:MI#FNt2";
      helpFormatter0.setNewLine("vbe1Mv?Ob=7:MI#FNt2");
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1567), "vbe1Mv?Ob=7:MI#FNt2", "vbe1Mv?Ob=7:MI#FNt2", options0, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-821), "", "-", options1, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      options0.helpOptions();
      Option option1 = new Option("arg", ")u");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      option1.clone();
      helpFormatter1.printHelp("Vlx2)|xL<FR", options0, true);
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.OptionGroup", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), ")u", "usage: ", options1, 74, 3, "Vlx2)|xL<FR");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-P[VLRmIKG0~97+<i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      options1.hasOption(" | ");
      option0.setValueSeparator('G');
      helpFormatter0.printHelp(" | ", "g", options1, "[");
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), ">ke]ej19D", (String) null, options0, 31, (-84), "{+5Nh|=>");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      options1.hasOption(" | ");
      String string0 = "";
      option0.setValueSeparator('G');
      helpFormatter0.printHelp(" | ", "g", options1, "");
      int int0 = 3;
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.getLongOptSeparator();
      int int1 = helpFormatter0.defaultLeftPad;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      int int2 = 563;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" | ", 563, (-1424));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h{");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = 686;
      mockPrintWriter0.println(7167.185F);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 686, "-khVLRmIKW0~97+i", "-khVLRmIKW0~97+i", options0, 686, (-2), "-khVLRmIKW0~97+i", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      helpFormatter0.setDescPadding((-2));
      options1.hasLongOption(":sD,<M<");
      options1.hasOption(" | ");
      option0.setValueSeparator('G');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "g", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("@", "", false, " ");
      Options options1 = options0.addOption(option0);
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.createPadding(44);
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(44);
      helpFormatter0.findWrapPos("                                            ", (-4148), (-4148));
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "", "", options1, (-2), (-1), "=b,j ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "j gKYS");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      options1.hasOption(" | ");
      option0.setValueSeparator('G');
      helpFormatter0.printHelp(" | ", "g", options1, "");
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("#gsw", 3, 0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "j ugKYS");
      helpFormatter0.getArgName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2, 2, "j ugKYS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "j ugKYS");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "eY9?qA\"Rv;,)+U", false, "");
      int int0 = 14;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "j ugKYS", "j ugKYS", options1, (-1127), 14, "", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(false);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      helpFormatter0.printHelp(" | ", "g", options1, "");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, ":sD,<M<", "", options0, 1, 10, "[", true);
      charArray0[4] = 'G';
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 74, "VMag[sx7eM[@L7/NV");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      options0.helpOptions();
      Option option1 = new Option("arg", ")u");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      option1.clone();
      helpFormatter1.printHelp("Vlx2)|xL<FR", options0, true);
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.OptionGroup", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", ":Q", options1, (-2096), (-1167), "-");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(false);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      helpFormatter0.printHelp(" | ", "g", options1, "");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, ":sD,<M<", "", options0, 1, 10, "[", true);
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.append('d');
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3342));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      options0.helpOptions();
      Option option1 = new Option("arg", ")u");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("Vlx2)|xL<FR", options0, true);
      Options options1 = options0.addOption(option1);
      helpFormatter1.printHelp("A CloneNotSupportedException was thrown: ", "arg", options1, "--", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "UUYVJI.oXqj|r(K]Sx\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = 0;
      // Undeclared exception!
      helpFormatter1.printHelp("Its{|=:-", "", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3296, "", (String) null, options1, 83, 408, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "j ugKYS");
      helpFormatter0.getArgName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, " :: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(false);
      Options options1 = options0.addOption("g", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      option0.setValueSeparator('G');
      helpFormatter0.printHelp(" | ", "g", options1, "");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('d');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.println((float) (-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, (-2), "T-B8TKUSfm.~+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "6i8%1_>FKzX-F!");
      helpFormatter0.printHelp("LVxU$&:", "LVxU$&:", options1, ";");
      helpFormatter0.createPadding(9);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("%E9bX.h%9Nz]Mlqo~", options0, false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.printHelp(">", "", options0, "|9LJPTkbaP:2|Uqg/BC", false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 641, 414, "<");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("At|bA%K6{");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "vxY@/W*B>w^joQ0:", options0, "s", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 66, 66, "6]/P@7`5c^<X*ID#BE");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      Options options1 = options0.addOption("", " | ", true, "T-B8TKUSfm.~+");
      options1.hasLongOption(":sD,<M<");
      helpFormatter0.printHelp(" | ", "", options1, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "p% V(mxwEF{");
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("arg", options1, false);
      helpFormatter0.printHelp(">", "", options0, "|9LJPTkbaP:2|Uqg/BC", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      int int0 = (-3258);
      helpFormatter0.setWidth((-3258));
      helpFormatter0.rtrim("\n");
      int int1 = 32;
      helpFormatter0.setDescPadding(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "/Pn";
      Options options1 = options0.addOption("", true, "/Pn");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptions();
      int int2 = 2926;
      options1.hasOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("RK", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1609));
      Options options1 = options0.addOption("", "--", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "j ugKYS");
      helpFormatter0.getArgName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("e:&M7C");
      Locale locale0 = Locale.US;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.apache.commons.cli.HelpFormatter$OptionComparator", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      options1.getOptions();
      options0.hasOption("--");
      helpFormatter0.printOptions(printWriter0, 13, options0, 13, 13);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "|", options1, "|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setWidth((-3258));
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "/Pn";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Options options1 = options0.addOption("", true, "/Pn");
      options0.getOptions();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, "/Pn");
      helpFormatter0.getArgName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3258), options1, 32, 2926);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "LVxU$&:";
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      helpFormatter0.printHelp(3729, "LVxU$&:", "has already been selected: '", options0, "has already been selected: '", true);
      options0.hasShortOption("org.apache.commons.cli.HelpFormatter$1");
      Options options1 = options0.addOption("", true, "p% V(mxwEF{");
      Options options2 = options1.addOption("", "--", true, "6i8%1_>FKzX-F!");
      helpFormatter0.printHelp("LVxU$&:", "LVxU$&:", options2, ";");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vbe1Mv?Ob=7:MI#FNt2";
      String string1 = ".1/<m3+3aD9UIDVBX~";
      helpFormatter0.setNewLine(".1/<m3+3aD9UIDVBX~");
      Options options0 = new Options();
      helpFormatter0.printHelp(4898, ".1/<m3+3aD9UIDVBX~", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException");
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1693;
      helpFormatter0.setDescPadding(1693);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, (-1231), (-1231));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("I@", "usage: ", true, "})\"v5(k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'I@' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1556), (-1556), "4z73y)/Ph");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.print((long) 3);
      int int0 = (-490);
      mockPrintWriter0.print(false);
      mockPrintWriter0.print(1920.139F);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-490), "hs?ia<etg%}e");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "?n3wl?CF&HA", options2, "8(!g1Q>x", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vbe1Mv?Ob=7:MI#FNt2";
      helpFormatter0.setNewLine("vbe1Mv?Ob=7:MI#FNt2");
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1567), "vbe1Mv?Ob=7:MI#FNt2", "vbe1Mv?Ob=7:MI#FNt2", options0, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setSyntaxPrefix(";F09=''");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-749), 1, "wru1r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("(&3yl7Ptpxu<Hm+?");
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'r';
      charArray0[2] = 'V';
      charArray0[3] = 'j';
      charArray0[4] = '^';
      charArray0[5] = '1';
      stringBuffer0.insert(0, charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-4242), (-4242), "(&3yl7Ptpxu<Hm+?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      int int0 = (-3258);
      helpFormatter0.setWidth((-3258));
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding((-1116));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "#@@";
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1005);
      Options options0 = null;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, (CharSequence) "#@@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "F\"NkuA+k^[ut:0");
      Option option0 = new Option("", true, "usage: ");
      Options options2 = options1.addOption(option0);
      String string0 = " | ";
      Options options3 = options2.addOption("arg", "F\"NkuA+k^[ut:0", false, " | ");
      options1.getOptions();
      options3.getMatchingOptions("");
      helpFormatter0.defaultNewLine = "";
      options3.hasOption("2P8NKYcC:/!Lg7?@7K");
      options3.hasShortOption("-aM 6yqc38G/");
      helpFormatter0.printHelp("!f()B*0_d'2sGo/J", "-", options3, "!f()B*0_d'2sGo/J");
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "arg", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      options0.hasLongOption(" ");
      StringWriter stringWriter0 = new StringWriter(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 105, "g", (String) null, options1, 10, 1, "]", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 60, 63, "[");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("[");
      int int0 = (-2);
      helpFormatter0.setWidth((-2));
      helpFormatter0.rtrim("7q;_93m(PhErzDMJ;x*");
      helpFormatter0.setDescPadding((-187));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("[", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.hasLongOption("--");
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.write("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setWidth((-3258));
      helpFormatter0.rtrim("\n");
      helpFormatter0.setDescPadding(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "/Pn";
      Options options1 = options0.addOption("", true, "/Pn");
      options0.getOptions();
      options1.hasOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3258), options1, 32, 2926);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+fybJB";
      helpFormatter0.setArgName("+fybJB");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = "' was specified but an option from this group ";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", true, "\n");
      options1.hasLongOption("--");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.write(" | ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "--", "", options0, 1, 10, " | ", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "'";
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "--";
      options0.toString();
      helpFormatter0.defaultNewLine = "={T_{T4`85$Y<Gd";
      helpFormatter0.printHelp("--", "--", options0, "ds)gY", false);
      helpFormatter0.defaultDescPad = 2576;
      helpFormatter0.defaultArgName = "y^.vL{%.W-[R0ZL33";
      options0.helpOptions();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLongOptSeparator("0T\":),2lA3]-\u0000**h5^");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append(false);
      stringBuffer0.insert(0, 0.0);
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer0, 2576, options0, 2576, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2849));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("At|bA%K6{");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "p_fl zd,", "vxY@/W*B>w^joQ0:", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-khVLRmIKW0~97+i");
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", true, "arg");
      option0.setRequired(true);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "LVxU$&:";
      helpFormatter0.setLongOptSeparator("LVxU$&:");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "p% V(mxwEF{");
      Options options2 = options1.addOption("", "--", true, "6i8%1_>FKzX-F!");
      helpFormatter0.printHelp("LVxU$&:", "LVxU$&:", options2, ";");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "<");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^L+\\(Xy8^xj.d\\,nB[ ";
      Options options0 = new Options();
      options0.helpOptions();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('R');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 0, 0);
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-2169));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("eM@f+j2+U%;[0", "[ option: ", (Options) null, ", ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
