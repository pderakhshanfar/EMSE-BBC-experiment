/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:47:57 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "sP'R&Ba1gV/G[U,4");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.setRequired(true);
      optionGroup2.setRequired(true);
      optionGroup2.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "sP'R&Ba1gV/G[U,4", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-2663), options0, 112, 10);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultDescPad = (-3443);
      helpFormatter0.setNewLine("x<NtMT");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", " ", false, "@\"U%o&pqc3[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("X", "\n", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "X", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setOptPrefix((String) null);
      String string1 = ":O`BW|*^2";
      helpFormatter0.setNewLine(":O`BW|*^2");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos(":O`BW|*^2", (-2104), 1);
      PrintWriter printWriter0 = null;
      int int0 = 85;
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      Options options1 = options0.addOption(option0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", (String) null, true, "_eN'h&0E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "/i8O:W", "/i8O:W", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 2637;
      int int0 = 285;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "[", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2106), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = ".]oZN";
      helpFormatter0.defaultOptPrefix = ".]oZN";
      helpFormatter0.setWidth(101);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultArgName = "";
      String string1 = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("", objectArray0);
      int int0 = (-2338);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("T>OVT='D,Hph+", false, "%;*lE!OHc-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'T>OVT='D,Hph+' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(34, "%1qdt=mf(", ">", options0, "\"F7.nuPG3");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(".", "", (Options) null, "79{V5'@Ba");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "X";
      Options options1 = options0.addOption("X", "\n", true, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option((String) null, " CA;ole", true, "usage: ");
      option0.setRequired(true);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "X", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "--");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 44, 0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "[");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "YA<M^", options2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(74, "\n", "\n", options1, "arg");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 44, 3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      File file0 = MockFile.createTempFile("arg", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      MockFile mockFile0 = new MockFile(file0, "");
      try { 
        MockFile.createTempFile("The option '", "jl<2c+b", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Pi@u";
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      Option option0 = new Option("", "usage: ");
      Options options2 = options1.addOption(option0);
      options0.hasShortOption("");
      Options options3 = options2.addOption("", "-", false, "The option '");
      // Undeclared exception!
      helpFormatter0.printHelp("The option '", options3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.printHelp(74, "\n", "\n", options1, "arg");
      helpFormatter1.findWrapPos("MgtFa[T/X", 1, 1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 93;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.optionComparator = null;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.rtrim("@9V*_Ri'");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '1';
      charArray0[2] = 'a';
      charArray0[3] = '';
      charArray0[4] = 'X';
      charArray0[5] = 'I';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 120, 114, "-");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.printHelp(74, "\n", "\n", options1, "arg");
      int int0 = 1;
      helpFormatter1.findWrapPos("-", (-1), 1);
      int int1 = (-19);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -19
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      options0.addOption((String) null, false, "3Cx|I");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1751, ">Ca.qIqE;@(s", options0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3395);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "[IJ`,i.", "", options0, 4351, 14, (String) null, true);
      helpFormatter1.getNewLine();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("t!");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 1, "--", options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      Options options0 = new Options();
      Options options1 = options0.addOption("5", "arg", true, "arg");
      options1.addOption("Ymx", "$3e#&eyl!Fn+8\"", true, "-");
      String string0 = helpFormatter0.defaultOptPrefix;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "-", "", options1, 375, 375, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2670);
      helpFormatter0.setDescPadding((-2670));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(93, "pPh!MIvHh;Yq", "", (Options) null, "org.apache.commons.cli.Util");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.setSyntaxPrefix("+(\"");
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "usage: ", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Hr~@S_wJs{D&1~fZJ]", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "CF\"\u0005](R[-F");
      Option option0 = new Option("", "");
      Options options3 = options2.addOption(option0);
      options3.getMatchingOptions("usage: ");
      Options options4 = options3.addOption("", "j&", true, "");
      helpFormatter0.printHelp(9, "--", "", options4, "j&");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println("-");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "lN21vSD%>wS09TESp");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1901), (Options) null, 31, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      mockPrintWriter0.println((-3485.9123839));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-514), "gzWNUeqO6 ", "-", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", true, "-");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3431, "line.separator", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("Fz7c_/(79;OAbPPwz?");
      String string0 = "A~\\k$xY{-Oyny";
      Option option0 = new Option((String) null, "A~k$xY{-Oyny", true, " ");
      Object object0 = new Object();
      Options options1 = options0.addOption("arg", true, "Fz7c_/(79;OAbPPwz?");
      int int0 = 3591;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[N3k4`&;Sf%Rr";
      helpFormatter0.defaultSyntaxPrefix = "[N3k4`&;Sf%Rr";
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 105, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "\"n41Wz!95u<b{@Ny";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "aSDSD_";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("aSDSD_", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.printf("-", objectArray0);
      String string0 = "U_b:>66;sV:";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-220), "U_b:>66;sV:", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "1FGvioH");
      options0.hasLongOption(" ");
      option0.clone();
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "-", options1, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-384), options0, 1, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter1.getNewLine();
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 11, "-", options1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "li==EUo2S9{N9^k`NZ", true, "_;#@MC*r(A");
      option0.clone();
      options0.addOption(option0);
      helpFormatter0.printHelp(63, "kvqENs:j^$DO", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~8 {{Aa3BZd)c_j");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(9, "-", "Anvk/%\u0005fN", options1, "u:]Z}c0+UT1wGPg");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "\"mgqF!eul/)", options0, 74, 3, "--", true);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2030);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-L{QTG:xanvl", "", (Options) null, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-L{QTG:xanvl", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "\n", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "\n", "arg", options0, 3, 74, "'UXm)}LW]|7'", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option("arg", "-");
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, (-1), "--");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "D>A&Rn:NC&pa T,", (Object[]) null);
      helpFormatter1.printOptions(printWriter0, 14, options0, 14, 3);
      helpFormatter1.printHelp(74, "]", "{F", options0, "M8|ai");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      int int0 = 34;
      StringWriter stringWriter0 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "cmdLineSyntax not provided";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "cmdLineSyntax not provided";
      Object object0 = new Object();
      objectArray0[5] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("cmdLineSyntax not provided", objectArray0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) " ", 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~8 {{Aa3BZd)c_j");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      helpFormatter2.printHelp(74, "--", "Anvk/%\u0005fN", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 3, 26);
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(74, "-", "rowgQj\"M<W>F:", options1, "org.apache.commons.cli.HelpFormatter$1");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 46, 74, "usage: ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      options0.addOption("N", true, "^ifz1'[pW2YFM6");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 20, "l6pGX=k8(Gu?8@&[]", "", options0, 31, 2202, "", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 400, "arg", "", (Options) null, (-1365), (-176), "w8ug#<rR_h.1\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 21, "\n");
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "#mfy**RBn@x", "Nx#!m+m}X7WA5o!y3%^", options0, 31, 31, "", true);
      helpFormatter0.setSyntaxPrefix("#mfy**RBn@x");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1681, "                               ", "-", options1, 31, 31, "                               ", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4321, "                               ", "", options1, 21, 31, "                               ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderWrappedText(stringBuffer0, 1003, 3, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("-");
      helpFormatter0.findWrapPos("", 0, 878);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 74, (-1872), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1667, 1, "");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      String string0 = "O";
      MockFile mockFile1 = new MockFile("O");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string1 = "";
      String string2 = "<Up{Ah--\"";
      MockPrintStream mockPrintStream0 = new MockPrintStream("<Up{Ah--\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp(3, "\n", "arg", options0, "-");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile1 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<Up{Ah--\"");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<Up{Ah--\"";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "'}cNxQC#pR.^";
      mockPrintWriter2.format("'}cNxQC#pR.^", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1048, "#NBy9TLVfF", "arg", options1, 3, 3, "", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setLongOptSeparator("aIfzEMf)l'=)%{p<Z%");
      mockPrintStream0.print(false);
      helpFormatter0.setWidth(672);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 672, " :: ");
      helpFormatter0.createPadding(672);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 672, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 2396, "_J|1$,E", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 672, "aIfzEMf)l'=)%{p<Z%");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(3490);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 0, (-1), "w8ug#<rR_h.1\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-1319));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile1 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<Up{Ah--\"");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<Up{Ah--\"";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "'}cNxQC#pR.^";
      mockPrintWriter2.format("'}cNxQC#pR.^", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1048, "#NBy9TLVfF", "arg", options1, 3, 3, "", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "UQ!$mQ}U{_c^", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "]";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "]";
      mockPrintWriter0.format("]", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1208), (String) null, (String) null, options0, 74, 78, "(lvG|yJ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.setSyntaxPrefix("]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile1 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<Up{Ah--\"");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<Up{Ah--\"";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "'}cNxQC#pR.^";
      mockPrintWriter2.format("'}cNxQC#pR.^", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1048, "#NBy9TLVfF", "arg", options1, 3, 3, "", true);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(" ", "", options0, "", true);
      helpFormatter0.printHelp("<Up{Ah--\"", "", options1, " ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("*iYhGU");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("*iYhGU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "*iYhGU";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "*iYhGU";
      helpFormatter0.defaultArgName = "";
      PrintWriter printWriter0 = mockPrintWriter0.format("*iYhGU", objectArray0);
      printWriter0.print((Object) helpFormatter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-203), 6, "*iYhGU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.write(3490);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "w8ug#<rR_h.1\"", "arg", (Options) null, 0, (-176), "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1428);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1428), "", " ", options0, (-1428), (-618), "d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile1 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<Up{Ah--\"");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "<Up{Ah--\"";
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "'}cNxQC#pR.^";
      mockPrintWriter2.format("'}cNxQC#pR.^", objectArray0);
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1048, "-", "", options0, 3, 0, " ", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      String string1 = "#mfy**RBn@x";
      Options options0 = new Options();
      int int0 = 0;
      String string2 = "_J|1$,E";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2396, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 0, "_J|1$,E", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockFile.createTempFile("5<W^&)4$QMU9D", "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ");
      int int0 = 827;
      helpFormatter0.createPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      options0.addOption("", false, "\n");
      // Undeclared exception!
      try { 
        options0.addOption("<", "`L#Y", false, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*iYhGU";
      helpFormatter0.setLongOptPrefix("*iYhGU");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("*iYhGU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "*iYhGU";
      objectArray0[2] = (Object) helpFormatter0;
      helpFormatter0.defaultArgName = "";
      mockPrintWriter0.format("*iYhGU", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "-");
      Options options2 = options1.addOption("arg", true, "yPIW*6'_9&mw");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.setSyntaxPrefix("5<W^&)4$QMU9D");
      helpFormatter0.setSyntaxPrefix("]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("<");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      mockPrintWriter2.write("]");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "5<W^&)4$QMU9D";
      objectArray0[2] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "5<W^&)4$QMU9D";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) mockPrintStream0;
      mockPrintWriter1.format("]", objectArray0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter3, (-373), " +XyaFbo}4v:o6OV|", "?`", options0, (-373), (-373), " +XyaFbo}4v:o6OV|", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      helpFormatter0.getOptPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string2 = "";
      MockFile mockFile1 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      stringWriter0.write(charArray0);
      int int0 = 108;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3284), 108, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) byteArrayOutputStream0;
      helpFormatter0.defaultOptPrefix = "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) byteArrayOutputStream0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 46, "&I`Ir}Um", "&I`Ir}Um", (Options) null, 10, 10, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.Option");
      mockFile0.setWritable(false);
      String string1 = "qKoiLp61rJf4#V6<C";
      MockFile mockFile1 = new MockFile(mockFile0, "qKoiLp61rJf4#V6<C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.cli.Option");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2976, (-1), "qKoiLp61rJf4#V6<C");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 0, (Options) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setLongOptSeparator("aIfzEMf)l'=)%{p<Z%");
      mockPrintStream0.print(false);
      helpFormatter0.setWidth(672);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 672, " :: ");
      mockPrintWriter0.println(true);
      helpFormatter0.createPadding(672);
      Options options0 = new Options();
      options0.hasShortOption("A CloneNotSupportedException was thrown: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 672, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 2387, "_J|1$,E", true);
      helpFormatter0.setSyntaxPrefix("aIfzEMf)l'=)%{p<Z%");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.printHelp(672, " :: ", "-", options
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.setOptPrefix("usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.printHelp(672, "#mfy**RBn@x", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.Option");
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "qKoiLp61rJf4#V6<C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      File file0 = MockFile.createTempFile(" ] [ long ", ".");
      mockFile0.renameTo(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.Option");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.findWrapPos("--", (-603), 74);
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter1.setNewLine("-");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "", options0, 6, 0, "", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setLongOptSeparator(" ");
      mockPrintStream0.print(false);
      helpFormatter0.setWidth(672);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 672, " :: ");
      helpFormatter0.createPadding(672);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 672, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 2387, "_J|1$,E", true);
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.Option", "dy1A$^:zuYR>,cg7N", options1, 9, (-259), "u.r4|Dc9li7%:=", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1428);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "--";
      objectArray0[3] = (Object) " ";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, (String) null);
      options1.addOption("", " ", true, "");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setLongOptSeparator("aIfzEMf)l'=)%{p<Z%");
      mockPrintStream0.print(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setWidth(672);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 672, " :: ");
      helpFormatter0.createPadding(672);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 672, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 2387, "_J|1$,E", true);
      helpFormatter0.setSyntaxPrefix("aIfzEMf)l'=)%{p<Z%");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 326, " Vo", (String) null, options0, 326, 0, "&J4BY2o", true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2387, 114, "#mfy**RBn@x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.hasShortOption("[ARG...]");
      options0.hasOption("usage: ");
      helpFormatter0.printHelp(" ", options0, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-382), options0, 0, 2976);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-6858), "F?zJZG3", "F?zJZG3", options0, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.Option");
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "qKoiLp61rJf4#V6<C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      File file0 = MockFile.createTempFile(" ] [ long ", ".");
      mockFile0.renameTo(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.Option");
      Options options0 = new Options();
      int int0 = 0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "arg", options0, 3, 3, "D[)5CA`mi", false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setLongOptSeparator("aIfzEMf)l'=)%{p<Z%");
      mockPrintStream0.print(false);
      helpFormatter0.setWidth(672);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 672, " :: ");
      mockPrintWriter0.println(true);
      helpFormatter0.createPadding(672);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 672, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 2387, "_J|1$,E", true);
      helpFormatter0.setSyntaxPrefix("aIfzEMf)l'=)%{p<Z%");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.printHelp(672, " :: ", "-", options
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.setOptPrefix("usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append('b');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      stringWriter0.write(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 617, 617, "org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(944, "<", "org.apache.commons.cli.ParseException", (Options) null, "<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1909;
      helpFormatter0.setLeftPadding(1);
      String string0 = "NL}\"zAI/_U Y0CfxF";
      Options options0 = new Options();
      helpFormatter0.printHelp("NL}\"zAI/_U Y0CfxF", options0);
      options0.getOption("[]1T./eB~vL\"m6");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 3, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('b');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      stringWriter2.write(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = null;
      MockFile mockFile0 = new MockFile((String) null, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1, false);
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "KKoiLp61Jf4#V6<C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[27];
      objectArray0[0] = (Object) "sG~#iy%QONA{*K(ov";
      objectArray0[17] = (Object) "KKoiLp61Jf4#V6<C";
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile1;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "";
      mockFile1.renameTo(mockFile0);
      Object object0 = new Object();
      objectArray0[7] = object0;
      mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1277), "has already been selected: '", "has already been selected: '", (Options) null, (-2007), 1489, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      helpFormatter0.printHelp(" ", options0, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~8 {{Aa3BZd)c_j");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "~8 {{Aa3BZd)c_j");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("*iYhGU");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("*iYhGU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "*iYhGU";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "*iYhGU";
      helpFormatter0.defaultArgName = "";
      PrintWriter printWriter0 = mockPrintWriter0.format("*iYhGU", objectArray0);
      int int0 = (-203);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-203), "^O.Mt?lx.U", "w8ug#<rR_h.1\"", (Options) null, (-203), (-203), "w8ug#<rR_h.1\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "org.apache.commons.cli.Option");
      mockFile0.setWritable(false);
      MockFile mockFile1 = new MockFile(mockFile0, "qKoiLp61rJf4#V6<C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      String string0 = ".";
      File file0 = MockFile.createTempFile(" ] [ long ", ".");
      mockFile0.renameTo(file0);
      int int0 = 31;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "org.apache.commons.cli.Option");
      helpFormatter0.createPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("A CloneNotSupportedException was thrown: ", false, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "-";
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintStream printStream0 = mockPrintStream0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "usage: ");
      Option option0 = new Option((String) null, true, "\"Ga5H*Wc+~OovN&");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|=||H#z^$K^0~)d";
      helpFormatter0.setLongOptSeparator("|=||H#z^$K^0~)d");
      helpFormatter0.defaultLeftPad = (-707);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = " | ";
      String string1 = "zB.I";
      String string2 = "I|Tg>f8lR";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("I|Tg>f8lR");
      mockFileOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int1 = 3084;
      Options options0 = new Options();
      mockFileOutputStream0.release();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) linkedList1;
      mockPrintWriter0.format((Locale) null, "\n", objectArray0);
      mockPrintWriter0.print(false);
      // Undeclared exception!
      try { 
        options0.addOption("--", "4@`jg]%*;", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1909;
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("NL}\"zAI/_U Y0CfxF", options0);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "NL}\"zAI/_U Y0CfxF", "NL}\"zAI/_U Y0CfxF", options0, "");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.print(false);
      helpFormatter0.setLongOptSeparator("aIfzEMf)l'=)%{p<Z%");
      mockPrintStream0.print(false);
      helpFormatter0.setWidth(672);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 672, " :: ");
      helpFormatter0.createPadding(672);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 672, "org.apache.commons.cli.Option", "#mfy**RBn@x", options0, 0, 2387, "_J|1$,E", true);
      helpFormatter0.setSyntaxPrefix("aIfzEMf)l'=)%{p<Z%");
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 326, " Vo", (String) null, options0, 326, 0, "&J4BY2o", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1428);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) " ";
      mockPrintWriter1.format("", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1428), "", "-", options0, (-1428), (-1428), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'hI";
      helpFormatter0.setOptPrefix("'hI");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("'hI");
      helpFormatter0.createPadding(1);
      StringWriter stringWriter0 = new StringWriter(413);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", 74, 4334);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("5<W^&)4$QMU9D", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "<4%PaV+t?", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-938), options1, (-938), (-938));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 13, "u@wAxyI;&|6h~GW");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = (-1);
      String string0 = "0Xk%~";
      String string1 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption(" ", "", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
