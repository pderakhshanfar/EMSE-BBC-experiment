* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-70
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 21410
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 4124139689
* Starting evolution
bbc usage percentage is: 70%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 08:26:19.079 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 604s and 157 generations, 64610 statements, best individual has fitness: 139.0
* Minimizing test suite
[MASTER] 08:37:45.055 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 201
* Number of covered goals: 200
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 149
* Number of covered goals: 134
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 478
* Number of covered goals: 442
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 61%
* Total number of goals: 46
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 149
* Number of covered goals: 132
* Generated 129 tests with total length 1866
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:38:36.140 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7885666666666666% of time used, but only 8/129 tests minimized), falling back to using all assertions
[MASTER] 08:38:50.130 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 08:39:20.412 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:20.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:20.620 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:20.677 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:20.736 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:20.778 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:20.831 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:39:25.412 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_167_tmp__ESTest.test0(HelpFormatter_167_tmp__ESTest.java:67)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:39:25.415 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotNull(helpFormatter0);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

helpFormatter0.setLongOptPrefix("");
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

Options options0 = new Options();
assertNotNull(options0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
assertNotNull(mockPrintWriter1);
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));

helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 17, "-bZ.&v", "line.separator", options0, 0, 2010, "-bZ.&v");
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotSame(mockPrintWriter0, mockPrintWriter1);
assertNotSame(mockPrintWriter1, mockPrintWriter0);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertFalse(fileDescriptor0.valid());
assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));

HelpFormatter helpFormatter1 = new HelpFormatter();
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertNotNull(helpFormatter1);
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

helpFormatter1.setOptPrefix("");
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertNotSame(helpFormatter1, helpFormatter0);
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

helpFormatter0.setLeftPadding(17);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(17, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotSame(helpFormatter0, helpFormatter1);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(17, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertFalse(helpFormatter0.equals((Object)helpFormatter1));

helpFormatter1.setWidth(1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertNotSame(helpFormatter1, helpFormatter0);
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("", helpFormatter1.getOptPrefix());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(1, helpFormatter1.getWidth());
assertFalse(helpFormatter1.equals((Object)helpFormatter0));

String string0 = helpFormatter0.createPadding(1375);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(17, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotNull(string0);
assertNotSame(helpFormatter0, helpFormatter1);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(17, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertFalse(helpFormatter0.equals((Object)helpFormatter1));

helpFormatter0.printHelp("usage: ", options0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(17, helpFormatter0.defaultLeftPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertNotSame(helpFormatter0, helpFormatter1);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(17, helpFormatter0.getLeftPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertFalse(helpFormatter0.equals((Object)helpFormatter1));


[MASTER] 08:39:46.309 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_222_tmp__ESTest.test0(HelpFormatter_222_tmp__ESTest.java:44)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 08:39:46.310 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Options options1 = options0.addOption((String) null, true, "--");
OptionGroup optionGroup0 = new OptionGroup();
optionGroup0.setSelected((Option) null);
options1.addOptionGroup(optionGroup0);
options0.getOptions();
helpFormatter0.printHelp("\n", options1);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
mockPrintWriter0.append((CharSequence) "--");
MockFile mockFile0 = new MockFile("e)%_wPva3>RkKZ*WR");
MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-436), (String) null, options0);

[MASTER] 08:39:47.646 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-70/tests/8
* Done!

* Computation finished
