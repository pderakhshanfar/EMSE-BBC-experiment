/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:03:07 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "mqw4}#&il#Jeb");
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options1, true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "\n");
      options1.addOption("", "usage: ", true, "usage: ");
      options1.getOptionGroups();
      helpFormatter0.printHelp(" ", "YaPJ", options1, "", true);
      int int0 = 34;
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding((-1160));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Gt;t\"}\"KR,A@%bzz|Q", "", options1, "&}apvN", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2278);
      helpFormatter0.setLeftPadding((-2278));
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2278));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      int int0 = (-893);
      helpFormatter0.defaultWidth = (-893);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", (Options) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "KB]^&tKU|", (Options) null, "dYsivX_nh8*$<uJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("x9U881wZB#S&/KtnJA");
      Option option0 = new Option("Y6", "-", false, ", ");
      options0.addOption(option0);
      helpFormatter0.printHelp(9, "x9U881wZB#S&/KtnJA", "#(Yw?K@@4Kx", options0, "#(Yw?K@@4Kx");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-2436), "G{CG{sqbeC)G");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "U?g";
      helpFormatter0.setSyntaxPrefix("U?g");
      int int0 = (-2581);
      helpFormatter0.setWidth((-2581));
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.HelpFormatter";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultDescPad = (-2581);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      PrintWriter printWriter0 = null;
      int int1 = 89;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("The option '", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("T@N?AW<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.FRENCH;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "t[", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-612), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1817);
      int int0 = 426;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#/z\"fAnBh/33S", "#/z\"fAnBh/33S", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding((-884));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, (-187), "Yi|(.F");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultLeftPad = (-49);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "a!w9EFuuhMd'", options0, "a!w9EFuuhMd'");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      String string0 = "OUiSgv";
      boolean boolean0 = true;
      Options options1 = options0.addOption("OUiSgv", "\n", true, "arg");
      helpFormatter0.defaultLeftPad = (-2021);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2021), options1, 471, 471);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(125, ">", ">", options0, "o#G");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 69, "!rUGy", "o#G", options0, (-100), 1823, ">");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("arg", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      Options options0 = new Options();
      Options options1 = options0.addOption("6F", true, "org.apache.commons.cli.Option");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg");
      Options options3 = options2.addOption(option0);
      options0.getMatchingOptions("");
      Options options4 = options3.addOption("", "", true, "5%bz1L>~:r\"ns");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1953), options4, 122, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "-x0T{~;sa, \\";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-x0T{~;sa, ");
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-x0T{~;sa, ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("arg");
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      Options options2 = options1.addOption("arg", false, (String) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 9, options2, 8, 9);
      int int0 = 60;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options1, 60, 8);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.findWrapPos("usage: ", 1, 1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 13, options1, 1, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("qxlaBZ", " ", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("NP", true, "-");
      helpFormatter0.printHelp("usage: ", options2, true);
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("NP", true, "%Pa-");
      helpFormatter0.printHelp("usage: ", options2, true);
      StringWriter stringWriter0 = new StringWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      helpFormatter0.printUsage(printWriter0, 74, "usage: ", options1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-724), "", "usage: ", options2, 1, 1, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1247);
      helpFormatter0.rtrim("(");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setArgName((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding((-2));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Nnk$8,+JQaE9bjM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = 119;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options0, 119, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('x');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) stringWriter1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("=s ,q", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2707), "'", (String) null, options0, 64, (-2707), (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("PV%O,", "PV%O,", (Options) null, "PV%O,", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jg?Gwsjamp*";
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " ", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      options1.addOption("", "-", false, " h@uCZQ[%)y");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("mM&Gg:o/", options0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("qxlaBZ", " ", false, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "$K", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("NP", false, "%Pa-");
      helpFormatter0.printHelp("usage: ", options4, true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      options0.getOption("");
      helpFormatter0.printHelp(3, "Z dgp!C=b)=:i%#", "usage: ", options0, "Jz0ni.&f-agt");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, (-1191));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`*VANG k9^j(S=w-dP");
      PrintWriter printWriter0 = mockPrintWriter0.append('-');
      int int0 = 474;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter0, 474, options1, 474, 1313);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1058), (-2436), "G{CG{sqbeC)G");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      mockPrintWriter0.printf("\n", (Object[]) null);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, "Z'j#C*b", "Z0+` dUD(m3*qmZC", options0, 2, 47, (String) null, true);
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "");
      options0.addOption("", true, "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1710), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "cmdLineSyntax not provided");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "usage: ", "SAs=yR", options0, "usage: ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 122, 74, "");
      helpFormatter0.printHelp("-", "9N?", options0, "usage: ", false);
      helpFormatter1.printHelp(74, "arg", "usage: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 43, (String) null, "]", options1, (-2), 1815, " [ARG]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "<n";
      PrintWriter printWriter0 = mockPrintWriter0.printf("jMW]E:=|'DA", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 1587, "g=!ThXIvd^K_jxee+U", " ", options0, 1978, 1587, "", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasOption("org.apache.commons.cli.Util");
      options0.addOption((String) null, true, "%T9W/Rc<274~KG^l");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "{p");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 43, "<n", (String) null, options0, 43, 45, "Z0+` dUD(m3*qmZC", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile(" ", "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.printf("arg", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "!|i;lI>Y7qu*", false, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "B]Le9RkLgv", ":`yE2UYhu#", options1, 16, 9, "", true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object object0 = new Object();
      mockPrintWriter0.printf("<n", (Object[]) null);
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 61, "Z0+` dUD(m3*qmZC", "Z0+` dUD(m3*qmZC", options1, 43, (-2), "XN?T|d*v{}]0,ETD]%", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.addOption("arg", "--", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "3BE\"<e<S[i1", "", options0, 1, (-1579), "");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\"ZR1/o");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "/zO4pSRL8@s3ad", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1990);
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1088), "D)q_yAJ41L`4H&p(7U", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(43);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[3];
      stringWriter0.write(100);
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("<n", objectArray0);
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("<n", options1);
      helpFormatter0.printUsage(printWriter0, 3, "5SJ-akbqVB;@", options1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(43);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("<n", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 43, "g=!ThXIvd^K_jxee+U", "D", options1, 1587, 43, "line.separator", false);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('J');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "", "TEi$", options0, 31, 31, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-257);
      String string0 = "*V:0xQuj)";
      Options options0 = new Options();
      String string1 = "&F2&r";
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("&F2&r", 65, (-271));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "TD^9jfxG", "TD^9jfxG", options0, 577, 34, "A");
      Options options1 = new Options();
      options1.addOption((String) null, true, "org.apache.commons.cli.Options");
      helpFormatter0.printHelp("org.apache.commons.cli.Options", options1, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("arg", "", true, "\n");
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "usage: ", true, "usage: ");
      helpFormatter0.printHelp(3, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "T;`pO~OH=rb", "'", options2, (-1), (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      Options options0 = new Options();
      String string1 = " ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-246), " ", "[ARG...]", options0, (-246), 34, "A");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer0, (-513), options0, 249, 249);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(64);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "\n");
      options1.addOption("", "usage: ", true, "usage: ");
      helpFormatter0.printHelp(3, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "--", "", options1, "qyLIMwgS8Z0PW|^J},");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("aIj`I.1zld!s");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-233), "", "WI&g>J=\"2", options0, 23, (-233), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("aIj`I.1zld!s");
      Options options0 = new Options();
      int int0 = 1939;
      int int1 = (-2388);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.renderOptions((StringBuffer) null, 1340, options1, 3, 3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 4434, (-2388), "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("vOP3d2E:R.O", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, (-382));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1805), "c:<3pzo`5*nJ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "\n");
      options1.addOption("", "usage: ", true, "usage: ");
      helpFormatter0.printHelp(3, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2963, "", "The option '", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter", "p<Zk|z<87G()B;(JW", options0, " [ARG]", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("aIj`I.1zld!s");
      Options options0 = new Options();
      String string0 = "WI&g>J=\"2";
      boolean boolean0 = true;
      String string1 = "line.separator";
      options0.getMatchingOptions("51o1");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "aIj`I.1zld!s", "line.separator", options0, (-501), 32, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "\n");
      options1.addOption("", "usage: ", true, "usage: ");
      options1.getOptionGroups();
      helpFormatter0.printHelp("1trj", "YaPJ", options1, "", true);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(3, "Gt;t\"}\"KR,A@%bzz|Q", "", options1, "&}apvN", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "g2CgA^lyd;@!K%";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "wVLl`rYGDCN", false, "usage: ");
      helpFormatter0.printHelp(571, "g2CgA^lyd;@!K%", "g2CgA^lyd;@!K%", options2, "|@rSi");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 100, options1, 2846, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "k|!ZQL2h\\Jfc\"bZj/";
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append('_');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 34, 34, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/4L1Q+&");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(571, "wVLl`rYGDCN", "g2CgA^lyd;@!K%", options0, " :: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 10, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim((String) null);
      int int0 = (-1797);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1797), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(577, "vB0JjQ~XQ(Iqh[", "", options1, "?u", false);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(577, (String) null, "Su_2V7", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/>";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.getLongOptSeparator();
      String string1 = "[3";
      helpFormatter0.rtrim("[3");
      PrintWriter printWriter0 = null;
      int int0 = (-1091);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1091), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(577, "", "'K} 4ft~=", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "", true, "\n");
      options1.addOption("", "usage: ", true, "usage: ");
      helpFormatter0.printHelp("1trj", "YaPJ", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 70;
      Options options0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(70, ";t$:hap[Dw>ae`/*'", ";t$:hap[Dw>ae`/*'", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.defaultLongOptPrefix = "no4";
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      options0.hasShortOption("--");
      options0.getMatchingOptions("The option '");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "no4", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " [ARG]";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter", "", options0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, (String) null);
      helpFormatter0.printHelp(":[=~`:", options1, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "aIj`I.1zld!s";
      helpFormatter0.rtrim("aIj`I.1zld!s");
      PrintWriter printWriter0 = null;
      int int0 = 693;
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "WI&g>J=\"2";
      int int1 = (-1737);
      int int2 = (-1144);
      String string3 = "b5et";
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 693, (-2008), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", " ", false, (String) null);
      helpFormatter0.printHelp(2252, "--", "--", options0, "!;");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.setSyntaxPrefix("7Mi'GaNb+");
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "arg", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      int int0 = 0;
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("w`'9", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'w`'9' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setDescPadding(1666);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1666, (-2), "");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2306, "org.apache.commons.cli.HelpFormatter", "", options0, "has already been selected: '");
      Options options1 = options0.addOption("", " [ARG]", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      option0.setLongOpt("-");
      optionGroup0.setSelected(option0);
      option0.toString();
      optionGroup0.toString();
      optionGroup0.setSelected(option0);
      options1.addOption("qx", "arg", true, " ");
      options1.addOptionGroup(optionGroup0);
      options0.getOptionGroups();
      helpFormatter0.printHelp(" [ARG]", options1);
      options0.getOptions();
      helpFormatter0.setNewLine("+(V");
      helpFormatter0.setWidth(9);
      helpFormatter0.setNewLine("V;u>f'qo}{|ca");
      helpFormatter0.printHelp("1DO#t)'3@JH2@", "Fgl:3^kX)/&]OS;f!", options1, "");
      helpFormatter0.printHelp(9, " [ARG]", "Fgl:3^kX)/&]OS;f!", options0, "+(V");
      helpFormatter0.printHelp(" ] [ long ", options1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("Fgl:3^kX)/&]OS;f!");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('*');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 32, options1, 32, 773);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 32, options1, 773, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "\\I#\"~u\"TRx!a";
      MockFile mockFile1 = new MockFile(mockFile0, "I#\"~u\"TRx!a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = (-4648);
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      int int1 = 0;
      String string2 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-4648), "I#\"~u\"TRx!a", "org.apache.commons.cli.HelpFormatter$1", (Options) null, 761, 0, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "h0ne`qVR\"'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "H*HN$Abn6TA(NI!h>";
      String string1 = "Q&\"BD";
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Q&\"BD");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "0e:!oX+nic");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      StringBuffer stringBuffer0 = new StringBuffer(" ] [ long ");
      int int0 = 9;
      helpFormatter0.createPadding(9);
      Object object0 = new Object();
      stringBuffer0.append(object0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1720), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1720
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.addOption("1trj", "YaPJ", false, "-");
      options0.addOption("1trj", (String) null, true, "\n");
      boolean boolean0 = true;
      helpFormatter0.printHelp("ZaiB0ZZ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "ZaiB0ZZ", true);
      String string0 = "8.p2z23=Q@1at%mZ30P";
      int int0 = 44;
      helpFormatter0.defaultLeftPad = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "8.p2z23=Q@1at%mZ30P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "Lu2-[1:K|A/,=v\"PM2";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-542), (-542), "Lu2-[1:K|A/,=v\"PM2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "g2CgA^lyd;@!K%";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "wVLl`rYGDCN", false, "usage: ");
      helpFormatter0.printHelp(571, "g2CgA^lyd;@!K%", "g2CgA^lyd;@!K%", options2, " :: ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      int int0 = (-261);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1497), options0, 854, (-261));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "hZ\\p0idKAuF;T";
      helpFormatter0.defaultOptPrefix = "hZp0idKAuF;T";
      int int0 = 881;
      helpFormatter0.defaultLeftPad = 881;
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("The option '");
      helpFormatter0.setLongOptSeparator("LvMernPU~3isi*]Z^j1");
      helpFormatter0.getOptPrefix();
      String string1 = "[";
      String string2 = null;
      try { 
        MockURI.URI("[", "", (String) null, "arg", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: [://?arg
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "jg?Gwsjamp*";
      Options options0 = new Options();
      String string1 = "ts(?pu\\F\"`";
      options0.getMatchingOptions("+E:(");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-279), "jg?Gwsjamp*", "jg?Gwsjamp*", options0, "ts(?puF\"`", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("aIj`I.1zld!s");
      PrintWriter printWriter0 = null;
      int int0 = 693;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 693, "aIj`I.1zld!s", "WI&g>J=\"2", options0, (-1737), (-1144), "b5et", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "NO_ARGS_ALLOWED", (String) null, (Options) null, "R", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("|sLE|AU8Z!!Au,");
      String string0 = "+;J}Oq";
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultDescPad = 1;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "3j");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      String string0 = "no4";
      helpFormatter0.defaultLongOptPrefix = "no4";
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      options0.hasShortOption("--");
      options0.getMatchingOptions("The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "ikL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2275);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2275));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('o');
      String string0 = " @TB0i|u*nBOjXGR";
      helpFormatter0.defaultOptPrefix = " @TB0i|u*nBOjXGR";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 104;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 104, "m2");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", false, "<");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("<", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultSyntaxPrefix = "/>";
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" [ARG]");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption((String) null, false, "-");
      // Undeclared exception!
      try { 
        options1.addOption("--", "", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.findWrapPos("V/zM<bdqjM", 0, 32);
      helpFormatter0.setOptPrefix("V/zM<bdqjM");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.Options";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("J~8vxI'H", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'J~8vxI'H' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("`tl}Cy^^8Hj", "arg", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`tl}Cy^^8Hj' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options0 = new Options();
      helpFormatter0.printHelp("The option '", options0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption((String) null, "usage: ", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
