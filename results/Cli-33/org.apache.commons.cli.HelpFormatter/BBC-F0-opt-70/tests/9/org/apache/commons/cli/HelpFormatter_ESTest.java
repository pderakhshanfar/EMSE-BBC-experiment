/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+]*=UZ%]{hqGD2+*", "+]*=UZ%]{hqGD2+*", (Options) null, "ecXj7&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-2));
      helpFormatter1.rtrim("");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "d", "--", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "sO1_G");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("tH3", "vlTL:QP MBUh>");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      Options options1 = options0.addOption(option1);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2, "vlTL:QP MBUh>", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ";w/v.HXl.;/";
      Options options0 = new Options();
      int int0 = 43;
      String string0 = " (pv+nT";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 730, options0, 74, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "o#}fe2wC+%];>";
      helpFormatter0.defaultNewLine = "%5 ?c+U";
      helpFormatter0.defaultSyntaxPrefix = "\"goIhJf";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"goIhJf", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "Pzmr&e)E$S0XgG_L=");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1430);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "--");
      String string0 = null;
      options1.getOption((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-1093);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", "usage: ", options1, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = (-3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t$");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3), (-3), "t$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1977), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((byte)0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2), options0, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      helpFormatter0.printHelp(74, "arg", "--", options1, "bN^z$2DQ0aflnzK[H#");
      helpFormatter0.findWrapPos("z+}9dG", 3, 1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 102, "i+v'*@H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "$dLQy}Y~Zta//P '6";
      String string1 = "@VkucTQJ-*T\"wE";
      String string2 = "NO_ARGS_ALLOWED";
      String string3 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Option option0 = new Option("", "", false, " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1816, 111);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("@#ZeY0KdW:");
      options0.addOption("arg", "--", true, "--");
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.printHelp(3430, "0H[M@q", "0H[M@q", options0, "3H13]qyZuBZ]>Db]");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1015), "]-]t50n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("arg", "NP;>IssXbG_iO%~U");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // NP;>IssXbG_iO%~U
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ep3p%U-OfM)8+A^");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, "7@H@E", "ep3p%U-OfM)8+A^", options0, 56, 56, "", true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("9MA");
      Options options0 = new Options();
      helpFormatter0.printHelp(1090, "--", "/=", options0, "/=");
      helpFormatter0.defaultArgName = "9MA";
      int int0 = 63;
      StringWriter stringWriter0 = new StringWriter(63);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter1.append('G');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string0 = null;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1090, "7@H@E", (String) null, options0, 32, 0, "/=", false);
      String string1 = "line.separator";
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "/=");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3064, "usage: ", options1);
      helpFormatter1.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 38, (-499), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "]", false, (String) null);
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2275, "org.apache.commons.cli.ParseException", "usage: ", options0, "-");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 13, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "If";
      Options options0 = new Options();
      options0.addOption("If", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("");
      Option option0 = new Option("arg", "usage: ", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 780, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "E>'^u\"(L~c_XiI>y5)", options1, " ]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*?z", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.getOptionComparator();
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected((Option) null);
      Options options2 = options1.addOption("", "5h*]`=d4$tT1", false, "arg");
      options2.hasShortOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "arg", "arg", options2, "3 f<.:?||1", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "&^LLlgrBr0", true, "AWgiwm6-ib1%m9");
      options1.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp(1090, "]", (String) null, options1, "");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 2322, "]");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "]N<l9~3%Z?W)h(3O5[";
      String string1 = "";
      Option option0 = new Option("", "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 15, "7^|#@b2a&mB=2HIVE");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1090, "--", "/=", options0, "/=");
      StringWriter stringWriter0 = new StringWriter(63);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2700, "/=", ">", options1, 2700, 13, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.println();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, (String) null, "K7@@E", options0, (-2820), (-2634), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "&^LLlgrBr0", true, "AWgiwm6-ib1%m9");
      options1.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "AWgiwm6-ib1%m9", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1125), "[ option: ", "I9a", options0, "I9a");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("k8", true, "\n");
      options1.getOptionGroups();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("h}SB|=~KKd", options1, true);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 13, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3195, ".`iN?[o", "~`.S%", options1, 3195, 3195, ".`iN?[o");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, "3fgn7X");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption((String) null, (String) null, true, "3fgn7X");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-141), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-244);
      helpFormatter0.setNewLine("wGo2{{-P");
      helpFormatter0.setDescPadding((-244));
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wGo2{{-P");
      Locale locale0 = Locale.UK;
      helpFormatter0.defaultArgName = "Illegal option name '";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "(H(-$u=LBd", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "has already been selected: '", "(H(-$u=LBd", (Options) null, 74, (-244), "`G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultLeftPad = 46;
      helpFormatter0.defaultLeftPad = 46;
      helpFormatter0.printHelp(46, "--", "--", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("W", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      options1.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 109, "h}SB|=~KKd", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1125), (String) null, "k8", options1, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1125), " nGPe,H1;Ny0 !>r[?", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-19));
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(111, "-", "C ?3+kE`S\"}pOrH@i?", options1, "^bkK |p!`aezRE%ZvC");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options1.hasShortOption("P");
      Options options2 = options1.addOptionGroup(optionGroup0);
      options1.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)84;
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) "DR,";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) optionGroup0;
      objectArray0[6] = (Object) mockPrintWriter1;
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintWriter printWriter1 = mockPrintWriter2.printf("DR,", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter1, (int) (byte)0, "KG! ^@8ncK0`C]", "FHqkZE4OX", options2, (int) (byte) (-92), (-1), "KG! ^@8ncK0`C]", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 109, "]N<l9~3%Z?W)h(3O5[", options1);
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 109, "has already been selected: '", "]N<l9~3%Z?W)h(3O5[", options0, (-2), 32, "]N<l9~3%Z?W)h(3O5[", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, "KG! ^@8ncK0`C]", "P", options0, 2, 2, ",CQ/3aXrpEG", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.printHelp(32, "--", "--", options1, "(l/Y|R2");
      StringWriter stringWriter0 = new StringWriter(32);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "P", "(l/Y|R2", options0, 32, 95, "(1yy0veo", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1730), "$kAvX#E`],y", (String) null, options0, (-1730), (-1010), "$kAvX#E`],y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.printHelp(32, "--", "--", options1, "");
      StringWriter stringWriter0 = new StringWriter(32);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "P", "", options0, 32, 95, "(1yy0veo", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      int int0 = (-1);
      String string0 = "-0";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2938), "-0", " _1", options0, 1831, 2870, "{wnp8`fhv;@y/3G", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.printHelp(32, "--", "--", options1, "");
      StringWriter stringWriter0 = new StringWriter(32);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0, 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "P", (String) null, options0, 32, 95, "(1yy0veo", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = (-2086);
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3386, 3);
      int int1 = (-587);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-587), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "h}SB|=~KKd";
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      int int0 = (-1125);
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "I|#z=a.koGS'4qg{H", false, "\n");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h}SB|=~KKd", "", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("F", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLeftPadding(751);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding((-501));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("eII");
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "eII", "", (Options) null, 946, 44, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      String string0 = "";
      PrintWriter printWriter0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "", options0, (-1), (-1), "/sTv\"\\", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      Options options1 = new Options();
      helpFormatter2.defaultDescPad = 1787;
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R`]a]}m4z?z.");
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "$kAvX#E`],y", options0, (-5254), 1, "~o[ongY~oZo[af");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "-", options0, 2234, (-777), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.HelpFormatter$1", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2965, "--", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options2, "l/?w");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, ".`iN?[o", "!F", options0, (-167), (-167), "$kAvX#E`],y");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options1, 1, 13);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-1125), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "sL3LA.EA8dt*");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "arg");
      File file0 = MockFile.createTempFile("jJ ySipvx#", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-801), "u]5<", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 9;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 12, 9, " ] [ long ");
      helpFormatter0.setLeftPadding(328);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("@EG$RY;");
      helpFormatter1.renderWrappedText(stringBuffer1, 328, 9, ">");
      helpFormatter0.findWrapPos("", (-3675), 16);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(">!0\"qn{?ET", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.addOptionGroup(optionGroup0);
      String string0 = "A";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "A", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(242);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "   ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2948), " ] [ long ", "[rEeYr", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("If", "-");
      option0.setLongOpt(" ");
      option0.toString();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      optionGroup1.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup3);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = 18;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 18, "\u0001bbH6", options1);
      String string0 = " | ";
      Option option1 = null;
      try {
        option1 = new Option(" | ", " | ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter3.defaultArgName = "h}SB|=~KKd";
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter3.renderOptions(stringBuffer0, (-1125), options0, 1, 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(242);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(242, "\n", "", options1, "\n", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 12, 0, " ] [ long ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setSyntaxPrefix(" ] [ long ");
      helpFormatter0.getSyntaxPrefix();
      stringBuffer1.reverse();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter1.getWidth();
      helpFormatter1.setLongOptSeparator(" ");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 74, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter3.renderOptions(stringBuffer0, (-1125), options0, 1, 110);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.setDescPadding(9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-478), options1, (-1), 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)17;
      byteArray0[8] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "u+PCMuLt4&_DZk^";
      helpFormatter0.defaultArgName = "u+PCMuLt4&_DZk^";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = "Cy";
      helpFormatter0.setNewLine("Cy");
      helpFormatter0.defaultOptPrefix = "Cy";
      int int0 = 3370;
      helpFormatter0.defaultLeftPad = 3370;
      helpFormatter0.setLeftPadding((-545));
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.printHelp(32, "--", "--", options1, "");
      helpFormatter0.printHelp("--", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 32, options0, 15, 32);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("gfo^]is3q{SDlsK^@:");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      options0.getOptions();
      Option option0 = new Option("k8", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "", options0, "|5");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("If", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("arg", "--", false, "'4%.3{aH%2Z7zK");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      helpFormatter0.printHelp(1646, "A1FmMCb-b", "y?nYobR", options0, "");
      helpFormatter0.createPadding(93);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      options1.helpOptions();
      helpFormatter0.printHelp(73, "8WCk`~PY", "", options1, "8WCk`~PY");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 12, 0, " ] [ long ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter1.getWidth();
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 74, "Illegal option name '");
      helpFormatter1.setArgName("gih=^");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 0, " ] [ long ");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      String string0 = null;
      boolean boolean0 = false;
      Option option0 = new Option("arg", (String) null, false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption(option0);
      String string1 = ";adqzMYVA";
      int int1 = (-1121);
      String string2 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1121), "usage: ", ";adqzMYVA", options1, "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setWidth(2584);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1647, "]");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.createPadding(17);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 0, " ] [ long ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\"G+i2)`wtC-`OZ;E2P", "usage: ", options0, "\"G+i2)`wtC-`OZ;E2P", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2384);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(2384);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, (Options) null, 1, 1932);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.printHelp(32, "org.apache.commons.cli.Option", "--", options1, "");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("A CloneNotSupportedException was thrown: ");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println(false);
      helpFormatter0.printOptions(mockPrintWriter0, 10, options0, 919, 919);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      String string0 = "";
      String string1 = "02c;]r{Ab#/#v\"";
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "@1bbH6");
      option0.setLongOpt("\"Hb");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "1=h", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "", false);
      helpFormatter0.getArgName();
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup1);
      options1.addOption("", "A}iu", false, "");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0);
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("2;gNwD]Xo", (-1), (-276));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("F", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.setSyntaxPrefix("!MCD(ehjqNRBi5Y");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.reverse();
      int int0 = 2;
      Options options0 = new Options();
      int int1 = 79;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      stringBuffer0.append((CharSequence) "arg");
      String string0 = "v";
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "v", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = ":[d9`4d*OEWZRV?>1w2";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      options1.getOptions();
      Options options2 = options1.addOption("k8", false, "\n");
      options2.getOptionGroups();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h}SB|=~KKd", options2, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("If", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("If", true, " ");
      Option option1 = new Option("", "--", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption(option0);
      helpFormatter0.printHelp(2, "]N<l9~3%Z?W)h(3O5[", "5L>D&wDv", options0, ";adqzMYVA");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      Options options0 = new Options();
      helpFormatter0.printHelp((-1), "--", "--", options0, "--");
      String string1 = "02c;]r{Ab#/#v\"";
      String string2 = "oCV.Tt(h\\wAEGqZdG";
      int int0 = (-1219);
      Option option0 = null;
      try {
        option0 = new Option("   ", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      int int0 = (-1125);
      helpFormatter0.setLeftPadding((-1125));
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*rg.L}eL}", "HHKr-,{_e'Q\"{", options0, "HHKr-,{_e'Q\"{");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.printHelp("YF V\"W|B1+R}m", options1);
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.defaultArgName = "(1yy0veo";
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 32, 0);
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.printHelp("(1yy0veo", options1, true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = "";
      helpFormatter1.setLeftPadding((-1));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setDescPadding((-1592));
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer1, 2958, 12, "");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, (String) null, "oCV.Tt(hwAEGqZdG", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"t(H1r3^3] k6pU";
      helpFormatter0.setOptPrefix("\"t(H1r3^3] k6pU");
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "\"t(H1r3^3] k6pU");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      String string1 = "";
      String string2 = "has already been selected: '";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "", true, "w<9nY$}vkTt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("3nVkMt`v;<j#bH>L]", "3nVkMt`v;<j#bH>L]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) "[";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1350, "3nVkMt`v;<j#bH>L]");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("The option '", 45, (-1478));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 12, 0, " ] [ long ");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getSyntaxPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(9);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter1.getWidth();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 1, 74, "Illegal option name '");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("");
      helpFormatter0.optionComparator = comparator0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.printf("", (Object[]) null);
      mockPrintStream0.println("[+Gu}iwjlhpUZHC5zq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.println((float) 3);
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'o';
      charArray0[2] = 'b';
      charArray0[3] = ')';
      charArray0[4] = '9';
      charArray0[5] = '!';
      charArray0[6] = '!';
      mockPrintStream0.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1691, 1691, "   ");
      mockPrintStream0.print(0.0);
      int int0 = (-2599);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 1, (-2599));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "Yi.Z0sPMZ!uiNB";
      helpFormatter0.setNewLine("Yi.Z0sPMZ!uiNB");
      Options options0 = new Options();
      String string1 = "0~%";
      Option option0 = null;
      try {
        option0 = new Option("0~%", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0~%' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3106), (String) null, "-", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("(1yy0veo", "(1yy0veo", options1, "(1yy0veo");
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.setDescPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.defaultArgName = "(1yy0veo";
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 32, 0);
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.printHelp("(1yy0veo", options1, true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("If", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "]N<l9~3%Z?W)h(3O5[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(919, "s\"@qH@bfK", "If", options3, "s\"@qH@bfK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "h}SB|=~KKd";
      helpFormatter0.setLeftPadding((-1125));
      helpFormatter0.setLongOptPrefix("h}SB|=~KKd");
      helpFormatter0.setWidth((-1125));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "I|#z=a.koGS'4qg{H", true, "\n");
      options1.getOptions();
      Options options2 = options1.addOption("k8", false, "\n");
      options2.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("h}SB|=~KKd", options2, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("C)LC11={I.U=R", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      String string0 = "--";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "02c;]r{Ab#/#v\"";
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\u0001bbH6");
      option0.setLongOpt("\"Hb");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "1=h", options1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("F", true, "p");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", (-1), (-1));
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".bNtP]O";
      helpFormatter0.setSyntaxPrefix(".bNtP]O");
      StringBuffer stringBuffer0 = null;
      int int0 = (-208);
      Options options0 = new Options();
      String string1 = "=jFl?6VRO;CY:bZ`5\\-";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "--", true, "=jFl?6VRO;CY:bZ`5-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      int int0 = (-2034);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2034), (-2034), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("usage: ", objectArray0);
      int int0 = (-2005);
      String string0 = ";k!:IVD5G";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
