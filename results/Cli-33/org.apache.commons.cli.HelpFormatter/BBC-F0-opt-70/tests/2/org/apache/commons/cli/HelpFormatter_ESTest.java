/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:46:36 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = " | ";
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.rtrim("McODrCn:|NhhZ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.ParseException");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.getDescPadding();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int0 = (-714);
      helpFormatter0.setWidth((-714));
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      helpFormatter0.rtrim("*EhU}2Y}pY.^Vu1;");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "/u^fE~|6.=^t6-`Lx");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Option option1 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED");
      optionGroup1.setRequired(false);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2156, "NO_ARGS_ALLOWED", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1747));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 278, options1, 278, 278);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, (-3606), 31);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1472);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "\n", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("5I", true, "usage: ");
      Options options2 = options1.addOption((String) null, "&}<|o}", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-961), "[ option: ", "", options2, "&}<|o}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "708;)crP");
      option0.addValueForProcessing("708;)crP");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(18);
      helpFormatter0.defaultLongOptPrefix = ",tPyPl;6b!^(mz<k";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 18, "rt1y&", "rt1y&", (Options) null, 63, (-2), "R#)$M{7VHz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3619));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "arg");
      options1.addOption("", "x@p5o3k%V", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", " ", options1, "or.apache.commons.cli.Util", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 13;
      String string0 = "Kl'nBxa_-A2,";
      helpFormatter0.defaultLeftPad = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Kl'nBxa_-A2,", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "cs", false, "D");
      Options options3 = options2.addOption("GmFF", false, "--");
      Options options4 = options3.addOptionGroup(optionGroup1);
      options4.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1734), "]", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultLeftPad = (-2);
      helpFormatter0.defaultDescPad = 116;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.defaultSyntaxPrefix = "        ";
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 20, (-2));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-198), "H3Z[kuGqO+I:?O%]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 6096;
      String string0 = "KM)e?d:9/1";
      helpFormatter0.defaultNewLine = "KM)e?d:9/1";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("KM)e?d:9/1", 9, (-3937));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "arg");
      helpFormatter0.printHelp("bhq=?+t!}Bo:eM1R", (String) null, options1, "org.apache.commons.cli.Util", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "2g$DijWZ>%uNIC@/Z");
      option0.setArgs(1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.getOptPrefix();
      helpFormatter0.rtrim("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "2g$DijWZ>%uNIC@/Z";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) option0;
      helpFormatter1.setLongOptPrefix("IS{(^}()N'c@I)/v;e");
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) helpFormatter1;
      objectArray0[7] = (Object) "2g$DijWZ>%uNIC@/Z";
      objectArray0[8] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("g_Voll%Z{t/[D3", 1, 0);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HlpFormatter$OptonComparator";
      helpFormatter0.setSyntaxPrefix("g_Voll%Z{t/[D3");
      String string0 = "v&h2\\Q";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "v&h2Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "--", "0%^pfw*58iu", options0, 62, 63, (String) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(" :: ", options0);
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-335);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-335), "0%^pfw*58iu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.optionComparator = comparator1;
      String string1 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      int int0 = 3134;
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 3134, 111);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrintWriter printWriter0 = null;
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("C", "arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "]");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Cannot add value, list full.", "%", options0, ".bZ+v Mblo]$:*", false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim("XxJM=;7W");
      Options options0 = new Options();
      Option option0 = new Option("", "XxJM=;7W", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption((String) null, true, "Q+B3qhh");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "%");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(1348, "K@_J4,MsO}", "NO_ARGS_ALLOWED", options2, "%", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "d_G^WB>&2JV|<!u Ry");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("\n");
      helpFormatter1.printHelp("-", "usage: ", options1, "-", true);
      helpFormatter0.getOptPrefix();
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(830, "-", "-", options3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("arg", "d_G^WB>&2JV|<!u Ry");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ss-l|#e/-CAk,WY!", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2526, 74, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1415, options0, (-4620), 1415);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("g", options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 45, "g", "", options0, (-1), (-1763), "g", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "r?&z0wB)Ei,c/)h";
      Options options1 = options0.addOption("arg", true, "-");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 0, 3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.defaultDescPad = (-2695);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "arg", (String) null, options0, (-4651), 63, "-?OQv#L<", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "Pu");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", "org.apache.commons.cli.Util", options1, "", false);
      helpFormatter2.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("S", "", options1, (String) null, false);
      helpFormatter0.rtrim("line.separator");
      helpFormatter0.rtrim("line.separator");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "QGczFwYV2ALt";
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 5, 1497);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("HXYEMY)I!h&5", "mo[kwrj(}_~^'q5Pw", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "05*</L[!QxX";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("05*</L[!QxX");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "J]v< OLkhl/EsorlVp", "05*</L[!QxX", options0, (-2), 44, "05*</L[!QxX", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1294), options0, 43, 1597);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 44;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      Option option0 = new Option("", true, "H!g;T}J%j(u?A");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2746), "&wGx 41MPk:y", "&wGx 41MPk:y", options3, (-1), 101, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "C";
      Option option0 = new Option("C", "arg");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFile mockFile0 = new MockFile("--", "C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "C", "C", options0, (-304), 3656, "C", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1097), "\n", "\n", options0, "\n", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Pu");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      stringWriter0.write("K^hTK Y", 1, 1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, "]", options1);
      helpFormatter0.setOptPrefix("]");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "", "", options1, 63, 44, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Pu");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 108, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("C", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("\n", "?.w}", options1, "]@qpofSV>FPO=|oSiFo", true);
      helpFormatter0.rtrim("t!S? ");
      helpFormatter1.rtrim("{Gs&fZS%rODakwo");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 788;
      helpFormatter0.setLeftPadding(788);
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "--", true, "e46C;sDZ@jn`L<J'mn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = "0%^pfw*58iu";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3295, "", "", options2, 523, 3295, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.ITALY;
      Object object0 = new Object();
      String string0 = "SV#6qhNa\\tmO\"g";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "SV#6qhNa\tmO\"g";
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) "SV#6qhNa\tmO\"g";
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "SV#6qhNa\tmO\"g", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-63), (String) null, (String) null, options0, 67, 67, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "0%^pfw*58iu", "", options1, 63, 44, "", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(63);
      helpFormatter0.renderWrappedText(stringBuffer0, 1417, 63, "");
      mockPrintWriter0.print(63);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "0%^pfw*58iu", "0%^pfw*58iu", options1, 571, 29, "K", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 571, "3tq],A a^tTh|");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, (-3019), (-1058), "org.apache.commons.cli.Option");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding((-3246));
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1367, 1367, "bdQ=!g:{j}A|E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, (-3019), (-1058), "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 1, "usage: ", "EwtBff", options0, 635, (-2871), "\n");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) "-";
      objectArray0[5] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[6] = (Object) "-";
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('K');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 10, options0, 63, 64);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printOptions(printWriter0, (-691), options0, 44, 2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "0%^pfw*58iu", "", options1, 63, 44, "", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(';');
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "q");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, (String) null);
      Options options3 = options2.addOption("", (String) null, false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options4, 1, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option("", true, "qsxI%");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 9, options1, 2, 2);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 44, 2131, "v#=~]$ZYa9+/=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setLeftPadding((-1880));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, 9, 9, "org.apache.commons.cli.HelpFormatter");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("l|8", "l|8", options1, "l|8");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(4400);
      helpFormatter0.rtrim("yb)JV|^W}");
      int int0 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1099), (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "708;)crP");
      option0.addValueForProcessing("708;)crP");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = " [ARG]";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-337), (String) null, ")V!A5qgy~BuTd_<", options0, (-337), 1846, "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "d_G^WB>&2JV|<!u Ry");
      option0.setArgs(1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("-", "usage: ", options1, "-", true);
      helpFormatter0.getOptPrefix();
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("C", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "arg");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("-", "usage: ", options1, "usage: ", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("7;S:H'2j}b68nACEX");
      helpFormatter1.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("C", "arg");
      option0.setLongOpt("\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("-", "X", options0, "M&o[/{", true);
      helpFormatter1.rtrim("org.apache.commons>cli.HelyFormatter$1");
      helpFormatter1.rtrim("org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("C", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("-", "X", options0, "M&o[/{", true);
      helpFormatter1.rtrim("org.apache.commons>cli.HelyFormatter$1");
      helpFormatter1.rtrim("org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "Pu");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("-", "usage: ", options1, "line.separator", true);
      helpFormatter1.rtrim("usage: ");
      helpFormatter1.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.setLeftPadding(2);
      helpFormatter0.setDescPadding((-5183));
      helpFormatter0.rtrim("GeG^*X6cJ=</!");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ":0?VRe^)xb80G", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-5183), (-5183), "r^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) "-";
      objectArray0[5] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[6] = (Object) "-";
      objectArray0[7] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 114, "[", "s3%\"J0Lcb@6>L:Z", options0, 114, 63, "", true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Option option0 = new Option("", true, "qsxI%");
      Options options1 = options0.addOption(option0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 44, options1, 1044, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding(4400);
      helpFormatter0.rtrim("fe");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setLeftPadding((-803));
      helpFormatter0.setDescPadding((-803));
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "@d=HO", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 12, 32, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "@xtmIdt4-_pDps-ud";
      helpFormatter0.setOptPrefix("@xtmIdt4-_pDps-ud");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.setWidth((-608));
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      int int0 = (-1552);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1552));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("_=s");
      Options options0 = new Options();
      helpFormatter0.printHelp("_=s", options0);
      MockFile mockFile0 = new MockFile("_=s");
      File file0 = MockFile.createTempFile("ox/_(Mv", "-", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printHelp("--", "--", options0, ">nqV~5?xioYf", true);
      helpFormatter0.rtrim("aWHB$EHiZ1");
      helpFormatter0.rtrim("d=0c15s9h<Q'UVvq p");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockFile mockFile0 = new MockFile("X7#F->8gv2R{*", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 13, "-");
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = null;
      Options options0 = null;
      String string2 = "X7#F->8gv2R{*";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6_nm5z$z#klEs>CRa?S", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "v#=~]$ZYa9+/=", options0);
      helpFormatter0.printHelp(44, "v#=~]$ZYa9+/=", "", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 30, "U>[");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1097), "cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.setLeftPadding((-803));
      helpFormatter0.setDescPadding((-803));
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 115, (-803), "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "org.apache.commons.cli.Option", "org.apache.commons.cli.Option", options0, 9, 9, "org.apache.commons.cli.HelpFormatter");
      Options options1 = new Options();
      helpFormatter0.printHelp("l|8", "l|8", options1, "l|8");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 103, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "v#=~]$ZYa9+/=", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 2431, options0, 2431, 74);
      helpFormatter0.setOptPrefix("R-~,-I");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.setLeftPadding(44);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("g_Voll%Z{t/[D3", (-1), 0);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setSyntaxPrefix("g_Voll%Z{t/[D3");
      String string0 = "v&h2\\Q";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "v&h2Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("w-,$=)gu?ZdJ_Y^U7GK", 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "[ARG...]", true, "usage: ");
      // Undeclared exception!
      try { 
        options1.addOption("[ARG...]", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "v#=~]$ZYa9+/=", options0);
      helpFormatter0.setOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("R");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-46), 0, "U>[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOption("-");
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("5U");
      helpFormatter0.getLongOptSeparator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-92);
      String string0 = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("\"CZ&lb+2");
      helpFormatter0.setLeftPadding((-520));
      helpFormatter0.setOptPrefix((String) null);
      Options options0 = new Options();
      Option option0 = new Option("arg", ">", false, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options2.addOption("-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "3u(to{3[";
      int int0 = 31;
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      boolean boolean0 = false;
      String string1 = "$2bTnpJ y)9[@#o8v'";
      Option option0 = new Option("", "[ Options: [ short ", false, "$2bTnpJ y)9[@#o8v'");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setValueSeparator('1');
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3u(to{3[", "                               ", options1, "$2bTnpJ y)9[@#o8v'");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 398;
      helpFormatter0.defaultDescPad = 398;
      helpFormatter0.getOptPrefix();
      String string0 = "k<=q1OM)HXT2oU/";
      helpFormatter0.setNewLine("k<=q1OM)HXT2oU/");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("sV;+v");
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("' was specified but an option from this group ");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      helpFormatter0.rtrim("F*-^&*<mwNL<");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-803), options2, (-803), (-803));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setArgName("Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setSyntaxPrefix(", ");
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        options0.addOption("--", "5Ds&pY/Y?,,X$:g@", true, "-J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultArgName = "2;m$Q~8$wpuqt";
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("Mw7nOBV*PpN!~");
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "p";
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-3789), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 44, "HNMZ zYTa@~iAj`x?Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 74;
      String string0 = "J7rVT7O? 9MK1im5iq4";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "J7rVT7O? 9MK1im5iq4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1600;
      StringBuffer stringBuffer0 = new StringBuffer(1600);
      Options options0 = new Options();
      String string0 = "Mehi(_MWh<r";
      String string1 = "--";
      helpFormatter0.printHelp(1600, "Mehi(_MWh<r", (String) null, options0, "--");
      String string2 = "p_<sKA|'oI{.(f(T*g";
      Option option0 = null;
      try {
        option0 = new Option("Mehi(_MWh<r", "543~", false, "p_<sKA|'oI{.(f(T*g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Mehi(_MWh<r' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "dI|{aWh{O";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter";
      String string0 = "lg{-\\*";
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1143));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "VeK`)+c3";
      int int0 = 2361;
      String string1 = null;
      Options options0 = new Options();
      String string2 = "[";
      options0.hasLongOption("[");
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2361, (String) null, (String) null, options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.setOptPrefix("   ");
      int int0 = 1259;
      helpFormatter0.createPadding(1259);
      String string1 = "NO_ARGS_ALLOWED";
      helpFormatter0.setLongOptPrefix("NO_ARGS_ALLOWED");
      String string2 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "X7#F->8gv2R{*", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "#}*,2)J.z\"7";
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      int int0 = 22;
      helpFormatter0.findWrapPos("#}*,2)J.z\"7", 22, 22);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "C>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 381;
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 381, 3, "--");
      int int1 = (-54);
      // Undeclared exception!
      try { 
        stringBuffer1.insert(74, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_=s";
      helpFormatter0.setArgName("_=s");
      Options options0 = new Options();
      helpFormatter0.printHelp("_=s", options0);
      MockFile mockFile0 = new MockFile("_=s");
      File file0 = MockFile.createTempFile("ox/_(Mv", "-", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "_=s");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding(4400);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 94, "-");
  }
}
