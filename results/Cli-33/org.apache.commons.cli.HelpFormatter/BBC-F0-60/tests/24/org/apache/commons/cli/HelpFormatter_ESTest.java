/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:10:51 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "arg", options0, 74, 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      helpFormatter0.printHelp("dzAB']", "dzAB']", options0, "dzAB']");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 2696;
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "^i";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("^i", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "=,P6YlJrz1E/G8gdP", (String) null, options1, (-1), 2696, "=,P6YlJrz1E/G8gdP", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.findWrapPos("", (-1), 5641);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 6, 5641, "");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = null;
      String string0 = "C";
      StringBuffer stringBuffer0 = new StringBuffer("C");
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.getNewLine();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "^e>Ez";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "\n";
      objectArray0[6] = (Object) helpFormatter0;
      mockPrintWriter0.printf("^e>Ez", objectArray0);
      int int0 = 9;
      Options options0 = new Options();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 2, ":Ck=");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "\n");
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      String string1 = "";
      Option option0 = new Option("fNOsC1", "-");
      options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "Illegal option name '", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "\n", "\n", options2, "\n", true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      int int0 = 32;
      helpFormatter0.defaultLeftPad = 32;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('(');
      int int1 = 28;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "\n", 10, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 9, "\n", "\n", options0, 9, 9, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "arg", (Options) null, "--");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z/*L:]WD");
      mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1343, "aGRxM", "", options0, 29, (-2), "z/*L:]WD", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("AAj", "", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", false, "");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter0, 74, "Gk", "^e>Ez", options0, 945, 1343, "+wlrEQWD\"JV $rw&", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, (String) null);
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp((-1), "arg", "", options2, "u", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "-", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W4";
      helpFormatter0.findWrapPos("W4", 0, 0);
      String string1 = "[ Options: [ short ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W4", "[ Options: [ short ", (Options) null, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options2 = options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", "arg", options2, "-");
      helpFormatter1.setLeftPadding(3);
      options2.getMatchingOptions("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter1.rtrim("n57");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1930, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "", options0, 3520, (-395), "'", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          FileSystemHandling.shouldAllThrowIOExceptions();
          Options options0 = new Options();
          HelpFormatter helpFormatter1 = new HelpFormatter();
          HelpFormatter helpFormatter2 = new HelpFormatter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
          MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
          PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
          // Undeclared exception!
          helpFormatter1.printHelp(printWriter0, 1, "usage: ", "--", options0, 74, 15, "-", true);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("--");
      helpFormatter0.findWrapPos("-", 74, 945);
      String string0 = "[ Options: [ short ";
      helpFormatter0.printHelp("[ Options: [ short ", " ", options0, " ");
      StringBuffer stringBuffer0 = null;
      int int0 = (-1);
      helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, 945, 1565);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "t0M`e]i");
      Option option1 = new Option("", true, "[ option: ");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1837, "arg", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "\"*98b*";
      helpFormatter0.defaultLongOptPrefix = "~~OpsYx,/`fu@OFV";
      helpFormatter0.defaultDescPad = (-3125);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("\"*98b*", (-3125), (-3125));
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 567;
      helpFormatter0.renderWrappedText(stringBuffer0, 567, (-6250), "(FN,X+mIc");
      int int1 = 92;
      StringWriter stringWriter0 = new StringWriter(92);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"*98b*");
      StringWriter stringWriter2 = stringWriter1.append('w');
      stringWriter2.getBuffer();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "-", false, "~~OpsYx,/`fu@OFV");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "T%mL~Ro1WRD";
      objectArray0[4] = (Object) "@A";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "T%mL~Ro1WRD";
      PrintWriter printWriter0 = mockPrintWriter0.format("@A", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "@A", "T%mL~Ro1WRD", (Options) null, (-3441), 2700, " ] [ long ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2429), "", "}9c`=/`=jgnB+<", options0, (-2429), (-1), "gh:Cr\"$cL& _wB{==#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLongOptPrefix = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vTP~L:aef");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 97, "vTP~L:aef");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-11), (String) null, (String) null, options0, (-11), 1448, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "-");
      options0.addOption(option0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4050), "' was specified but an option from this group ", (String) null, options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options0, (-1), 4540);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "-");
      options0.addOption(option0);
      helpFormatter0.printHelp(32, "' was specified but an option from this group ", "II", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter2.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getDescPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", true, "");
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "Uz^ZD\"rEAUPbRo3s$", "", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3266, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-14), "]Q@", "", options0, 10, 1448, "]Q@", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("mv", options0);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-198), options0, 6241, 494);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 20, "]Q@", "", options0, 10, 1448, "]Q@", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("mv", "FiB/b%jon");
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.toString();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "Cannot add value, list full.", "mv", options3, "Cannot add value, list full.", false);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1502), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4347), "*7Rfx", (String) null, options2, 0, (-3454), "]Q@", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.findWrapPos(">-B", 2668, 945);
      Options options1 = new Options();
      int int0 = (-1548);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("yDiSw;.W,GIYcpa7^", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1619), "]SIk{{p[}_", (String) null, (Options) null, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("mv", "uYB7)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options2, "", true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1145, " ", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(386);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "arg", (Options) null, "--");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-2);
      helpFormatter0.findWrapPos("", (byte)13, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("+ UHEzK-?", "", options0, "");
      helpFormatter1.getDescPadding();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(74, "<", "", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "-", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "~");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 13, options3, 3008, 15);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "y";
      MockFile mockFile0 = new MockFile("--", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-2429), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "--", "-", options0, "6YDCJvWaw-#CC", true);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(64, "6", "", options0, "xBi4F3xW%hH)&p$");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(103);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasShortOption("zVE27?y||*m?zq]Dr(");
      helpFormatter0.printHelp(3531, "%|[Iad/0_", "x, !=mx<@NPAGH-u", options0, "\n");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(93);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '$';
      charArray0[2] = '<';
      charArray0[3] = 'J';
      charArray0[4] = 'u';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1029), 93, "%|[Iad/0_");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZZ*54S$?");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.findWrapPos("Illegal option name '", (-1514), 74);
      helpFormatter1.defaultLeftPad = 3;
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1514));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      Options options0 = new Options();
      helpFormatter0.printHelp("E65a\"{aCZkLz4lfbJ", options0);
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)115;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 493, options0, 2277, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("(CtoRO$tf4T}", "-", options0, "y");
      helpFormatter1.getDescPadding();
      MockFile mockFile0 = new MockFile("' was specified but an option from this group ");
      File file0 = MockFile.createTempFile(";xxA|fc0q\"8R]", "(CtoRO$tf4T}", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("mv", "uYB7)");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("q", false, "\n");
      Options options2 = options1.addOptionGroup(optionGroup0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), "q", "", options3, "[hgc?Y?m)3", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A CloneNotSupportedException was thrown: ");
      mockFileOutputStream0.write(9);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 15, 15);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      int int0 = 1148;
      String string1 = "9Q|#Xx!/}9>";
      String string2 = "7\"II@!1-xYke3\"Jy9";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "\n", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1861), "--", "SAbWgOB'JlHd~:", options0, 64, (-1), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 25, 9, "line.separator");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("f?$-[c~(N", options1, true);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A CloneNotSupportedException was thrown: ");
      mockFileOutputStream0.write(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "A CloneNotSupportedException was thrown: ", "--", options0, "5mp6AzdQT", true);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("|HIW~Ml~SJ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("mv", "uYB7)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "jOEgO`tCrW[`y", "", options3, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "[]", "[]", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      String string0 = "mv";
      Option option0 = new Option("mv", "uYB7)");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "arg", "arg", options2, "", true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "T`}i<&t)yPpz =", "uYB7)", options1, 74, 74, "mv");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("\n", "/6;bBB:");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // /6;bBB:
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "uYB7)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      optionGroup0.toString();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1460), "[]", "", options2, "uYB7)", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T`}i<&t)yPpz =";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "T`}i<&t)yPpz =";
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "T`}i<&t)yPpz =";
      objectArray0[4] = (Object) mockPrintWriter1;
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter1, 1, "b", "b", (Options) null, 32, (-206), ".4z5WJ.=pa^(qS");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) filterOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintStream0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(filterOutputStream0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-341), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) filterOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintStream0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.print(0L);
      PrintWriter printWriter0 = mockPrintWriter0.append('~');
      helpFormatter0.printUsage(printWriter0, 34, "%Y3blP}opznmlsw7Rj$");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(1530);
      helpFormatter0.setDescPadding(34);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "GM]@j~f=";
      objectArray0[5] = (Object) "GM]@j~f=";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", "A CloneNotSupportedException was thrown: ", (Options) null, "--");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((Object) " ");
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "\n");
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFileOutputStream0.write(26);
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1970), 0, "=#-N.'p!u3lzS.M#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      int int0 = (-1507);
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'A';
      charArray0[2] = 'Z';
      charArray0[3] = 'L';
      charArray0[4] = '#';
      mockPrintWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 74, (-1507));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BZUsAY{");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 604;
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.printHelp("BZUsAY{", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(18);
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) "                  ";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "                  ";
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) "                  ";
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printOptions(mockPrintWriter1, (-1), options0, 604, 18);
      helpFormatter0.printHelp("                  ", "--", options0, "org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 604, 31, "-#<+uji^m8Zt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("mv", "uYB7)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options2, "", true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("KAV&\"_H2r?nD+g022)", 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.toString();
      helpFormatter0.printHelp(38, "[]", "[]", options0, "--", true);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "|HIW~Ml~SJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // |HIW~Ml~SJ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A CloneNotSupportedException was thrown: ");
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 945, 9);
      Options options0 = new Options();
      helpFormatter0.printHelp("{Jtv!Kzx;Q${@j", "line.separator", options0, "");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("|=", options0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A CloneNotSupportedException was thrown: ");
      mockFileOutputStream0.write(9);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println((Object) "j?");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      mockPrintWriter0.println((Object) "-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter0, 1818, "\"t");
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      mockFileOutputStream0.write(3215);
      helpFormatter0.setWidth((-1));
      helpFormatter0.printWrapped(printWriter0, 26, 34, "(C  tZ\t~jA]@+j<y");
      Options options0 = new Options();
      Option option0 = new Option("", "-", false, "}vq,G][DQl<6%N");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.Option", false, "}/]u5M~as7nD^M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Option' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1296, "vYG#D-ngj0M1)");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1296, (-2489), "vYG#D-ngj0M1)");
      helpFormatter0.setWidth(291);
      int int0 = 9;
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "1=Z^^v?: TP";
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '#';
      charArray0[2] = 'U';
      charArray0[3] = '}';
      charArray0[4] = 'v';
      charArray0[5] = 'Z';
      charArray0[6] = 'T';
      charArray0[7] = ',';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 9, 1296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("mv", "uYB7)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options2, "", true);
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.findWrapPos("", 1, (-1));
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(":u#ohAE4NyCRf");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("BSxob");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "arg", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 975;
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 975, 31, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Kuxjk1VBXl_'q|", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setSyntaxPrefix("[");
      Options options0 = new Options();
      String string1 = "$@H`\"HFi";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "$@H`\"HFi", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "A CloneNotSupportedException was thrown: ", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      int int0 = 0;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "A CloneNotSupportedException was thrown: ", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.findWrapPos("   ", 31, 31);
      helpFormatter0.setNewLine("   ");
      MockFile mockFile0 = new MockFile("T");
      MockFile mockFile1 = new MockFile(mockFile0, "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "T", "ALhiDJ@]Xl", (Options) null, "T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      int int0 = 31;
      helpFormatter0.findWrapPos("   ", 31, 31);
      helpFormatter0.setNewLine("   ");
      MockFile mockFile0 = new MockFile("T");
      MockFile mockFile1 = new MockFile(mockFile0, "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "T";
      PrintWriter printWriter0 = mockPrintWriter0.format("   ", objectArray0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      int int1 = 0;
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'Y';
      charArray0[2] = 'U';
      mockPrintWriter1.print(charArray0);
      String string1 = "Z=2WW oATZm";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("wj(<-~", "}X'^nOi", false, "wj(<-~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'wj(<-~' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.helpOptions();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      boolean boolean0 = true;
      options0.addOption("hTR7qdna", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.setLeftPadding(74);
      String string0 = "org.apache.commons.cli.ParseException";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-802));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "VZ#m@?+kf@";
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("--", 945, 945);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) filterOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "?M]@j~f=";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "?M]@j~f=";
      mockPrintStream0.printf("?M]@j~f=", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.print((long) 1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = new Option("mv", "uYB7)");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options2, "", true);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "/6;bBB:";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "T`}i<&t)yPpz =", "uYB7)", options1, (-2), (-2), "mv");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        options1.addOption(":g&iF=aUei~VTkIg~4", "4j}`QkMc^", true, "4j}`QkMc^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':g&iF=aUei~VTkIg~4' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("f?$-[c~(N", options1, true);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 331, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      String string0 = "A]L";
      helpFormatter0.setOptPrefix("A]L");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", " ");
      options1.addOption(option0);
      String string1 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        option0.addValue("usage: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.hasShortOption("arg");
      options1.getOption("Qt3$4xw>8");
      Options options3 = new Options();
      helpFormatter0.printHelp(".M9s\"", "Qt3$4xw>8", options3, ">IV6X;.j6,AU?!NsbV", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-618);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options3, (-618), 2134);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptPrefix("");
      helpFormatter0.optionComparator = comparator0;
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("E:aO>ln(d6P)!XNzW,", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      byteArrayOutputStream0.reset();
      mockPrintWriter0.print(true);
      byteArrayOutputStream0.close();
      String string0 = "-";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 111, "-");
      helpFormatter0.getWidth();
      String string1 = "0[X5!+F.5";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "V*J-xT", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ".M";
      helpFormatter0.defaultLongOptPrefix = ".M";
      int int0 = (-2015);
      helpFormatter0.defaultLongOptPrefix = ".M";
      helpFormatter0.defaultDescPad = (-2015);
      String string1 = " | ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" | ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
