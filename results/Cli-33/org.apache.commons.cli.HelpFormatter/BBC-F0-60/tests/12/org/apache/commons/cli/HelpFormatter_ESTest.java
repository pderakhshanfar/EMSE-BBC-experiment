/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:08:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultWidth = 74;
      helpFormatter1.printHelp((-1), " :: ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options1, "\n", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "|_:8L(*LT", "rQ", options0, (-1), 1970, "--");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "+c[x3", "+c[x3", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 0, 0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "x(OSx_*", "o${,I_^!*W", options0, 0, 58, "o${,I_^!*W", false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", true, "usage: ");
      options0.hasLongOption("arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("arg");
      helpFormatter0.printHelp("]", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sR+q_0g^A*yTWbFSx");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.KOREA;
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "arg", options2);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1098);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, 1909, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("arg");
      helpFormatter0.printHelp("]", options1, true);
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "^";
      objectArray0[1] = (Object) "^";
      objectArray0[2] = (Object) "^";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "^";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "^", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "G2+xwUYQJ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('J');
      helpFormatter0.defaultNewLine = "1l75Hk?M/GCy%?A";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1076), "`^R0j%5ca:8oo|Nm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" :: ", options0, true);
      helpFormatter0.setWidth((-287));
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(501);
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelpcmdLineSyntax not provided", options1, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "WD;>)vwd5+3Q-MWq)'>");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      MockFile mockFile0 = new MockFile("{Z!(V-J>1", "/A|eF]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printHelp(printWriter0, 51, "WD;>)vwd5+3Q-MWq)'>", "[", options0, 2, 376, "W!$< iL/(4CTix=50`");
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 115, (-988), "/A|eF]");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(398);
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "q)WfOZ;D!XBFGh ";
      helpFormatter0.printHelp(10, "!fQe", "!fQe", options0, "!fQe", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.printHelp(398, "z.UszAMszA.?", "", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y:|mJS'0Z9(B");
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "!fQe";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) stringBuffer0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2, locale_FilteringMode0);
      objectArray0[4] = (Object) "Y:|mJS'0Z9(B";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 10, "", options0);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 398, "q)WfOZ;D!XBFGh ", "", options0, (-1057), 10, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 100;
      String string0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(100, (String) null, "tjPA`TnBl5#96V?S", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      optionGroup0.setRequired(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-422), "-", "ZzH`+=e@ob", options0, 950, 1, " ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      PrintWriter printWriter0 = null;
      optionGroup0.setRequired(false);
      int int0 = 376;
      int int1 = (-1050);
      String string0 = "pOL2:N+#jQ=";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 376, (String) null, "", options1, (-1050), 46, "pOL2:N+#jQ=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1772, "JK\"8#^(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string0 = "Z2qJ,JfW{%($HRb";
      int int0 = 73;
      PrintWriter printWriter0 = null;
      optionGroup0.setRequired(true);
      int int1 = 376;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 376, "Z2qJ,JfW{%($HRb", "Z2qJ,JfW{%($HRb", options1, 73, 2, "Z2qJ,JfW{%($HRb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 61, "SASM>$Bwx", "", options0, 32, 1189, "", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", false, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("y*sG'`0S", options1, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockFileOutputStream0.write(0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 1897, "usage: ", "The option '", options1, 0, 3, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dUt");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "arg";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "dUt";
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 61, "]", (String) null, options2, 32, (-1), "dUt", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(764);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = new OptionGroup();
      Option option0 = new Option("", "Nc:ZQ[6m[\"Y{VRz/!C", false, "SASM>$Bwx");
      optionGroup2.setSelected(option0);
      options1.addOptionGroup(optionGroup2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<FZ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "KvGn", "<FZ", options1, 73, 0, "SASM>$Bwx", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.write((-263));
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 8, "arg", "'xO%A$T%LW", options0, (-7), 13, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\"jCy'~+ys*Y1O>I");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\"jCy'~+ys*Y1O>I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "ptmp?$Oh";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "ptmp?$Oh", options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 376, "Z2qJ,JfW{%($HRb", "", options1, 73, 376, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'xO%A$T%LW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 61, "SASM>$Bwx", "'xO%A$T%LW", options1, 61, 73, "arg", false);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 61, options1, 73, 2083);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 73, 1, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 613, 10, "'");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos(":\" _F8 ^k6)ED{[", 3, 3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("'xO%A$T%LW");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "Z2qJ,JfW{%($HRb");
      helpFormatter0.printHelp(printWriter0, 61, "SASM>$Bwx", "", options2, 61, 73, "arg", false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 32;
      String string0 = "[";
      String string1 = "_H:`";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) "_H:`";
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-550), options0, (-2), (-550));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.rtrim("");
      int int0 = (-100);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("%Kbf7ObGW43Xo%L");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", false, "#");
      option0.setValueSeparator('w');
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOption("", true, "usage: ");
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(393, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 16, 16, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1, (Options) null, 112, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", false, "#");
      option0.setValueSeparator('w');
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      options0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('w');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "sVWhNJ", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOption("4Qn", "iOkiG7|Ofr", true, "KO8\"|B'K#%");
      Options options1 = options0.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1451), "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) " 5=@yS)Rl;2)0ZlU";
      objectArray0[3] = (Object) objectOutputStream0;
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      int int0 = (-2932);
      String string0 = "@*>rRF[\\\\@.@q].";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3822), (String) null, "", options0, (-2932), 3073, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "<");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "[";
      options1.addOption("arg", "--", true, "[");
      int int0 = 1378;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2145), options0, 1378, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      String string0 = "#";
      Option option0 = new Option("arg", false, "#");
      option0.setValueSeparator('w');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("sVWhNJ", true, "eE,K|fH$<}d$ ^!");
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options2, true);
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2716), (String) null, "sVWhNJ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 5=@yS)Rl;2)0ZlU";
      Options options0 = new Options();
      String string1 = "[ option: ";
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1876), "[ option: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2662), "Tv[$jZUh-o\"#ZoA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 5=@yS)Rl;2)0ZlU";
      Options options0 = new Options();
      int int0 = (-668);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-668), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      String string0 = "#";
      Option option0 = new Option("arg", false, "#");
      option0.setValueSeparator('w');
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("sVWhNJ", true, "eE,K|fH$<}d$ ^!");
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options2, true);
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2716), (String) null, "sVWhNJ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1465), 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 63;
      int int1 = (-1696);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("#V83.uYZgk8C;&-", 63, (-1696));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(764);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultDescPad = (-7);
      Option option0 = new Option("", true, "-");
      option0.setValueSeparator('x');
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelpoptions1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 5=@yS)Rl;2)0ZlU";
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      String string1 = "@*>rRF[\\\\@.@q].";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2932), " 5=@yS)Rl;2)0ZlU", " 5=@yS)Rl;2)0ZlU", options0, (-2932), (-2932), "@*>rRF[\\@.@q].", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(764);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultDescPad = 3;
      Option option0 = new Option("", true, "-");
      option0.setValueSeparator('x');
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelpoptions1, true);
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1720), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("i,#t_|y6]r'*0YZHzW");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption("", true, "i,#t_|y6]r'*0YZHzW");
      helpFormatter0.printHelp("\n", (String) null, options0, "N4owzjCgFGN$M#i", true);
      Options options1 = options0.addOption((String) null, " o']shHaF8Bd.>W5VF", true, "N4owzjCgFGN$M#i");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options1, true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "arg", "YZvB}", options0, "");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "W2rrXE4";
      helpFormatter0.setLongOptPrefix("W2rrXE4");
      StringBuffer stringBuffer0 = new StringBuffer(155);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      int int0 = (-964);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-964), options0, (-964), 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2682, "\n", "org.apache.commons.cli.OptionGroup", options0, "NaS:19X0ngbQ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(764);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultDescPad = 3;
      Option option0 = new Option("", true, "-");
      option0.setValueSeparator('x');
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", options1, true);
      helpFormatter0.getOptionComparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 74, 74);
      helpFormatter0.printHelp("LmgJu5", options1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("i,#t_|y6]r'*0YZHzW");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      options0.hasLongOption("");
      helpFormatter0.printHelp("\n", (String) null, options0, "N4owzjCgFGN$M#i", true);
      Option option0 = new Option((String) null, true, "_!`");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "   ", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("zxS", options1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintStream0.append((CharSequence) "--");
      mockPrintWriter0.flush();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1099, 765, "-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("The option '");
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1610, 765, "The option '");
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(1099);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2493, "", (String) null, (Options) null, 4035, 765, "The option '", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1285, "6%fJlQ,Iu,iL[C", "org.apache.commons.cli.Options", options0, "", true);
      helpFormatter0.rtrim("6%fJlQ,Iu,iL[C");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("wMP%E", 2755, 2755);
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "+YJDh2g^@6v2(");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 1229, 32);
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "JkP)R3");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 5=@yS)Rl;2)0ZlU";
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2932), " 5=@yS)Rl;2)0ZlU", " 5=@yS)Rl;2)0ZlU", options0, (-2932), (-2932), "@*>rRF[\\@.@q].", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", "", true, "");
      helpFormatter0.printHelp(1233, "972V<.;[", "972V<.;[", options2, "", true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("i,#t_|y6]r'*0YZHzW");
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-811), "i,#t_|y6]r'*0YZHzW", "\n", options1, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 5=@yS)Rl;2)0ZlU";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, " 5=@yS)Rl;2)0ZlU", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(5331);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(1108, "[", "", options0, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("i,#tVGy6]r'*0YZHzW");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "i,#tVGy6]r'*0YZHzW");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, (Options) null, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderWrappedText(stringBuffer1, 117, 1859, "D]3!y`H2QUD19|");
      MockPrintStream mockPrintStream0 = new MockPrintStream("KO;@~ryA#");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("");
      helpFormatter0.getDescPadding();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      helpFormatter3.setArgName("arg");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 682, " ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("i,#t_|y6]r'*0YZHzW");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", (String) null, options0, "N4owzjCgFGN$M#i", true);
      Options options1 = options0.addOption("", "   ", false, "\n");
      helpFormatter0.printHelp("zxS", options1, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2514, (-3371), "\"");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setOptPrefix("line.separator");
      String string1 = "f6";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " | ", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 398;
      helpFormatter0.setDescPadding(398);
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("N4owzjCgFGN$M#i", "N4owzjCgFGN$M#i", options0, (String) null, true);
      String string0 = "?8";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 17, 398, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(20);
      Options options0 = new Options();
      helpFormatter0.printHelp("N4owzjCgFGN$M#i", "--", options0, "[", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter1.setLeftPadding(1);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setLongOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("'Dt!,1BJ>oNf5", "usage: ", options0, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", "]", true, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 1139, options2, 1, 1);
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Locale locale0 = new Locale("usage: ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options1 = new Options();
      helpFormatter0.printOptions(printWriter0, (-2204), options1, 0, 14);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "org.apache.commons.cli.HelpFormatter$1", options0, "!fQe", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(398);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("N4owzjCgFGN$M#i", (String) null, options1, "2sTtEn?U3V", true);
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", options1, true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("i,#t_|y6]r'*0YZHzW");
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      helpFormatter0.printHelp(199, "org.apache.commons.cli.OptionGroup", "\n", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 1989;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "KZHwve/_gP?");
      int int2 = 448;
      options1.getOption(" ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "KZHwve/_gP?", "eA)JaGC8\"8", options0, "<", true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "!fQe", "", options0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-1589), " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3371), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("g0mklI>S^$4^.`(m ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "L&]J$x^,];kt";
      helpFormatter0.defaultLongOptPrefix = "L&]J$x^,];kt";
      String string1 = "f`7^cO4v_;C";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("f`7^cO4v_;C");
      int int0 = (-2);
      helpFormatter0.defaultLongOptPrefix = "hL";
      helpFormatter0.setLongOptPrefix("f`7^cO4v_;C");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "r";
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = " ";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "[";
      Option option0 = null;
      try {
        option0 = new Option("iTPLJ@(U%zX!xCBYAe", false, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'iTPLJ@(U%zX!xCBYAe' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      int int0 = 2854;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2854, " | ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2854;
      String string0 = " 5=@yS)Rl;2)0ZlU";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2854, " 5=@yS)Rl;2)0ZlU", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultLeftPad = 13;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f6", "f6", (Options) null, "f6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\14";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\f", "\f", (Options) null, "\f", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-916);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-916), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(1999);
      helpFormatter0.getArgName();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("r/3$.2");
      try { 
        MockURI.URI("vqE6W\"JIvpa,", "]", "r/3$.2", 3, " ", "-", "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: vqE6W\"JIvpa,://%5D@r/3$.2:3%20?-#usage:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-574));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1623));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      String string0 = "J\"&38jc^h$bp:";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", false, "g}[/I]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("<", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "mL_M`";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("mL_M`", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'mL_M`' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("g0mklI>S^$4^.`(m ");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getDescPadding();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(31);
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-2);
      Option option0 = new Option((String) null, " ]");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*+rP}e~?~L^\"llSv", "*+rP}e~?~L^\"llSv", options1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getNewLine();
          String string0 = "i,#t_\\|y6]r'*0YZHzW";
          helpFormatter0.setSyntaxPrefix("i,#t_|y6]r'*0YZHzW");
          StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
          int int0 = 0;
          // Undeclared exception!
          helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      helpFormatter0.setArgName("[");
      helpFormatter0.setWidth(0);
      String string1 = "]Is?`~0d";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "5)B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "s";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // s
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "--", "[", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setLongOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", "]", true, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 1139, options2, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "--", true, "[");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 1381);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(398);
      Options options0 = new Options();
      helpFormatter0.printHelp(1284, "!fQe", "!fQe", options0, "!fQe", true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(398);
      Options options0 = new Options();
      helpFormatter0.printHelp("N4owzjCgFGN$M#i", "N4owzjCgFGN$M#i", options0, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?8", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 0, 0);
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "");
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      String string0 = "`Jc)?->*( T\"&";
      options2.hasOption("--");
      options2.getOptionGroups();
      options2.addOption("", true, "`Jc)?->*( T\"&");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1989;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " ", true, "KZHwve/_gP?");
      int int1 = 448;
      options1.getOption(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int2 = 0;
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 1989, 0);
  }
}
