/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:07:04 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printHelp("HDK]ccWit", "", options0, "K4M`rEfzb'\u0000;}NWFj4", false);
      helpFormatter0.setLeftPadding((-2319));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 472, options0, 472, 472);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray1[1] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println("usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 4080, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      helpFormatter0.printHelp(6, "1}a^!! 'Le%4*j!>l", "-", options1, "x ;Fy4;#B2<2'M", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1364);
      helpFormatter0.setLongOptPrefix("hR-0s9R<;D");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1364);
      String string0 = "-.\\df";
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("hR-0s9R<;D", "-.df", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setWidth((-537));
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 24, 1, "[2`#tI");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, 1, (-2529), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-2));
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      options0.toString();
      String string1 = "zmP9V:`pSz]g*\\.";
      options1.addOption("arg", " ", false, "zmP9V:`pSz]g*.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", " ", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%zFUEF%mB&LX\")c0");
      int int0 = (-1);
      String string0 = "<`dZ.zzoc]=]Ws N";
      options0.getMatchingOptions("M!LPjT");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "<`dZ.zzoc]=]Ws N", (String) null, options0, 2, (-1), "z", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 110, 1993, "Uj#{Li{#WmzD5Ue;<p");
      helpFormatter0.renderWrappedText(stringBuffer0, 1993, 2852, "Uj#{Li{#WmzD5Ue;<p");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 15, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2806, options0, 3, 880);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 117, "G5[=${68T");
      helpFormatter0.renderOptions(stringBuffer2, 32, options0, 32, 117);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 110;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "I*|p~;`f=gZ,G", options0, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.print((-31.25801227815));
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      boolean boolean0 = true;
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "arg", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 10, "\n", "\n", options1, (-1), 101, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.ParseException", false, "\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, 10, 1, (String) null, false);
      helpFormatter0.createPadding(10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 0, 26);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultDescPad = (-399);
      int int0 = helpFormatter1.defaultLeftPad;
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = helpFormatter2.defaultLeftPad;
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter2.renderWrappedText(stringBuffer0, 0, 0, "&&J`_?SN8vr;E");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockFile1.getCanonicalPath();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = new Locale("--");
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "\n", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1, ".,;M\"z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      int int0 = 2;
      String string0 = "qX!zu~-JE~;;2-5pL";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 255, "+Agb", "usage: ", (Options) null, 1, 1542, "TWHG{woK09L.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", ";+R^Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, ";+R^Y");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      MockFile mockFile0 = new MockFile(" -yT0~NWb?ruW7", "org.apache.commons.cli.Options");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "--");
      helpFormatter1.getWidth();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-1), options0, 16, 16);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, 74, 16);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Option option0 = new Option("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup1.setSelected(option0);
      helpFormatter1.printHelp(32, "\n", (String) null, options0, "]", true);
      Options options2 = options1.addOption("", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 9, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      boolean boolean0 = true;
      Option option0 = new Option("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup1.setSelected(option0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "\n", options1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1426), "-", "", options1, 1293, (-1), "S9oq/j", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1364);
      helpFormatter0.setLongOptPrefix("hR-0s9R<;D");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("._a^@%~zFbvy", 2, 1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1265), "\n", "usage: ", options1, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append((CharSequence) "~uYS2/Dm\"(%'et%Y;");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "~uYS2/Dm\"(%'et%Y;");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "\n");
      helpFormatter1.createPadding(1916);
      int int0 = (-1360);
      String string0 = "by3";
      String string1 = ">";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      mockPrintWriter0.append('\\');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "T`0", false, "arg");
      options1.addOption((String) null, "--", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-1528), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.printHelp(33, "\n", (String) null, options0, "-", false);
      helpFormatter0.printHelp("-", "U^*?OsvUB$@EzECH", options0, "         ");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object object0 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-217), "cmdLineSyntax not provided", "&ow5^ ({!>Ub", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      mockPrintWriter0.append('\\');
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      options0.addOption("arg", "-", true, "");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "7Gnk\"RPFAs");
      mockPrintWriter0.append((CharSequence) stringBuffer1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 449, (String) null, options0);
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("i0v2a+b7x", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("=Q");
      mockPrintStream0.println((Object) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 1, "~uYS2/Dm\"(%'et%Y");
      helpFormatter0.getNewLine();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(1, " | ", "", (Options) null, "\n");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-443);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-443), 7, "s9BEAFmG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      mockPrintWriter0.append('\\');
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "7Gnk\"RPFAs");
      mockPrintWriter0.append((CharSequence) stringBuffer1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 449, (String) null, options0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "N_-qv4JCND7&pYI'T*", options1, 182, 13, "RpC4B|M]c", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "uC=yzD=Lp", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("RC1nU'I6Zd");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, " r");
      helpFormatter2.printHelp("   ", (String) null, options1, "usage: ", false);
      helpFormatter1.printHelp("Cannot add value, list full.", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(2861);
      helpFormatter1.printHelp(60, "arg", "=nGc0", options1, "--", false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "~uYS2/Dm\"(%'et%Y");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2930, "\n", "e8pro_zOT{h\"", (Options) null, "[ARG...]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgName("");
      helpFormatter0.printHelp(6, "1}a^!! 'Le%4*j!>l", "-", options1, "", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgName("C<7");
      helpFormatter0.printHelp((-1), "-", "", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "~uYS2/Dm\"(%'et<Y;");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp("3$", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("3$", options1, false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      boolean boolean0 = true;
      Option option0 = new Option("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup1.setSelected(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1426), "-", "", options1, 1293, (-1), "S9oq/j", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockFile1.getAbsoluteFile();
      mockFile1.mkdirs();
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "TWHG{woK09L.";
      MockFile.createTempFile("arg", "rm\"4A)0z='cSG), ");
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "-", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(printWriter0, 13, "[", "", options0, 13, 182, "", true);
      helpFormatter0.setOptPrefix("]");
      helpFormatter0.createPadding(182);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      Options options0 = new Options();
      options0.hasShortOption("?*xf#B`DqC");
      Options options1 = options0.addOption("vrMsa", "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-924), options1, (-3396), (-924));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), (Options) null, 34, (-1275));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ", (String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setNewLine("RC1nU'I6Zd");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, " r");
      helpFormatter2.printHelp("   ", (String) null, options1, "usage: ", false);
      helpFormatter1.printHelp("Cannot add value, list full.", options1);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 9, 60, "--");
      helpFormatter1.renderOptions(stringBuffer0, 1286, options0, 74, 1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.createPadding(1545);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup1.setSelected(option0);
      helpFormatter0.printHelp(64, "Vc|?", "-", options0, "-", true);
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(2163);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 9);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = null;
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      mockPrintWriter0.append('\\');
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 182, (String) null, (String) null, options0, 9, 1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setWidth((-2334));
      assertEquals((-2334), helpFormatter0.defaultWidth);
      
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding((-2));
      int int0 = (-750);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-750), (-750));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      Options options2 = options0.addOption("", "", true, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(" ", "e3", options1, (String) null, true);
      options2.addOption("s", true, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter1.printHelp("has already been selected: '", options1);
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setNewLine("RC1nU'I6Zd");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, " r");
      helpFormatter2.printHelp("   ", (String) null, options1, "usage: ", false);
      helpFormatter1.printHelp("Cannot add value, list full.", options1);
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 9, 60, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 9, options1, (-2437), 217);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "TWHG{woK09L.");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "arg", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockFile1.getAbsoluteFile();
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "TWHG{woK09L.";
      MockFile.createTempFile("arg", "--");
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      helpFormatter0.defaultSyntaxPrefix = "7{";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "-").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      printWriter0.println();
      helpFormatter0.printHelp(printWriter0, 13, "[", "", options0, 13, 182, "7{", true);
      helpFormatter0.setOptPrefix("]");
      Options options1 = options0.addOption("", "6Uq:PQpa4'C[pUW", false, "c[Mv${tzc9>NGpf/+");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3v&w", "", options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(printWriter0, 114, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, 10, 1, (String) null, false);
      helpFormatter0.printHelp(2930, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, "arg");
      helpFormatter0.createPadding(114);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockFile1.getAbsoluteFile();
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "TWHG{woK09L.";
      MockFile.createTempFile("arg", "rm\"4A)0z='cSG), ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "~uYS2/Dm\"(%'et%Y");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "Pr");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, "~uYS2/Dm\"(%'et%Y");
      options3.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-1142), "Cannot add value, list full.", "arg", options1, (-2), 306, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Options options0 = new Options();
      options0.hasLongOption("org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1930);
      helpFormatter0.setLongOptSeparator("]L#");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(printWriter0, 114, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, 10, 1, (String) null, false);
      helpFormatter0.rtrim("7Gnk\"RPFAs");
      Options options2 = new Options();
      options2.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", "", options0, 10, 74, "--");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 925;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(925, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", (Options) null, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, int0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.setNewLine("");
      PrintWriter printWriter1 = mockPrintWriter0.append('\\');
      helpFormatter0.printUsage(printWriter0, 13, "~Jay{");
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(printWriter1, 74, "~Jay{", "vl*", options0, 0, 2063, "*p_-jR=5q|*CgV~");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine("f7b.[");
      mockPrintWriter0.append('\\');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 22, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      int int0 = 0;
      String string0 = "LMB9U;v]3p>dX\"lEu2";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "LMB9U;v]3p>dX\"lEu2");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      options0.toString();
      options0.addOption("", " ", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = null;
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      mockPrintWriter0.append('\\');
      mockPrintWriter0.println(74);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 114, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, 10, 42, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-2107));
      helpFormatter0.setNewLine("");
      mockPrintWriter0.append('@');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-2107), "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(11);
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("4*9");
      helpFormatter2.defaultDescPad = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f7O{:J_IJ$T`qpy", "x@B <WbCm*y", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ";N*/~$hz&c>=";
      helpFormatter0.setOptPrefix("");
      Options options0 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine(";N*/~$hz&c>=");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";N*/~$hz&c>=", ";N*/~$hz&c>=", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("RC1nU'I6Zd");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption((String) null, (String) null, false, " r");
      helpFormatter2.printHelp("   ", (String) null, options1, "usage: ", false);
      helpFormatter1.printHelp("Cannot add value, list full.", options1);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockFile1.getAbsoluteFile();
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "TWHG{woK09L.";
      MockFile.createTempFile("arg", "rm\"4A)0z='cSG), ");
      mockPrintWriter0.format(" ", objectArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
          MockFile mockFile1 = new MockFile(mockFile0, "--");
          File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
          Object[] objectArray0 = new Object[5];
          objectArray0[0] = (Object) helpFormatter0;
          objectArray0[1] = (Object) "JEL#WdVxOszG";
          objectArray0[2] = (Object) mockPrintWriter0;
          mockPrintWriter0.append('a');
          mockPrintWriter0.println(74);
          Options options0 = new Options();
          Options options1 = options0.addOption("", "^Vn=Nd@_}w4", true, (String) null);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          // Undeclared exception!
          helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.ParseException", "", options1, 1, 13, "", true);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "";
      mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      int int0 = 1;
      String string1 = "~uYS2/Dm\"(%'et%Y;";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "~uYS2/Dm\"(%'et%Y;");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.AlreadySelectedException", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockFile1.getAbsoluteFile();
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "TWHG{woK09L.";
      MockFile.createTempFile("arg", "rm\"4A)0z='cSG), ");
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "[", "", options0, 1, 182, "", true);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+,KH");
      MockFile mockFile0 = new MockFile("usage: ", ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "\u0005*;8 A9%I}QCN-", "+,KH", options0, (-443), (-443), "DKSH'>UK}0F}kS", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3437), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      String string0 = "has already been selected: '";
      helpFormatter0.setNewLine("has already been selected: '");
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      int int0 = (-2);
      mockPrintWriter0.println((-2));
      String string1 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      pipedOutputStream0.close();
      String string2 = "7Gnk\"RPFAs";
      options0.addOption("arg", "-", false, "arg");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "org.apache.commons.cli.ParseException", "", options0, (-2), 74, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      MockFile mockFile0 = new MockFile(" -yT0~NWb?ruW7", "org.apache.commons.cli.Options");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "--");
      helpFormatter0.findWrapPos("-", 103, 3435);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(32);
      helpFormatter0.setDescPadding(32);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("|05|ouAv.*Y) bDQ");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 10;
      helpFormatter0.setLeftPadding(10);
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("aw", " ", false, "arg");
      Option option0 = null;
      try {
        option0 = new Option("v6,y%FCY,5h", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v6,y%FCY,5h' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1790);
      helpFormatter0.createPadding(1);
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "CZ`HpGEbQ{z", "", options0, "_+LV67(KrCyHS(Hm@", true);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter(12);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 32, 101, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-2));
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      options0.toString();
      options1.addOption("arg", " ", false, "zmP9V:`pSz]g*.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", " ", options0, "", true);
      // Undeclared exception!
      try { 
        options1.addOption("\n", true, "zmP9V:`pSz]g*.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 0, "");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOption("NO_ARGS_ALLOWED");
      options0.addOption("arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setNewLine("RC1nU'I6Zd");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption((String) null, (String) null, false, " r");
      helpFormatter1.printHelp("   ", (String) null, options1, "usage: ", false);
      helpFormatter0.printHelp("Cannot add value, list full.", options1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-5178));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      mockPrintWriter0.println(13);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(printWriter0, 114, "org.apache.commons.cli.ParseException", "org.apache.commons.cli.ParseException", options1, 10, 1, (String) null, false);
      helpFormatter0.printHelp(2930, "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(129, (String) null, "Ha'r3CfP/<?6", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "   ";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 0, "   ");
      helpFormatter0.setNewLine("0zUR*MjoQ0nTz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringBuffer1;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("0zUR*MjoQ0nTz", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.ParseException", false, "7Gnk\"RPFAs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.createPadding(34);
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("JEL#WdVxOszG", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      File file0 = MockFile.createTempFile("TWHG{woK09L.", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "JEL#WdVxOszG";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockFile1.getAbsoluteFile();
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) "TWHG{woK09L.";
      MockFile.createTempFile("arg", "rm\"4A)0z='cSG), ");
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 13, "[", "", options0, 13, 182, "", true);
      helpFormatter0.setOptPrefix("]");
      Options options1 = options0.addOption("", "6Uq:PQpa4'C[pUW", false, "c[Mv${tzc9>NGpf/+");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "3v&w", "", options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5+0=sc-FCj]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("5+0=sc-FCj]", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.setDescPadding((-2));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "", true, "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-750), " ", (String) null, options2, " !RKSDH[NNE", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      int int0 = (-283);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-283));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("+,KH");
      MockFile mockFile0 = new MockFile("usage: ", ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, ">");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ] [ long ", 0, (-658));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-443);
      String string0 = "N";
      Options options0 = new Options();
      helpFormatter0.printHelp("N", options0, true);
      helpFormatter0.defaultOptPrefix = "N";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-443), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName(":OG7I");
      helpFormatter0.getLongOptPrefix();
      assertEquals(":OG7I", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*33z]uMoXL.JA";
      helpFormatter0.setNewLine("*33z]uMoXL.JA");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      String string1 = "' was specified but an option from this group ";
      String string2 = "tKI.(";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ", "tKI.(");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // tKI.(
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setNewLine((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      mockPrintWriter0.println(13);
      helpFormatter0.printUsage(printWriter0, 13, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, (String) null, "org.apache.commons.cli.HelpFormatter", options0, 13, 13, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("`{}<zgw9[", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`{}<zgw9[' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 3;
      String string0 = ">";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "-", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 332;
      helpFormatter0.createPadding(332);
      String string0 = "wckJAe[pMzpx";
      Options options0 = new Options();
      String string1 = "wku";
      Option option0 = new Option("wku", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      String string2 = ">cu82PPG:s&8";
      // Undeclared exception!
      try { 
        options2.addOption(">cu82PPG:s&8", "                                                                                                                                                                                                                                                                                                                                            ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>cu82PPG:s&8' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
