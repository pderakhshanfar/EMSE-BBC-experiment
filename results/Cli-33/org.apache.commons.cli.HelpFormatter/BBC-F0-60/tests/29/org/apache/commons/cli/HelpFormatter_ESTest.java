/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:14:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.defaultWidth = (-154);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-543), options0, 978, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(">");
      helpFormatter0.defaultDescPad = (-1050);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("[ARG...]");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "}f*2 fgUFF!`3#");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("s`", "' f#B*i", (Options) null, "' f#B*i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1581;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("usage: ", 1581, 1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("G%:Fi");
      int int0 = 0;
      String string0 = "]";
      String string1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Options options0 = new Options();
      int int1 = 13;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "G%:Fi", "]", options0, 13, 0, "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("!W:gy{4!639zC;fL", "U%|bry++f}0),w9", options1, "-.L>;Fs]F5}gEzsf:{", false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "--", true, "\n");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1455), "");
      helpFormatter0.defaultWidth = (-1455);
      option0.setRequired(true);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      option0.setArgName("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "", options1, "E*/nY]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", false, "'");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("'");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "v-J");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("v-J", "", options1, "^},R-%", true);
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "org.apache.commons.cli.Util", options0, ", ", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = new OptionGroup();
      optionGroup2.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\"", options0, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v;;>#x");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "--", false, "\n");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1455), "");
      option0.setRequired(false);
      helpFormatter0.getArgName();
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      option0.setArgs(13);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "v;;>#x", options0, (String) null, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      option0.setDescription("row+;xZk}cq#");
      Options options1 = options0.addOption("arg", "", true, "org.apache.commons.cli.HelpFormatter$1");
      optionGroup0.toString();
      option0.setArgName("P>.vzh_&WHI3V");
      options1.addOption("", true, "lJ\bC'lr9<{-?ibcaM");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3890, options0, 8, 1398);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("MfvyFJuDmp#", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = (-3337);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 31, options0, 31, 31);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 31, (-1), "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", "cmdLineSyntax not provided").when(comparator0).toString();
      doReturn((-1585)).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P36pMrD=&");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "meJD";
      objectArray0[1] = (Object) "meJD";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "P36pMrD=&";
      objectArray0[5] = (Object) "meJD";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Option option0 = new Option("", "-", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 19, "", options1);
      options0.addOption("meJD", "-", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", options0, false);
      int int0 = 2546;
      String string0 = "";
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-2513), options1, 0, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('6');
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = 44;
      String string0 = "VCpdi}*E";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOption("arg", " =8s>E9B;qy", true, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getOptPrefix();
      option0.setArgName("-");
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      option0.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(" =8s>E9B;qy", "org.apache.commons.cli.OptionValidator", options2, "4Dhn.:y9Ly0", true);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 25, 13, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-3), options0, 74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOption((String) null, "]", true, "}/8*b_X)");
      helpFormatter0.getOptPrefix();
      option0.setArgName(",\fVr6{N$`]FEmB`");
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup1);
      option0.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "-", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("arg", 1, (-572));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, ",B'=dY", true, "pg!/zonxQT%0");
      helpFormatter0.getOptPrefix();
      option0.setArgName("");
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup0);
      option0.setArgs(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("c", "4Dhn.:y9Ly0", options3, "", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      boolean boolean0 = true;
      Option option0 = new Option("", "arg", true, "\n");
      options0.addOption(option0);
      option0.setArgs(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "h", " ", options1, 0, 0, " ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ Options: [ short ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 116, "|)fI", (String) null, options0, 0, 116, "h", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Option option0 = new Option("", "arg", true, "\n");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 74, "\n");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 16, 30);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Option option0 = new Option("", "arg", true, "\n");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "usage: ", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter2.printHelp("\n", "\n", options2, "--", true);
      helpFormatter0.setWidth(1);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, ", ", "arg", options1, 74, 8, "usage: ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.renderOptions(stringBuffer0, 1070, options0, 1070, 101);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultDescPad;
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "O@H,>A";
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      mockFile0.setReadOnly();
      int int1 = (-488);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "O@H,>A", "O@H,>A", (Options) null, "O@H,>A", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Option option0 = new Option("", "arg", true, "\n");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.getMatchingOptions("j2<`FjfM;>y+Y");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1884, options1, 1884, 1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 38, "O@H,>A", "O@H,>A", (Options) null, (-488), 2551, "O@H,>A");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      mockFile0.setReadOnly();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2038, "O@H,>A", (String) null, (Options) null, 2659, 1710, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      String string0 = " =8s>E9B;qy";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), (-3190), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      mockFile0.setReadOnly();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-491), "-", "@H,>A", (Options) null, 74, 2038, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int1 = 1127;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 1237;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1237, (-1259));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1199, (-253), ".:Hg]@");
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 1199, "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1199, "arg", "--", options0, 74, 1199, "_&%77>", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1131));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'Y';
      charArray0[2] = '+';
      charArray0[3] = '!';
      stringWriter0.write(charArray0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.print((double) 3);
      helpFormatter0.setOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 34, "9&*-r8HgL", "usage: ", options0, 34, (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " =8s>E9B;qy", true, "org.apache.commons.cli.HelpFormatter$1");
      optionGroup0.toString();
      option0.setArgName("P>.vzh_&WHI3V");
      Options options2 = options1.addOption("", true, "lJ\bC'lr9<{-?ibcaM");
      options2.addOptionGroup(optionGroup0);
      option0.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("RtLz!C", options0, true);
      options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "O@H,>A";
      String string1 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-488), (String) null, "O@H,>A", (Options) null, 74, 2038, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print((-5042.62));
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = '2';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '2';
      charArray0[5] = 'Y';
      charArray0[6] = '2';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.AlreadySelectedException", "Op3!xQNQs$J", options0, 2, 99, (String) null, false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(1375);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultDescPad = 114;
      helpFormatter0.setWidth((-2171));
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("uGg [+]2Ki,=MX)pB");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      String string0 = "TM!%1xVwUAM2]";
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      MockFile mockFile0 = new MockFile("-", "TM!%1xVwUAM2]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), (-2), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      String string0 = "TM!%1xVwUAM2]";
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "org.apache.commons.cli.HelpFormatter$1");
      optionGroup0.toString();
      String string1 = "lJ\\bC'lr9<{-?ibcaM";
      option0.setArgName("P>.vzh_&WHI3V");
      Options options2 = options1.addOption("", true, "lJ\bC'lr9<{-?ibcaM");
      options2.addOptionGroup(optionGroup0);
      option0.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      helpFormatter1.printHelp("._", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer(", ");
      int int0 = 3;
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = "mb\"$Y{";
      mockFile0.setExecutable(false);
      Options options0 = null;
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-900), options2, (-2), 1260);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " =8s>E9B;qy", true, "org.apache.commons.cli.HelpFormatter$1");
      optionGroup0.toString();
      option0.setArgName("P>.vzh_&WHI3V");
      Options options2 = options1.addOption("", true, "lJ\bC'lr9<{-?ibcaM");
      Options options3 = options2.addOptionGroup(optionGroup0);
      option0.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("RtLz!C", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer(", ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, "--");
      Options options4 = options3.addOption(option0);
      helpFormatter1.printHelp(3, "lJ\bC'lr9<{-?ibcaM", "TM!%1xVwUAM2]", options4, " ", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      mockPrintWriter0.print(1.0);
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'Y';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.setOptPrefix("Op3!xQNQs$J");
      Options options0 = new Options();
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2482), (String) null, "A CloneNotSupportedException was thrown: ", options0, 32, 32, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1199, (-253), ".:Hg]@");
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 1199, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ",xR6_*~u%<P|L|)1)", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", "arg", options1, "$,~#g'a$(=h8b[i?kT", false);
      helpFormatter1.setWidth((-2367));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.apache.commons.cli.AlreadySelectedException", objectArray0);
      Option option0 = new Option("", "arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 74, "--", options0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 74, "\n");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.apache.commons.cli.AlreadySelectedException", objectArray0);
      Option option0 = new Option("", "arg", true, "\n");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 74, "--", options1);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 74, "\n");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ",\fVr6{N$`]FEmB`");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ",\fVr6{N$`]FEmB`", false, "usage: ");
      options1.hasOption("usage: ");
      stringBuffer0.ensureCapacity(894);
      stringBuffer0.insert(3, (long) 74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 26, 74, "&s@eM m95*jTUcXK=");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) null, 1, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, "");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "", options1, "", false);
      helpFormatter0.setWidth((-91));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOption("arg", " =8s>E9B;qy", true, "org.apache.commons.cli.HelpFormatter$1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("tGx*00G --5U", (Object[]) null);
      String string0 = "/?;678#X>Emjzo'h=";
      Option option1 = new Option("", "/?;678#X>Emjzo'h=", true, " [ARG]");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "]", true, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3950), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ",\fVr6{N$`]FEmB`");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ",\fVr6{N$`]FEmB`", false, "usage: ");
      options1.hasOption("usage: ");
      stringBuffer0.ensureCapacity(894);
      stringBuffer0.insert(3, (long) 894);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "Zf>sN]82Wj54l", (String) null, options1, 3271, 894, " ", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = new StringWriter(74);
      stringWriter1.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.println((-1L));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "c'zC[{'jrP4,", (Options) null, 48, 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = null;
      int int0 = 9;
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '>';
      mockPrintWriter0.print((double) 74);
      charArray0[2] = '2';
      charArray0[3] = 'Y';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "mb\"$Y{", "O@H,>A", (Options) null, 9, 1844, "Op3!xQNQs$J", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1075, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("uFirfu}&0^", "", options0, "A CloneNotSupportedException was thrown: ", true);
      helpFormatter0.setWidth((-91));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1154), "A CloneNotSupportedException was thrown: ", "gLd\":aZ", options0, 123, (-1153), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("arg", (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P36pMrD=&");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "meJD";
      objectArray0[1] = (Object) "meJD";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "P36pMrD=&";
      objectArray0[5] = (Object) "meJD";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      Option option0 = new Option("", "-", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage(printWriter0, 19, "", options1);
      Options options2 = options0.addOption("meJD", "-", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2546, "", "", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "", options0, "", false);
      helpFormatter0.setWidth((-91));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1154), "5P<0a", "<", options0, 48, 48, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--", 0, 1);
      stringWriter1.getBuffer();
      stringWriter1.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      Options options0 = new Options();
      options0.hasLongOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-357), "<", "Ibxky", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "d_");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options0 = new Options();
      option0.setArgName("");
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.getOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options4 = new Options();
      helpFormatter0.printHelp("arg", "m.3W=k:b-", options4, "arg", true);
      helpFormatter1.printHelp(74, "5djfE<JP`Y", " ", options2, "P6dldIUt&wZ'6fuWF", false);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1199;
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1199, (-253), ".:Hg]@");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      Option option0 = new Option((String) null, "Illegal option name '", false, ".:Hg]@");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("Illegal option name '", "HKQ", options3, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-253), "", (String) null, options2, "~A", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      Option option0 = new Option("", "TM!%1xVwUAM2]");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " =8s>E9B;qy", true, "org.apache.commons.cli.HelpFormatter$1");
      Options options2 = options1.addOption("", true, "lJ\bC'lr9<{-?ibcaM");
      Options options3 = options2.addOptionGroup(optionGroup0);
      option0.setArgs(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("RtLz!C", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer(", ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "--");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "lJ\bC'lr9<{-?ibcaM", "TM!%1xVwUAM2]", options4, " ", true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      option0.setOptionalArg(true);
      optionGroup0.addOption(option0);
      options0.addOption("arg", "-", true, "uNdT");
      Options options1 = options0.addOption("xBsazA", true, "");
      helpFormatter0.printHelp("uNdT", "uNdT", options1, "", true);
      helpFormatter0.setWidth(2850);
      helpFormatter0.printHelp(2850, "xBsazA", "7y(,Yh3j]L(<.g^", options1, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setArgs(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp("`fa<Ol0sO5N665\"MGo", options1, false);
      Options options2 = new Options();
      helpFormatter0.printHelp("`fa<Ol0sO5N665\"MGo", options2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 2460, "[ARG...]", options0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 1351, options0, 2460, 2460);
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(2460);
      options0.getOption("[ARG...]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ":fy\"R\"", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultDescPad = (-1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      optionGroup2.addOption(option0);
      OptionGroup optionGroup3 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup3);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("arg", "usage: ", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("m", options2, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append('a');
      helpFormatter0.rtrim(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "*rz&r*KJ^kCVwJ6E'[}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Locale locale0 = Locale.FRENCH;
      locale0.clone();
      locale0.stripExtensions();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-146), "s&Z\"\"44W");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("Q", "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      option0.setArgs((-1));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("\n", "arg", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "usage: ", objectArray0);
      int int0 = 31;
      Options options0 = new Options();
      int int1 = 9;
      helpFormatter0.printOptions(printWriter0, 31, options0, 9, 9);
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter(31);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write(1);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(117, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 117
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3030);
      helpFormatter0.defaultSyntaxPrefix = "";
      int int0 = 730;
      helpFormatter0.createPadding(730);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("/2\">5H", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "--", 0, 1);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringWriter0.close();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgs(3);
      options0.addOptionGroup(optionGroup1);
      option0.setArgs(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 3520, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      helpFormatter0.defaultDescPad = (-1);
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      option0.setArgs((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("m", "DTCglWb`2`*swT", options1, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2898);
      helpFormatter0.defaultLeftPad = (-2898);
      helpFormatter0.findWrapPos("cO5D\" PhqZnqv(Q", (-2898), (-2898));
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "(0VLC/FSe{{:^EYYoR", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("2$rcf=0Dgvq>.);J");
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2$rcf=0Dgvq>.);J", 0, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringWriter1.close();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(41);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ",\fVr6{N$`]FEmB`");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ",\fVr6{N$`]FEmB`", false, "usage: ");
      options1.hasOption("usage: ");
      stringBuffer0.ensureCapacity(894);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options1, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(861, "", "", options0, "S}Plh.Z:x/9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = ",\\fVr6{N$`]FEmB`";
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ",\fVr6{N$`]FEmB`");
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", ",\fVr6{N$`]FEmB`", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasOption("usage: ");
      stringBuffer0.ensureCapacity(894);
      options1.addOptionGroup(optionGroup0);
      stringBuffer0.insert(3, (long) 894);
      options1.getOptionGroups();
      String string1 = "<";
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "]", options0, ",\fVr6{N$`]FEmB`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "--", 0, 1);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "FH61sGE}J~l>", (String) null, options0, "zv&}lD0");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("\"");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = "MX%J";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "\"", true, "--");
      Option option0 = new Option((String) null, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = null;
      String string2 = "j|I|S.0%#Mg@\"rYJqB";
      // Undeclared exception!
      try { 
        options2.addOption("MX%J", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'MX%J' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      optionGroup0.addOption(option0);
      options0.addOption("", "", false, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("' was specified but an option from this group ", "", options0, "Cannot add value, list full.", true);
      helpFormatter0.setWidth((-91));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ",\fVr6{N$`]FEmB`");
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp(3, "org.apache.commons.cli.HelpFormatter$1", ",\fVr6{N$`]FEmB`", options0, "Cannot add value, list full.", false);
      helpFormatter0.getOptionComparator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.Option", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = ",\\fVr6{N$`]FEmB`";
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ",\fVr6{N$`]FEmB`");
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ",\fVr6{N$`]FEmB`", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasOption("usage: ");
      stringBuffer0.ensureCapacity(894);
      Options options2 = options1.addOptionGroup(optionGroup0);
      stringBuffer0.insert(3, (long) 894);
      String string1 = "<";
      // Undeclared exception!
      try { 
        options2.addOption("<", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("F6O<MFF,`");
      int int0 = 1;
      String string0 = "R.qHik)xq:s2[rq5}O";
      String string1 = "[ARG...]";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "]#W6ok-e@vec`(y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      String string0 = "Zas>q!b`7)-;7*K";
      helpFormatter0.defaultNewLine = "Zas>q!b`7)-;7*K";
      Options options0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setDescPadding((-800));
      String string0 = " | ";
      helpFormatter0.setArgName(" | ");
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      String string1 = "C}*mkb?%'C6[KZW6";
      String string2 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "");
      Option option0 = null;
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-629);
      Options options0 = new Options();
      String string1 = "kMBX@I@GT)e{Q/-gi";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-629), "", "org.apache.commons.cli.Option", options0, "kMBX@I@GT)e{Q/-gi", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8ro,x4(2", (String) null, options0, "(+&+|>~F(.^A.\"Y!", true);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("g+:O%F");
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.hasShortOption("--");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "-", options0, "ii6![&.CboOSL\"V[C-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "g+:O%F", options0, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasShortOption("--");
      helpFormatter0.printHelp("meJD", "", options0, "meJD");
      helpFormatter0.printHelp("meJD", "p~|!um|Yt", options0, "E$", true);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      options0.hasShortOption("usage: ");
      options0.getOptions();
      Options options1 = options0.addOption("", "\n", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      String string0 = "f+*kF4^|";
      helpFormatter0.setNewLine("f+*kF4^|");
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "meJD";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) options0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      mockPrintWriter0.printf("arg", objectArray0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("\"", "arg", true, "meJD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("^Xa-nz,l^SwzP,--");
      helpFormatter0.setWidth(520);
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 1461, 0, "}_A24mN#h'<e\"wUj");
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("}_A24mN#h'<e\"wUj");
      helpFormatter0.getNewLine();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 3347, 3347);
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setLeftPadding(3347);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, false);
      helpFormatter0.setLongOptPrefix("                                                                          ");
      helpFormatter0.getWidth();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = new MockPrintStream("JR}H+P0B[w>{5)");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) "W\"+wPAK";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "W\"+wPAK";
      Object object1 = new Object();
      objectArray0[4] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("W\"+wPAK", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3347, "JR}H+P0B[w>{5)");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-278), "^@r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = (-121);
      helpFormatter0.defaultDescPad = (-121);
      mockPrintWriter0.print('w');
      mockPrintWriter0.write("", 1, (-2218));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "[ Options: [ short ");
      String string0 = ")AiQD/+N+IMZUIz~\\A^";
      Options options0 = new Options();
      Option option0 = new Option("", false, "org.apache.commons.cli.Options");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption("org.apache.commons.cli.Options", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Options' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('a');
      int int0 = 2460;
      String string0 = "[ARG...]";
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 2460, "[ARG...]", options0);
      String string1 = "";
      boolean boolean0 = true;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>(linkedList1);
      Locale.lookup(linkedList0, linkedList2);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format((Locale) null, "--", objectArray0);
      mockPrintWriter0.println(true);
      options0.getOption(",u_`~7.& cOL9G2j");
      // Undeclared exception!
      try { 
        mockPrintWriter0.println((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1633);
      String string0 = "`b^UX";
      Options options0 = null;
      String string1 = "";
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1633), "`b^UX", "`b^UX", (Options) null, "`b^UX", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "g+:O%F";
      helpFormatter0.rtrim("g+:O%F");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockFile mockFile0 = new MockFile("");
      boolean boolean0 = true;
      mockFile0.setExecutable(true, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("2$rcf=0Dgvq>.);J");
      StringWriter stringWriter0 = new StringWriter(3);
      int int0 = 0;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "2$rcf=0Dgvq>.);J", 0, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter1.close();
      String string0 = "i*";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "i*");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setSyntaxPrefix("--");
      assertEquals("--", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("NYYc0xxMAyA");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(0);
      String string0 = null;
      Options options0 = new Options();
      String string1 = " | ";
      String string2 = "";
      boolean boolean0 = true;
      String string3 = "gM*:|5'O+l\\ciCUsqHf";
      // Undeclared exception!
      try { 
        options0.addOption(" | ", "", true, "gM*:|5'O+lciCUsqHf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "line.separator";
      Options options0 = new Options();
      String string1 = "";
      helpFormatter0.setArgName("");
      // Undeclared exception!
      try { 
        options0.addOption("   ", "   ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setArgs(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "`fa<Ol0sO5N665\"MGo");
      StringWriter stringWriter2 = stringWriter1.append('V');
      stringWriter2.close();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 44, "`fa<Ol0sO5N665\"MGo");
      assertEquals("`fa<Ol0sO5N665\"MGo", stringBuffer0.toString());
      
      helpFormatter0.getDescPadding();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2690;
      String string0 = "^njGrB[";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2690, "^njGrB[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter(3);
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 0, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "5";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "arg");
      Options options3 = options2.addOption("xiD", "-", true, "\n");
      Option option0 = new Option("xiD", "");
      Options options4 = options3.addOption(option0);
      option0.toString();
      boolean boolean0 = false;
      helpFormatter0.printHelp("5", options4, false);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, (-2), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2856, (-834), "VpjwYldC_B,o");
      assertEquals(13, stringBuffer0.length());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }
}
