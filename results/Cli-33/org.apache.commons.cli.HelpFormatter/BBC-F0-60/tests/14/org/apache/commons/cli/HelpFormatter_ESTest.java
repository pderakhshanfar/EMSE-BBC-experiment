/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:08:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.optionComparator = null;
      helpFormatter0.printHelp(1312, "aT/b4+K-jK94Ts ^", "mR$pbcoEw#W+A|", options0, "aT/b4+K-jK94Ts ^");
      MockFile mockFile0 = new MockFile("mR$pbcoEw#W+A|", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1312, "mR$pbcoEw#W+A|", options0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "org.apache.commons.cli.HelpFormatter$1", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-138), options1, (-1124), (-1210));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("D<94.{EL8Dm7=~WQ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 29, "]", "[", options1, 9, (-2194), "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2297);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(225, "line.separator", "JHA+K4sI6A", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Option option0 = new Option((String) null, "-");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 424);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String string0 = "Y)52a_.3EtIO]";
      String string1 = "sbIu@S";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "sbIu@S", options0, "sbIu@S", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options1.hasOption("");
      Options options2 = options0.addOption("", false, "bPg~-#xT?jOQ");
      helpFormatter0.printHelp(4, "u7Mb~P9T0'yFK", "", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-3248), options0, 31, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "b>~HC[SA'**\\uJK";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.cli.ParseException";
      PrintWriter printWriter0 = mockPrintWriter0.format(string0, objectArray0);
      int int0 = 748;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 748, "org.apache.commons.cli.AlreadySelectedException", string0, options0, 748, (-1054), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      String string1 = "4cC?";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      String string2 = "";
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      String string3 = "]";
      boolean boolean0 = true;
      int int0 = (-1414);
      helpFormatter0.setLeftPadding((-1414));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, true);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.print(74);
      options0.addOption("", "]", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-17), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(7);
      helpFormatter1.printHelp(7, "\n", "usage: ", options0, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "2gqPu/", 1, 1);
      helpFormatter0.printHelp(printWriter0, 41, "2gqPu/", (String) null, options0, 41, 2878, (String) null, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 350, options0, (-1535), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-941), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      int int1 = 362;
      helpFormatter0.createPadding(362);
      String string0 = "";
      Options options0 = new Options();
      String string1 = "has already been selected: '";
      options0.addOption("", "", true, "has already been selected: '");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("                                                                                                                                                                                                                                                                                                                                                                          ");
      options0.hasOption("arg");
      options1.getMatchingOptions("4:");
      StringBuffer stringBuffer0 = new StringBuffer(";9:%mo8b1FH>zw~8go=");
      helpFormatter0.renderOptions(stringBuffer0, 362, options1, 0, 18);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      options1.hasLongOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options0, "-");
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$1", "-", options0, "");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "arg", "arg", options1, 1, 1284, "]");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "/Q@P*%].eqvK");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption((String) null);
      Options options2 = options0.addOption("arg", false, "-");
      options2.addOption("", false, "");
      helpFormatter0.printHelp(351, "arg", "iX8:GJZ9@Tsa%", options2, "/Q@P*%].eqvK", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "]";
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "]";
      objectArray0[5] = (Object) "!9+a{Rxa?FaW<_";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("!9+a{Rxa?FaW<_", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append('A');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 74, (String) null, "", options0, (-802), 8, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", true, "c>MmT i~e)R");
      helpFormatter0.printHelp("BZj", options1, true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.toString();
      options0.helpOptions();
      options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 41, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "Le", options0, 46, 110, "4cC?", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 250, options0, 48, 44);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1567), 198, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1827), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--", 1, 1);
      helpFormatter0.printHelp(printWriter0, 46, "--", "", options0, 41, 44, "", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "--", true, "o%QmKX|C5");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 31, "zI|St?L:9", options2);
      String string0 = "eA-i";
      int int0 = (-48);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-48), "[ARG...]", "o%QmKX|C5", options1, "eA-i", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      Options options0 = new Options();
      String string1 = "has already been selected: '";
      Options options1 = options0.addOption("arg", "arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "(:";
      options1.getMatchingOptions("9q");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1864, "WK|%HO5n7).", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, true);
      helpFormatter0.printHelp("]", options0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) null, 1, 1);
      helpFormatter0.printHelp(printWriter0, 44, "]", "arg", options1, 44, 46, "Gvf9MQb-)Mz4(x%", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("]", options0, false);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.print(74);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      int int0 = 678;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 678, "' was specified but an option from this group ", "qC9P65H\"i9S:`'S{>h", options0, 64, (-593), "' was specified but an option from this group ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, false);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.print(74);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      int int0 = (-593);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2018), "", (String) null, options1, 853, (-2018), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(334);
      Options options0 = new Options();
      String string0 = "arg";
      boolean boolean0 = true;
      options0.addOption("arg", "", true, "has already been selected: '");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("(:");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.hasShortOption("4cC?");
      options0.addOption("", false, "");
      options0.hasLongOption("}vmf*2*3%.JO*sjHV)u");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "cWN+JwcPm<)N0hp<C9\"", options0, "}vmf*2*3%.JO*sjHV)u", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultLeftPad = (-2549);
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("aZhlxT!_/hO41Vax", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printOptions(mockPrintWriter0, (-2792), options0, 1, 64);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, false);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      mockPrintWriter0.print(74);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-579), "", "", options1, (-2189), (-2189), "v!y9^-1;!muo>2Ck", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, false);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.print(74);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      mockPrintWriter0.format(locale0, "--", objectArray0);
      int int0 = (-593);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "NO_ARGS_ALLOWED", "", options0, (-593), (-1), "' was specified but an option from this group ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("' was specified but an option from this group ", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "WQn~", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-", 1, 1);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, ", ", "", options0, (-1981), 41, "", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, false);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.print(74);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-579), " :: ", " :: ", options1, (-579), (-2), " :: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "\n");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 118, options1, 5, (-22));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      options1.hasOption(" [ARG]");
      Options options2 = options1.addOption("", false, "iX8:GJZ9@Tsa%");
      helpFormatter0.printHelp(4, " ", "", options2, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "4cC?", true, "");
      helpFormatter0.printHelp("]", options1, false);
      helpFormatter0.printHelp("]", options0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      mockPrintWriter0.print(74);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-579), " :: ", " :: ", options1, (-579), (-2), " :: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1>");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, "'Lv^~=i", false, "");
      helpFormatter0.printHelp("4cC?", options0, false);
      helpFormatter0.printHelp("}", options1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "/Q@P*%].eqvK");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.hasOption((String) null);
      Options options1 = options0.addOption((String) null, false, " ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(25, "M*[y\"&<2>.", "", options2, "M*[y\"&<2>.", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "/Q@P*%].eqvK");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption((String) null);
      Options options2 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp(351, "arg", "iX8:GJZ9@Tsa%", options2, "/Q@P*%].eqvK", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "jn~=3geVT'{a");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer0, (-3022), 74, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("d q|\"B", 1, (-1034));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      options0.hasLongOption("(|k");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("mC2oVYVXdj-9q}", 4, 4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("' was specified but an option from this group ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 74, options0, 11, 25);
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 3, 1142);
      helpFormatter0.printHelp(":", options0, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      String string0 = ">iVq<ceymER^bo'na";
      Options options1 = options0.addOption("arg", false, ">iVq<ceymER^bo'na");
      options1.addOption("", true, ".\"I4}U");
      Option option0 = new Option("sp_k", "");
      options0.addOption(option0);
      String string1 = "HX_Ah1.WNC<[hvU";
      helpFormatter0.printHelp("HX_Ah1.WNC<[hvU", options1, true);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("aZhlxT!_/hO41Vax", options0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.printHelp("HX_Ah1.WNC<[hvU", options0, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("arg", "-", true, (String) null);
      helpFormatter0.printHelp("eT3()3&@9(!J/v|", options1, false);
      helpFormatter0.printHelp("4cC?", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LKzNmvUV RK&[w");
      mockPrintWriter0.println(false);
      mockPrintWriter0.print(0.0F);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2486), "LKzNmvUV RK&[w");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      String string0 = "4cC?";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "4cC?";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "cta");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Eu[nnnr-E:19P# $");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, (String) null, "tzC^", options0, "The option '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.setLongOptPrefix("");
      String string0 = "_h";
      mockPrintWriter0.close();
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.print((double) 1);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "_h";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("_h", objectArray0);
      int int0 = 117;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 117, (Options) null, 117, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      String string0 = "4cC?";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "\n");
      int int0 = (-939);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", false, "/Q@P*%].eqvK");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption(" [ARG]");
      Options options2 = options1.addOption("", false, "iX8:GJZ9@Tsa%");
      helpFormatter0.printHelp(4, " ", "", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "eT?()3&@9(!J/v|");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("usage: ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("IFwRZgHy]_csmvAH=l", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, (String) null, "-", options0, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1935);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1935));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("aZhlxT!_/hO41Vax", options0);
      helpFormatter0.printHelp("HX_Ah1.WNC<[hvU", options0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2096);
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1010), (-2096), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("K\"P9:Li", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer("vV|I^[Dda(.N");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 34, "~~Q");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(137, "Cg`<{c/]RC", "", options0, "kUz#=");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 327, (Options) null, 327, 873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "+zQ##I%jt5";
      helpFormatter0.setLongOptPrefix("+zQ##I%jt5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1620), (Options) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 3, "J1W=n]F:Cp7", "J1W=n]F:Cp7", options1, 1105, 1105, "J1W=n]F:Cp7");
      helpFormatter0.printHelp("H=Lg%98bv5'z4", options0, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/$0ydC&I:O*\"3[Sx%D");
      helpFormatter0.setDescPadding(1);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(true);
      StringBuffer stringBuffer1 = new StringBuffer();
      int int0 = 999;
      int int1 = (-508);
      helpFormatter0.renderWrappedText(stringBuffer1, 999, (-508), "");
      helpFormatter0.findWrapPos("", 1, 1);
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 572;
      StringBuffer stringBuffer1 = stringBuffer0.insert(1, 'k');
      stringBuffer0.trimToSize();
      String string0 = "e";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, (-1620), "e");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "";
      int int0 = (-1672);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "";
      Option option0 = new Option("", "usage: ", true, "");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ", ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.insert(1, 'k');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 572, 0, " ");
      helpFormatter0.findWrapPos(" ", 572, 572);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Eu[nnnr-E:19P# $");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Eu[nnnr-E:19P# $", "[ option: ", options0, "]");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2068), (-2068), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4cC?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "eT3()3&@9(!J/v|");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-500), "y^SOY\"`zjV", "usage: ", (Options) null, ",gd)>4#>}{NW.u8AY");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = ">:ySh)ZG-g6}C=";
      Options options0 = new Options();
      int int0 = (-190);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "ogxE{@@uIx", "", options0, (-641), (-190), ":7wp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-641);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-641), " ", ">:ySh)ZG-g6}C=", options0, (-641), (-641), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = " | ";
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "[ option: ");
      mockPrintWriter0.println(1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 68, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = " X";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " X");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(115);
      helpFormatter0.getLeftPadding();
      String string1 = "[ option: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption(" ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = " | ";
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "[ option: ", "", (Options) null, "B4I;u=]AZPrCjj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("eT3()3&@9(!J/v|");
      int int0 = 572;
      char char0 = 'k';
      int int1 = 1172;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 572, 1172, "eT3()3&@9(!J/v|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      printWriter0.write(3);
      String string0 = "wLpG`DOj";
      helpFormatter0.printUsage(printWriter0, 3, "wLpG`DOj");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&S&Nk{gcR*", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.setDescPadding((-834));
      helpFormatter0.setLeftPadding((-834));
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2082, "arg", "cE&V3'Ex;d;m", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("EvA$");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1345), "EvA$", "EvA$", options0, "--", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, " ", "arg", (Options) null, "kUz#=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.insert(1, 'k');
      stringBuffer0.trimToSize();
      helpFormatter0.renderWrappedText(stringBuffer0, 572, 0, " ");
      helpFormatter0.findWrapPos(" ", 572, 572);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "sv^,YJ8nS54v";
      Options options0 = new Options();
      options0.hasShortOption("--");
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4203;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 32;
      String string0 = "usage: ";
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "usage: ");
      PrintWriter printWriter0 = null;
      String string1 = "5k)v";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "arg");
      // Undeclared exception!
      try { 
        options1.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-lN");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2208, "--", "--", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(773);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 0, 0);
      String string0 = ", ";
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("eT3()3&@9(!J/v|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, "eT3()3&@9(!J/v|");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "eT3()3&@9(!J/v|", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "uy";
      String string0 = "/";
      helpFormatter0.setArgName("/");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("U2k9zqUVhkaM>c");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "U2k9zqUVhkaM>c";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1275, "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "`=+w:H\\r zk2vSp*\"CC";
      options1.getMatchingOptions("-");
      Option option0 = null;
      try {
        option0 = new Option("`=+w:H\r zk2vSp*\"CC", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '`=+w:H\r zk2vSp*\"CC' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2598;
      helpFormatter0.createPadding(2598);
      helpFormatter0.findWrapPos("", 1920, 1920);
      String string0 = " :: ";
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasOption("usage: ");
      options0.addOption("", "-", false, "");
      String string1 = " | ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" | ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7";
      Options options0 = new Options();
      options0.getOptionGroups();
      boolean boolean0 = true;
      helpFormatter0.printHelp("7", "7", options0, "7", true);
      File file0 = MockFile.createTempFile("arg", "arg", (File) null);
      String string1 = "";
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("/$0ydC&I:O*\"3[Sx%D");
      int int0 = 1;
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append(false);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-641);
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-641), "", ">:ySh)ZG-g6}C=", options0, (-641), (-641), "[@>?&I0uHWXj}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = null;
      try { 
        MockURI.URI("-", "'HIv", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: -:'HIv
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.insert(1, 'k');
      stringBuffer0.trimToSize();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.setLongOptPrefix("qf d>6#yy");
      helpFormatter0.defaultLeftPad = (-1643);
      helpFormatter0.rtrim("qf d>6#yy");
      helpFormatter0.setLongOptPrefix("qf d>6#yy");
      helpFormatter0.setSyntaxPrefix("qf d>6#yy");
      helpFormatter0.setLongOptSeparator("");
      String string0 = "sY]5rdPWFzT5 ";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("qf d>6#yy", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'qf d>6#yy' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix("+zQ##I%jt5");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-1034);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.write(74);
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.addOption("GRS921b", false, "arg");
      Option option0 = null;
      try {
        option0 = new Option("-", "", false, "OE;!c+~Ja;U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "wLpG`DOj");
  }
}
