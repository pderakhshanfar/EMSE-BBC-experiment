/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:00:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("E{r$T5./JY)%Fyb1n");
      File file0 = MockFile.createTempFile("arg", "\n", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 20, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      String string0 = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Options options2 = options1.addOption("", "", false, "TP[lAy(eA ]u");
      option0.clone();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.defaultLeftPad = (-1880);
      Options options3 = options2.addOption("", true, "The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options3, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim("[");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("mp?jk^h:IvB5B+TN>/D");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      mockPrintWriter0.println(false);
      mockFile0.mkdirs();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1251), (-1251), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      helpFormatter0.defaultWidth = (-2);
      Options options0 = new Options();
      helpFormatter0.renderWrappedText(stringBuffer0, 4104, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, ", ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 223, "--", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("arg", "arg", true, "--");
      option0.clone();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2057, "l6+4HZgV4DG", (String) null, options1, "4", true);
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("Irh4KOPr*WeL", 2710, 2057);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, ", ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("^~N71M[@");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(115, "\n", "P-}<`gnw5Jqr7", (Options) null, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", "-");
      options1.addOption(option0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1265), options0, 1923, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      String string0 = "]";
      options0.addOption("arg", "]", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!vC";
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(115);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, ", ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 115, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, 115, (-1106), "!vC", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, ">P6T6`");
      Option option0 = new Option("arg", true, "J3@o3yUhjBs3o");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2356, "org.apache.commons.cli.OptionGroup", options3);
      Options options4 = options0.addOption("", (String) null, true, "--");
      helpFormatter0.printHelp("G{UgCeL(Wk|6", options3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "Illegal option name '", "'{g~*fQ", options4, (-2), 1088, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options0);
      Options options1 = options0.addOption("", "usage: ", true, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "--", options1, 74, 3, " :: ", false);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3079, 3, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-278), options1, 1029, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2356, "WiyX3!NTA", options0);
      Options options1 = options0.addOption("uSv", "--", true, "G{UgCeL(Wk|6");
      helpFormatter0.printHelp("--", options1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 32, "PKFI<ZSxU1p.", (String) null, options0, (-1868), 74, "b:,", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "m";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1362), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1469;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1469, "olCf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      pipedOutputStream0.close();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-719), "J!dpmrq,(q8#8U", "Q+'~P0)drIDRXt{e_k", options1, (-719), 876, "Q+'~P0)drIDRXt{e_k", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = " [ARG]";
      Options options2 = options1.addOption((String) null, true, " [ARG]");
      String string1 = "6`g#BcL}";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "6`g#BcL}", options2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = "";
      mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = (-1);
      Options options2 = options1.addOption("", true, "B6CROA+ae@?P;|VaSTW");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("~5\"m7*jIJ?+", "cmdLineSyntax not provided", options2, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u#C\"Gf}TRV", "u#C\"Gf}TRV", (Options) null, "u#C\"Gf}TRV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", true, "B6CROA+ae@?P;|VaSTW");
      helpFormatter1.printHelp("~5\"m7*jIJ?+", "cmdLineSyntax not provided", options2, "", true);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 11, "");
      helpFormatter0.setNewLine("-");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1317));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.print("{F$#j{z0`+hy4E4T:v{");
      int int0 = (-3681);
      mockFileOutputStream0.write((-3681));
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4415), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.getOptions();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, " ");
      Options options2 = new Options();
      Options options3 = options1.addOption("", (String) null, true, (String) null);
      helpFormatter0.printHelp(" ", options3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, (String) null, "", options1, 3, 64, "s(5rK,bO$v", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(68);
      PrintWriter printWriter1 = mockPrintWriter0.format("z", (Object[]) null);
      Options options0 = new Options();
      printWriter0.flush();
      helpFormatter0.printHelp(printWriter1, 68, "#x!zYUhP", "", options0, 1881, 68, "");
      helpFormatter0.printOptions(printWriter0, 68, options0, 64, 2927);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer(6);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-908), "\n", "[GPU=od_f_=1%XdKu", options0, 74, 74, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fp9|!' Tq");
      Options options0 = new Options();
      mockPrintWriter0.println((-2834.4613798));
      mockPrintWriter0.println((long) 1);
      Object object0 = new Object();
      mockPrintWriter0.print((Object) helpFormatter0);
      Object object1 = new Object();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 114, "b~m]yU[A>", "b~m]yU[A>", options0, 44, 44, "fp9|!' Tq", false);
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1881, "Bnvn)4&H", "   ", options0, 1571, 44, "", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.println((long) 74);
      Object object0 = new Object();
      Option option0 = new Option("arg", "usage: ", false, "U&}Hxf");
      mockPrintWriter0.print((Object) option0);
      int int0 = 114;
      mockPrintWriter0.println((Object) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "", "", options0, 364, 31, "?+4rN1^fW94-x.|&C3", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("!vC", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.println((long) 3);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.println((Object) null);
      helpFormatter0.setNewLine("sR8u?,\"$Xep.x");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "Bnvn)4&H", "sR8u?,\"$Xep.x", options0, 202, 1167, "xx'prK7X?:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, "Mn6(:w=bcBSD^S;xy!");
      Option option0 = new Option("arg", "#H_T:!", false, "#H_T:!");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 13, "E^5E`ZpC", "E^5E`ZpC", options4, (-1033), (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[8] = object0;
      mockPrintWriter0.format("arg", objectArray0);
      StringBuffer stringBuffer0 = new StringBuffer(151);
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 151, "jYCHGO)", "jYCHGO)", options0, 64, 74, "9f");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(151, "", "9f", options0, "-U&3W&", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[2];
      helpFormatter0.defaultDescPad = (int) 'J';
      printWriter0.format("z9mv+YsF#etvCkF[/", (Object[]) null);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1394, options0, 1394, 44);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 1394, " :: ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.rtrim("#]D4H75.z*");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "#]D4H75.z*");
      Options options0 = new Options();
      Options options1 = options0.addOption("3p", "--", true, "");
      Option option0 = new Option("arg", "usage: ", true, " ");
      Options options2 = options1.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, " ");
      helpFormatter0.renderOptions(stringBuffer0, 9, options3, 9, 52);
      helpFormatter0.createPadding(79);
      helpFormatter0.getOptionComparator();
      Options options4 = new Options();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, ">P6T6`");
      Option option0 = new Option("arg", false, "J3@o3yUhjBs3o");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 2356, "org.apache.commons.cli.OptionGroup", options3);
      options0.addOption("", (String) null, true, "--");
      helpFormatter0.printHelp("G{UgCeL(Wk|6", options3);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "G{UgCeL(Wk|6";
      objectArray0[3] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2), options0, 2356, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println((Object) options0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "!Bo&?d xGy", "", options0, (-688), 2, "!Bo&?d xGy", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.println((long) 3);
      options0.getOptions();
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.println((Object) null);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " | ", " | ", options0, 44, 114, "!Bo&?d xGy", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.println((long) 3);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.println((Object) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 114, "b~m]yU[A>", "", options0, 114, 44, "-", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("!Bo&?d xGy", 10, 33);
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 2, options0, 33, 33);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.getOptions();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("?T$%BA <SR", "ILE_@HO6fBR6", options1, "ILE_@HO6fBR6");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 63, 63, "usage: ");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options2 = new Options();
      helpFormatter1.getArgName();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "-", options2, 1, 610, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.getOptions();
      options0.getOptions();
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(0.0F);
      mockPrintWriter1.format("0=rm(w", (Object[]) null);
      Options options1 = new Options();
      Options options2 = options0.addOption((String) null, false, "--");
      helpFormatter0.printHelp(" ]", options2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      String string0 = "m";
      Options options0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "m", "cYnOP", (Options) null, "pLQH[4q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("", (Object[]) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[5] = 'J';
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1644, (String) null, options0);
      helpFormatter1.printHelp(1744, "-", "--", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.println((long) 3);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.println((Object) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("b;a+vC*DMl4|zNRO", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 1);
      mockPrintWriter0.println((long) 3);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.println((Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2428), " | ", " | ", options0, 44, 114, "!Bo&?d xGy", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "-", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = "";
      mockPrintWriter0.format("", (Object[]) null);
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      Options options0 = new Options();
      int int1 = (-1575);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "has already been selected: '", options0, "has already been selected: '", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "2Bi=<GwsrM", "", (Options) null, 1, 74, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("p-g,gq\"");
      File file0 = MockFile.createTempFile(">Lb6x;,0bU0VV", "arg", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ">Lb6x;,0bU0VV";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) file0;
      mockPrintWriter0.flush();
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "bv Xnz@ ~Cpvki";
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 65, 65, "bv Xnz@ ~Cpvki");
      helpFormatter0.setSyntaxPrefix("bv Xnz@ ~Cpvki");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-194));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "", false, "TP[lAy(eA ]u");
      option0.clone();
      options0.getOptions();
      options0.helpOptions();
      Options options4 = options3.addOption("", true, "The option '");
      helpFormatter0.printHelp("-", "-", options4, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options5 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("U<QLO1]+oYy,rV;[");
      PrintWriter printWriter0 = mockPrintWriter0.format("U<QLO1]+oYy,rV;[", (Object[]) null);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      StringBuffer stringBuffer2 = new StringBuffer(74);
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'K';
      stringBuffer2.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 46, 46, "U<QLO1]+oYy,rV;[");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "'?_^R?hJ_LtIs", options0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("", (Object[]) null);
      helpFormatter0.findWrapPos("N7/T=0qr1;#%~68oo", 0, 10);
      helpFormatter0.findWrapPos("N7/T=0qr1;#%~68oo", (-226), (-1424));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.getOptions();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("?T$%BA <SR", "ILE_@HO6fBR6", options1, "ILE_@HO6fBR6");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "arg", true, "usage: ");
      options1.addOption("kQ0eL", "RaP<-q*3ChHV", true, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("!vC", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "<R9@a]<3", options0);
      Options options1 = options0.addOption("arg", "cmdLineSyntax not provided", true, "--");
      helpFormatter1.printHelp(" [ARG]", options1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      Option option0 = new Option("", true, "P@CsG [XOt4>hmd![");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 96, "Y]Rwv<N3b-", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim("#]D4H75.z*");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "#]D4H75.z*");
      Options options0 = new Options();
      Options options1 = options0.addOption("3p", "--", true, "");
      Option option0 = new Option("arg", "usage: ", true, " ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 9, options3, 9, 52);
      helpFormatter0.setNewLine("3p");
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        options4.addOption("usage: ", true, "gBiog`SCd<[ dKU$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "", false, "TP[lAy(eA ]u");
      option0.clone();
      options0.getOptions();
      options2.helpOptions();
      options1.addOption("", true, "cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(13);
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'J';
      charArray0[5] = 'b';
      charArray0[6] = 'J';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options1 = new Options();
      Option option0 = new Option("", "usage: ");
      options1.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, " ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      mockPrintWriter0.format("Uz7{UsoM", (Object[]) null);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      options0.toString();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1606), " :: ", "", options0, (-286), 42, "1|~4?]nW^o5pz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      options0.hasOption("cuSh%A");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printHelp("\"", options0);
      helpFormatter0.printHelp(32, "SU", "SU", options0, "SU");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.getOptions();
      options0.helpOptions();
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("?T$%BA <SR", "ILE_@HO6fBR6", options1, "ILE_@HO6fBR6");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1394, (-693), "");
      helpFormatter0.setNewLine("[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2362), "L|14')Qfd@qH", "usage: ", options1, " :: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 4, " :: ", "", options0, 3, (-1575), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 960, " [ARG]", "", options0, 3, 2327, "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption("", "", false, "TP[lAy(eA ]u");
      option0.clone();
      options0.getOptions();
      options0.helpOptions();
      Options options3 = options2.addOption("", true, "The option '");
      helpFormatter0.printHelp("-", "-", options3, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 44, (-1), "");
      helpFormatter0.setNewLine("");
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      options0.hasOption(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2131), "", " ", options0, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", (Object[]) null);
      helpFormatter1.printUsage(printWriter0, 1644, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      int int0 = 1391;
      StringBuffer stringBuffer0 = new StringBuffer(1391);
      int int1 = 48;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1391, (Options) null, 48, 1391);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      printWriter0.format("z9mv+YsF#etvCkF[/", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3352, " :: ", " :: ", options0, 960, 3, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "");
      options1.hasLongOption("NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'V';
      charArray0[3] = 'I';
      charArray0[4] = '+';
      charArray0[5] = 'V';
      charArray0[6] = 'J';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "--");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      String string0 = "ZptHZ<K2th.Og";
      helpFormatter0.setNewLine("ZptHZ<K2th.Og");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", (String) null, true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.rtrim("#]D4H75.z*");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "#]D4H75.z*");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "#]D4H75.z*");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLeftPad = 9;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      mockPrintWriter0.format("-", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int1 = 1058;
      String string0 = "\"";
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1058, "\"");
      String string1 = "*g9$74uv";
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", ")", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("N7/T=0qr1;#%~68oo", (-2033), (-2033));
      Options options0 = new Options();
      helpFormatter0.printHelp("N7/T=0qr1;#%~68oo", options0, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringWriter stringWriter0 = new StringWriter(1463);
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 6441, "Ys]=vk 2=IdaDdH-3Nh");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("Unm", 0, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer1, 13, 4, "");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 236, options0, 768, 236);
      helpFormatter0.setNewLine("");
      String string0 = "dsP[vYc@Ayk";
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options3.addOption(" ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      String string0 = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "", false, "TP[lAy(eA ]u");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 53, 53);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(74);
      int int0 = 1;
      String string0 = "f6jdZ:Q";
      helpFormatter0.findWrapPos("f6jdZ:Q", 39, 1);
      helpFormatter0.setLongOptPrefix("f6jdZ:Q");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(".$2", "", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.$2' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      options1.getOption((String) null);
      helpFormatter0.printHelp("`6nv,K2`5||", "Y|}[<lrBQ_8'`~QWn-", options1, "Y|}[<lrBQ_8'`~QWn-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)42;
      byteArrayOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.write(byteArray0);
      mockPrintWriter0.print('Z');
      mockPrintWriter0.println((float) 3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "l?^_OF&w-";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      int int0 = 741;
      helpFormatter0.createPadding(741);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultLongOptPrefix = "F=}lz)&";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.format("", (Object[]) null);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'b';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, " [ARG]");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 34, "");
      helpFormatter0.setNewLine("-");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1317));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      String string0 = "#]D4H75.z*";
      helpFormatter0.rtrim("#]D4H75.z*");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "#]D4H75.z*");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "#]D4H75.z*");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLeftPad = 9;
      int int0 = 3;
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|>'nX,");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(117);
      helpFormatter0.findWrapPos("", 64, 64);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('{');
      stringWriter2.getBuffer();
      int int0 = (-2447);
      Options options0 = new Options();
      Option option0 = new Option("E_6", "", true, "[");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("|>'nX,", "-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|>'nX,' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      boolean boolean0 = false;
      mockPrintWriter0.println(false);
      String string0 = "5475]'B$HS1K6[";
      mockPrintWriter0.write("5475]'B$HS1K6[");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-574), "!z|r6Y~xsY2y+F4aZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 452, "P}2zG<XX`<WhXiMQdPR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3237;
      String string0 = "DU9'cr&O%4r#xY%X";
      helpFormatter0.setSyntaxPrefix("DU9'cr&O%4r#xY%X");
      helpFormatter0.createPadding(3237);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Y&", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oZJ@";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "oZJ@");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-310), 0, ",-p}UpRMvIuS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "ZZK9QYph,1iJ]TTLQ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "ZZK9QYph,1iJ]TTLQ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ZZK9QYph,1iJ]TTLQ
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, true, "arg");
      int int0 = 83;
      helpFormatter0.printOptions(printWriter0, 97, options1, 83, 97);
      int int1 = 63;
      helpFormatter0.printOptions(printWriter0, 97, options0, 63, 83);
      helpFormatter0.getArgName();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "B(5*H\"\"Xe>s5R!N";
      String string1 = "]";
      Options options2 = options1.addOption("arg", true, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B(5*H\"\"Xe>s5R!N", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "", false, "TP[lAy(eA ]u");
      option0.clone();
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.findWrapPos("", (-1), (-2193));
      Options options3 = new Options();
      helpFormatter0.printHelp(" | ", options0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "";
      String string1 = "<";
      helpFormatter0.setLeftPadding((-301));
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOptionGroups();
      options0.getOption(" ");
      Option option0 = new Option("", "5)GD&uF7d", true, " ] [ long ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(74);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName(" 4(qXud?6\"S(f=6");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      String string0 = null;
      boolean boolean0 = false;
      String string1 = "F}vMdx";
      String string2 = "]";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.Options", "]", false, "s{X_l\"ytg`Ju");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.Options' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "/m0@iJ,sV#m!-}(|UR";
      helpFormatter0.defaultLongOptPrefix = "/m0@iJ,sV#m!-}(|UR";
      int int0 = (-979);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-979));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = null;
      Option option0 = new Option("arg", "arg", false, "usage: ");
      stringBuffer0.append((Object) option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1384), (Options) null, (-1384), 888);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options0, 0, (-1606), " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          StringBuffer stringBuffer0 = new StringBuffer();
          helpFormatter0.renderWrappedText(stringBuffer0, 3688, 3688, "");
          helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Options");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor69.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "$'";
      helpFormatter0.setOptPrefix("$'");
      StringWriter stringWriter0 = new StringWriter();
      String string1 = HelpFormatter.DEFAULT_OPT_PREFIX;
      int int0 = 1364;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-", 74, 1364);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      options1.getOption((String) null);
      helpFormatter0.printHelp("`6nv,K2`5||", "Y|}[<lrBQ_8'`~QWn-", options1, "Y|}[<lrBQ_8'`~QWn-", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("arg", "arg");
      File file0 = MockFile.createTempFile("`6nv,K2`5||", "-", (File) mockFile0);
      mockFile0.setLastModified(1);
      MockFile mockFile1 = new MockFile(file0, "A CloneNotSupportedException was thrown: ");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printUsage(printWriter0, 80, "", options0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      options1.getOption((String) null);
      boolean boolean0 = true;
      helpFormatter0.printHelp("`6nv,K2`5||", "Y|}[<lrBQ_8'`~QWn-", options1, "Y|}[<lrBQ_8'`~QWn-", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockFile mockFile0 = new MockFile("arg", "arg");
      File file0 = MockFile.createTempFile("`6nv,K2`5||", "-", (File) mockFile0);
      mockFile0.setLastModified(1);
      MockFile mockFile1 = new MockFile(file0, "A CloneNotSupportedException was thrown: ");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("(M/y!");
      helpFormatter0.setDescPadding((-1406));
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
      int int0 = 0;
      String string0 = " ";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("]", "vHJ AST4:c_M6<&w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      String string1 = "TXw<v";
      Options options0 = new Options();
      helpFormatter0.setNewLine("TP[lAy(eA ]u");
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      Options options3 = options2.addOption("", "", false, "TP[lAy(eA ]u");
      option0.clone();
      String string3 = "";
      options0.getOptions();
      options0.helpOptions();
      String string4 = "The option '";
      Options options4 = options3.addOption("", true, "The option '");
      helpFormatter0.printHelp("TXw<v", "TXw<v", options4, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("--");
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("nkA", 1, (-2033));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "R_jR/?DyQ";
      URI uRI0 = MockURI.create("R_jR/?DyQ");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "l?^_OF&w-";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "usage: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = (-2263);
      String string0 = "'Lk\"6U7hNQ%x";
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options0, (-1219), (-2263));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(40);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("5c96$z:$!T|)'M4", "--t_m`qn#Q-N3`|_OH#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "--t_m`qn#Q-N3`|_OH#", "--t_m`qn#Q-N3`|_OH#", options0, 0, 2064, "");
  }
}
