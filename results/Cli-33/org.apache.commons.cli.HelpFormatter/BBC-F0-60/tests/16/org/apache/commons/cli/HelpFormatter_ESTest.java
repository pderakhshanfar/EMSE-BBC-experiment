/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:09:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-174));
      helpFormatter0.setLeftPadding((-174));
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "!1!Pn^S7xj", (String) null, options1, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      mockPrintWriter0.print("Zxv+Wa0lm\u0003'e)x8");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "Zxv+Wa0lm\u0003'e)x8", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1546), "Czeji_TXrJ", "", options1, 13, 105, "org.apache.commons.cli.Util");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      int int0 = (-2085);
      int int1 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2085), 2, "CU\"D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("yhsO>pY,F8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.hasLongOption("");
      options0.addOption("", "--", false, "\n");
      helpFormatter0.defaultSyntaxPrefix = "";
      options0.hasShortOption("--");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0, false);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.setNewLine((String) null);
      int int0 = 31;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "DAMAKZ%Bm";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "";
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 115, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-2714);
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", "n=Lh)3o", false, "");
      // Undeclared exception!
      try { 
        options0.addOption("-", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-771);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-771), "8UV%ip368q\"+%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      StringBuffer stringBuffer3 = helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      StringWriter stringWriter0 = new StringWriter(1371);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      helpFormatter1.renderOptions(stringBuffer2, 2, options0, 74, 44);
      helpFormatter1.printHelp(",ReT:U-g$", "YRT<P,Z1ZzG|TMguL7", options0, "0)}(<<p4", true);
      Options options1 = options0.addOption("", "j", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer3, (-189), options1, 3, 1371);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null);
      mockPrintWriter0.print("Zxv+Wa0lm\u0003'e)x8");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "Zxv+Wa0lm\u0003'e)x8", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1577, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, "-");
      helpFormatter0.printHelp(1527, "Or862r-g1rk", "", options0, "H~FT}oMu7d", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("VOIA%OZcciCb");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V$");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("V$", false, "");
      Options options2 = options1.addOption(option0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "VOIA%OZcciCb", options2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 104, options2, 74, 3333);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(23);
      Options options0 = new Options();
      helpFormatter0.printHelp(23, ".P&EFv2N7M@p", "<", options0, ".P&EFv2N7M@p");
      helpFormatter0.setOptPrefix("<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3024), (String) null, ".P&EFv2N7M@p", options0, 63, 9, ">", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(22);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "org.apache.commons.cli.HelpFormatter", objectArray0);
      helpFormatter0.printHelp(printWriter0, 10, "A CloneNotSupportedException was thrown: ", "M]&aTq%%QL", options0, 1754, 22, ";oe3D/hiH:mL-'u", false);
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 10, "c.", options1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(22);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "org.apache.commons.cli.HelpFormatter", objectArray0);
      helpFormatter0.printHelp(printWriter0, 10, "A CloneNotSupportedException was thrown: ", "M]&aTq%%QL", options0, 1754, 22, ";oe3D/hiH:mL-'u", false);
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1701), "arg", "arg", options1, ")6R71", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "3kR*{M/FK+%x>5";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "3kR*{M/FK+%x>5");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oG~#x2>%<a.D]oge)cc";
      int int0 = (-1537);
      helpFormatter0.setLeftPadding((-1537));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("oG~#x2>%<a.D]oge)cc", "{@FdNEqovqJy_R", options0, "oG~#x2>%<a.D]oge)cc");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter1.printf("|", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, "[ARG...]");
      helpFormatter1.printOptions(printWriter0, (-1797), options0, 3, 36);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ">HGe5F_hl6Cb";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, ">HGe5F_hl6Cb", ">HGe5F_hl6Cb", (Options) null, "Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "-", "NO_ARGS_ALLOWED", options0, 74, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options3, 1245, 3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "<", "", options0, "");
      helpFormatter0.setOptPrefix(">");
      Options options1 = options0.addOption("", true, (String) null);
      Options options2 = options1.addOption((String) null, "1WU'%zPT%P", true, "");
      helpFormatter0.printHelp((-1), ">", "cj:^ 7SrYXU?VhF", options2, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "";
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 2, options1, 2, 2);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = (-319);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, options0, 2, (-319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(">");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "`,:c", "org.apache.commons.cli.Option", (Options) null, 0, (-581), "?", false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      helpFormatter0.printHelp("-", "-", options0, "X*{NnJ$_NtPWQ#Ltx8=", true);
      helpFormatter1.setOptPrefix("2@@O%hh %4WU[z");
      helpFormatter0.findWrapPos("X*{NnJ$_NtPWQ#Ltx8=", 1, 1);
      helpFormatter1.printHelp(118, "2@@O%hh %4WU[z", "usage: ", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "<", "", options0, "");
      helpFormatter0.setOptPrefix(">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 16, options0, 3, 16);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 16, 3);
      StringWriter stringWriter0 = new StringWriter(1371);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1371, "-", "-", options0, 1371, 3, "2@@O%hh %4WU[z", false);
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 16, "2@@O%hh %4WU[z", "", options0, 1371, 1811, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">{8J";
      helpFormatter0.setLongOptPrefix(">{8J");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("jljC}");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 64, 1, ".-L}~0Zn}N;");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 13, options0, 1, 61);
      helpFormatter0.renderOptions(stringBuffer1, 837, options0, 3923, 74);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " ]", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-93);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 13, 3);
      options0.addOption("", "\n", true, "usage: ");
      helpFormatter0.printHelp(3, "2@@O%hh %4WU[z", "tC0Ld)", options0, "\n", true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ofd6!J");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter", objectArray0);
      helpFormatter0.printHelp(printWriter0, 54, "org.apache.commons.cli.HelpFormatter", (String) null, options0, 473, 64, "Z>1Im=7BCVw^[t;!", false);
      helpFormatter0.getArgName();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("83P`au", "83P`au", options0, "' was specified but an option from this group ");
      int int0 = 1075;
      int int1 = 1209;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 1209, (-3610));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 74, options0, 3, 74);
      helpFormatter1.renderOptions(stringBuffer2, 31, options0, 3, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "-", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultNewLine = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      helpFormatter0.printHelp("<,xgI9~", "--", options0, "NO_ARGS_ALLOWED");
      int int0 = 1075;
      helpFormatter0.findWrapPos("--", 0, 1075);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("<,xgI9~");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED");
      options0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsolutePath();
      mockFile0.setWritable(true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2044, "NO_ARGS_ALLOWED", "/experiment/NO_ARGS_ALLOWED", options0, 3, 1075, "<,xgI9~");
      mockPrintWriter0.write("NO_ARGS_ALLOWED", 1961, 0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "<,xgI9~", "NO_ARGS_ALLOWED", options0, 3, (-1310), "--");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      helpFormatter0.setWidth(1187);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(507, "--", "--", options0, "2@@O%hh %4WU[z");
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 66, 74, "p ");
      helpFormatter0.setOptPrefix("^]");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 96, 0, "^]");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "arg", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("B", "--", true, "");
      options1.addOption("B", "\n", false, "-");
      helpFormatter0.printHelp(64, "--", "Cannot add value, list full.", options0, "", true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "--", options1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options2 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(0);
      helpFormatter0.renderOptions(stringBuffer1, 9, options1, 0, 13);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 9, options1, 1064, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-93);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 13, 3);
      Options options1 = options0.addOption("", "\n", true, "usage: ");
      helpFormatter0.printHelp(3, "2@@O%hh %4WU[z", "tC0Ld)", options0, "\n", true);
      Options options2 = options1.addOption("", true, "CCliAEsc#)}DG5m");
      helpFormatter0.printHelp(44, "arg", "-", options2, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      String string0 = "\\S2:";
      StringBuffer stringBuffer0 = new StringBuffer("S2:");
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 13, (-3131), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), 3, "");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 1464, (Options) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      stringBuffer2.delete(1, 1);
      helpFormatter0.renderOptions(stringBuffer2, 74, options0, 13, 3);
      // Undeclared exception!
      helpFormatter0.printHelp("-", "-", options0, "X*{NnJ$_NtPWQ#Ltx8=", true);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer(1);
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 13, 3);
      StringWriter stringWriter0 = new StringWriter(1371);
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultWidth = (-4316);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "usage: ";
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "org.apache.commons.cli.HelpFormatter";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "*o";
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.setNewLine("[");
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "*o", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-581), "RxOiPc#=:at`\"#%5,", "", (Options) null, 1072, 1079, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-93);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("jdL17F", false, "\n");
      Option option0 = new Option("arg", "\n");
      Options options2 = options0.addOption(option0);
      Options options3 = options2.addOption("", (String) null, false, "]vMMW+");
      helpFormatter0.printHelp("usage: ", options3);
      Options options4 = new Options();
      options1.hasLongOption("arg");
      helpFormatter0.printHelp(74, "]", (String) null, options1, "nO,L_;x&");
      helpFormatter1.setOptPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "cmdLineSyntax not provided", false, " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("~Lf96oxnyC{Xv", "~Lf96oxnyC{Xv", options1, (String) null);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("B", "--", true, "");
      options1.addOption("B", "\n", false, "-");
      helpFormatter0.printHelp(64, "--", "Cannot add value, list full.", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "*o";
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.defaultDescPad = (-3840);
      helpFormatter0.setNewLine("[");
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      String string0 = "[";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1592, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      int int0 = 1371;
      StringWriter stringWriter0 = new StringWriter(1371);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      helpFormatter1.renderOptions(stringBuffer2, 2, options0, 74, 44);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "YRT<P,Z1ZzG|TMguL7", options0, "0)}(<<p4", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer(63);
      helpFormatter0.getArgName();
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 4079;
      helpFormatter0.defaultSyntaxPrefix = "\n";
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "\n", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.findWrapPos("z#yY^?1pa{[Q1IE<", (-2701), 44);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options1, "Ub4Uu_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "2@@O%hh %4WU[z";
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      helpFormatter0.printHelp("-", "-", options0, "X*{NnJ$_NtPWQ#Ltx8=", true);
      helpFormatter0.renderOptions(stringBuffer0, (-399), options0, 722, 74);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[1] = ',';
      charArray0[2] = '@';
      charArray0[3] = ' ';
      charArray0[4] = ')';
      charArray0[5] = '@';
      charArray0[6] = 'V';
      stringBuffer0.insert(3, charArray0);
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      helpFormatter1.printHelp(3, "--", "usage: ", options0, ">");
      helpFormatter1.setOptPrefix("777");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options0, (-5289), (-5289));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      StringWriter stringWriter0 = new StringWriter(1371);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1371, "-", "EHBk}N3lt#:<=mK", options0, 1371, 3, "2@@O%hh %4WU[z", false);
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer(63);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3259, 2873, " ");
      Object object0 = new Object();
      stringBuffer1.append((Object) "]");
      helpFormatter0.renderWrappedText(stringBuffer1, 34, (-1080), "]");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("hJ\tj]8)j~qd", options0, true);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      options0.addOption("", "\n", true, "usage: ");
      helpFormatter0.printHelp(3, "2@@O%hh %4WU[z", "tC0Ld)", options0, "\n", true);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      StringWriter stringWriter0 = new StringWriter(1371);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1371, "-", "EHBk}N3lt#:<=mK", options0, 1371, 3, "", false);
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "]", "usage: ", options0, "eE");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "*o";
      int int0 = 4459;
      Options options0 = new Options();
      options0.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 4459, options0, (-1377), (-3777));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "]";
      Object object0 = new Object();
      helpFormatter0.createPadding(45);
      stringBuffer0.append(object0);
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "]");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "..U``";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2456), "V^7w-)Jwz|k=9N'Ob(", "..U``", options0, "Dx']q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "?";
      Options options0 = new Options();
      int int1 = 705;
      StringWriter stringWriter0 = new StringWriter(705);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 705, "?", "\"?)JzJXFlAfXl*k%G'S", options0, 705, (-1273), ">Ut.!|+d", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultNewLine = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      helpFormatter0.printHelp("<,xgI9~", "--", options0, "J$)\"");
      helpFormatter0.findWrapPos("--", 0, 1075);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("<,xgI9~");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED");
      options0.getOptions();
      mockFile0.delete();
      mockFile0.getCanonicalPath();
      mockFile0.setExecutable(true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true);
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "<,xgI9~", "NO_ARGS_ALLOWED", options1, (-1), 3, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 4079;
      helpFormatter0.defaultDescPad = 4079;
      helpFormatter0.defaultSyntaxPrefix = "\n";
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      int int1 = 44;
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option((String) null, "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "\n", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4079, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options1, (-1), (-2), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultNewLine = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      helpFormatter0.findWrapPos("--", 0, 1075);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("<,xgI9~");
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED");
      options0.getOptions();
      mockFile0.setExecutable(true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1075, "NO_ARGS_ALLOWED", "J$)\"", options0, (-991), (-627), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.defaultNewLine = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      helpFormatter0.printHelp("<,xgI9~", "--", options0, "J$)\"");
      int int0 = 1075;
      helpFormatter0.findWrapPos("--", 0, 1075);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("<,xgI9~");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED");
      options0.getOptions();
      mockFile0.setExecutable(true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1075, "", "--", options0, 1075, 1075, "s6.?9.fq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-870), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "`EK0_\\RW!_ka-xc";
      helpFormatter0.rtrim("`EK0_RW!_ka-xc");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("jreAp6_x(;VylWP4S56", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'jreAp6_x(;VylWP4S56' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = (-270);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-270), "", "", options0, (-2), (-2077), "org.apache.commons.cli.OptionGroup", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      Option option0 = new Option("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption(option0);
      boolean boolean1 = false;
      Options options2 = options1.addOption("", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "<", "", options0, "");
      helpFormatter0.setOptPrefix(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "knP!H[Y}5~\",tX[", "", options0, 3, (-581), "knP!H[Y}5~\",tX[", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 88, 13);
      helpFormatter0.printHelp("z", "z", options0, (String) null, true);
      helpFormatter0.renderOptions(stringBuffer1, 1, options0, 1, 1);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringWriter stringWriter2 = stringWriter1.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "", "org.apache.commons.cli.AlreadySelectedException", options0, 3940, 88, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      Option option0 = new Option((String) null, "5epr3");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("2@@O%hh %4WU[z", "=8fS@F5bD?O#^%G", options1, "]@dw4A^?8:j", false);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      options0.addOption("", "\n", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "2@@O%hh %4WU[z", "tC0Ld3", options0, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 4079;
      helpFormatter0.defaultSyntaxPrefix = "XMRl:K Cf[vogh'o";
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.AlreadySelectedException");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "XMRl:K Cf[vogh'o", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options4 = options3.addOption("", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "\n", "", options4, 4079, (-2103), "'kWqS8+", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "~i@_*=XtCFID@6";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      boolean boolean0 = false;
      options0.hasShortOption("arg");
      Options options2 = options1.addOption("arg", (String) null, false, "usage: ");
      String string1 = "";
      options2.hasShortOption("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "?", "", options0, "?", true);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1145, 3299, ">2N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLongOptPrefix("2@@O%hh %4WU[z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      helpFormatter0.printHelp("-", "-", options0, "X*{NnJ$_NtPWQ#Ltx8=", true);
      helpFormatter0.renderOptions(stringBuffer0, (-399), options0, 722, 74);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "<UA:Wmf\u0005Fg'";
      helpFormatter0.setSyntaxPrefix("<UA:Wmf\u0005Fg'");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, '/');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "", (Options) null, "DLtMyAA", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "arg");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 13, options0, 3, 13);
      helpFormatter0.renderOptions(stringBuffer2, 3, options0, 13, 3);
      helpFormatter0.printHelp("-", "-", options0, "X*{NnJ$_NtPWQ#Ltx8=", true);
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setWidth(13);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.findWrapPos(" ", 3, 1547);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      String string0 = "e!LUL*ZIJq#.ax";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("e!LUL*ZIJq#.ax", true);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      String string1 = "x2c_&[E";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 2043;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2043, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1552);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.append('#');
      PrintWriter printWriter0 = mockPrintWriter0.append('#');
      mockPrintWriter0.print(true);
      mockPrintWriter0.println((long) 74);
      helpFormatter0.printUsage(printWriter0, 92, "]");
      helpFormatter0.setLeftPadding(1552);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("xV+P;p(>|mes}x_`)X");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "[ARG...]", "[", options1, ", ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('A');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-719);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-719), (-719), "n~.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      File file0 = MockFile.createTempFile("Cannot add value, list full.", "org.apache.commons.cli.AlreadySelectedException", (File) null);
      String string1 = "=l";
      MockFile mockFile0 = new MockFile(file0, "=l");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "*o";
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.setNewLine("[");
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "L=trwklKW`a*<UR", true, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[", "cmdLineSyntax not provided", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2448;
      helpFormatter0.setDescPadding(2448);
      helpFormatter0.defaultWidth = (-1911);
      int int1 = (-225);
      helpFormatter0.setLeftPadding((-225));
      helpFormatter0.setLeftPadding(2448);
      String string0 = "n7F7qG8KuHu]W\"hBF";
      helpFormatter0.setOptPrefix("n7F7qG8KuHu]W\"hBF");
      MockFile mockFile0 = new MockFile("\n", "usage: ");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("T(9J>py!8Il0H7B~");
      helpFormatter0.setOptPrefix("T(9J>py!8Il0H7B~");
      String string0 = "The option '";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      options0.helpOptions();
      options0.helpOptions();
      options0.helpOptions();
      options0.hasLongOption(" | ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("The option '", "The option '", options0, "The option '", false);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "<,xgI9~";
      helpFormatter0.defaultNewLine = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      String string1 = "J$)\"";
      helpFormatter0.printHelp("<,xgI9~", "--", options0, "J$)\"");
      helpFormatter0.findWrapPos("--", 0, 1075);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("<,xgI9~");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("NO_ARGS_ALLOWED");
      options0.getOptions();
      mockFile0.setExecutable(true, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setWritable(true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "<,xgI9~", "NO_ARGS_ALLOWED", options0, 3, (-1310), "--");
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      assertEquals(0, stringBuffer1.length());
      
      helpFormatter0.getOptionComparator();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      int int0 = (-631);
      Options options0 = new Options();
      options0.hasLongOption("i12NvRA");
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
