/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:05:28 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "!@L`(y>bA Bb'Jt=";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      PrintWriter printWriter0 = null;
      int int0 = 47;
      String string1 = "V72&0m9q";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 13, options0, 64, 575);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setOptPrefix("_.?7`pD");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding((-6027));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "<+kQ> GC?sg";
      String string1 = "";
      Option option0 = null;
      try {
        option0 = new Option("<+kQ> GC?sg", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '<+kQ> GC?sg' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "Cannot add value, list full.";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-393), "8", "8", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("a", "a", options0, "a", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "a");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('W');
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printHelp(printWriter0, 4126, "|}KEl(14h;", "", options0, 740, 5, (String) null, false);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Vrg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("Vrg", "usage: ", options1, "", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "Vrg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<u]|%]U";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", true, "}mvovw?ITGlZ");
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1695), ")<f*f", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 97, 1209, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("ZRK?");
      helpFormatter0.setOptPrefix((String) null);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.forLanguageTag("arg");
      Locale locale2 = Locale.GERMANY;
      locale2.getDisplayLanguage(locale1);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 83, "German", " {", options1, 45, 83, "", true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<u]|%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.hasShortOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6227, "--", (String) null, options0, 45, 45, "--", false);
      helpFormatter0.printHelp(" {", options0, true);
      helpFormatter0.findWrapPos("", 74, 9);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "xdcjVy");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultOptPrefix = ";";
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("usage: ");
      helpFormatter0.printHelp(";", "", options1, "xdcjVy", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "<", options0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.forLanguageTag("p<u]|<%]U");
      locale0.getDisplayLanguage(locale1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "p<u]|<%]U", "p<u]|<%]U", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print(0L);
      mockPrintWriter0.append('K');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      mockPrintWriter0.printf("51l|R[&MwKuOsm-Ih<", objectArray0);
      helpFormatter1.defaultOptPrefix = null;
      helpFormatter1.getOptPrefix();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "xdcjVy");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultOptPrefix = ";";
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(";", "", options1, "xdcjVy", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      Locale locale0 = Locale.UK;
      locale0.getDisplayScript();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", "arg", options0, "CEjD*y", false);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 3, 32);
      helpFormatter1.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V|]]<");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "--";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("]", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "\n", "CEjD*y", options0, 40, 2465, "-S`Bi\"%");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.forLanguageTag("p<u]|<%]U");
      locale0.getDisplayLanguage(locale1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 45, "p<u]|<%]U", " {", options0, 45, 45, "tp_HHlM%A", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("has already been selected: '", options0, false);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.forLanguageTag("p<u]|<%]U");
      locale0.getDisplayLanguage(locale1);
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-16), "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char char0 = '=';
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "p<u]|<%]U";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "51l|R[&MwKuOsm-Ih<";
      objectArray0[4] = (Object) "51l|R[&MwKuOsm-Ih<";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "p<u]|<%]U";
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "\n", true, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "'I_2:<H{L7ZD&", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, "51l|R[&MwKuOsm-Ih<", "!@L`(y>bA Bb'Jt=", options2, 5, (-1), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("P", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", true);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "", options0, "NO_ARGS_ALLOWED", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "}]XdiJHm'6$G(zX]", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      mockPrintWriter0.append('E');
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "Ot=)y<T", "Ot=)y<T", (Options) null, 10, 2, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "Ugzvs}N9&q1\"dl");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "h[HGO|x|b?AY");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("-", 1, (-4257));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('E');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--");
      Options options0 = new Options();
      helpFormatter0.printWrapped(printWriter0, 4, 4, "' was specified but an option from this group ");
      helpFormatter0.printHelp("22uo&/]\" ", "22uo&/]\" ", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.setWidth((-635));
      Options options0 = new Options();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "a[";
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) mockPrintWriter0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 123, ">Ly$<K4jOd\"6~d69$u", "", options0, 10, 42, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 123, "8&BG7cV\".{j.9EALE");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*", (String) null, options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, "P");
      options1.getOptionGroups();
      Option option0 = new Option("P", false, ">");
      options1.addOption(option0);
      helpFormatter0.printHelp("P", "NO_ARGS_ALLOWED", options1, (String) null, false);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("arg", (String) null, options1, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      mockPrintWriter0.append('+');
      Options options0 = null;
      int int0 = 120;
      String string0 = ";h$/i|'rK{}v#";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 120, ";h$/i|'rK{}v#");
      boolean boolean0 = false;
      Locale locale0 = Locale.KOREA;
      MockFile mockFile0 = new MockFile("pA", " ");
      MockFile mockFile1 = new MockFile(mockFile0, " dIE407UuZQ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, " ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", (String) null);
      options0.addOption(option0);
      options0.addOption((String) null, "--", false, "P");
      helpFormatter0.printHelp("P", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", true);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "", options0, "NO_ARGS_ALLOWED", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-138);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('E');
      Options options1 = null;
      String string0 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-138), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GHn,~");
      Locale locale0 = Locale.CHINA;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Locale locale1 = Locale.KOREA;
      locale1.getDisplayScript();
      locale0.getDisplayLanguage(locale1);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "p<u]|<%]U";
      objectArray0[1] = (Object) "p<u]|<%]U";
      objectArray0[2] = (Object) "\uC911\uAD6D\uC5B4";
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "b)>}NYY", options0);
      helpFormatter0.printHelp("   ", "p3", options0, "GHn,~", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      int int0 = 0;
      String string0 = " ";
      mockPrintWriter0.flush();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2613), "u25.wo`%'K<DD?oHRQ", "p<u]|<%]U", options0, (-2613), 42, "a[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      PrintWriter printWriter0 = mockPrintWriter0.append('E');
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 17, options0, 5236, 106);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "-", (Options) null, 74, 74, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, "P");
      helpFormatter0.printHelp("P", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", true);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(" ", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3161, " ", ", ", options1, 3161, (-347), "NO_ARGS_ALLOWED");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setOptPrefix(" U8.^#w~$'&gvA|z");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 747, "");
      PrintWriter printWriter0 = mockPrintWriter0.append('E');
      helpFormatter0.printUsage(printWriter0, 5236, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), (String) null, "", (Options) null, 13, (-1), "org.apache.commons.cli.HelpFormatter$1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      int int0 = 0;
      String string0 = " ";
      mockPrintWriter0.flush();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2613), "", "p<u]|<%]U", options0, (-2613), 42, "a[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 1, "t0x]*@enG&c&f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "p<u]|<%]U";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      mockPrintWriter0.append('E');
      Options options0 = null;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Oc", "p<u]|<%]U", (Options) null, "p<u]|<%]U", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos((String) null, 1, (-2323));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp("P", "vKg", options1, "-", false);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("vKg", options0, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("A(1#", "\"", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")~;::u$)';");
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, " ");
      mockPrintWriter0.append('U');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "i\"wQY<N6z'e~");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "cmdLineSyntax not provided");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      String string0 = "</]&f/p1>K\\uz\"%";
      helpFormatter1.defaultNewLine = string0;
      helpFormatter0.findWrapPos("]", 1237, 1237);
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-138);
      helpFormatter0.setLeftPadding((-138));
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f;\"i", "", options1, "R`p2LLh", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = null;
      Options options1 = options0.addOption("arg", true, (String) null);
      helpFormatter0.printHelp(28, " ", " ", options1, "\"T");
      String string1 = "p<u]|<%]U";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      int int0 = 0;
      String string2 = " ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(22, " ", "org.apache.commons.cli.Option", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")~;::u$)';");
      mockPrintWriter0.println("");
      mockPrintWriter0.append('L');
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "i\"wQY<N6z'e~");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 10, 3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Options options0 = new Options();
      options0.hasOption("");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "C";
      String string1 = "]";
      helpFormatter0.printHelp("]", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt((-1586), '>');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      Locale locale0 = Locale.UK;
      locale0.getDisplayScript();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "\n", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(64, "Cannot add value, list full.", "Cannot add value, list full.", options1, "ilq[&KtCY", true);
      helpFormatter0.renderOptions((StringBuffer) null, (-1), options1, 0, 31);
      // Undeclared exception!
      helpFormatter0.printHelp("{\"2 [YyF}{\"", options1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 104, "K>1^i", "k[]_L]ft)Ghk", options0, 104, 104, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('i');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      stringWriter2.append('i');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      helpFormatter0.printUsage(printWriter0, (-1), " ");
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      // Undeclared exception!
      helpFormatter0.printHelp(";+", "--", options0, "%\"?[Q}Oqok+T6>cAZ", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.hasOption("UrpuYFl>C");
      helpFormatter0.printHelp("arg", ", ", options0, "arg");
      Locale locale0 = Locale.CHINA;
      options0.getMatchingOptions("arg");
      helpFormatter0.printHelp("arg", ", ", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 3326;
      helpFormatter0.renderWrappedText(stringBuffer0, 3326, 3326, " ");
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "5$XWgzO!Gn4UO6vl?";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "org.apache.commons.cli.OptionGroup", false, "5$XWgzO!Gn4UO6vl?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")~;::u$)';");
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, " ");
      mockPrintWriter0.append('U');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "i\"wQY<N6z'e~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-697), ")~;::u$)';", "cmdLineSyntax not provided", (Options) null, 11, (-873), "i\"wQY<N6z'e~", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.UK;
      locale0.getDisplayScript();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("DzcQAISXw)C7PU*", "'\u001A", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.append('i');
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("24VE(PrA`", options0, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-138));
      String string0 = ", ";
      Options options0 = new Options();
      String string1 = "UrpYFl>C";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-138));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      int int0 = 736;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2933, "", "`q.i", options1, 458, 736, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2758);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "has already been selected: '";
      helpFormatter0.setLeftPadding(2475);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("has already been selected: '", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2475, 310, "-");
      helpFormatter0.printHelp("[", "has already been selected: '", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      int int0 = 33;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, (Options) null, (-2747), 33);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(9);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter1.printHelp("' contains an illegal character : '", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2905), (-2905), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")~;::u$)';");
      helpFormatter0.setOptPrefix("cmdLineSyntax not provided");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, " ");
      mockPrintWriter0.append('U');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "i\"wQY<N6z'e~");
      int int0 = 458;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-X", "Jxm0Ron4?7j", (Options) null, 3, 458, "raF)it[", false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('i');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      int int0 = (-1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      helpFormatter0.printUsage(printWriter0, (-1), " ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 104, "line.separator", " ", options0, 104, (-1), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-138);
      helpFormatter0.setLeftPadding((-138));
      Options options0 = new Options();
      options0.hasOption("UrpYFl>C");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", " ", options0, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "f;\"i", false, "NO_ARGS_ALLOWED");
      helpFormatter0.printHelp("P", "j|a?5I&<", options1, (String) null, true);
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(" | ", options0, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-138);
      helpFormatter0.setLeftPadding((-138));
      Options options0 = new Options();
      options0.hasOption("UrpYFl>C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CHINA;
      options0.getMatchingOptions("arg");
      mockPrintWriter0.print(true);
      Locale locale1 = Locale.UK;
      locale1.getDisplayScript();
      locale0.getDisplayLanguage(locale1);
      mockPrintWriter0.println(false);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-138), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "sZ";
      helpFormatter0.findWrapPos("sZ", 0, 0);
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "sZ";
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "--", (File) mockFile1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Hg7za8(";
      helpFormatter0.findWrapPos("Hg7za8(", 970, (-1));
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "--";
      try { 
        byteArrayOutputStream0.toString("");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options2, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.ParseException", false, "--");
      Options options2 = options1.addOption("arg", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getNewLine();
      int int0 = 0;
      String string0 = "-";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("#I{'UR", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#I{'UR' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "CB%wZS";
      MockFile mockFile0 = new MockFile("CB%wZS");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockFile0.delete();
      PrintWriter printWriter0 = mockPrintWriter1.append('E');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.append((CharSequence) " ");
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultSyntaxPrefix = "[Odw+9UV<|O)";
      int int0 = (-1);
      int int1 = (-1307);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("C", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "p<u]|<%]U";
      String string1 = "C";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " /lZ~`hTa\\lo)";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" /lZ~`hTalo)");
      String string1 = "[ option: ";
      Object[] objectArray0 = new Object[9];
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3632), "||:Z1+/(Y%Au#>:", "org.apache.commons.cli.Option", options0, "byS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(">");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "sj;kf:7/A3]5vZF);^E", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 236;
      helpFormatter0.defaultDescPad = 236;
      helpFormatter0.defaultSyntaxPrefix = ";t+,";
      helpFormatter0.getOptPrefix();
      String string0 = "`#v(lo51cAvC#AS{0";
      helpFormatter0.setNewLine("`#v(lo51cAvC#AS{0");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("qVD^UB8t2j3U=");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.createPadding(236);
      int int1 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 34;
      helpFormatter0.setLongOptSeparator("");
      try { 
        byteArrayOutputStream0.toString("$ ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      stringBuffer0.appendCodePoint(74);
      int int0 = (-1);
      int int1 = (-1);
      Options options0 = new Options();
      options0.hasLongOption("'mN7uF");
      String string0 = "Vb@\"nOr";
      options0.hasLongOption("Vb@\"nOr");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<", options0, "s3]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = " [ARG]";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptPrefix("   ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-928), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, " ");
      mockPrintWriter0.append('E');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "a-ZEOvb^V@mxx");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "p<u]|<%]U", "p<u]|<%]U", (Options) null, 74, 74, " ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "has already been selected: '";
      helpFormatter0.setLeftPadding(2475);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("has already been selected: '", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2475, 310, "-");
      helpFormatter0.renderOptions(stringBuffer1, 2475, options0, 74, 310);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = (-138);
      helpFormatter0.setLeftPadding((-138));
      Options options0 = new Options();
      options0.hasOption("UrpYFl>C");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", ", ", options0, "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      int int0 = 941;
      helpFormatter0.createPadding(941);
      helpFormatter0.defaultLongOptPrefix = "usage: ";
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("usage: ");
      String string1 = "{C0(#?(#:*@P";
      Options options0 = new Options();
      String string2 = "tV@d}8'rJ&x.2%5/0";
      // Undeclared exception!
      try { 
        options0.addOption("tV@d}8'rJ&x.2%5/0", true, ",lF0i|ia}lrpl'rYU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'tV@d}8'rJ&x.2%5/0' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "p<u]|<%]U";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p<u]|<%]U");
      helpFormatter0.setOptPrefix("p<u]|<%]U");
      int int0 = 0;
      String string1 = " ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultOptPrefix = "-";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "has already been selected: '";
      helpFormatter0.setLeftPadding(2475);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("has already been selected: '", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2475, 310, "-");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 2475, options0, 74, 310);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 0, (-1), "has already been selected: '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "cmdLineSyntax not provided";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "org.apache.commons.cli.Util", (Options) null, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "z9Ius{";
      helpFormatter0.defaultSyntaxPrefix = "z9Ius{";
      String string1 = "O.l%6L[jB`n!Urkda";
      int int0 = 3670;
      helpFormatter0.findWrapPos("O.l%6L[jB`n!Urkda", (-2645), 3670);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option("O.l%6L[jB`n!Urkda", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'O.l%6L[jB`n!Urkda' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$1", " ", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockFile0.setReadable(true);
      mockPrintWriter0.print(true);
      int int0 = (-1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.HelpFormatter$1");
      String string0 = "5>C{E-]WbA:3?0M";
      String string1 = "]";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "*>_";
      // Undeclared exception!
      try { 
        options2.addOption("-", "*>_", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 270;
      String string0 = "Hh";
      mockPrintWriter0.print((float) 1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "+^]yUCAl]vt3", false, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      String string1 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      int int0 = 1684;
      helpFormatter0.findWrapPos(">", 74, 1684);
      String string2 = "[";
      try { 
        MockURI.URI("\n", "[", "|/>VMWsSEv", "f?N}uI~<:WF |C^61\"", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: 
         // ://[%7C/%3EVMWsSEv?f?N%7DuI~%3C:WF%20%7CC%5E61%22#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionGroup";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.OptionGroup
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
