/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:10:43 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "\n", options0, "\n");
      helpFormatter0.defaultSyntaxPrefix = "}|b:";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1737, "k_4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      String string1 = "cmdLineSyntax not provided";
      boolean boolean0 = false;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-372), 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ]";
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-760);
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "Y`G~#QN", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", " ]", options1, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("\n", 0, 0);
      helpFormatter0.findWrapPos("", (-2837), 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-292), options0, 3429, 3429);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "   ", options0, "GQ=!KH");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "BbD,ohLYV&&)8]3m";
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 2454;
      int int1 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2454, (Options) null, 2, 2454);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-4675);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u:_z51FD$-\"jwc", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "--", true, " ");
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      Options options0 = new Options();
      int int0 = 1970;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2057, "", "/c$0M2y", options0, 1970, 2739, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "--");
      String string0 = "\"";
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2760), options0, 101, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1193);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      char[] charArray0 = new char[4];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "org.apache.commons.cli.Options", "^= T4 ", (Options) null, 74, 74, "^= T4 ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.setNewLine("g'Hgru{D.XdD)");
      helpFormatter0.rtrim("g'Hgru{D.XdD)");
      helpFormatter0.setLongOptSeparator("]v:MX/n.$Ljv");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("g'Hgru{D.XdD)", "]v:MX/n.$Ljv", options1, "g'Hgru{D.XdD)");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printOptions(mockPrintWriter0, 450, options1, 1, 2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, (String) null, "d:o$}mpg7p", options0, 74, 74, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.renderOptions((StringBuffer) null, 3, options1, 74, 3316);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, (-1039));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      optionGroup0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "usage: ", false, "@<");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 31, " ", options3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("$5Es", " ]", options1, "-");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'u';
      mockPrintWriter0.print(charArray0);
      Object object0 = new Object();
      mockPrintWriter0.printf("\n", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, " ");
      helpFormatter1.findWrapPos("\n", 1, 0);
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "", options0, "r/4MTYYsR#%", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "arg", (Options) null, "fo[R';@#NA ~a).hO>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "l9s7>7ivlG*f0");
      optionGroup0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.close();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "RFpE1cznx?+0v", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)9;
      helpFormatter0.defaultOptPrefix = null;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      helpFormatter0.defaultNewLine = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.printHelp("usage: ", options0);
      helpFormatter0.createPadding(74);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 37, options0, (-732), (byte) (-117));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(32);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), " | ");
      stringBuffer0.append(5487);
      helpFormatter0.renderWrappedText(stringBuffer1, 1461, (-1), "[zmwHB j4r+h");
      helpFormatter0.rtrim("5!U");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5487, "5!U", "5!U", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, " ", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1783, "", options2);
      Options options3 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter2 = null;
      try {
        mockPrintWriter2 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "--", true, " ");
      Option option0 = new Option("arg", false, "arg");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2IC:\":xPN&j1!");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 27, "", options2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("arg");
      options0.addOption("", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 3, "", options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('l');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2445), 681, "oqRuH`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'u';
      mockPrintWriter0.print(charArray0);
      Object object0 = new Object();
      mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, " ");
      helpFormatter1.findWrapPos("\n", 1, 0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-816), "tnF'1p>&n:2$Q!KJP3", "f\"9R=D", options0, "]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-2425), 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "\n");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "-", options0, 10, 1, "jldOEbEdQ?LiB", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 101, 2, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      Option option0 = new Option("arg", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("f;ByYb:TsMd_cn&", "[ option: ", options3, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "6pS#dOt_", "-", options0, 7, 7, "6pS#dOt_", false);
      helpFormatter0.setNewLine("Fs;`mKS8nUy`38<xS");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 7;
      String string0 = "6pS#dOt_";
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      boolean boolean0 = false;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "6pS#dOt_", "-", options0, 7, 7, "6pS#dOt_", false);
      helpFormatter0.setNewLine("Fs;`mKS8nUy`38<xS");
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "_0l(Rj*=z@'W");
      StringWriter stringWriter2 = stringWriter1.append('M');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      int int1 = 3115;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5089), 3115, "R\"\"O0`=?[7EH/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-499), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) "\n";
      mockPrintWriter0.printf("", objectArray0);
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) "\n";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray1[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "\n";
      objectArray1[4] = (Object) helpFormatter0;
      objectArray1[5] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("[", objectArray1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage(printWriter0, 13, "\n", options1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "");
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("", 299, 3);
      helpFormatter0.printHelp("]", options1, false);
      helpFormatter0.printUsage(printWriter0, 13, "]", options1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 384, "arg");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      Option option0 = new Option("arg", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), "zz)ypZ@0Jj*abyE9c", "<>pxQ\"u)SM4@Gv", options3, "zz)ypZ@0Jj*abyE9c");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(81);
      StringWriter stringWriter1 = stringWriter0.append('A');
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Options options4 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "/,#L^2Kg=r;~n\"nj)TI", options4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", " ", options0, "arg");
      helpFormatter1.printHelp((-1), "--", "arg", options0, "\n", false);
      StringWriter stringWriter0 = new StringWriter(2489);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 73, (-1), ">X4O]b:cd%R(H=rh/Kc");
      helpFormatter1.renderWrappedText(stringBuffer1, 74, (-927), ". MHp?-");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Option option0 = new Option((String) null, false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("'bj\":^f", options1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "ddMm;H";
      helpFormatter0.defaultNewLine = "|4F2#x.R/XPYE0N)Fo2";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.printHelp("hw[F", "|4F2#x.R/XPYE0N)Fo2", options0, "ddMm;H");
      helpFormatter0.getArgName();
      helpFormatter0.defaultLeftPad = 3515;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-907));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '[';
      charArray0[2] = 'i';
      mockPrintWriter0.print(charArray0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "6pS#dOt_", " :: ", options0, 7, 7, "6pS#dOt_", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "F;`mKrS8nUy`38<xS";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      helpFormatter0.setNewLine("R\"\"O0`=?[7EH/");
      helpFormatter0.printHelp("l;jVxKN>pw78", (String) null, options0, "F;`mKrS8nUy`38<xS");
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", " :: ", options0, 74, 74, "usage: ", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "F;`mKrS8nUy`38<xS";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1158), "NO_ARGS_ALLOWED", "", options0, (-1111), (-1105), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.helpOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter3.renderWrappedText(stringBuffer0, 1, 1, "--");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("A(!4BVf(Y[3", "'", options0, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 3, options0, 1, 64);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 9, "qvQq<n A2tr9nP", "\n", options0, 1, 3, "ulm0cIU{dAJJ<-).-P");
      helpFormatter0.printHelp("' contains an illegal character : '", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter0, 9, "RBz\tT) luAMV-=Li", "a3UnM:0|$`+\"D", options0, 0, 74, (String) null, true);
      helpFormatter0.setNewLine("[ARG...]");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "g(lBqk,m#'\"7xU");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "", "", options0, 74, 724, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "\n", options1, 74, 32, "A CloneNotSupportedException was thrown: ", false);
      helpFormatter0.setNewLine("-");
      Options options2 = new Options();
      helpFormatter1.printHelp(2547, "A CloneNotSupportedException was thrown: ", "-", options2, (String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":(tgqbEJ'1";
      helpFormatter0.setArgName(":(tgqbEJ'1");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 7;
      String string1 = " :: ";
      Options options0 = new Options();
      options0.getMatchingOptions("line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, (String) null, "org.apache.commons.cli.OptionValidator", options0, (-1005), (-1005), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      String string1 = "_0l(Rj*=z@'W";
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string2 = "9=";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", (String) null, options1, 1, (-1), "9=", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "6pS#dOt_", " :: ", options0, 7, 7, "6pS#dOt_", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "F;`mKrS8nUy`38<xS";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "usage: ", options0, "jgr4B&me3yz#i/");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      Options options1 = options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.helpOptions();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "\n", options1, 74, 1, "A CloneNotSupportedException was thrown: ", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter2.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter2.printOptions(mockPrintWriter0, 1, options0, 3, 3095);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println('*');
      mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 3, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "%dGlJNl";
      int int0 = (-2365);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1309);
      StringWriter stringWriter1 = stringWriter0.append('}');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      String string0 = "GuE=\";oj3sfbv!Z)";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "GuE=\";oj3sfbv!Z)";
      objectArray0[2] = (Object) "GuE=\";oj3sfbv!Z)";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("GuE=\";oj3sfbv!Z)", objectArray0);
      int int0 = (-730);
      helpFormatter0.printWrapped(printWriter0, 175, (-730), "GuE=\";oj3sfbv!Z)");
      String string1 = ">";
      helpFormatter0.findWrapPos(">", 0, 0);
      helpFormatter0.findWrapPos("GuE=\";oj3sfbv!Z)", 175, 0);
      String string2 = "<";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", true, "usage: ");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", (String) null, true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      String string0 = "";
      Options options0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "N*6[M`";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "", (Options) null, "N*6[M`", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "S{A\\q*0UJHW:4d u`5";
      String string2 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      int int0 = 2360;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.AlreadySelectedException", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption("P", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3757, "P", "   ", options0, 3757, (-704), "-9h:Uh,", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("arg");
      options0.addOption("", "", false, (String) null);
      String string1 = "org.apache.commons.cli.Option";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "6pS#dOt_", " :: ", options0, 7, 7, "6pS#dOt_", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "F;`mKrS8nUy`38<xS";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "F;`mKrS8nUy`38<xS";
      Object object2 = new Object();
      objectArray0[5] = object2;
      mockPrintWriter0.printf("'", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "GeA-Cv.5b35");
      helpFormatter0.findWrapPos("Jh", 32, 32);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "6pS#dOt_", " :: ", options0, 32, 32, "6pS#dOt_", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "F;`mKrS8nUy`38<xS";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "F;`mKrS8nUy`38<xS";
      Object object2 = new Object();
      objectArray0[5] = object2;
      mockPrintWriter0.printf("'", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "GeA-Cv.5b35");
      helpFormatter0.findWrapPos("Jh", 32, 32);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(0, "]f?s:C{ZkO,\r;:", " t`AiTP<JVpz'@q%", (Options) null, "]f?s:C{ZkO,\r;:");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2365), "%dGlJNl", "", options0, "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 32;
      String string0 = "6pS#dOt_";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, (String) null, "B< UDg=Ze*%-{1!", (Options) null, "?+C{--`b&Qkv", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter1.printHelp(printWriter0, 3, "arg", "", options0, 3, 1, "", false);
      helpFormatter1.setNewLine("_0l(Rj*=z@'W");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " ", "I<k3M{vy^:", (Options) null, "_0l(Rj*=z@'W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      Options options1 = options0.addOption("", "Y`G~#QN", false, "");
      helpFormatter0.printHelp(" ]", " ]", options1, "org.apache.commons.cli.Option", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options2 = new Options();
      Option option0 = new Option("", "", false, " ");
      Options options3 = options2.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 11, options3, 11, 1617);
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer1, 3131, 3, "FAa");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, 0, options3, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      String string0 = "S{A\\q*0UJHW:4d u`5";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("S{Aq*0UJHW:4d u`5", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setDescPadding(31);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultWidth = 31;
      helpFormatter0.getNewLine();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.setDescPadding(13);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\n", 13, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "V$/{NH7fN/~w<e";
      helpFormatter0.setLongOptSeparator("V$/{NH7fN/~w<e");
      Options options0 = new Options();
      String string1 = null;
      helpFormatter0.printHelp("V$/{NH7fN/~w<e", "V$/{NH7fN/~w<e", options0, (String) null, true);
      helpFormatter0.setNewLine("V$/{NH7fN/~w<e");
      String string2 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      helpFormatter0.setNewLine("");
      helpFormatter0.rtrim("");
      helpFormatter0.setLongOptSeparator("]v:MX/n.$Ljv");
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "]v:MX/n.$Ljv", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "6pS#dOt_", " :: ", options0, 32, 32, "6pS#dOt_", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[ option: ", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      options0.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, (String) null, "d:o$}mpg7p", options0, 74, 74, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(957);
      int int0 = 9;
      String string0 = "@K(gNGSh&";
      helpFormatter0.defaultSyntaxPrefix = "@K(gNGSh&";
      helpFormatter0.setWidth((-4498));
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.findWrapPos("", 9, 0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-4498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "   ";
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "   ", options0, "GQ=!KH");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "BbD,ohLYV&&)8]3m";
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = ">,FV2vL2ouGqEHO";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "-");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("A!77bMmj/&>(t", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A!77bMmj/&>(t' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.defaultOptPrefix = "arg";
      int int0 = 1;
      String string0 = "org.apache.commons.cli.OptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2934, 1, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 31;
      String string0 = "``W/{S!U+.h[A";
      String string1 = "7c1Vw/";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = true;
      options0.addOption("arg", (String) null, true, "ObIjLr!Ex;=");
      Option option0 = null;
      try {
        option0 = new Option("^F_;tq!@@S<DOrBuW", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^F_;tq!@@S<DOrBuW' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1740);
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-1740));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Y:[6QU@(,{?C");
      helpFormatter0.setDescPadding((-1245));
      helpFormatter0.getLeftPadding();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      Option option0 = new Option("arg", true, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "usage: ", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 31, 3818);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      Option option0 = new Option("arg", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("f;ByYb:TsMd_cn&", "[ option: ", options3, "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      options0.addOption("", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "6pS#dOt_", " :: ", options0, 32, 32, "6pS#dOt_", false);
      helpFormatter0.setNewLine("F;`mKrS8nUy`38<xS");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      Options options1 = options0.addOption("", "Y`G~#QN", false, "");
      helpFormatter0.printHelp(" ]", " ]", options1, "org.apache.commons.cli.Option", true);
      helpFormatter0.setDescPadding(1136);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" | ");
      int int0 = (-2001);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "-");
      options1.hasLongOption("--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      options1.hasLongOption("ND+'b;_uET$kV#v");
      options1.getOption("dh");
      options0.addOption("arg", "arg", false, "&");
      stringBuffer0.insert(0, "arg");
      helpFormatter0.defaultLongOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2001), options1, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(")6g\"gM(=:d", (-581), 0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      Options options0 = new Options();
      options0.getMatchingOptions("_0l(Rj*=z@'W");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter1.printHelp(printWriter0, 3, "arg", "", options0, 3, 1, "", false);
      helpFormatter1.setNewLine("_0l(Rj*=z@'W");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1327), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "S{Aq*0UJHW:4d u`5");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jldOEbEdQ?LiB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-5883), ">-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 'u';
      charArray0[2] = 'e';
      mockPrintWriter0.print(charArray0);
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) options0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1092), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "";
      mockPrintWriter0.print('3');
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.println(0.0);
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      int int0 = (-3113);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3113), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.findWrapPos("P", 0, 0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(0, int0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "Z+N{KLu!9q5\"s@";
      helpFormatter0.setSyntaxPrefix("Z+N{KLu!9q5\"s@");
      int int0 = 9;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2741, options0, 1, (-1304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "FI<Q>ffH$C)O8>KE}r";
      int int0 = (-1227);
      helpFormatter0.setWidth((-1227));
      Options options0 = null;
      helpFormatter0.setArgName((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer0.append(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1227), (Options) null, (-1227), (-1227));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("");
      String string1 = "CDA";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", "|xZiyd", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 31, (-4909));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("_cYK2#g");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 476, "");
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }
}
