/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:04:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", false, " ");
      optionGroup1.addOption(option1);
      option1.setArgName("-");
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("]", ".2\"9*TycmAew*Y`", options0, "--", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = (-2407);
      helpFormatter0.defaultLeftPad = (-2407);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("e", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<UH~>TRIV\"A", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, 7, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "S");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1507), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      options1.addOption("", "   ", true, "   ");
      helpFormatter0.setWidth(4593);
      helpFormatter0.printHelp("1=o4AplFyG)Zc~G0", options1, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "--", true, "arg");
      helpFormatter1.printHelp("arg", " [ARG]", options1, "--", true);
      helpFormatter1.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("");
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, "", true, "arg");
      helpFormatter1.printHelp("arg", " [ARG]", options1, "--", true);
      helpFormatter1.getWidth();
      helpFormatter1.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("fr", "--", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("has already been selected: '");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(" [ARG]", "org.apache.commons.cli.Option", options1, " [ARG]", true);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option((String) null, "usage: ", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("usage: ");
      helpFormatter0.printHelp("[s", "[s", options0, (String) null, true);
      StringWriter stringWriter0 = new StringWriter(23);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("l");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options2 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2), options2, 64, 36);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("QsY1RytuzQ", "QsY1RytuzQ", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "]";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("fr", "--", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("[s");
      helpFormatter0.printHelp(" [ARG]", options0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("C9UyXA8*ViC73");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " [ARG]";
      PrintWriter printWriter0 = mockPrintWriter1.format((Locale) null, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 64, "", options1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = null;
      helpFormatter0.setOptPrefix("--");
      helpFormatter1.setWidth(1);
      helpFormatter0.rtrim("[ARG...]");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("[ Options: [ short ", 1, 3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      stringWriter1.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.setWidth(4577);
      helpFormatter0.printHelp("1=o4AplFyG)Zc~G0", options1, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "<yBOerO", (String) null, options0, 4577, 0, "<yBOerO", true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("fr", "--", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("[s");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(" [ARG]", "org.apache.commons.cli.Option", options1, " [ARG]", true);
      StringWriter stringWriter0 = new StringWriter(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("--");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("fr", "--", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("[s");
      helpFormatter0.printHelp(" [ARG]", "org.apache.commons.cli.Option", options1, " [ARG]", true);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getArgName();
      stringWriter1.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options2 = new Options();
      options2.addOption("", true, "");
      helpFormatter0.setWidth(4577);
      helpFormatter0.printHelp(" ", options2, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      options0.hasLongOption(" ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth((-2395));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 7, 7, "e0`GsRY!Nbni&i");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 13, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "Nl#(J}78");
      options1.addOption("", true, "--");
      Options options2 = options1.addOption("", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      helpFormatter0.printHelp("juVD6upTErby#C^", options2, true);
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 95;
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string0 = "o{\\ZnP8M[G4";
      String string1 = null;
      Options options0 = new Options();
      options0.addOption("", false, "");
      int int1 = 0;
      int int2 = 1853;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-26), 0, ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "Nl#(J}78");
      options1.addOption("", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1607));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("[", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 95;
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      options0.addOption("", false, "");
      helpFormatter0.setWidth((-1872));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'XbrE@Bz?1ZvO", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.append(' ');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", true, "]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "o{ZnP8M[G4", (String) null, options1, 0, 1853, "");
      helpFormatter0.createPadding(95);
      helpFormatter0.createPadding(95);
      Options options2 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1853, "                                                                                               ", "6lq.%Hph^_", options2, 123, 1853, (String) null, false);
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, (-1426), options0, 117, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, 1, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      Options options1 = new Options();
      int int1 = 74;
      int int2 = 82;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 82, options0, (-2084), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(61);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 61, 0, "Cannot add value, list full.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter0.append('L');
      StringWriter stringWriter2 = stringWriter1.append('u');
      StringWriter stringWriter3 = stringWriter2.append('L');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 95, (-3285), " ] [ long ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      Options options1 = new Options();
      options0.hasLongOption("{=");
      helpFormatter0.printHelp("Illegal option name '", "5?nB", options0, "Illegal option name '");
      helpFormatter0.findWrapPos("Illegal option name '", 0, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile(".&Qb;f+gqCW", "0[{t\"9zz");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "CDH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CDH
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringWriter stringWriter2 = stringWriter1.append(']');
      StringWriter stringWriter3 = stringWriter2.append('N');
      stringWriter3.append(']');
      stringWriter0.append('~');
      StringBuffer stringBuffer0 = stringWriter3.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 3, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", (Options) null, "UECj}(ZQLu{)MD]D ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options0 = new Options();
      options0.hasLongOption("{m>fl");
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setArgName("rQ^!lu&k ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "-J9", " ", options0, (-190), (-190), "d=/t|re-l6{h&;RrK l", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      options0.hasLongOption(" ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter0.setArgName("5T13j$+UB4x~");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "H^~jFMbL44", " ", options0, 1, 1, "", false);
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('0');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.setWidth(4563);
      Options options1 = options0.addOption("$", true, (String) null);
      helpFormatter0.printHelp("fWiTGI&8v~.}@", "Cannot add value, list full.", options1, "`^o^qEQ7A4!)DLZ'u/!");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      options0.hasLongOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "\n", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 719, 719);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2392, 2392, ">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) stringBuffer1;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "hq!56oBgY\"[dg", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, (-2084), options0, 74, 2392);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1196, ">");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) stringWriter1;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 95, "cmdLineSyntax not provided", "", options1, 2, 3843, ")y!6", true);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      options0.hasLongOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-482), "\tb9ZXdFszua", "\tb9ZXdFszua", options0, "A0, y6A7]MkWg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding((-805));
      Options options0 = new Options();
      options0.hasLongOption("`8xg_");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`8xg_", "Me*QW&", options0, "`8xg_");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.append(']');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 4563, "e0`GsRY!Nbni&i");
      stringBuffer0.trimToSize();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, (-1), options0, 2392, 1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(4563);
      Options options1 = options0.addOption("", "arg", true, "!");
      helpFormatter1.printHelp("uO/V8oqQU)Rp1|", options1, true);
      helpFormatter1.printHelp("uO/V8oqQU)Rp1|", options0, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('0');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('7');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = new Options();
      mockPrintWriter0.println(0.0);
      Options options2 = new Options();
      options2.addOption("", false, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1853, "org.apache.commons.cli.OptionValidator", "", options2, 0, 48, "");
      helpFormatter0.createPadding(1853);
      helpFormatter0.rtrim("org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", false, "");
      options0.hasShortOption("\n");
      int int0 = 5;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5, (String) null, "", options0, (-604), 3843, "[ARG...]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Q^F<nDN{k");
      helpFormatter0.setArgName("\n");
      helpFormatter0.setWidth(3);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('a');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 97, 3, " :: ");
      String string0 = helpFormatter0.createPadding(3048);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) stringWriter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) stringBuffer1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "Jb,JkgaV.4{@f&s ~l", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1378, "[ option: ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setWidth(1);
      stringWriter0.append(']');
      stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.printHelp("P-h)_Q={v&p(5K7/y$", (String) null, (Options) null, "P-h)_Q={v&p(5K7/y$");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      options0.hasLongOption(" ");
      Options options1 = new Options();
      options1.addOption("arg", false, " ");
      helpFormatter0.printHelp(742, "org.apache.commons.cli.AlreadySelectedException", "U8.H${d5tSDPcHT.", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 742, "--", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3083, "", options0);
      helpFormatter0.setWidth(0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "' was specified but an option from this group ", "[", options0, 3083, 1, "' was specified but an option from this group ");
      helpFormatter0.setWidth(60);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "");
      options0.hasLongOption(" ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      options0.getMatchingOptions("\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-761), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options1, 0, 0, "C2D.FB@+;{");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append('0');
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      options0.addOption("", true, "");
      helpFormatter0.setWidth(143);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0, true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      options0.addOption("", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" *5=M){#CLlG1(");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "org.apache.commons.cli.OptionGroup");
      stringBuffer1.append(false);
      helpFormatter0.renderWrappedText(stringBuffer1, 31, 31, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "Wh%{!Ox:_!y!]%DZ~", (String) null, (Options) null, 31, (-1694), "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('H');
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer1, 2392, 1, "");
      helpFormatter1.renderWrappedText(stringBuffer1, 63, 1, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2692));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 95;
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string0 = "o{\\ZnP8M[G4";
      String string1 = null;
      Options options0 = new Options();
      options0.addOption("", false, "");
      int int1 = 0;
      PrintWriter printWriter0 = mockPrintWriter0.append('P');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2418), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.append(']');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-1672);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 4563, "e0`GsRY!Nbni&i");
      stringBuffer0.trimToSize();
      Options options0 = new Options();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, (-1), options0, 2392, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-1672), 32, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      options0.addOption("", true, "");
      options0.hasLongOption(" ");
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "5T13j$+UB4x~", "--", options0, 1, 0, "^<W[)", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      stringWriter0.append('K');
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "o{ZnP8M[G4", (String) null, options1, 0, 1853, "");
      helpFormatter0.getWidth();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1077), "ep/3E3+v", "B9", options0, 680, (-1), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, true, "org.apache.comons.cli.Opton");
      helpFormatter0.printHelp(95, "org.apache.comons.cli.Opton", "NO_ARGS_ALLOWED", options0, "org.apache.comons.cli.Opton", false);
      helpFormatter0.setLongOptSeparator((String) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringWriter1;
      objectArray0[2] = (Object) stringWriter1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) options1;
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("' was specified but an option from this group ", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ", "--", options1, 63, 0, "' was specified but an option from this group ", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.defaultNewLine = "E]X.fh";
      helpFormatter0.setOptPrefix("E]X.fh");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2392, "", "0ngj,%#|#1bA", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "' was specified but an option from this group ", "", options1, 3083, 49, "");
      helpFormatter0.setWidth(60);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("LNs", true, "-");
      helpFormatter0.rtrim("LNs");
      Options options2 = new Options();
      Options options3 = new Options();
      options0.hasLongOption("``;%EU?}',(xCNl0");
      optionGroup0.setRequired(true);
      options0.getOptions();
      helpFormatter0.printHelp("``;%EU?}',(xCNl0", "F", options1, "43bwvh$`RL");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      int int0 = (-1672);
      String string0 = "0@r{b1JYRsHLn<z;fAn";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 622, options0, (-1672), 622);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      stringWriter0.append('{');
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      int int0 = (-14);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "o{ZnP8M[G4", (String) null, options1, (-14), 1853, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", "arg", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = new Locale("-");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "   ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "   ", (Object[]) null);
      helpFormatter0.printWrapped(printWriter1, 16, 1457, "   ");
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      options1.addOption("", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("<'iWof\"Y`Mifa8(y8h", "arg", options0, "", false);
      helpFormatter1.setLongOptSeparator("arg");
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("cU7W4Mhc $7b_h7", (-2096), 1457);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('t');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 2392, (-375), "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-375), "N=8+X>.b\"", "\n", options0, "F", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("eAZ_yc|&.f;pvwlfjC", "eAZ_yc|&.f;pvwlfjC", options0, "eAZ_yc|&.f;pvwlfjC");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "eAZ_yc|&.f;pvwlfjC");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      options1.helpOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "' was specified but an option from this group ", "", options1, 3083, 49, "");
      helpFormatter0.setWidth(60);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("C#4#", 60, (-493));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.append('^');
      helpFormatter0.defaultLeftPad = 740;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      options0.hasOption("BuV'yZG6(@{>adS@c");
      helpFormatter0.printHelp("--", "-ry -0Doe6.l?d+x", options1, "--", false);
      helpFormatter0.setLongOptSeparator("BuV'yZG6(@{>adS@c");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 2392;
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2392, (-541), ">");
      int int1 = 62;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 2392, (Options) null, 62, 2392);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append(']');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 2392, (-1672), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      stringWriter0.append('K');
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "o{ZnP8M[G4", (String) null, options1, 0, 1853, "");
      helpFormatter0.getWidth();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("o{ZnP8M[G4", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "o{ZnP8M[G4", options1, 1853, 63, "?-'wu_[", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 95;
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('B');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2672), 27, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      options0.addOption("arg", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1853, (String) null, "", options0, (-2169), 5, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getNewLine();
          StringWriter stringWriter0 = new StringWriter();
          StringWriter stringWriter1 = stringWriter0.append(']');
          StringBuffer stringBuffer0 = stringWriter1.getBuffer();
          int int0 = 2392;
          helpFormatter0.renderWrappedText(stringBuffer0, 2392, 2392, ">");
          Options options0 = new Options();
          options0.getMatchingOptions("F");
          helpFormatter0.printHelp(2392, "io+;=5>Hz\f4Z", "N=8+X>.b\"", options0, "F", true);
          helpFormatter0.setLongOptSeparator("N=8+X>.b\"");
          int int1 = 1398;
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          helpFormatter0.setOptPrefix("io+;=5>Hz\f4Z");
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor66.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter0.defaultLeftPad = 740;
      mockPrintWriter0.write(3);
      helpFormatter0.setLongOptSeparator("c");
      mockFileOutputStream0.close();
      helpFormatter0.rtrim((String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-43);
      try { 
        mockFileOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("{5B4{=)ZmK_bb;!dm");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{5B4{=)ZmK_bb;!dm");
      helpFormatter0.setWidth(2829);
      mockPrintWriter0.print((Object) "{5B4{=)ZmK_bb;!dm");
      mockPrintWriter0.println(true);
      mockPrintWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "17F2TX)-5&6{v-~ZM");
      helpFormatter0.getOptPrefix();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{5B4{=)ZmK_bb;!dm");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "{5B4{=)ZmK_bb;!dm", true, "17F2TX)-5&6{v-~ZM");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("{5B4{=)ZmK_bb;!dm", true, "{5B4{=)ZmK_bb;!dm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{5B4{=)ZmK_bb;!dm' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      String string0 = "F";
      String string1 = "LNs";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("LNs", true, "-");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "LNs", "OSI<O<jb^Uog_nL2G5", options2, "--", true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      // Undeclared exception!
      try { 
        stringBuffer0.insert(864, (Object) "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 864
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("P=&", "org.apache.commons.cli.HelpFormatter", options0, "P=&");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = '.';
      charArray0[2] = '(';
      charArray0[3] = '.';
      charArray0[4] = 'M';
      charArray0[5] = '\\';
      charArray0[6] = 'E';
      charArray0[7] = '|';
      stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 2523, 1, "org.apache.commons.cli.HelpFormatter");
      assertEquals("s.(.M\\E|org.apache.commons.cli.HelpFormatter", stringBuffer0.toString());
      
      helpFormatter0.createPadding(31);
      helpFormatter0.getDescPadding();
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.rtrim("                               ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getNewLine();
          StringWriter stringWriter0 = new StringWriter();
          StringWriter stringWriter1 = stringWriter0.append(']');
          StringBuffer stringBuffer0 = stringWriter1.getBuffer();
          int int0 = 2392;
          helpFormatter0.renderWrappedText(stringBuffer0, 2392, 2392, ">");
          Options options0 = new Options();
          helpFormatter0.printHelp(2392, "io+;=5>Hz\f4Z", "N=8+X>.b\"", options0, "F", true);
          helpFormatter0.setLongOptSeparator("N=8+X>.b\"");
          int int1 = 1398;
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor66.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 95;
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "");
      int int1 = 0;
      int int2 = 1853;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "`/S7]S", (String) null, options1, 0, 1853, "");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultWidth = 55;
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      helpFormatter0.printHelp("--", options1);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Q^F<nDN{k", "lW/l0]x+<;,{68%", options1, "");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      mockPrintWriter0.append('^');
      helpFormatter0.defaultLeftPad = 740;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "-");
      options0.hasOption("BuV'yZG6(@{>adS@c");
      helpFormatter0.printHelp(323, "lW/l0]x+<;,{68%", "o1>|Rma[oK", options1, "uPYD#H");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2640, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 0, 1196, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("nD3E");
      String string0 = "Cj!Z([xSVGj0}Q3'";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2392, 2392, ">");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1196, ">");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("hp");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      int int0 = 740;
      Options options0 = null;
      helpFormatter0.defaultLeftPad = 740;
      mockPrintWriter0.write(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 740, (Options) null, 740, 323);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      PrintWriter printWriter0 = null;
      int int1 = 1;
      String string0 = "";
      Options options0 = new Options();
      int int2 = 742;
      options0.hasLongOption(" ");
      helpFormatter0.defaultArgName = "org.apache.commons.cli.AlreadySelectedException";
      String string1 = "";
      options0.helpOptions();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", false, "HG[:wgzJOp4le");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.toString();
      options0.hasShortOption(" ");
      Options options1 = options0.addOption("c", "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "", options1, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(95);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 95, "o{ZnP8M[G4", (String) null, options1, 0, 1853, "");
      helpFormatter0.setWidth((-1430));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      options0.hasLongOption("=rqZ)a%");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (String) null, options0, "=rqZ)a%");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "eAZ_yc|&.f;pvwlfjC";
      helpFormatter0.setSyntaxPrefix("eAZ_yc|&.f;pvwlfjC");
      helpFormatter0.setArgName("eAZ_yc|&.f;pvwlfjC");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim("^%rrGZ=G:i :u");
      helpFormatter0.getWidth();
      int int0 = 1106;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = null;
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("^%rrGZ=G:i :u", (String) null, true, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^%rrGZ=G:i :u' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, 2640, "");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-426);
      helpFormatter0.defaultLeftPad = (-426);
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = null;
      String string1 = " Iv";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", " ", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1415));
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[ARG...]");
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.hasLongOption("QBHG:");
      options0.getOptions();
      helpFormatter0.printHelp("F34YU'c>e:@Z-$u3J", "PF#M;q$h9_ waT", options1, "Z0*4uR<,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append(' ');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-604), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter1 = new StringWriter();
      helpFormatter0.setWidth(1);
      StringWriter stringWriter2 = stringWriter1.append(']');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1472), 55, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Q^F<nDN{k");
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Q^F<nDN{k", "lW/l0]x+<;,{68%", options1, "");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1493);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1493), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(32);
      String string0 = "3Rt";
      helpFormatter0.rtrim("3Rt");
      String string1 = "*R/=%W*G0pB#G%5)jVg";
      String string2 = "HW";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("HW", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "M@qYC~";
      helpFormatter0.setLongOptSeparator("M@qYC~");
      helpFormatter0.defaultLongOptPrefix = "M@qYC~";
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      String string1 = "";
      Options options0 = new Options();
      String string2 = "Cannot add value, list full.";
      Option option0 = null;
      try {
        option0 = new Option("Cannot add value, list full.", "usage: ", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Cannot add value, list full.' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = " :: ";
      Options options0 = new Options();
      String string1 = "A CloneNotSupportedException was thrown: ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("A CloneNotSupportedException was thrown: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'A CloneNotSupportedException was thrown: ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "-", true, "0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
