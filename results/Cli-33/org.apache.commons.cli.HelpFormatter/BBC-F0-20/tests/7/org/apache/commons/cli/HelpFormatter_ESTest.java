/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:09:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UnknownFormatConversionException;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "GYQ$qpe^ad:86C2b");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-578), options2, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("usage: ", " ", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, "&-W ");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-398), (String) null, "&-W ", options0, (-1), 34, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-449), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      int int0 = (-1188);
      helpFormatter0.defaultLeftPad = (-1188);
      helpFormatter0.rtrim("[ARG...]");
      helpFormatter0.rtrim("[ARG...]");
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-928);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-928), (-928), "Rv+EP00>g~aH#sWyDH2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 1;
      String string0 = "0J`_+8c~4}[Py`>3%";
      String string1 = "t^G*V|M5S/B";
      MockPrintStream mockPrintStream0 = new MockPrintStream("ecyV*0b7rGl");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      mockPrintStream0.println((double) 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "Illegal option name '", "ecyV*0b7rGl", (Options) null, 1, 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = null;
      File file0 = MockFile.createTempFile("usage: ", ":");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, ":");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1703), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("OA}=\u0003,!=M");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      helpFormatter0.printHelp(9, "OA}=\u0003,!=M", "OA}=\u0003,!=M", options1, "OA}=\u0003,!=M");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.addOption((String) null, true, ">");
      options0.helpOptions();
      helpFormatter0.printHelp("tr%Y<{iuA*7<)C~o*~&", "", options0, "", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-275), (byte)108, "tr%Y<{iuA*7<)C~o*~&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, "`7TkF{rK", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = null;
      String string1 = "@063[Ff%/1dX!2";
      int int0 = 0;
      MockFile mockFile0 = new MockFile("|", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "i_eLZ~Di'msK4JVn(g2");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 386, 767, "{b#NzXd");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      assertEquals("", helpFormatter0.getNewLine());
      
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n", false, "?m1L5>f2FFZ79");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      helpFormatter0.printHelp("-", "[ option: ", options1, "r|[)Rz54E", false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lUvSixF~@");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "Illegal option name '";
      int int0 = (-3281);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Illegal option name '", 1364, (-3281));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "SfU'1Oh;3Pq0Zw[", "GAys+q\"M|B;_", (Options) null, "SfU'1Oh;3Pq0Zw[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      options0.getOptions();
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-621));
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "usage: ", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options0 = new Options();
      options0.getOptions();
      options0.addOptionGroup(optionGroup1);
      Options options1 = new Options();
      helpFormatter0.printHelp(" :: ", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, ".wr4mTrq;hoKx");
      Option option0 = new Option("", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      option0.setLongOpt("baCMywOXR");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      StringWriter stringWriter0 = new StringWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1090, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) "orgapache.commons.cli.Options";
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedOutputStream0;
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setLongOpt("");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer2 = helpFormatter1.renderOptions(stringBuffer1, 74, options1, 1, 568);
      helpFormatter0.renderWrappedText(stringBuffer2, 74, 74, ":u;Dh`qB 6ou");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) "orgapache.commons.cli.Options";
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedOutputStream0;
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.getValues();
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOption(option0);
      option0.setLongOpt("");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.printf("--", objectArray0);
      Options options2 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      options0.addOptionGroup(optionGroup1);
      options0.hasShortOption("");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(26);
      // Undeclared exception!
      helpFormatter1.printHelp(0, "\n", "-", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">P,cViM");
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-523), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) "orgapache.commons.cli.Options";
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedOutputStream0;
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setLongOpt("");
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 4839, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "9<[A4|Q*wm%", true, "^Gp5]");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "7 Bw@;M";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7 Bw@;M", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      Locale.lookup(linkedList0, list0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) list0;
      objectArray0[4] = (Object) "org.apache.commons.cli.Options";
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedOutputStream0;
      Option option0 = new Option("", false, ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setLongOpt(">");
      helpFormatter0.setArgName(">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(2522, "-", ">", options0, "usage: ", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.printOptions(mockPrintWriter0, 32, options0, 2252, 2534);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", "", (Options) null, "?-~d8[\"W~q85dM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "usage: ");
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 34, options2, 74, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", "arg", true, "usage: ");
      String string0 = "Xm~~@n";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Xm~~@n");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "Xm~~@n", "", options0, 64, (-1), "Xm~~@n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) list1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "org.apache.commons.cli.Options";
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedOutputStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "S", "arg", options0, (-930), 41, "S", true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write("usage: ", 2, 1);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ";qCZ9DqB=", ";qCZ9DqB=", options0, 1, 9, (String) null, true);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(8);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) list1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "org.apache.commons.cli.Options";
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) pipedOutputStream0;
      objectArray0[8] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "org.apache.commons.cli.Options", objectArray0);
      helpFormatter0.printHelp(printWriter0, 5947, "org.apache.commons.cli.Options", " ;/,}Y-^%>", options0, 106, 106, "");
      Option option0 = new Option("", false, ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      option0.setLongOpt(">");
      helpFormatter0.setArgName(">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(2522, "m}[?Kb,", ">", options0, "usage: ", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(69, ".@", "", options0, ".@");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      StringWriter stringWriter0 = new StringWriter(44);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 32, 32);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "4xEbdxY:";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4xEbdxY:", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "Illegal option name '", "--", options1, 9, 7, ";qCZ9DqB=", true);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(4962);
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "-", options1, 1, (-1088), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "", options0, "4PG:M%x", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "org.apache.commons.cli.OptionGroup";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("f4GO6u;egDz.NT", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 72, "org.apache.commons.cli.Option", "", options0, 72, 72, "", false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", false, "");
      options1.addOption("arg", true, "");
      Option option0 = new Option("arg", "", true, "-");
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(47);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      String string0 = "6G_g4*/}!\\UmY53v";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 72, "6G_g4*/}!UmY53v", (String) null, options0, (-2130), 3, ",LzWvg03t", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      String string0 = ";qCZ9DqB=";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "\n", options1, 4, 44, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.renderOptions((StringBuffer) null, 101, options0, 64, 63);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, (-237), "X(0YDZ}{cKH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "I*XI4jB";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("I*XI4jB");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-587), "I*XI4jB", "I*XI4jB", options0, 118, 32, "I*XI4jB", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "", ";w6s$|0", (Options) null, 74, 74, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "Illegal option name '", "(1WB]NT}Y", options1, 9, 7, ";qCZ9DqB=", true);
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      mockPrintWriter0.print((Object) "arg");
      helpFormatter1.printHelp("--", "\n", options0, "(1WB]NT}Y", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setWidth(0);
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "(y95\"VF", (Options) null, 1849, 1, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3390);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3390));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "@a(b", "@a(b", options0, "Tz%pw!;Vvm5[]V}}Zj!");
      StringWriter stringWriter0 = new StringWriter(240);
      StringWriter stringWriter1 = stringWriter0.append('g');
      stringWriter1.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@a(b");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "@a(b";
      objectArray0[2] = (Object) "Tz%pw!;Vvm5[]V}}Zj!";
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) "@a(b";
      objectArray0[8] = (Object) "@a(b";
      PrintStream printStream0 = mockPrintStream0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, true);
      // Undeclared exception!
      helpFormatter0.printHelp("=9{N0;g", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      Option option0 = new Option("", "9<[v|&*wb%", true, "usage: ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options3, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Options options4 = new Options();
      helpFormatter0.setWidth((-1332));
      options4.addOption("", false, "' was specified but an option from this group ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("'", "Q43_I;!]{4m,.g>");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "\n");
      helpFormatter0.printHelp(444, "arg", "-", options1, "");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.printHelp(1268, "[ option: ", "", options0, "");
      helpFormatter1.createPadding(74);
      helpFormatter1.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "O$_q*`3K9>0S");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = "@a(b";
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "@a(b", "@a(b", options0, "Tz%pw!;Vvm5[]V}}Zj!");
      StringWriter stringWriter0 = new StringWriter(240);
      StringWriter stringWriter1 = stringWriter0.append('g');
      stringWriter1.append((CharSequence) "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp("&WBx5(&>0)e'oFHLk", options0, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      Option option0 = new Option("", "9<[v|&*wb%", true, "usage: ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options3, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Options options4 = new Options();
      int int0 = (-1332);
      helpFormatter0.setWidth((-1332));
      String string0 = "";
      Options options5 = options4.addOption("", false, "' was specified but an option from this group ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      Option option0 = new Option((String) null, "[ option: ", false, "\n");
      options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", " ", options2, "P;Srg", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";jE<)D/fHlBoza", "j6R,.cm", (Options) null, ";jE<)D/fHlBoza", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      Option option0 = new Option((String) null, "[ option: ", false, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      options0.addOptionGroup(optionGroup1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.print((Object) helpFormatter0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 537, 1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "";
      helpFormatter2.defaultWidth = 3;
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 56, "(y95\"VF", "", (Options) null, 74, 74, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" [ARG]");
      Object object0 = new Object();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " [ARG]";
      objectArray0[1] = (Object) " [ARG]";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "JE<s#(R=";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = object0;
      PrintStream printStream0 = mockPrintStream1.printf("JE<s#(R=", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", false, "--");
      helpFormatter1.printHelp(1268, "5i__=Y65qJ|W+@,", "", options1, " ");
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "[ option: ", "arg", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 74;
      helpFormatter0.getWidth();
      helpFormatter1.getOptionComparator();
      mockPrintWriter0.print((Object) "");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 93, (Options) null, (-1243), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("line.separator", "line.separator", options0, "line.separator", true);
      helpFormatter0.setOptPrefix("line.separator");
      MockFile mockFile0 = new MockFile("line.separator", "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, " ]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) ":+%$5N:K}/,Lfs";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      // Undeclared exception!
      try { 
        mockPrintStream0.printf(":+%$5N:K}/,Lfs", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '$'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "";
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 56, "(y95\"VF", "", (Options) null, 74, 74, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "d'QafI;l6lO,PE", false, "usage: ");
      option0.setType(options0);
      options0.addOption(option0);
      Option option1 = new Option("", "arg", false, "");
      optionGroup0.addOption(option1);
      option0.setArgName("AN2");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.getLeftPadding();
      options1.hasOption("-");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "@a(b", "@a(b", options0, "Tz%pw!;Vvm5[]V}}Zj!");
      StringWriter stringWriter0 = new StringWriter(240);
      StringWriter stringWriter1 = stringWriter0.append('g');
      stringWriter1.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("@a(b");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "@a(b";
      objectArray0[2] = (Object) "Tz%pw!;Vvm5[]V}}Zj!";
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) "@a(b";
      objectArray0[8] = (Object) "@a(b";
      PrintStream printStream0 = mockPrintStream0.printf(" ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1246, "@a(b");
      // Undeclared exception!
      helpFormatter0.printHelp("' was specified but an option from this group ", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(">%<[8)f;3");
      Options options0 = new Options();
      helpFormatter0.printHelp(">%<[8)f;3", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "@a(b", "@a(b", options0, "Tz%pw!;Vvm5[]V}}Zj!");
      StringWriter stringWriter0 = new StringWriter(240);
      StringWriter stringWriter1 = stringWriter0.append('g');
      stringWriter0.append((CharSequence) "-");
      stringWriter1.append((CharSequence) "@a(b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "@a(b");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.appendCodePoint(10);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3867), "6+", "=Tcpr`I=#%/KsP$", (Options) null, "]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Oy\"V%+w", "Oy\"V%+w", options0, "line.separator", true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      Option option0 = new Option((String) null, "[ option: ", false, "\n");
      options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      option0.setLongOpt((String) null);
      helpFormatter0.setArgName("[ option: ");
      helpFormatter0.printHelp((-1), "[ option: ", ">^ +D", options1, ">^ +D", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "[ option: ", "arg", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setWidth(1838);
      int int0 = 1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      Option option0 = new Option((String) null, "[ option: ", false, "\n");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      options1.getOptions();
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "\n", options1, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.setWidth(1838);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption(" ");
      Option option0 = new Option((String) null, "[ option: ", false, "\n");
      option0.setType((Object) null);
      options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("b");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("b", options0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 65, options0, 65, (-627));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('C');
      stringWriter1.append('0');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      stringWriter0.write(charArray0);
      mockPrintWriter0.println('0');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), ";,qD:le0;vRGc&EYX");
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "]", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gn0,@_;AznLrke$GEh";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.reverse();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "gn0,@_;AznLrke$GEh");
      helpFormatter0.defaultArgName = "gn0,@_;AznLrke$GEh";
      int int0 = 494;
      helpFormatter0.setLeftPadding(494);
      int int1 = 0;
      String string1 = "I";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "", (Options) null, "has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ option: ");
      helpFormatter0.setWidth(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "\n", "-", (Options) null, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(0);
      helpFormatter1.getLongOptSeparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "v\u0000AWRh.6xG9nVu.", "//XA-wNF/d", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer(10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, (-1927), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      Object object0 = new Object();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5744), "[", "", options0, "Tz%pw!;Vvm5[]V}}Zj!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("'$45'u$tQ");
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultOptPrefix = "//XA-wNF/d";
      helpFormatter0.defaultNewLine = "//XA-wNF/d";
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setSyntaxPrefix("'$45'u$tQ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1356), "Q-METTX}ZTr3");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.appendCodePoint(10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1966), (-3867), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 766, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "txQS\"85+9&Xq<4q", options0, "s&N", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-892);
      helpFormatter0.defaultDescPad = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = "K$C/>W";
      Options options0 = null;
      String string1 = "[ARG...]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-892), "", "K$C/>W", (Options) null, "[ARG...]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultArgName = "]";
      helpFormatter0.createPadding(3);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("   ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "-";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "-";
      mockPrintWriter0.printf(locale0, "[", objectArray0);
      int int0 = 1927;
      String string0 = "M1D+v_\"B+?@b> a@.";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      Option option0 = new Option("", "arg", false, " ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.defaultArgName = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options2.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      String string0 = "]p=RyPh-7K;~,pUj 2j";
      mockPrintWriter1.write("]p=RyPh-7K;~,pUj 2j");
      int int0 = (-1418);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1418), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("WqA@4S", 0, 2020);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1220, 0, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1220, "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLeftPadding((-2512));
      helpFormatter0.setSyntaxPrefix("FhR9d!ZDzf)m3d,");
      helpFormatter0.rtrim("FhR9d!ZDzf)m3d,");
      String string0 = "The option '";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "FhR9d!ZDzf)m3d,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        mockPrintWriter1.format(locale0, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding((-981));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.defaultLongOptPrefix = "!mD[+@S";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 654;
      helpFormatter0.setLeftPadding(654);
      String string0 = "Yem(H[S\\@";
      helpFormatter0.setSyntaxPrefix("Yem(H[S@");
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Yem(H[S@", false, "Yem(H[S@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Yem(H[S@' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptPrefix("--");
      helpFormatter0.setWidth(1838);
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "[ option: ";
      options0.hasOption(" ");
      Option option0 = new Option((String) null, "[ option: ", false, "--");
      option0.setType((Object) null);
      options0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("--");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "gn0,@_;AznLrke$GEh";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.reverse();
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "gn0,@_;AznLrke$GEh");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vLI!S]!2Y";
      helpFormatter0.defaultLongOptPrefix = "vLI!S]!2Y";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1160));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("'$45'u$tQ");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultOptPrefix = "//XA-wNF/d";
      helpFormatter0.defaultNewLine = "//XA-wNF/d";
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "//XA-wNF/d", "//XA-wNF/d", (Options) null, " ");
  }
}
