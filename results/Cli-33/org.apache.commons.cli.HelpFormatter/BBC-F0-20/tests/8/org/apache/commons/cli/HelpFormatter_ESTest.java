/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:09:26 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-2090);
      helpFormatter0.setLongOptSeparator("line.separator");
      helpFormatter0.defaultLeftPad = (-2090);
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getDescPadding();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      String string0 = "\"";
      String string1 = "pH(nel2oZ+gl#D^ndIk";
      options0.getOptionGroups();
      helpFormatter0.setWidth(375);
      boolean boolean0 = false;
      options0.addOption("", "pH(nel2oZ+gl#D^ndIk", false, "");
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(82, "line.separator", "", options0, "\"", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O)-0*X`H?GI-!>sL");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("eij2MB");
      helpFormatter0.setDescPadding((-1718));
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      int int0 = (-869);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-869), "O)-0*X`H?GI-!>sL", "", (Options) null, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("uzPD8D<M-ppD&~Q", 0, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, " ");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 1, options0, 1, 25);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", true, "h E+h_~f``rkU+");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding((-97));
      Options options1 = options0.addOption("arg", "usage: ", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "usage: ", options1, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 31, options0, 31, 1036);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setArgName("=LV,0z");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptSeparator();
      int int0 = 7;
      helpFormatter0.createPadding(7);
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      String string0 = "w[~";
      Options options0 = new Options();
      int int1 = 1558;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "Xu{JZG{X5A!dz#P7_9", "=(]*l@WbhYoV", options0, 74, 63, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-449), 83, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "e";
      String string1 = "_";
      String string2 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("e", "3thn_", (Options) null, "7pY. FInY+/j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ]");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "PRb", false, "\n");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PRb");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "Jp:LMUJ%bb", options0, 1, 1, "PRb", false);
      StringBuffer stringBuffer0 = new StringBuffer("Jp:LMUJ%bb");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-450), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "";
      String string0 = "arg";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[ option: ", "d$~9}-[bD0<K:CT.}", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", "PRwb", false, "\n");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("arg");
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3gj");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3064, "3gj", "", options0, 3064, (-2496), "3gj");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-175), "<", "<", options1, (-175), 1735, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("");
      options0.addOption("arg", false, (String) null);
      helpFormatter0.printHelp(1735, "arg", "", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1735, 1735);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("]", "9OzW_,GaNR");
      MockFile mockFile1 = new MockFile(mockFile0, "9OzW_,GaNR");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 97, "]", "7P4>[>h", options0, 97, 2, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(103, "p)4')u}m`X@2y^=aPt]", "", options0, "+~hO_iJMC_,`");
      helpFormatter0.createPadding(3);
      helpFormatter0.rtrim("   ");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("WLn]");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 103, 103, "'&");
      Options options1 = options0.addOption("", "S*a^) .}", true, "rWG%;6\"ec^#");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 103, options1, 1212, 103);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer2, (-849), options1, 3020, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-243));
      Options options1 = new Options();
      String string0 = "qm;D'IBLb)4L!Io-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2519, "PRwb", "qm;D'IBLb)4L!Io-", options0, "PRwb");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3, (Options) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "PRwb", false, "\n");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.printHelp(2, "PRwb", "", options0, "PRwb");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PRwb");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 11, "usage: ", "Jp:LMUJ%bb", options0, 2, 3, "PRwb", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      options0.getOptions();
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("+nl<p0\"t%#u9-{9", "", options1, "-", true);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, (String) null, (String) null, options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-295));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-295), (String) null, (String) null, options0, (-295), 1234, "*{VeP{eEV?>BPY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ", false, "The option '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("S", false, (String) null);
      Options options2 = options1.addOption("", "arg", true, "iy?hdq");
      OptionGroup optionGroup2 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup2);
      Options options4 = options3.addOption(option0);
      options4.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "line.separator", options4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.Util", " ", options0, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getArgName();
      helpFormatter0.rtrim("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "usage: ", options0, 74, 74, "${rR\"uLAK;k", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option((String) null, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      options0.addOption(option0);
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-2385);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2385), "yP'8.", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      options0.addOption(option0);
      MockFile mockFile0 = new MockFile("cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2385), "yP'8.", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" ] [ long ");
      helpFormatter0.rtrim("[");
      helpFormatter0.getOptPrefix();
      int int0 = 32;
      StringBuffer stringBuffer0 = new StringBuffer(32);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 32, options0, 32, 32);
      int int1 = 1194;
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'O';
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1194, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1194
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp(74, "arg", "arg", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("The option '", "bK>oE^UR", (Options) null, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "arg", true, "--");
      options2.getOptionGroups();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "13hK!n~#mrg", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(44, "0O=+%5&iH+Ip", " ", options0, "arg", false);
      helpFormatter0.setWidth(1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptPrefix("X}K{Vs:QTdi>Y");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      helpFormatter0.setSyntaxPrefix("X}K{Vs:QTdi>Y");
      helpFormatter0.findWrapPos("", 3, 108);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "has already been selected: '", "[ option: ", (Options) null, "};y}p(>(qzT ,^r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("4ik!`", "--");
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ");
      options0.addOption(option0);
      helpFormatter0.printHelp("4ik!`", options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 510, 5591, "H4RoghZ p]^x}X(");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), (-1), "");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('r');
      helpFormatter1.printWrapped(printWriter0, 1, "usage: ");
      mockPrintWriter0.println('r');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "Jpq[bHM_1 LT:");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setLongOptSeparator("--");
      helpFormatter0.printWrapped(printWriter0, 1, "arg");
      helpFormatter4.rtrim("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(13);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setWidth(44);
      helpFormatter0.setLeftPadding((-265));
      helpFormatter0.getLeftPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      int int0 = 1091;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1091, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "PRwb";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      optionGroup0.toString();
      Option option0 = new Option((String) null, "");
      optionGroup0.addOption(option0);
      String string1 = "H4RoghZ p]^x}X(";
      boolean boolean1 = true;
      options2.getOptionGroups();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("PRwb", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      options2.getOptionGroups();
      Options options3 = options2.addOption("", "H4RoghZ p]^x}X(", true, "arg");
      helpFormatter0.printHelp("PRwb", options2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      helpFormatter0.printHelp("H4RoghZ p]^x}X(", options3);
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 32, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped(printWriter0, 32, 35, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("has already been selected: '", 35, (-1304));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options2 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-976), options2, 97, 97);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(451);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options3 = options2.addOption("arg", false, "s@|7IDi/~hpT");
      helpFormatter0.printOptions(mockPrintWriter1, 1588, options3, 1588, 451);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Jpq[bHM_1 LT:");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 31, "@hhg\"(\"6N G&ko>AxO");
      mockPrintWriter0.println('r');
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "arg");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptSeparator("--");
      helpFormatter2.defaultOptPrefix = "";
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 109, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 75, "9`*%A8X4G#VB97");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6GJ61?t");
      Option option0 = new Option((String) null, false, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "]", options1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "@n880YzAR!dc";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "}kP8ru&tqxPej&k";
      objectArray0[3] = (Object) "@n880YzAR!dc";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        mockPrintWriter1.printf((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3450), "org.apache.commons.cli.ParseException", "R<&[3jYXIs", options0, "Ag/w?$3YhR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "E[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Jpq[bHM_1 LT:");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "@hhg\"(\"6N G&ko>AxO";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "}kP8ru&tqxPej&k";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) "@n880YzAR!dc";
      objectArray0[5] = (Object) "u!_@s9^&<,i(#|pA<6";
      mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "b", "{6mad9=M_[|vi", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      Options options1 = new Options();
      options1.getOption("ST[1|d.A47T8@@V..L");
      helpFormatter0.printHelp(38, "arg", "p$cbMzxk!fP43#3U", options1, "[");
      helpFormatter1.setWidth((-214));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("d;jAI7,sYj{I&ok)=+N", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1715);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(bufferedOutputStream0, false);
      mockPrintWriter3.printf("VPxRM{ !@", (Object[]) null);
      int int0 = (-3354);
      MockPrintWriter mockPrintWriter4 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter4, (-3354), "[~3r:hmf11gTo-i", "P!RBKCum1u` I;", options0, 101, (-155), "VPxRM{ !@", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      MockFile mockFile1 = new MockFile("org.apache.commons.cli.HelpFormatter$1");
      File file0 = MockFile.createTempFile(";b6%f", "org.apache.commons.cli.HelpFormatter$1");
      MockFile mockFile2 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.printf("usage: ", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 7, "Ow", "org.apache.commons.cli.HelpFormatter$1", options0, 7, (-1), "p3WUefl$&yVC@L", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2753));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2753));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("", "2LQ0GaX2C3");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(":IYiO", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options0;
      mockFile1.mkdirs();
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "@hhg\"(\"6N G&ko>AxO";
      objectArray0[7] = (Object) mockFile0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "o^bVk");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "@hhg\"(\"6N G&ko>AxO";
      objectArray0[7] = (Object) mockFile0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      String string0 = "";
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "}kP8ru&tqxPej&k", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("", "G^H6CiUS76!");
      MockFile mockFile2 = new MockFile(mockFile1, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-853), "puOk{:hy=#)I7g}");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      options2.getOptionGroups();
      Options options3 = options2.addOption("", "H4RoghZ p]^x}X(", true, "arg");
      helpFormatter0.printHelp("PRwb", options2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      helpFormatter0.printHelp("H4RoghZ p]^x}X(", options3);
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 32, 3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      String string0 = "qs&0";
      helpFormatter0.printHelp("qs&0", options0);
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) "qs&0";
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) mockFile1;
      mockPrintWriter1.printf("--", objectArray0);
      String string1 = " ";
      int int0 = (-1);
      int int1 = (-3354);
      String string2 = "p3WUefl$&yVC@L";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), " ", "", options1, "]&", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "org.apache.commons.cli.HelpFormatter", "E[", options1, (-4874), 64, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("qs&0", options0);
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) "qs&0";
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) mockFile1;
      mockPrintWriter1.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), 11, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&jw*");
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "", "J\"[~|:pV_Q/Kde", options1, 1891, 3414, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 181;
      helpFormatter0.createPadding(181);
      String string0 = "qWlYDEx]";
      OutputStream outputStream0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 181, 181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, " ", (String) null, options1, (-1), 63, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2428), (-2428), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      String string0 = "H4RoghZ p]^x}X(";
      options2.getOptionGroups();
      options2.addOption("", "H4RoghZ p]^x}X(", true, "arg");
      helpFormatter0.printHelp("PRwb", options2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object2 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) helpFormatter0;
      helpFormatter0.setOptPrefix("@hhg\"(\"6N G&ko>AxO");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, "*D46\"rS9T?bl3%D0ed", options0, 28, 1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("qs&0", options0);
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile1;
      objectArray0[1] = (Object) mockFile1;
      objectArray0[2] = (Object) "qs&0";
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) mockFile1;
      PrintWriter printWriter0 = mockPrintWriter1.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "qs&0", " ", options0, (-1), (-3354), "p3WUefl$&yVC@L", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      Options options2 = options1.addOption("", "-", false, "org.apache.commons.cli.ParseException");
      options2.toString();
      Option option0 = new Option("", "X_c;Svxae-I~6~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3223, ")0~_`2z1mKM!~?", "", (Options) null, "=ixJ<HX)4<i Un7B|_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      Options options2 = options1.addOption("", "-", false, "org.apache.commons.cli.ParseException");
      options2.toString();
      Option option0 = new Option("", "X_c;Svxae-I~6~");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.setRequired(false);
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(">", ">", options4, "");
      helpFormatter0.setSyntaxPrefix("[ Options: [ short java.util.HashMap@0000000006 ] [ long {-=[ option:  -  :: org.apache.commons.cli.ParseException ]} ]");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "9&";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3625, 3625, "9&");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringBuffer1.append("");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(63, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 63
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "h33^G ";
      helpFormatter0.getOptPrefix();
      int int0 = (-2066);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2066));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "@hhg\"(\"6N G&ko>AxO";
      objectArray0[7] = (Object) mockFile0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "o^bVk");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-569));
      helpFormatter0.setLongOptSeparator("e(ns&c-QJP}P");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "eV(C]R[", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2105;
      helpFormatter0.setWidth(2105);
      helpFormatter0.setWidth(2105);
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      int int1 = (-4481);
      helpFormatter0.setLeftPadding((-4481));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setSyntaxPrefix((String) null);
      int int2 = 31;
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(3810);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.print("WAU*@o[P><6t3myA~|$");
      mockPrintWriter0.append('X');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 5, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "R<&[3jYXIs";
      String string1 = null;
      Options options0 = new Options();
      options0.getOptions();
      String string2 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options0, (-106), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 1, "s7jQEW1LjTqX71K`qr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "%J[wtv.8HozmoEW?t";
      helpFormatter0.defaultArgName = "%J[wtv.8HozmoEW?t";
      helpFormatter0.setWidth((-4395));
      helpFormatter0.setNewLine("%J[wtv.8HozmoEW?t");
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultOptPrefix = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown: ");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("A CloneNotSupportedException was thrown: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = 653;
      String string0 = "'";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-569));
      helpFormatter0.setArgName("BmTa!~AD");
      helpFormatter0.rtrim("!TLioqzN(cp[l*w56-5");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("!TLioqzN(cp[l*w56-5");
      String string0 = "usage: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("r|.F~J)f%613%l(?Ip", true, "BmTa!~AD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'r|.F~J)f%613%l(?Ip' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setLongOptSeparator("e(ns&c-QJP}P");
          helpFormatter0.defaultLongOptPrefix = " ] [ long ";
          helpFormatter0.getOptionComparator();
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp(0, " ] [ long ", "", options0, "", true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Object object0 = new Object();
      stringBuffer0.append(object0);
      String string0 = "[ARG...]";
      MockFile mockFile0 = new MockFile("", " ");
      String string1 = "line.separator";
      MockFile mockFile1 = new MockFile(mockFile0, "line.separator");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "[ARG...]", (File) mockFile1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ option: ", false, " ");
      helpFormatter0.printHelp("[ARG...]", options1);
      StringWriter stringWriter0 = new StringWriter(3);
      int int0 = 511;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) " ", 74, 511);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-734);
      helpFormatter0.setLongOptSeparator("):{n06F");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-734), "):{n06F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      options2.addOption("arg", "arg", true, " ]");
      String string0 = "";
      String string1 = "H4RoghZ p]^x}X(";
      options2.getOptionGroups();
      options2.addOption("", "H4RoghZ p]^x}X(", true, "arg");
      helpFormatter0.printHelp("PRwb", options2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      options2.addOption("arg", true, "org.apache.commons.cli.HelpFormatter");
      options2.getOptionGroups();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("PRwb", options2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "RqPt<8b\"z|/[F", "", options0, "#<6~5$Zck`F_VRv");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('\'');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) stringWriter1;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 12, "-", "Fa%&KpnLTwe3:", options0, 78, 78, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp("qs&0", options0);
      helpFormatter0.findWrapPos("qs&0", (-1), 9);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Util");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("Cannot add value, list full.", "", options1, "-~P(HOG.vt$(p", false);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Jpq[bHM_1 LT:");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 31, "@hhg\"(\"6N G&ko>AxO");
      mockPrintWriter0.println('r');
      mockPrintWriter0.append('A');
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 646, "");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("Y'^\"pG]!");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 181;
      helpFormatter0.createPadding(181);
      String string0 = "qWlYDEx]";
      Options options0 = null;
      String string1 = "Fw(g^&/;9$R";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(181, "                                                                                                                                                                                     ", "qWlYDEx]", (Options) null, "Fw(g^&/;9$R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, " ", "arg", options0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "", options0, " ", true);
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1198), "\n", "YX!O(OD", options0, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "@hhg\"(\"6N G&ko>AxO";
      MockFile mockFile0 = new MockFile("--", "@hhg\"(\"6N G&ko>AxO");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Jpq[bHM_1 LT:");
      char char0 = 'r';
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setSyntaxPrefix("U~7ep");
      helpFormatter0.createPadding(1300);
      helpFormatter0.defaultArgName = "BYZ~W_:#t'a`3J~j!$/";
      helpFormatter0.setDescPadding(1300);
      helpFormatter0.findWrapPos("BYZ~W_:#t'a`3J~j!$/", 36, 36);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("Cannot add value, list full.", "", options1, "-~P(HOG.vt$(p", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "PRwb", true, "\n");
      String string0 = "H4RoghZ p]^x}X(";
      options2.addOption("", "H4RoghZ p]^x}X(", false, "arg");
      helpFormatter0.printHelp("PRwb", options2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("H4RoghZ p]^x}X(");
      String string1 = "Y~5@}4MPzU";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, "Y~5@}4MPzU");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Y~5@}4MPzU
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      String string0 = "";
      Options options2 = options1.addOption("", "", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options2, (-1315), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "7u3V$$|h1s';?f3@3Y\"";
      helpFormatter0.createPadding(783);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "0_Ed<V<m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 32;
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      int int1 = (-976);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, (String) null, "", options1, (-976), 2938, "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println('q');
      PrintWriter printWriter0 = mockPrintWriter0.append('&');
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(74);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "U8P*ETAfV`H0Sg;l>");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(44);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "oJ{4Xz");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 44, options0, 44, 1880);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "R<&[3jYXIs", (String) null, options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.setWidth(10);
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2105);
      helpFormatter0.setWidth(2105);
      int int0 = 0;
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLeftPadding((-4481));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "$A@s9%$>T\"3jz`R!$1", (Options) null, "$A@s9%$>T\"3jz`R!$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1912;
      String string0 = "nP~;0sam6bge8";
      String string1 = "y\"EGY_09PTg/\\KD&7PO";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "nP~;0sam6bge8", true, "nQl5<wZ?}$7G+qpm}");
      options1.getMatchingOptions("");
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.OptionGroup", false, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionGroup' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
