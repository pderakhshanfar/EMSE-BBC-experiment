/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:08:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-775);
      helpFormatter0.setLeftPadding((-775));
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FRB'!^OO~; ~.0 ", "FRB'!^OO~; ~.0 ", (Options) null, "FRB'!^OO~; ~.0 ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      StringBuffer stringBuffer0 = new StringBuffer(13);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5160, 13, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 13, (-2839), "9L.+B;/S;G9A0!0*");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "arg");
      helpFormatter0.printHelp("d\"#Y^ q39(pkM7l", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-145), options1, 79, 77);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      String string0 = "A CloneNotSupportedException was thrown: ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultLeftPad = (-48);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "arg", options1, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", false, "--");
      Object object0 = new Object();
      Object object1 = new Object();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", " | ", options2, "-");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-3968));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8dS\"#^ q39(*kM7l", (String) null, options0, "'$bkVYO6!kFih]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("J8BzS_zBkZ", " ", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.defaultDescPad = (-4379);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "?iGx+0v8HDh{}4", "A CloneNotSupportedException was thrown: ", (Options) null, "?iGx+0v8HDh{}4");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, "uUT;Wud&I|8)", true, "mF");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("uUT;Wud&I|8)", options0, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("J8BzS_zBkZ", " ", false, (String) null);
      optionGroup0.addOption(option0);
      options0.addOption((String) null, "-", false, "--");
      helpFormatter0.printHelp("arg", options0, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultLeftPad = (-1022);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "\n", "--", (Options) null, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1393, "-", ">", options1, (-3102), 74, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("V", (String) null, false, "arg");
      Options options2 = options1.addOption((String) null, "gpfX4^pY", true, (String) null);
      helpFormatter2.printHelp("--", "usage: ", options2, "arg");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("EX", "arg", true, "]");
      options2.addOption("arg", "", true, "usage: ");
      helpFormatter0.printHelp("]", options0, false);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(105, "\"", "]3av", options0, "");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "");
      int int0 = 25;
      String string0 = "zy5em(L0rafadhL~|";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 22, options1, 25, 544);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 55, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 3;
      String string0 = ".4`P/~:!7V_";
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('F');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-75), ".4`P/~:!7V_", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8dS\"#^ q39(*kM7l", options0, true);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 1, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2066, 3, "29Ju!(q@Ix");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+c-jc)");
      helpFormatter0.getOptionComparator();
      int int0 = 9;
      String string0 = "";
      helpFormatter0.defaultWidth = 9;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "j*r`SP;aC", " ", (Options) null, 43, 9, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 28, 28);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      helpFormatter0.printWrapped(printWriter0, (-1), " ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultArgName = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ".4`P/~:!7V_");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.findWrapPos("--", 0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("aOXsYs/KQdCyT", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 7, options0, 7, 7);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "\n");
      options1.getOptionGroups();
      helpFormatter0.printHelp("8dS\"#^ q39(*kM7l", options1, true);
      helpFormatter0.setNewLine("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 2210, options1, 2210, 647);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 645, 3973, "cmdLineSyntax not provided");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringBuffer1;
      objectArray0[1] = (Object) "Me";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) stringWriter0;
      mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 778, "cmdLineSyntax not provided", "", options0, 10, 778, "", false);
      String string0 = "fF5kAn~)PQB";
      // Undeclared exception!
      try { 
        options0.addOption("cmdLineSyntax not provided", "cmdLineSyntax not provided", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "\n");
      helpFormatter0.printHelp("8dS\"#^ q39(*kM7l", options1, true);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.printHelp(647, "[0d'{{U;CqZ})$", (String) null, options0, "`/6Ki");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      helpFormatter0.setLeftPadding(0);
      stringWriter1.close();
      stringWriter1.close();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "QS7fD|";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 19, 19);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.append('i');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 19, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setLongOptPrefix("*c>dK%#_:Aesx\"F{:qf");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1862), "QWJ.!jNX:", "", (Options) null, 37, 37, "lT%LyJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 647, 647, "fOU{ReqmEw,");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("fOU{ReqmEw,", options1, false);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "8>Iw8/vU$b_RIHH4h(O", options1, "'eM#R", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[26];
      objectArray0[0] = (Object) "\n";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "\n";
      helpFormatter0.printOptions(mockPrintWriter0, 998, options0, 1658, 998);
      objectArray0[6] = (Object) ">";
      helpFormatter0.printHelp("Zt2tR\"NUFj7I`Dw", "arg", options0, (String) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
      EvoSuiteFile evoSuiteFile0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, " | ");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.flush();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 246, "");
      helpFormatter0.getNewLine();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N30");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 246, "\n");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1658, "\n", "\n", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 3F";
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.printf("\n", (Object[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("arg", true, "-");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "";
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) options0;
      Object object3 = new Object();
      objectArray0[5] = object3;
      objectArray0[6] = (Object) " 3F";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "MO\"e", options0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" 3F", 63, (-756));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setWidth(1658);
      helpFormatter0.setNewLine("fOU{ReqmEw,");
      helpFormatter0.setWidth(461);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-3453);
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) null, 1, "usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", (Object[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("arg", true, "arg");
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = 'k';
      charArray0[2] = 'p';
      charArray0[3] = '|';
      charArray0[4] = '{';
      charArray0[5] = 'U';
      printWriter0.print(charArray0);
      helpFormatter0.printHelp(printWriter0, 44, "   ", "c;({@$", options0, 499, 74, (String) null, true);
      helpFormatter0.printHelp(44, "c;({@$", "Cannot add value, list full.", options0, "", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CANADA;
      String string0 = "ynn9Amc";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2976), " ", "ZS*_yCZS3H>{o_d", options0, 40, 10, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.print(1L);
      helpFormatter0.setLeftPadding(0);
      stringWriter1.close();
      int int0 = 0;
      stringWriter1.close();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "|$^c%x?pa/Ur", options0, "1p2TB ;2DKJtPKp9hF", false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-552), "!02,>44 h'<o>](Hbu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-290), ".MpC6g2n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1658, 1658, "r[:;7TJ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "line.separator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("--", "r[:;7TJ", options0, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "usage: ", options1, "--", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(37, "arg", "usage: ", (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printWrapped(printWriter0, 11, " ");
      String string0 = "h={0m{_T";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("h={0m{_T", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      helpFormatter0.setWidth(1658);
      helpFormatter0.setNewLine("fOU{ReqmEw,");
      helpFormatter0.setWidth(461);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-3453);
      String string0 = "";
      String string1 = "' was specified but an option from this group ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-262), "XgK4SEOM0R\")Q5", "'", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 5, "%2*I}#w/{>CnhR}sOg`", "eW}hEf!", options0, 0, 0, "%2*I}#w/{>CnhR}sOg`");
      helpFormatter0.setWidth(0);
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("%2*I}#w/{>CnhR}sOg`");
      helpFormatter0.setLongOptPrefix("%2*I}#w/{>CnhR}sOg`");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("mU,LZ(2Q8y^F", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2260);
      helpFormatter0.setWidth(30);
      helpFormatter0.setNewLine("UH6aC'sK=P ");
      helpFormatter0.setWidth(2260);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator(",=r?d");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "arg", (Options) null, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.print(1599L);
      helpFormatter0.setLeftPadding(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      StringWriter stringWriter2 = stringWriter1.append('\'');
      stringWriter2.close();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-1374), "org.apache.commons.cli.Option");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "aI8UX=BdoZ";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "\n", "", (Options) null, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "aI8UX=BdoZ";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("zyR2=S&u[LW2Y ", " ] [ long ", (Options) null, " ] [ long ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.setSyntaxPrefix("arg");
      helpFormatter1.getArgName();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter2.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "<", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setSyntaxPrefix(" 3F");
      helpFormatter0.getArgName();
      Comparator<Object> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Options options1 = new Options();
      String string0 = "V";
      // Undeclared exception!
      try { 
        options0.addOption("\n", " ] [ long ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "aI8UX=BdoZ";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      MockFile mockFile0 = new MockFile("M3pkQyu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.apache.commons.cli.Option";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.OptionValidator", objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1601), (-1601), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1362), "z", "fOU{ReqmEw,", (Options) null, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.setSyntaxPrefix(" ] [ long ");
      helpFormatter1.getArgName();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("V", (String) null, false, "arg");
      helpFormatter1.rtrim("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "\n", "", options1, 3, 9, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getArgName();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        options0.addOption("-", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.printf("\n", (Object[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp((-1), " 3F", (String) null, options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", false, "");
      helpFormatter0.printHelp("_G.{5wQdwnu,Rx&", options1, false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.getArgName();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("V", (String) null, false, "arg");
      helpFormatter1.printHelp("aOXsYs/KQdCyT", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "\n", "", options1, 3, 74, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter2.setSyntaxPrefix(" ] [ long ");
      helpFormatter1.getArgName();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("V", (String) null, false, "arg");
      helpFormatter1.printHelp("aOXsYs/KQdCyT", options1, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "\n", "", options1, 3, 9, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1658, 1658, "r[:;7TJ");
      Options options0 = new Options();
      String string0 = "line.separator";
      Option option0 = new Option("arg", "arg", true, "line.separator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("r[:;7TJ", options1, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.printf("\n", (Object[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("Illegal option name '", "[yXu_{Ttt", options1, " 3F");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1658;
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1658, 1658, "r[:;7TJ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 2604, 3, "$z3VTq6mku5,nFlK^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1488);
      helpFormatter0.setNewLine(">");
      helpFormatter1.setWidth(0);
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter1.setLongOptPrefix(" | ");
      helpFormatter0.setLongOptPrefix("\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "usage: ", (Options) null, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.print(1L);
      helpFormatter0.setLeftPadding(0);
      stringWriter1.close();
      mockPrintWriter0.println((float) 74);
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "[ Options: [ short ", options0, "[ Options: [ short ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "E";
      int int0 = 6;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "E", (Options) null, 6, 21, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringBuffer0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "\n");
      Option option0 = new Option("V", false, "8.n%wtpI}-l=");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", false, "");
      helpFormatter0.printUsage(printWriter0, 10, "org.apache.commons.cli.AlreadySelectedException", options4);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("J8BzS_zBkZ", "]", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&_L7_^gnS", false);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) ">";
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) ">";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&_L7_^gnS", objectArray0);
      Options options1 = options0.addOption("", (String) null, false, "p2{+fn4dfv!j57;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "\n", "org.apache.commons.cli.Options", options1, 74, 74, "   ", true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("usage: ");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.setSyntaxPrefix(" ] [ long ");
      helpFormatter1.getArgName();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("V", (String) null, false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "\n", "", options1, 3, 9, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" 3F");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", (Object[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 44, "   ", "c;({@$", options0, 499, (-1), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("]UMuk\"VKJ=XWgerY");
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      String string0 = "--";
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1714, "--");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 5, "%2*I}#w/{>CnhR}sOg`", "eW}hEf!", options0, 0, 0, "%2*I}#w/{>CnhR}sOg`");
      helpFormatter0.setWidth(0);
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth((-2806));
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptPrefix("$;~27L)G`2");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2806), "t z,9T;~vLjs");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&_L7_^gnS", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp("8dS\"#^ qo9(*kM7ll", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "\n");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("`W", 0, 0);
      helpFormatter0.setLongOptPrefix("`W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 13, (-2714), "--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "(f*0Dq pK|;!R\".F ]2", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      helpFormatter0.setWidth(1658);
      helpFormatter0.setNewLine("fOU{ReqmEw,");
      helpFormatter0.setWidth(461);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-3453), "", "' was specified but an option from this group ", (Options) null, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&_L7_^gnS", false);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "\n";
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) ">";
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) ">";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&_L7_^gnS", objectArray0);
      helpFormatter0.printHelp(printWriter0, 843, "ynn9Amc", (String) null, options0, 1861, 769, "S\":OPF", true);
      helpFormatter0.printHelp(">", ">", options0, "ynn9Amc");
      helpFormatter0.printHelp("<", options0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("]UMuk\"VKJ=XWgerY");
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.defaultLongOptPrefix = "JD`=<Is1,4%s~^,Im";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      stringWriter0.write(5254);
      mockPrintWriter0.print(1.0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3323, " ", "8!4 #)m>G(a^Mh~", options0, (-1169), 74, "[ARG...]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "aI8UX=BdoZ";
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "\n", "", (Options) null, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.append('s');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 108, ".bJ wMG]W_");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((String) null, (String) null, options0, "[=vH92[L+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      helpFormatter0.renderWrappedText(stringBuffer0, 647, 1658, "fOU{ReqmEw,");
      Options options0 = new Options();
      helpFormatter0.printHelp("{?}zD-}R'QmwHZF", "", options0, "{?}zD-}R'QmwHZF");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 647, 647, "fOU{ReqmEw,");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "8dS\"#^ qo9(*kM7ll");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsoluteFile();
      mockFile0.setReadOnly();
      mockFile0.setWritable(false, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      mockFile0.delete();
      int int0 = 0;
      mockPrintWriter0.flush();
      String string0 = "Zg$#MRA";
      helpFormatter0.printWrapped(printWriter0, 108, 0, "Zg$#MRA");
      helpFormatter0.rtrim("Zg$#MRA");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1096, '4');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&_L7_^gnS", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      mockPrintWriter1.print((-1074.625893));
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"=lX.`8~>m@P7u4l");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.println((long) (-1));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-1), (String) null, "M", options0, 1, (-1865), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("}6F");
      mockFile0.setExecutable(false, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.print(0.0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 8, "", "", options0, 64, 64, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      mockPrintWriter0.close();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 366, "", "org.apache.commons.cli.HelpFormatter$1", options0, 31, 366, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer("/QiwrS1f=q[h6d");
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = ']';
      charArray0[2] = 'u';
      charArray0[3] = 'K';
      charArray0[4] = 'T';
      charArray0[5] = 'O';
      charArray0[6] = 'G';
      charArray0[7] = 'a';
      charArray0[8] = 'o';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-456);
      helpFormatter0.setDescPadding((-456));
      String string0 = "";
      String string1 = "3QwvI";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.AlreadySelectedException", "", true, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&_L7_^gnS", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      mockPrintWriter1.print((-1074.625893));
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "&_L7_^gnS", (String) null, options0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getWidth();
      String string0 = ", ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("#", ", ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // , 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-1865);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1865));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " 3F";
      helpFormatter0.setLongOptPrefix(" 3F");
      String string1 = ">em%-1}]S.TDO3";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1861, " 3F", (String) null, options0, (-1), 31, ">", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding(1168);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "JD`=<Is1,4%s~^,Im";
      helpFormatter0.setLongOptSeparator("]UMuk\"VKJ=XWgerY");
      helpFormatter0.setOptPrefix("NO_ARGS_ALLOWED");
      helpFormatter0.defaultLongOptPrefix = "JD`=<Is1,4%s~^,Im";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("[ARG...]");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getArgName();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 1620;
      String string1 = "^$Z4y\".\\";
      Options options0 = new Options();
      String string2 = "[(3gNz#fV";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "[(3gNz#fV", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      String string0 = "GT*567pv_aUj.g/";
      helpFormatter0.defaultNewLine = "GT*567pv_aUj.g/";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1355, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultArgName = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "1b|\\Hb99p";
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      String string1 = "%AEC>3FETObtJ$Q]";
      // Undeclared exception!
      try { 
        options0.addOption("%AEC>3FETObtJ$Q]", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%AEC>3FETObtJ$Q]' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "d;:yqx7jzF/bz 3i";
      String string0 = "S+";
      helpFormatter0.setLongOptPrefix("S+");
      helpFormatter0.createPadding(3);
      String string1 = "-";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('s');
      helpFormatter0.printWrapped(printWriter0, (-1), "");
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 28, 28);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, (-1), (-1557));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 44;
      helpFormatter0.defaultWidth = 44;
      helpFormatter0.setWidth(44);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, 398.05737F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3013));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 31, options0, (-1700), 951);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          int int0 = 0;
          StringWriter stringWriter0 = new StringWriter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
          MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, "%2*I}#w/{>CnhR}sOg`", "/NX/ODVMf&}", options0, 0, 0, "/NX/ODVMf&}", true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.print(1L);
      helpFormatter0.setLeftPadding(0);
      stringWriter1.close();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1658);
      helpFormatter0.renderWrappedText(stringBuffer0, 647, 1658, "fOU{ReqmEw,");
      Options options0 = new Options();
      helpFormatter0.printHelp("fOU{ReqmEw,", "--", options0, "--");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, (String) null);
      Options options2 = options1.addOption("KB6tc", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "CwwDz", options3, "XT^WLI&62]`Y", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('n');
      helpFormatter0.printWrapped(printWriter0, 2080, "");
      assertEquals(13, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 32;
      helpFormatter0.getLongOptSeparator();
      int int0 = (-2);
      String string0 = "h]ac1;be";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix(".5");
      Option option0 = null;
      try {
        option0 = new Option("cmdLineSyntax not provided", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'cmdLineSyntax not provided' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "H#OGk\"Bk!)oC";
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("H#OGk\"Bk!)oC");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "");
      int int1 = 624;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("H#OGk\"Bk!)oC", "*j{9b[", false, "-G$/o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'H#OGk\"Bk!)oC' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-251), (-413), ".o!Wh/vQH");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "f.%W";
      StringBuffer stringBuffer0 = new StringBuffer("f.%W");
      int int0 = 32;
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(32);
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("", objectArray0);
      stringBuffer0.append(stringBuffer1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      stringBuffer0.setLength(74);
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "f.%W");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.getAbsoluteFile();
      mockFile0.setReadOnly();
      mockFile0.setWritable(false, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      mockFile0.delete();
      int int0 = 0;
      String string0 = "Zg$#MRA";
      helpFormatter0.printWrapped(printWriter0, 108, 0, "Zg$#MRA");
      helpFormatter0.rtrim("Zg$#MRA");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1096, '4');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "-");
      String string0 = "B";
      MockFile mockFile0 = new MockFile(file0, "B");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
