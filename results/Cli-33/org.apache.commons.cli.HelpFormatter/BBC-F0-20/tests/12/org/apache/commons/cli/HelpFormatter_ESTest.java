/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:10:48 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "has already been selected: '";
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "arg", " ", (Options) null, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg", 0, 1);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, "[ARG...]");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options2, 23, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "v51.(;", "v51.(;", options0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.rtrim("\n");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2391);
      helpFormatter0.defaultLeftPad = (-2391);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(103);
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        mockPrintWriter0.printf(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      PrintStream printStream0 = mockPrintStream0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 383, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      options0.helpOptions();
      options0.addOption(option0);
      option0.setArgName("");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      option0.setArgs(74);
      helpFormatter0.rtrim("`&i4+[L'>nBNb0)7");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 77, "DRdCYk{,dMSugJ");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption(option0);
      options1.getMatchingOptions("`&i4+[L'>nBNb0)7");
      option0.setArgName("");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      option0.setArgs(74);
      helpFormatter0.printHelp(840, "`&i4+[L'>nBNb0)7", "E\"\"", options2, "^scqKm?QQ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-556), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2698);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " | ";
      objectArray0[1] = (Object) mockPrintWriter2;
      mockPrintWriter2.printf(locale1, " | ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-2698), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("$6X", "AX^*");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("\n");
      options2.getMatchingOptions("usage: ");
      option0.setArgName("#<.i.4$_J");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      option0.setArgs(3);
      helpFormatter1.printHelp(690, "AX^*", "AX^*", options1, " ", false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, " ] [ long ", options1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "N7gj!T1EBd-@";
      Option option0 = new Option((String) null, "N7gj!T1EBd-@");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      option0.setArgs(3);
      option0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[ Options: [ short ", "org.apache.commons.cli.HelpFormatter", options0, "N7gj!T1EBd-@", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "+p7PC7f", "+p7PC7f", options0, 74, 74, (String) null, true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "LQ|PAS'OT>R";
      String string1 = "The option '";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", ", ", (Options) null, "The option '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2658, "hpO3mJ]*aEt", "Mz?q8`x", options0, "Mz?q8`x");
      helpFormatter0.renderOptions((StringBuffer) null, 2658, options0, 2658, 2658);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.createPadding(8);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setNewLine("        ");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("", (-2), (-2));
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(2502, "nO\",bVfOo@t", "", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 3042);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-178), (-178), ":T{PA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)2;
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-100);
      byte byte1 = (byte) (-68);
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 8, (-1572));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setDescPadding((-2));
      options0.addOption((String) null, "-", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(36, " ", (String) null, options1, "AX^*", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('(');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-1), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printHelp(3, "&[A!RJx?M(Qe7:Gg2D", "&[A!RJx?M(Qe7:Gg2D", options0, "&[A!RJx?M(Qe7:Gg2D", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) options0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 14, (String) null, "[ Options: [ short ", options0, 74, (-586), "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 37, "m(68*", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 0;
      String string0 = "?x}01[61PJF;aS-M";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?x}01[61PJF;aS-M", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1690, "\n", "org.apache.commons.cli.HelpFormatter$1", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 417, 417, "line.separator");
      helpFormatter0.renderOptions(stringBuffer1, 126, options0, 3, 3);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(74, "~bR[a~1CQ", "org.apache.commons.cli.HelpFormatter$1", options1, "~bR[a~1CQ", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "[ option: ", "", options0, 1, 3, "", true);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("S");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 122, " ]", (String) null, options0, 363, (-2154), "[ARG...]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 74, "[ option: ", "", options1, (-12), (-12), "`", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) pipedOutputStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-21), "^Es]Yc+zNjMC0", "[ option: ", options0, 3, 34, "9Y!O^Lt", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(printWriter0, 74, "[ option: ", "", options1, 34, 34, "`", false);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "LN", options1, "I-%HSZ-xwe/\"-_4:");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      int int0 = 1;
      helpFormatter0.findWrapPos("z0@D|g$g@O'^ecsC<xj", 1, 1);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "--", options1, 74, 1119, "org.apache.commons.cli.HelpFormatter$1", true);
      helpFormatter2.printWrapped(printWriter0, 32, 1, "--");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 32;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, ";?M`|T\u0007Q}e]R");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("y.=mU,?Re)_");
      option0.setArgs(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3291, "   ", "~@\"~4rfhT_p^,9\"^8", options1, (-2), 6, "   ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(printWriter0, 74, "[ option: ", "\"", options1, 34, 34, "`", false);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "LN5", options1, "I-%HSZ-xwe/\"-_4:");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      options0.getMatchingOptions("");
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, "", "", options1, 428, (-2137), "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(r";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 74;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.print((-1L));
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "(r", options1);
      helpFormatter0.defaultLongOptPrefix = "(r";
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      Option option1 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option1);
      options1.getMatchingOptions("-");
      option0.setArgs((-1));
      Options options2 = options1.addOption(option1);
      helpFormatter0.printHelp((-1), "y.=mU,?Re)_", "~H@r$7O", options2, ">", true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          HelpFormatter helpFormatter1 = new HelpFormatter();
          options0.addOption("", false, "--");
          PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
          Locale locale0 = Locale.TRADITIONAL_CHINESE;
          options0.addOption("arg", false, "org.apache.commons.cli.OptionGroup");
          HelpFormatter helpFormatter2 = new HelpFormatter();
          // Undeclared exception!
          helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "mMxe.>Nz<O\"/4d~WT", options0);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultArgName = "V HL~1z$6ch996kDB";
      File file0 = MockFile.createTempFile("V HL~1z$6ch996kDB", "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-3384), (Options) null, 1349, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.toString();
      Option option0 = new Option("", "arg", false, "{=k/");
      options0.getOptionGroups();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("cXF!!");
      options0.getOptions();
      helpFormatter0.printHelp(3, "\n", "\n", options0, "\n", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("cXF!!", options0, false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "{aO20";
      options0.addOption("", false, "--");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "-", "", options0, 3, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "4ihLPoMu{";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "4ihLPoMu{";
      objectArray0[5] = (Object) null;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) mockPrintWriter0;
      mockPrintWriter0.flush();
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "dB", objectArray0);
      helpFormatter0.printUsage(printWriter0, 32, "\"m|u0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(8, "4ihLPoMu{", "x9QX1W;-B/6gIIm!", (Options) null, "9PdZ=?hPqX~?DOTM", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "aV";
      helpFormatter0.setNewLine("aV");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 166, 28);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(166);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = 275;
      String string0 = "";
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 275, "X.!w<+Z?J%Bb~/", options1);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "aV");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 4352;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "\n", "[ARG...]", options0, "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 166, 28);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(166);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 275, "X.!w<+Z?J%Bb~/", options1);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1), "");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 275, "--");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", (String) null, false, "");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options4 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "usage: ", "arg", options4, " ", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      File file0 = MockFile.createTempFile("_GeA%I#oI71=G?N]", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.println((-3569L));
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 90, "--", "4cx$0CbT<_;", options0, 2206, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, (String) null, "{dh$c? >+{FlV=z|", options0, "D`kAW5qG0s]C2ExJ8h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "@f0>1j.6a", "i'.:O`9dj2=Bm2$", options1, (-1), 37, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.setSyntaxPrefix("6WB_Bh3\"_,L'?>MbQ2");
      helpFormatter0.createPadding(483);
      helpFormatter0.rtrim("");
      helpFormatter0.defaultWidth = 483;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 483, 483, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption(option0);
      option0.toString();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "usage: ", options1, " | ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "\n", "[ARG...]", options0, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "arg";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "   ", "", options0, 3, 3, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("--");
      helpFormatter1.printHelp("E91oaQ", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", "usage: ", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "--", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", "P8Tc:KXxf97", options1, "usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("to,hb3\"t|5", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      option0.setArgs(74);
      helpFormatter2.printHelp(2024, "-", "-", options1, "-");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-151), "arg", "agh", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("arg", "--", options1, "--", false);
      helpFormatter1.findWrapPos("", (-431), 1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("$6X", "AX^*");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.getMatchingOptions("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      option0.setArgs(3);
      helpFormatter1.printHelp(690, "AX^*", "AX^*", options1, " ", false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("zi<5DPtaZ");
      options0.hasOption("zi<5DPtaZ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "x}v*X+lbElWeJQTEI~", options0, "x}v*X+lbElWeJQTEI~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, (String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      option0.setArgs(74);
      helpFormatter0.printHelp((-1), "tm", "", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("v5B(2");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "9$lv?@>)Vv", "v5B(2", (Options) null, "9$lv?@>)Vv");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2);
      String string0 = "AX^*";
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "", "", options0, 166, 0, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "x}v*X+lbElWeJQTEI~", options0, "x}v*X+lbElWeJQTEI~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "AX^*";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "", options0, 166, 0, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("v51.(;");
      int int0 = 1;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("v51.(;");
      helpFormatter0.createPadding(118);
      helpFormatter0.setLeftPadding(1);
      String string0 = "";
      int int1 = 5;
      // Undeclared exception!
      try { 
        options0.addOption("]", "N g7", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("v51.(;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1879), (String) null, "", (Options) null, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "usage: ", false, "");
      helpFormatter1.printHelp(74, "usage: ", "o&co", options2, (String) null, true);
      String string0 = "{NKfyD~As";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "{NKfyD~As");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {NKfyD~As
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(3, "-", "arg", options0, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, 102, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      Options options1 = options0.addOption(option0);
      options0.addOption((String) null, "-", false, " ");
      helpFormatter0.printHelp(36, " ", (String) null, options1, "AX^*", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(")F3bi#d?E+B!dg_TM", "[ARG...]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [ARG...]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "-", "s%pS}oJ'}Bz7a", (Options) null, "j^fO~\"AwamIknq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("v51.(;");
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp(3, "v51.(;", "v51.(;", options0, "v51.(;", true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "}euiL2H:A;.<");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.Option", " ", options1, "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3219), (-3219), "TU.<JVhK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, (Options) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      String string0 = "org.apache.commons.cliOptionGroup";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-93), "usage: ", "usage: ", (Options) null, (-93), 1, "org.apache.commons.cliOptionGroup");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.setSyntaxPrefix("v51.(;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = (-1216);
      String string0 = "[";
      String string1 = "EWL]n8(sanN\\ut X\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), string1, "[", options1, (-1216), 1, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(67, "9$lv?@>)Vv", "has already been selected: '", (Options) null, "9$lv?@>)Vv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "? 'Cz");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 3, (Options) null, 1, (-509));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-93), "9$lv?@>)Vv", "9$lv?@>)Vv", (Options) null, "9$lv?@>)Vv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setLongOptSeparator("H^F7-");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("qJ%YXJ^GzL~");
      Options options0 = new Options();
      Option option0 = new Option("arg", "-", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "--", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "qJ%YXJ^GzL~", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1928);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      mockPrintWriter0.append('%');
      String string0 = "c0R`p-:[M@dt\\++Jq=d";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      mockPrintWriter0.append((CharSequence) "arg");
      String string1 = "T;U2;o.v<-h}KiRb^e";
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", "dOcTR^X", true, "T;U2;o.v<-h}KiRb^e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setDescPadding(1925);
      helpFormatter0.getArgName();
      String string0 = "FJw";
      String string1 = "9!'br}^0F9rmk__tP";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("$ONGqe3UZ8,*p", true, "9!'br}^0F9rmk__tP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$ONGqe3UZ8,*p' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((File) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("", "--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 699, "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-406));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      int int0 = 0;
      String string0 = "";
      String string1 = " :: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.hasOption("--");
      // Undeclared exception!
      try { 
        options1.addOption("zPPhwu3%kji87x/_", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'zPPhwu3%kji87x/_' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      StringWriter stringWriter0 = new StringWriter(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      String string0 = "";
      mockPrintWriter0.print(false);
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "", false, "usage: ");
      Options options2 = options1.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options2.hasOption("`gPB^u+}|~Z8j?Vg");
      Option option0 = new Option("", "", false, "`gPB^u+}|~Z8j?Vg");
      Options options4 = options3.addOption(option0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 9, options4, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("''b#Sc^@{arH->");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "''b#Sc^@{arH->";
      PrintStream printStream0 = mockPrintStream0.format("=tyb\"$S77\"(67", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "''b#Sc^@{arH->", "wddUjj#50c", options0, 1, (-2533), "!|o,c6n");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("JY(_S[S2YP&`ZW}8jW", 1102, 1102);
      helpFormatter0.setDescPadding(1102);
      helpFormatter0.setSyntaxPrefix("JY(_S[S2YP&`ZW}8jW");
      String string0 = "W#Atmj5 :|%Ip;tk";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "LA1Z::4lW[RY";
      String string2 = ">";
      Option option0 = null;
      try {
        option0 = new Option("LA1Z::4lW[RY", "JY(_S[S2YP&`ZW}8jW", true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'LA1Z::4lW[RY' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 166, 0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.createPadding(166);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 275, "X.!w<+Z?J%Bb~/", options1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "has already been selected: '";
      helpFormatter0.setNewLine("has already been selected: '");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLeftPadding();
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "   ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "AX^*", "$c /&b", options1, "   ", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-200), (-200), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.println('[');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-102), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("rf`+@Q[UzrV+E", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'rf`+@Q[UzrV+E' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
