/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 08:46:26 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter1.defaultSyntaxPrefix = "' contains an illegal character : '";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 3, 34);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 24, 24, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("arg", false, "-");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("usage: ", options0, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("jgouOqTB0h!1a|+p3k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      boolean boolean0 = true;
      Options options0 = new Options();
      String string0 = "&";
      Option option0 = new Option("arg", "&");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "!4cMM", "4eC{0bT[d7# ", options1, "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-542), (-542), "c}$I(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      int int0 = (-2940);
      helpFormatter0.defaultLeftPad = (-2940);
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "ly:W<!|~Z'", "", options0, "ly:W<!|~Z'", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "O/I0sn");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("~wPetwWj", options1, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "X5|!", options0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      options0.addOption("arg", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.Util");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, (-710), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setDescPadding((-922));
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "c/TW\"$#\"", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-3131);
      Options options1 = options0.addOption((String) null, true, "usage: ");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultDescPad = (-1759);
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "}", options0, "}");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1517, "arg", (String) null, options0, 1, 26, ",bGS!c#=.`P?N'3x!N", true);
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-230);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(74);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("Xo]xp", 32, 74);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption((String) null, true, "usage: ");
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 14, 14);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("");
      helpFormatter0.printHelp(3, "ly:W<!|~Z'", "", options0, "ly:W<!|~Z'", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.renderOptions((StringBuffer) null, 666, options1, 1, 117);
      int int0 = (-3749);
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-2), (-3749), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.print(0L);
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, (String) null, (String) null, options0, 2, 2, "!e", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte) (-90);
      mockFileOutputStream0.write(byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("--");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "*ZGo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      options0.addOption("arg", false, "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "*ZGo", options0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.getOption("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(3, "ly:W<!|~Z'", "", options0, "ly:W<!|~Z'", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp("arg", options1, true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2555, "org.apache.commons.cli.Option", options0);
      helpFormatter0.setLeftPadding(2555);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.Option", "org.apache.commons.cli.AlreadySelectedException", options0, 10, 2228, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2555, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "ly:W<!|~Z'";
      options0.getOption("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "";
      Object object0 = new Object();
      objectArray0[7] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "ly:W<!|~Z'", "", options0, (-2), (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption("");
      helpFormatter0.printHelp(1, "ly:W<!|~Z'", "ly:W<!|~Z'", options1, "n 1YgBfp~");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 19, "}L[(Y", "pUu?Z`nEy]CF($'2", options0, 19, 19, "]");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("\n");
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1386), "--", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("arg", "arg");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = new Locale("arg", "");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "ol@vI)bjn>gya-8", "", options0, 1, 1806, "iJg_M *>P3U$#I3", false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 74, "   ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1189), "'", "", options0, (-1189), (-1189), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("jS3c4VXn");
      Options options0 = new Options();
      Option option0 = new Option("H", "B1Ey-Hsl/#MY,C&8l", false, "9t4J6J,");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLeftPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[cb?ui$");
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) option0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "_3.]3':FB3'{";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) "B1Ey-Hsl/#MY,C&8l";
      objectArray0[6] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("_3.]3':FB3'{", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", (Options) null, "Lj|jQO;SX[0=7v9+-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = (-2237);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "N }b>?i");
      Option option0 = new Option("arg", "N }b>?i", true, "usage: ");
      Options options2 = options1.addOption(option0);
      options1.getOption("--");
      option0.clearValues();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2237), "", "", options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2555, "!8&UDWOkO2}5B", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(2555);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 40, "DRM:Q-Zt8`m%_YnhT^B");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 368, "whkQ@VvM6x[:~1e[t|:", " ] [ long ", options0, 0, 101, "", false);
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      helpFormatter0.printWrapped(printWriter0, 101, " ] [ long ");
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine(" ]");
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = null;
      mockFile0.setReadOnly();
      String string0 = "oHE";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(19, "j", "oHE", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(19, "   ", "h@58j'enBK", (Options) null, " ]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1542, "", "[", options1, 27, 27, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "'4|Z@%^", options0, "Q'U%Q>}Oen#");
      options0.addOption("", false, "arg");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultArgName = "'4|Z@%^";
      String string0 = "Zk6sd=d[g";
      MockFile mockFile0 = new MockFile("Zk6sd=d[g", "");
      helpFormatter0.defaultLeftPad = (-503);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFile0.toURI();
      StringBuffer stringBuffer0 = new StringBuffer(5679);
      int int0 = 0;
      helpFormatter0.getOptPrefix();
      helpFormatter0.renderWrappedText(stringBuffer0, 1503, 0, "Q'U%Q>}Oen#");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 1503, (-9));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 13, (-1928));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) "-";
      mockPrintStream0.format("org.apache.commons.cli.Option", objectArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3669), "[", "*ZGo", options0, 27, (-3669), "org.apache.commons.cli.Option", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("k{;!EmWOa:C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "k{;!EmWOa:C";
      objectArray0[7] = (Object) "k{;!EmWOa:C";
      objectArray0[8] = (Object) "";
      int int0 = 9;
      Options options0 = null;
      String string0 = "oHE";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2491), (Options) null, 1, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 101, " | ", "sM\"P<JViIJZQ<}vR{}#", options0, 101, 12, " | ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2555, "", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(2555);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 368, "whkQ@VvM6x[:~1e[t|:", " ] [ long ", options0, 0, 101, " | ", false);
      helpFormatter0.printHelp(101, "org.apache.commons.cli.HelpFormatter$OptionComparator", "`LIJ\"iZRnk2KN", options0, "", false);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", " ", "-").when(comparator0).toString();
      doReturn(3, 3).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultWidth = 34;
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "usage: ", true, "' contains an illegal character : '");
      helpFormatter0.printHelp("V0)&H{-1a`}w]", options1, true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "k");
      Option option0 = new Option("arg", "G-%RRt0u:&X[( &\"");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("l", "", true, "' was specified but an option from this group ");
      helpFormatter0.printHelp("G-%RRt0u:&X[( &\"", (String) null, options4, "222g?$w Y5]6oeI*");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "tXu");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 368, "", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(368);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "7Oaz+Q", "", options0, 368, 101, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 74, 74, "   ");
      helpFormatter0.renderWrappedText(stringBuffer1, 929, (-2617), "usage: ");
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 53, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "(;L|!O2Nz");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "M }m", objectArray0);
      helpFormatter1.printUsage(printWriter0, 2, "\n");
      helpFormatter1.setDescPadding(74);
      Options options1 = new Options();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setReadOnly();
      mockPrintWriter0.checkError();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "\n", "oHE", (Options) null, 74, 74, "}L[(Y");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption((String) null, "\n", true, "x~1ZZ3d'q#h");
      Options options2 = options1.addOption((String) null, true, "|/h!");
      Options options3 = options2.addOption((String) null, "lr&", true, "~ WU2hCY");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0?;rN21#ZfvL.d)", options3, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(466, "--", "5$.bgruyK", (Options) null, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.CHINESE;
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("--");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1148, "*ZGo");
      helpFormatter0.setDescPadding(1148);
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "", options0, "");
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G3.*8e}rk.82?Zv";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile("k%DlJ2r@`|", "A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1233), "G3.*8e}rk.82?Zv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      int int0 = 368;
      String string0 = "<";
      helpFormatter0.setNewLine("<");
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockFile0.setReadOnly();
      String string1 = "oHE";
      String string2 = "_J#zW4Qn";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.setLongOptPrefix("arg");
      String string1 = "Rj2#2(DuTzp1jEeT&";
      helpFormatter0.setNewLine("Rj2#2(DuTzp1jEeT&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.defaultOptPrefix = "Rj2#2(DuTzp1jEeT&";
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "Rj2#2(DuTzp1jEeT&", 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      int int0 = 368;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2555, "", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(2555);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 368, "whkQ@VvM6x[:~1e[t|:", " ] [ long ", options0, 0, 101, " | ", false);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "W/='B;6+%nh*}", "|a)_,g#Eh,-S", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2705));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("k{;!EmWOa:C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "k{;!EmWOa:C";
      objectArray0[6] = objectArray0[5];
      objectArray0[7] = (Object) "k{;!EmWOa:C";
      objectArray0[8] = (Object) "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "oHE", "", (Options) null, (-721), 9, "e(^Zv[n'zW{M");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "'4|Z@%^", options0, "Q'U%Q>}Oen#");
      options0.addOption("", false, "arg");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultArgName = "'4|Z@%^";
      MockFile mockFile0 = new MockFile("Zk6sd=d[g", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer(5679);
      helpFormatter0.renderWrappedText(stringBuffer0, 1503, 0, "Q'U%Q>}Oen#");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "Zk6sd=d[g");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "]", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-721), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "*ZGo";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "G3.*8e}rk.82?Zv";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "*ZGo";
      PrintStream printStream0 = mockPrintStream0.format("gG:(xG`],852t", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, ":r.6.JI{v<qoZRAwj0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "The option '";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WD>zip74-TnQuS5\"b");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = null;
      int int0 = (-1);
      Options options0 = new Options();
      Option option0 = new Option("arg", "G!u", false, "The option '");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      // Undeclared exception!
      try { 
        options1.addOption("-", "", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "*ZGo";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "G3.*8e}rk.82?Zv";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      PrintStream printStream0 = mockPrintStream0.format("gG:(xG`],852t", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 1, "");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "UfAB?K)~{#OyMs(*}", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "*ZGo", "", (Options) null, 9, 1503, ",\"`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.createPadding(1983);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) string0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) " ";
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "*ZGo";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "G3.*8e}rk.82?Zv";
      StringBuffer stringBuffer0 = new StringBuffer(1161);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 540, (Options) null, 1161, 2343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "*ZGo";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "G3.*8e}rk.82?Zv";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "--";
      PrintStream printStream0 = mockPrintStream0.format("gG:(xG`],852t", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "*ZGo", ",\"`", (Options) null, 1, 1, "gG:(xG`],852t");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = 1259;
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 864, options2, 1259, 864);
      int int0 = 0;
      stringBuffer1.insert(1, (-3318L));
      stringBuffer1.append(" ");
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(61, (double) (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 61
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "O/I0sn");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("~wPetwWj", options2, true);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@x");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(134);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.addOptionGroup(optionGroup0);
      options0.addOption("", false, " ");
      Options options1 = options0.addOption("80p9", "", false, "");
      helpFormatter1.printHelp("gVJsZdyq7[tm%sA2hc", options1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "arg");
      Options options2 = options1.addOption((String) null, "arg", false, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 69, "*ZGo", options2);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", " ", "-").when(comparator0).toString();
      doReturn(3, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultWidth = 34;
      Options options0 = new Options();
      options0.addOption((String) null, true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "usage: ", false, "' contains an illegal character : '");
      helpFormatter0.printHelp("V0)&H{-1a`}w]", options1, true);
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "org.apache.commons.cli.Option";
      objectArray0[2] = (Object) "' was specified but an option from this group ";
      objectArray0[3] = (Object) "*ZGo";
      objectArray0[4] = (Object) "org.apache.commons.cli.Option";
      objectArray0[5] = (Object) mockFileOutputStream0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "*ZGo";
      Object object1 = new Object();
      objectArray0[8] = object1;
      mockPrintStream0.format("' was specified but an option from this group ", objectArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      options0.addOption("arg", "", true, "^wu10_0m{YwX");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2555, "", options0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "G3.*8e}rk.82?Zv";
      objectArray0[1] = (Object) "G3.*8e}rk.82?Zv";
      mockPrintStream0.format("org.apache.commons.cli.Option", objectArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.append('-');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      Options options2 = options1.addOption((String) null, "arg", true, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 69, "*ZGo", options2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "*ZGo";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "G3.*8e}rk.82?Zv";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "*ZGo";
      PrintStream printStream0 = mockPrintStream0.format("gG:(xG`],852t", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, ":r.6.JI{v<qoZRAwj0");
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "G3.*8e}rk.82?Zv");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) locale0;
      mockPrintWriter0.format(locale1, " ", objectArray0);
      int int0 = (-2731);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Q*!]Ss", "arg", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Q*!]Ss' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = 1259;
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 864, options2, 1259, 2110);
      stringBuffer1.insert(1, (-3318L));
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 52, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      helpFormatter0.createPadding(1);
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      mockPrintStream0.format("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-767), "l|q");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("k!;CEmWOa:C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "k!;CEmWOa:C";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "k!;CEmWOa:C";
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      printWriter0.append((CharSequence) "k!;CEmWOa:C");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3981, (String) null, options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding((-4331));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4331), "org.apache.commons.cli.HelpFormatter", " ]", options0, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 44;
      helpFormatter0.setWidth((-176));
      StringBuffer stringBuffer0 = null;
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "'4|Z@%^", options0, "Q'U%Q>}Oen#");
      options0.addOption("", false, "arg");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultArgName = "'4|Z@%^";
      options0.getMatchingOptions((String) null);
      helpFormatter0.defaultOptPrefix = "'4|Z@%^";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 593, 593);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = 1259;
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options2, 1259, 2110);
      int int0 = 0;
      stringBuffer1.insert(1, (-3318L));
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'c';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '7';
      // Undeclared exception!
      try { 
        stringBuffer1.insert((-2957), charArray0, (-2463), 2018);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2957
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("%E]%<U@Yyt$s[", "f0H{5@zd7^fJMTbw~4", options0, "--", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      options0.addOption("arg", false, "arg");
      Options options1 = options0.addOption("1h", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 69, "*ZGo", "*ZGo", options1, 1446, 1446, "3##NG'Y2E-Yu]6i\"g", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 26, "*ZGo");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.checkError();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      options0.addOption("arg", false, "arg");
      options0.addOption((String) null, "usage: ", false, "D=-sH5c]W|Xm\"Z2");
      helpFormatter0.printHelp("' contains an illegal character : '", options0, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "K2");
      helpFormatter0.printHelp("yf,LhHr", options2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.defaultWidth = 34;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("*ArdYOZ$nEa", options3, false);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = options0.addOption("", false, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("_4%yQIUS:Ic9", options1, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = 1259;
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 864, options2, 1259, 2110);
      stringBuffer1.insert(1, (-3318L));
      Option option1 = new Option("t", "");
      options0.addOption(option1);
      OptionGroup optionGroup1 = new OptionGroup();
      Option option2 = new Option("t", "8]w&;>vE,^");
      OptionGroup optionGroup2 = optionGroup0.addOption(option2);
      options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("*g?nwK*Lc", options2, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 9, 3, "-");
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*ZGo";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "!wK,YnH'Xi{l!M");
      boolean boolean0 = false;
      Options options2 = options1.addOption("", false, "");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      String string1 = "<#Oq$=udWtJ";
      options2.getMatchingOptions("<#Oq$=udWtJ");
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2610, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 368, "", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLeftPadding(368);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = 74;
      Option option0 = new Option("", false, "");
      Options options1 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 864, options1, 74, 2110);
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer1.insert(1, (-3318L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 32, "y\"u'4,GTV:Pw+Uy", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "G3.*8e}rk.82?Zv";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*ZGo");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "*ZGo";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "G3.*8e}rk.82?Zv";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "*ZGo";
      PrintStream printStream0 = mockPrintStream0.format("gG:(xG`],852t", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "*ZGo", ",\"`", (Options) null, 9, 9, "gG:(xG`],852t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "t0=oT$JM1V{";
      helpFormatter0.findWrapPos("t0=oT$JM1V{", 0, 0);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(".T+?Wu0jEcReQ|", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.T+?Wu0jEcReQ|' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultWidth = 1259;
      Option option0 = new Option("", false, "");
      Options options2 = options1.addOption(option0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 864, options2, 1259, 2110);
      int int0 = 0;
      stringBuffer1.insert(1, (-3318L));
      stringBuffer1.append(" ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1, "-");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-153), "FHeyLh3*E", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(")~7VLNyGg::");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "usage: ";
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.flush();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      String string0 = "org.apache.commons.cli.Options";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.Options";
      helpFormatter0.setArgName("3vMKZ<ne]Ri;!&B1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^{e]\"quRST+kJ}");
      mockPrintWriter0.println('S');
      String string1 = "W?`DsrA`M.K.f8";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 31, "W?`DsrA`M.K.f8");
      helpFormatter0.setLongOptPrefix("3vMKZ<ne]Ri;!&B1");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Options options2 = options1.addOption("arg", "^ H_H~ppuZyIjv,2P", false, "arg");
      // Undeclared exception!
      try { 
        options2.addOption("^{e]\"quRST+kJ}", true, "W?`DsrA`M.K.f8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^{e]\"quRST+kJ}' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setDescPadding(0);
      String string0 = "42'>DY/XJDVgzA#0@0";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("42'>DY/XJDVgzA#0@0");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = null;
      String string0 = "(FoOR?WMmg>~[$;k`^";
      helpFormatter0.defaultOptPrefix = "scCd5o_";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("scCd5o_", "scCd5o_", (Options) null, "(FoOR?WMmg>~[$;k`^", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.defaultLeftPad = (-533);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1104, options0, (-1019), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.rtrim(">");
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = (-1203);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1203), (-1203), "qZ^<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("k!;CEmWOa:C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "k!;CEmWOa:C";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "k!;CEmWOa:C";
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1204), "", "k!;CEmWOa:C", options0, (-1204), 1592, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "'4|Z@%^", options0, "Q'U%Q>}Oen#");
      options0.addOption("", false, "arg");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultArgName = "'4|Z@%^";
      options0.getMatchingOptions((String) null);
      helpFormatter0.defaultOptPrefix = "'4|Z@%^";
      helpFormatter0.printHelp(1503, "Q'U%Q>}Oen#", "'4|Z@%^", options0, "", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\\');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "'4|Z@%^";
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) "'4|Z@%^";
      objectArray0[6] = (Object) "'4|Z@%^";
      mockPrintWriter0.format(locale0, "NO_ARGS_ALLOWED", objectArray0);
      String string0 = "";
      String string1 = "9p,gPV";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("Fjzf[H#X)}j T", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Fjzf[H#X)}j T' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("jS3c4VXn");
      String string0 = null;
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption("2", (String) null, true, "");
      String string2 = "B1Ey-Hsl/#MY,C&8l";
      options1.hasShortOption((String) null);
      options1.addOption("", true, "<");
      Option option0 = new Option("H", "B1Ey-Hsl/#MY,C&8l", false, "9t4J6J,");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "jS3c4VXn", options2, "Qkc*Y@=/TjUo!TQr,<n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "yf,LhHr", false, "CA\":re+W");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "CA\":re+W";
      options1.hasLongOption("--");
      Options options2 = options1.addOption("", "yf,LhHr", false, "CA\":re+W");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("}Tr'qeUscgO?I", true, "G4;g$3>](OPI2~GV[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}Tr'qeUscgO?I' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("[", (-1), 593);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(358);
      String string0 = "@PV=LchZX{1Nv1B96c?";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("-", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(576);
      String string0 = "";
      String string1 = "7iJ`jNBAp";
      MockFile mockFile0 = new MockFile("", "7iJ`jNBAp");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("k{;!EmWOa:C");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "k{;!EmWOa:C";
      objectArray0[6] = objectArray0[5];
      objectArray0[7] = (Object) "k{;!EmWOa:C";
      objectArray0[8] = (Object) "";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.setLongOptSeparator("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.CHINESE;
      String string0 = null;
      mockPrintWriter0.format(locale0, "i[3", (Object[]) null);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "usage: ";
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) locale0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ">-wh2");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("HJ'jeUqL8}K1ZnAQEFg");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 1, 0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1120);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setLeftPadding(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getSyntaxPrefix();
      assertEquals(0, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[0];
      Locale locale0 = Locale.CHINESE;
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }
}
