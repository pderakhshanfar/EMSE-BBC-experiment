/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:04:39 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getNewLine();
      File file0 = MockFile.createTempFile("vj;,<iG", "vj;,<iG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "vj;,<iG", options0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t7");
      Options options0 = new Options();
      mockPrintWriter0.print('4');
      helpFormatter0.getNewLine();
      int int0 = 0;
      int int1 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 32, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "o_", false, "org.apache.commons.cli.ParseException");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "i`Y}oS@L9c");
      optionGroup0.addOption(option0);
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8s.~tcO1SD)vRl4", options2, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "T0Tk7dO^N)OF9\">xR";
      MockFile mockFile0 = new MockFile("T0Tk7dO^N)OF9\">xR", "");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      helpFormatter0.setArgName("usage: ");
      mockPrintWriter0.println((long) 1);
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "T0Tk7dO^N)OF9\">xR", objectArray0);
      int int0 = 10;
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 10, "usage: ", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 10, options0, (-801), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      Options options1 = options0.addOption("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      options1.addOption("arg", "", false, "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "--", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      String string0 = "[";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 3, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "<q6n>3@x *";
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultDescPad = (-381);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      int int0 = 31;
      helpFormatter0.createPadding(31);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("<q6n>3@x *", 2, (-381));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(64);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 18, 2, "11VCB3wg|Rvq!RC'");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      Options options1 = options0.addOption("arg", false, "11VCB3wg|Rvq!RC'");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 18, "11VCB3wg|Rvq!RC'", "11VCB3wg|Rvq!RC'", options1, (-141), 2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "t7";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "t7", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(printWriter0, 340, "t7", "-", options1, 340, 0, "Cannot add value, list full.", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp(" ]v6*e/`7A&%J%>", options1, true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(435, "has already been selected: '", "nKbFnY[Z(,", (Options) null, "K1tr2//#:A5U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-972), (-972), "ED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter1.setLeftPadding(1);
      Options options0 = new Options();
      String string0 = "[ option: ";
      Option option0 = new Option("arg", "[ option: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1100), options2, 3, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", " ", options0, "");
      Options options2 = options1.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options2, true);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "", "i", options3, 3, 3, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 2049, 113);
      Options options1 = new Options();
      helpFormatter0.printHelp("8,Kn", "8,Kn", options1, "8,Kn");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.defaultDescPad = (-798);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, options1, 9, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printHelp(31, "[ option: ", "cmdLineSyntax not provided", options0, "cmdLineSyntax not provided", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, (-1409), "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "usage: ");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "K");
      options2.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("(bX_:>%l}bF'<&Y#");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printHelp(3853, "UsiY2?cs+b<#Ku8", "f4k", options2, ",'9EP[js<aC{l", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[3] = (Object) locale0;
      objectArray0[8] = (Object) locale0;
      Options options0 = new Options();
      String string0 = "}AS?:Y:QSJ\\oCPK+I";
      MockFile mockFile0 = new MockFile("line.separator");
      File file0 = MockFile.createTempFile("(ub`p@?#(", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ".OIK2 \"DH*\"]", options0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultLongOptPrefix = "arg";
      int int0 = 2781;
      helpFormatter0.setWidth((-1040));
      helpFormatter0.setWidth(2781);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName(">");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(filterOutputStream0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      char char0 = 'b';
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 35, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons./li.HelpFormatter$OptiZnComparator");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "i`Y}oS@L9c");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = " | ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-1214));
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("Cannot add value, list full.", "[", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("aucUx h)b7bhK&");
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "hYa6", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "aucUx h)b7bhK&");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t7");
      Options options0 = new Options();
      mockPrintWriter0.print('4');
      Options options1 = options0.addOption("", "usage: ", true, "jD\"ga<**vRX");
      options0.hasOption("V+Npw'*t");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "+/W5o%w}", "", options0, 0, 0, "", true);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setLeftPadding(679);
      helpFormatter0.printHelp("arg", options0, false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("[ option: ", 0, 0);
      mockPrintWriter0.append((CharSequence) "V+Npw'*t");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 29, (String) null, "jD\"ga<**vRX", options1, 679, 0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_#5oy;}G7+N");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "~y", true, "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.HelpFormatter", "[", options1, 10, 438, (String) null, true);
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.printHelp("+/W5o%w}", options0, false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp("+r5G^q2.7/*;I6uBHj", "u7+sX+P1\"GzOM@n}CJt", options0, "G", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t7");
      Options options0 = new Options();
      mockPrintWriter0.print('4');
      options0.addOption("", "usage: ", true, "jD\"ga<**vRX");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "+/W5o%w}", "", options0, 0, 0, "", true);
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setLeftPadding(679);
      helpFormatter0.printHelp("arg", options0, false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      String string0 = "";
      Options options0 = new Options();
      int int0 = (-1481);
      int int1 = (-1996);
      String string1 = "#Yu";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1996), "org.apache.commons.cli.HelpFormatter", "M", options0, 1, (-1996), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "   ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockFile mockFile0 = new MockFile("}AS?:Y:QSJoCPK+I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printHelp(1827, "cmdLineSyntax not provided", "}AS?:Y:QSJoCPK+I", options1, "", true);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "(", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 160, (-2910));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, 74, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, 0, 0, "cmdLineSyntax not provided", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 898, "\n", "\n", options0, 1, 2285, "d_j*DN%{b3ga+");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 49, "", "", options0, (-1), 117, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "t7", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(printWriter0, 340, "t7", "-", options1, 340, 0, "Cannot add value, list full.", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp(" ]v6*e/`7A&%J%>", options1, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 340, "org.apache.commons.cli.HelpFormatter$OptionComparator", options1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = 28;
      String string0 = null;
      String string1 = "*W*{Jx'A)6";
      String string2 = "ndxq%%6C-bJ|W";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 28, (String) null, "*W*{Jx'A)6", options0, 0, (-240), "ndxq%%6C-bJ|W", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.renderOptions(stringBuffer0, (-1303), options0, 49, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 49, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      helpFormatter1.rtrim(" [ARG]");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " [ARG]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage(printWriter0, 88, "--", options1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.ParseException";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1531), "org.apache.commons.cli.ParseException", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "org.apache.commons.cli.ParseException", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      helpFormatter0.printUsage(printWriter0, 32, "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3644), "Cannot add value, list full.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "arg";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "XfO.&3F2OcE#5", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "");
      Option option0 = new Option("", false, "arg");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2168, " [ARG]", "", options2, 74, 1, "0U|\t #?nt1A!");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 45, "05+lCvEr]wL2oH&: :", ".<'4Ff0", options2, (-1), (-1505), " [ARG]", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 5923, "jRq(#?dwQ\"^(eVM");
      int int1 = (-4173);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("SZOhN2e.a}w?(n", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int0 = (-1499);
      int int1 = (-1942);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "\n", "", options0, (-1499), (-1942), "GbB-w+");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "t7";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "t7", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(printWriter0, 340, "t7", "-", options1, 340, 0, "Cannot add value, list full.", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp(" ]v6*e/`7A&%J%>", options1, true);
      helpFormatter0.printHelp(printWriter0, 340, "%TTi_4Q9", "Cannot add value, list full.", options1, 31, 31, "--", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "t7";
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-613), "t7", (String) null, options0, "   ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'n';
      stringBuffer0.append(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 49, ")c");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      PrintWriter printWriter0 = null;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("Ecs)}S}n.lCMI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2162), "", "@=\"]]pS7rEauuB!1A\"", options1, "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("Ecs)}S}n.lCMI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "/:|3t8se`RIs", "cmdLineSyntax not provided", options0, "@=\"]]pS7rEauuB!1A\"", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 1, 80);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "[ option: ", "xV", options1, (-1), (-3239), "@mSh>LIrK~et");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "u7+sX+P1\"GzOM@n}CJt";
      String string1 = "BJ#>bVPa";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u7+sX+P1\"GzOM@n}CJt", "u7+sX+P1\"GzOM@n}CJt", (Options) null, "BJ#>bVPa", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "u7+sX+P1\"GzOM@n}CJt";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("u7+sX+P1\"GzOM@n}CJt", "u7+sX+P1\"GzOM@n}CJt", (Options) null, "BJ#>bVPa", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 898;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 898, "?7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4750, "u7+sX+P1\"GzOM@n}CJt", "", options0, 4750, 4750, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 4750, options0, 4750, 32);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("W/R\"zXNZ`|`p.v#");
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'A';
      charArray0[2] = 'S';
      charArray0[3] = '1';
      charArray0[4] = ':';
      charArray0[5] = '[';
      mockPrintWriter0.println(charArray0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "u7+sX+P1\"GzOM@n}CJt", "jg>}S#w<DW<c\"", options0, 14, 1, "W/R\"zXNZ`|`p.v#");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 80, 0, "");
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!5NWe");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 63, "");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 34, "k:0Q-}HZS=!", "", options0, 13, (-533), "'Kzv @46}~&@F");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1332, 1332, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.hasLongOption("--");
      Option option0 = new Option("KBh", "usage: ");
      option0.setType(options0);
      options0.addOption("", "#[lu(^ f!\"", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!@*^^eBF%`'SN)jvF");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "Fxf?Qdbn-n", "dI", options1, (-2157), 15, "Fxf?Qdbn-n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("Xn:K:q>[a", 4750, 4750);
      helpFormatter0.printHelp("u7+sX+P1\"GzOM@n}CJt", "tA>#j+q1SFQ$q}", options0, ".\"9^]r_");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "org.apache.commons.cli.OptionValidator", "d@CaSiU\"FX:-Y-hS&", (Options) null, "org.apache.commons.cli.Util", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "AAMQ.Lw\"%Ct^HQG5'";
      helpFormatter0.setWidth((-1040));
      helpFormatter0.setWidth(2781);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName(">");
      helpFormatter0.setOptPrefix("@I\u0003bwsA<gk%");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "7200E~F{A`}|-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-917), 13, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("SwnQ>>:TS#=^pV");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "t7";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "t7", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(printWriter0, 340, "t7", (String) null, options1, 340, 0, "Cannot add value, list full.", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(449);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("'", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 80, 0, "");
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!5NWe");
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      options0.helpOptions();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(3237, "fJo$!6G(M~5b37e7K0", ".|<zYe)2&$2RSr~3A", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot add value, list full.");
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "", options1);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "t7";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "t7", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(printWriter0, 340, "t7", (String) null, options1, 340, 0, "Cannot add value, list full.", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp(" ]v6*e/`7A&%J%>", options1, true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "E^`Mw)M#'g>tL", true, "org.apache.commons.cli.Util");
      Options options3 = options2.addOption("", true, "arg");
      helpFormatter0.printHelp(17, "org.apache.commons.cli.Util", "\n", options3, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.hasLongOption("--");
      Option option0 = new Option("KBh", "usage: ");
      option0.setType(options0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.rtrim("--");
      helpFormatter0.findWrapPos("org.apache.commons.cli.Option", 3, 74);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(',');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-605), (-605), "u7+'X+P1\"GzOM@n}CJt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      optionGroup0.addOption(option0);
      helpFormatter0.setOptPrefix("7200E~F{A`}|-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-76));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "MZ");
      helpFormatter0.setOptPrefix("[");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      stringBuffer0.append(637);
      helpFormatter1.renderWrappedText(stringBuffer0, 637, 74, "&H\"pOE<i--~g#X=(");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1373, "", "-", options1, (-877), 36, "pV,vgGto");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("Ecs)}S}n.lCMI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printHelp(42, "/:|3t8se`RIs", "cmdLineSyntax not provided", options0, "@=\"]]pS7rEauuB!1A\"", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setLeftPadding((-2484));
      helpFormatter0.setOptPrefix("arg");
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      boolean boolean0 = true;
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("Cannot add value, list full.");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 10;
      Options options0 = new Options();
      int int1 = (-1961);
      helpFormatter0.createPadding(10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, options0, (-1961), (-850));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 323;
      String string1 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(924, (String) null, "7rA<[gz)P\"l{w", options0, "cEJZ.s|a,8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Pz4n7U>LVK\\s%";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Option option0 = new Option("", "arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOptionGroups();
      option0.setArgName("PIx&cs'KG`Uvk3{^&");
      Options options2 = options1.addOption(option0);
      optionGroup1.addOption(option0);
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1380), "Pz4n7U>LVKs%", "\"9K", options2, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("   ");
      StringBuffer stringBuffer0 = new StringBuffer(" :: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "#xG$qIe^g84')'eCQ-2", false, "aJO<hg");
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("t7");
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "jD\"ga<**vRX");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 10, "+/W5o%w}", "", options0, 0, 0, "", true);
      helpFormatter0.setLeftPadding(679);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getSyntaxPrefix();
      options0.hasLongOption("--");
      Option option0 = new Option("KBh", "usage: ");
      option0.setType(options0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1963, "3uY#'Op", "!@*^^eBF%`'SN)jvF", options0, 74, 1963, "\"%Ven?");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 80, 0, "");
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!5NWe");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "u7+sX+P1\"GzOM@n}CJt", (String) null, options0, 9, 1952, "k:0Q-}HZS=!");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Object object0 = new Object();
      Options options1 = new Options();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.printHelp("org.apache.commons./li.HelpFormatter$OptiZnComparator", options0, false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" 33q2B1\"X*DaM", "arg", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      mockPrintWriter0.println((long) 74);
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.printWrapped(printWriter0, 31, "WVev]C.wggzH");
      helpFormatter0.setOptPrefix("WVev]C.wggzH");
      helpFormatter0.setNewLine("zr`*Z*Hd[M.g.-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("WVev]C.wggzH");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "zr`*Z*Hd[M.g.-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      printWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 3599, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "!@*^^eBF%`'SN)jvF";
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.hasLongOption("--");
      Option option0 = new Option("KBh", "usage: ");
      option0.setType(options0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      helpFormatter0.printHelp("usage: ", options1);
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("\n", ";XV89JkBP?hZaYxL+Da");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "KBh", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-19), options1, 2959, 2959);
      String string0 = "";
      optionGroup0.toString();
      helpFormatter0.renderWrappedText(stringBuffer1, 2959, (-19), "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.setLeftPadding((-2));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 3, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options2 = options1.addOption("arg", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "[ option: ", "[ option: ", options2, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("SwnQ>>:TS#=^pV");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "t7";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "t7", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(printWriter0, 340, "t7", (String) null, options1, 340, 0, "Cannot add value, list full.", false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(449);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "AAMQ.Lw\"%Ct^H\\QG5'";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("AAMQ.Lw\"%Ct^HQG5'", "AAMQ.Lw\"%Ct^HQG5'", (Options) null, "AAMQ.Lw\"%Ct^HQG5'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = (-988);
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$1", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultOptPrefix = "e'TwKd_\",ebW";
      int int0 = (-469);
      helpFormatter0.setWidth((-469));
      MockFile mockFile0 = new MockFile("", "org.apache.commons.cli.Options");
      String string1 = null;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 80, 0, "");
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = ' ';
      charArray0[2] = 'g';
      charArray0[3] = '.';
      charArray0[4] = '6';
      charArray0[5] = '$';
      stringBuffer0.append(charArray0);
      stringBuffer1.append((-1L));
      helpFormatter0.renderWrappedText(stringBuffer1, 1629, 80, "");
      assertEquals(10, stringBuffer0.length());
      
      helpFormatter0.getSyntaxPrefix();
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 1606;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 1606);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ARG...]");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      mockPrintWriter0.println((long) 74);
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.printWrapped(printWriter0, 31, "WVev]C.wggzH");
      helpFormatter0.setOptPrefix("WVev]C.wggzH");
      String string1 = "zr`*Z*Hd[M.g.-";
      helpFormatter0.setNewLine("zr`*Z*Hd[M.g.-");
      String string2 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("ToHeo-", ":J`@4g8lZjj", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ToHeo-' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals("", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(929);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "u7+'X+P1\"GzOM@n}CJt", "u7+'X+P1\"GzOM@n}CJt", options0, 9, 929, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("!@*^^eBF%`'SN)jvF");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      String string0 = "KBh";
      options0.hasLongOption("--");
      Option option0 = new Option("KBh", "usage: ");
      option0.setType(options0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 898, 49, "");
      assertEquals("-", stringBuffer1.toString());
      
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      assertEquals("usage: ", string0);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "AHUuarm2y@oIoe~";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("0LM7A[Qsh!]R", ">", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0LM7A[Qsh!]R' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ":cp1-u|CxN(%Bcy/";
      helpFormatter0.setNewLine(":cp1-u|CxN(%Bcy/");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("<", "usage: ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1897);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setLeftPadding(2958);
      assertEquals(2958, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1274));
      helpFormatter0.setOptPrefix(">");
      helpFormatter0.getLeftPadding();
      String string0 = " ";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "[ option: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
