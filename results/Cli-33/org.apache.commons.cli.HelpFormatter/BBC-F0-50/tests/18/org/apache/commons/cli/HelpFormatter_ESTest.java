/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:57 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "arg", "arg", options0, "]", true);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        MockURI.create((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6FkGTJ2x,yWOX8";
      helpFormatter0.defaultArgName = "6FkGTJ2x,yWOX8";
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      int int0 = (-493);
      helpFormatter0.setDescPadding((-493));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("A CloneNotSupportedException was thrown:", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", false, "T3H1L=d6{-R3R/%mm");
      option0.setType(comparator0);
      Options options1 = options0.addOption(option0);
      option0.toString();
      String string0 = "";
      option0.setArgName("");
      options1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2561), options1, 85, 85);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print("ER^#u");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "");
      Options options0 = new Options();
      int int0 = 28;
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 28, 1609);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 6, 6, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print("\n");
      Options options0 = new Options();
      helpFormatter0.printHelp(2, "-", "The option '", options0, "8'5Rq8xL0D-1^|", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "8'5Rq8xL0D-1^|", "The option '", options0, 2, 2, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      int int0 = 0;
      String string0 = "/cX (=lv76Ls";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "/cX (=lv76Ls", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1178));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("e");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "(2i8|-$+`\"ky2W'la");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "e", options1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(47);
      mockPrintWriter0.print("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 1742, (Options) null, 1, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (-1), "org.apache.commons.cli.HlpFormatter$1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print("\n");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-1499), 3905, "-", false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(47);
      mockPrintWriter0.print("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "\n");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setLongOptSeparator("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 15, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "LnrmbK$fvl^[WVc)N");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 32, "\n", options1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.print(1);
      mockPrintWriter0.print("--");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Option option0 = new Option("o", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "vnDXc\"x7n8", true, "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "2", options2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine(" ");
      Locale.forLanguageTag("--");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "#e";
      helpFormatter0.getNewLine();
      String string0 = "BIv6]";
      helpFormatter0.findWrapPos("BIv6]", 2806, 116);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2806, "]8Rr`-Dh", "", (Options) null, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" [ARG]").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter0.printHelp(2750, "org.apache.commons.cli.HelpFormatter$OptionComparator", "&L]", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      Locale.forLanguageTag("usage: ");
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "\n", "--", options1, (String) null, false);
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(74);
      mockPrintWriter0.print("\n");
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("E\"poeT ucr3<'Ru", options1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Wx");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "Wx");
      int int0 = (-1025);
      int int1 = 4;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-393), "Wx", "wLT#IU*SKd1ifE<('W", options1, (-1025), 4, "/@B4", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "E-%_$.|V^Qt9$g?", "-", options0, "&L]", false);
      Locale.forLanguageTag(".ByXg%{1LHW+");
      MockFile mockFile0 = new MockFile("", "4ZV;k\"f?zD");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-756), "\n", "a<v*jqR#TU", options0, (-2513), 3, "&L]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(74);
      mockPrintWriter0.print("\n");
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      options0.addOption((String) null, (String) null, true, " ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding((-3971));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2183, ">", "Ppw\"?d", options0, ">", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(8);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.setLeftPadding(8);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "E-%_$.|V^Qt9$g?", "-", options0, "&L]", false);
      Locale.forLanguageTag(".ByXg%{1LHW+");
      MockFile mockFile0 = new MockFile("", "4ZV;k\"f?zD");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "Zk01J#1~", "", options0, 0, 74, "arg", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(47);
      mockPrintWriter0.print("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "sA)]&Js0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2669, "\n", "usage: ", (Options) null, 1, 2669, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("-", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "<", (String) null, options0, 3, 3, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "#H(0$Y=Zz(", "#H(0$Y=Zz(", options0, "Y", false);
      Locale.forLanguageTag(" ");
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, (String) null, "#H(0$Y=Zz(", options0, 188, 3, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(47);
      mockPrintWriter0.print("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "Illegal option name '");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(" ", "Sow");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "", "arg", (Options) null, 2669, 1, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("org.apache.commons.cli.Option");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      int int0 = 456;
      helpFormatter1.printHelp(456, "\"hIQxY", "usage: ", options0, " ", false);
      Locale.forLanguageTag("org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("2$ok5{p!Xj'RM", ">");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 456, "   ", (String) null, options0, (-1406), 3, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "&L]", "D ^s9.J2$sPqp#", options0, ", ", false);
      Locale.forLanguageTag("--");
      MockFile mockFile0 = new MockFile("arg", "~&]dmSdXiwJnxLgIp");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "~&]dmSdXiwJnxLgIp", "NO_ARGS_ALLOWED", options0, 141, 63, "", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", " ", options0, "", true);
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      helpFormatter0.printHelp("-=-", "", options0, "wQR", true);
      options0.hasShortOption("");
      options0.getMatchingOptions("--");
      helpFormatter0.printHelp(10, "-=-", "", options0, "", false);
      Locale.forLanguageTag("31{B>Ecj>H");
      helpFormatter0.printHelp(10, "tqbvkYh", "BvPb", options0, "31{B>Ecj>H");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("--");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("--", "--", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 3, 3);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xclE?y*D");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale.forLanguageTag("arg");
      Options options2 = options1.addOption("", "", true, "B{MpZ[$8,YA]v@%CP");
      options2.getMatchingOptions("1~BxdGQ?:+OYzz/|j");
      helpFormatter0.printOptions(mockPrintWriter1, 3, options2, 80, 74);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 80, (-2069));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 45;
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("--");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("--", "--", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 3, 3);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R(szTKsMKCR");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3983, "");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", " ]", true, "--");
      String string0 = null;
      Option option0 = new Option((String) null, true, "");
      optionGroup0.toString();
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3048, "-\u0005:?UmJ<", "-\u0005:?UmJ<", options4, "-\u0005:?UmJ<", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "--");
      helpFormatter0.setLongOptPrefix("--");
      Options options1 = new Options();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(1);
      String string0 = "--";
      String string1 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", "The option '", (Options) null, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("D ^s9.J2$sPqp#");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-239), "@[", ", ", options0, "D ^s9.J2$sPqp#", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4925), "org.apache.commons.cli.HelpFormatter$OptionComparator", "[", (Options) null, (-407), 14, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionValidator", 20, 20);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "");
      Options options3 = options2.addOption("", "c}nn", true, "arg");
      Option option0 = new Option("", "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", "R(szTKsMKCR", options4, (String) null);
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Options options5 = options3.addOption("", "", false, "org.apache.commons.cli.OptionValidator");
      Options options6 = options5.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 63, "", options6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("--");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("wQR", "wQR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 3, 3);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-199), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(1);
      mockPrintWriter0.print("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, 1, "Illegal option name '");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      mockPrintWriter0.flush();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options1, 74, 543, "usage: ");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      StringBuffer stringBuffer0 = new StringBuffer(233);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      helpFormatter0.createPadding(2);
      helpFormatter0.setDescPadding(2);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.defaultArgName = "  ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2, (Options) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "*>)k3~Gy!*0'U", (String) null, options1, 63, (-3443), (String) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli3HelpFormatter$OptionComparator", "{80xp", options0, "");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("                                                                          ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "", options2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("--");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("wQR", "wQR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 3, 3);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xclE?y*D");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "--", options1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(47);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, (-2424), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "&L]", "D ^s9.J2$sPqp#", options0, ", ", true);
      Locale.forLanguageTag("$`|' W");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2284, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      String string0 = "D ^s9.J2$sPqp#";
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "&L]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "&L]", options0, "&L]", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFTPURI;
      StringWriter stringWriter0 = new StringWriter(1298);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('V');
      helpFormatter0.setSyntaxPrefix("{Si'-MNm1=g:s,;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1298, "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      int int0 = (-21);
      int int1 = 14;
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "usage: ", (File) mockFile0);
      String string2 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("|@f", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printUsage(printWriter0, 34, "!Y+q6#Vo");
      boolean boolean0 = true;
      String string0 = "N[^[q=-";
      String string1 = "I?R ";
      String string2 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(45);
      helpFormatter1.createPadding(32);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 10, options0, 73, 3);
      char[] charArray0 = new char[0];
      StringBuffer stringBuffer2 = stringBuffer0.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer2, 44, (-1630), "");
      MockFile mockFile0 = new MockFile("G*j)QI/oyppm");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(printWriter0, 32, options0, (-1632), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.setArgName("Y(YHomgcv");
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[3] = '{';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-50), 3744, "VM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      String string0 = "$`|' W";
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "&L]", "D ^s9.J2$sPqp#", options0, ", ", true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-2347);
      helpFormatter0.renderWrappedText(stringBuffer0, 870, (-2347), " ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp(1, ",\"", "%B9p>8TW?nvVsu:[", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      MockFile mockFile0 = new MockFile("usage: ", "COXtoGL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('G');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "0TdR", "0TdR", options1, 9, (-21), "' was specified but an option from this group ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.setLongOptSeparator("H0f7");
      PrintWriter printWriter0 = null;
      int int0 = 3344;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3344, "TSE@&$[%]6S|%)*BbN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.getOption(" ");
      options1.getOption("\n");
      options1.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options1, 0, 837);
      helpFormatter0.setNewLine("");
      Options options2 = new Options();
      helpFormatter0.printHelp(1804, "&L]", "D ^s9.J2$sPqp#", options2, ", ", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.Util");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-695), "&L]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "&L]", "D ^s9.J2$sPqp#", options0, ", ", false);
      Locale.forLanguageTag("--");
      MockFile mockFile0 = new MockFile("arg", "~&]dmSdXiwJnxLgIp");
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.flush();
      helpFormatter0.setLongOptSeparator("&L]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", false, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-\u0005:?UmJ<", options0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      PrintWriter printWriter0 = null;
      String string0 = "o<1Zdl";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      stringBuffer0.append(charArray0);
      MockFile mockFile0 = new MockFile(" ", "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.flush();
      helpFormatter0.setLongOptSeparator("   ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 322, "   ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print(1);
      mockPrintWriter0.print("O8e");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 204, 204, " ");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1, 1);
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 3855, 204, "O8e");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 0, 0);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.setSyntaxPrefix("");
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print((-898));
      mockPrintWriter0.print("O8e");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "fIo");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-50), "");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      PrintWriter printWriter0 = null;
      String string0 = "lzMkp,53[F4+;W($Q6";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-262), "lzMkp,53[F4+;W($Q6");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options0.getMatchingOptions("-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 0, 0);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(";@!h", options0, false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      Option option0 = new Option("b", (String) null, false, "");
      Options options1 = options0.addOption(option0);
      options1.toString();
      String string0 = "0Th8u:FkV434JJ|,a8";
      Options options2 = options1.addOption("", "-", false, "0Th8u:FkV434JJ|,a8");
      helpFormatter0.printHelp("0gQB]ix#\"f7A-.vW#", options2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      int int0 = 2308;
      // Undeclared exception!
      try { 
        mockPrintWriter2.append((CharSequence) "b", 1, 2308);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.getOption(" ");
      options1.hasOption("D ^s9.J2$sPqp#");
      String string1 = "$`|' W";
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.setNewLine("");
      Comparator<Option> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      String string2 = "&L]";
      Options options2 = new Options();
      helpFormatter0.printHelp(3, "&L]", "D ^s9.J2$sPqp#", options2, ", ", true);
      helpFormatter0.findWrapPos("]", (-1), (-290));
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(">", "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntaxnot provided";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntaxnot provided", "~KS~L?@,", (Options) null, "cmdLineSyntaxnot provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 0, 0);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xclE?y*D");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "", options1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptSeparator("K8\"/#[{M,/UZLd");
      helpFormatter0.defaultLongOptPrefix = "tPqK";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "\n", options0, "pe>qf/^KyS=nVg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w9+QR";
      Options options0 = new Options();
      char char0 = '{';
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2989, options0, 2989, (-14));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      options1.getMatchingOptions("");
      option0.setType((Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<", options0, ">", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1548, 1548, "'{u){,PT");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 31;
      String string0 = "";
      Options options0 = new Options();
      String string1 = ".?qRia/^iS";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(".?qRia/^iS", " | ", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.?qRia/^iS' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[ Options: [ short ";
      helpFormatter0.defaultArgName = "cmdLineSyntax not provided";
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      String string1 = ">w:]2^5w@<+QuYx(G\\(";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">w:]2^5w@<+QuYx(G(", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2568);
      helpFormatter0.setWidth((-2568));
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "IB2BLM2y1_^l";
      File file0 = MockFile.createTempFile("IB2BLM2y1_^l", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "IB2BLM2y1_^l";
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.format("p6YR!WEE.N)", objectArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", (-4156), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("");
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.getOption(" ");
      options1.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options1, 0, 837);
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = new Options();
      helpFormatter0.printHelp(1804, "&L]", "D ^s9.J2$sPqp#", options2, ", ", true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getNewLine();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      PrintWriter printWriter0 = null;
      String string0 = "o<1Zdl";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "                               ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-21), (-1), "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptPrefix("q'dYd`6u]mWo");
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Oa#");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      int int0 = (-1550);
      mockPrintWriter0.print((-1550));
      mockPrintWriter0.print("Oa#");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(Ic`Mgc";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "(Ic`Mgc");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-\u0005:?UmJ<");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3160, options0, 31, 0);
      char[] charArray0 = new char[0];
      StringBuffer stringBuffer2 = stringBuffer1.append(charArray0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer2, 0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "'%X";
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, " [ARG]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4728), (-4728), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print((-898));
      mockPrintWriter0.print("O8e");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "fIo");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "\n", true, "-");
      String string0 = "";
      options1.hasShortOption("--");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("--", "wQR", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("", 3, (-3109));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%sk8Ol");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "%sk8Ol";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) null;
      Object object1 = new Object();
      objectArray0[8] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", ">g:iGG+Ceoi8sp", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, ":vQn>CY|[_5]9~Ii/P4");
      Options options3 = options2.addOption("Hm", true, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1180), "", "", options3, 0, 126, ">g:iGG+Ceoi8sp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", "<", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", 1150, (-1839));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-50), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }
}
