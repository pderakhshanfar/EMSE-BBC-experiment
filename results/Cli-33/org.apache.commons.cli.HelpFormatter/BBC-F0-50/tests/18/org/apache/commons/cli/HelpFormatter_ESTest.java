/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:04:36 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1031);
      options0.addOption("arg", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "\n", options0, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.helpOptions();
      options1.getOption(" ");
      options1.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options1, 0, 837);
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = new Options();
      helpFormatter0.printHelp(1804, "&L]", "D ^s9.J2$sPqp#", options2, ", ", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "\n", true, "-");
      String string1 = "Q2:?3^1BI";
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.defaultDescPad = (-378);
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: ", "", options0, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "{Cr";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{Cr");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(37, "{Cr", "{Cr", (Options) null, "{Cr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("HgORzh;.dk&Kjb Ys#", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = new Locale("arg", "arg");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 63, "e^fL%Ob7cs>+(d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '*';
      charArray0[2] = 'Z';
      charArray0[3] = 'O';
      charArray0[4] = 'c';
      charArray0[5] = ' ';
      charArray0[6] = 'd';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), (Options) null, (-1), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'c';
      charArray0[2] = 'm';
      charArray0[3] = '&';
      charArray0[4] = 'f';
      charArray0[5] = '>';
      charArray0[6] = 'T';
      charArray0[7] = 'd';
      charArray0[8] = 'B';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.setWidth((-2579));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("The option '");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "The option '", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", "j;", options0, "The option '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, " ");
      helpFormatter0.printHelp("usage: ", "\n", options0, "\n", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2040);
      helpFormatter0.setWidth((-2));
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      String string0 = "x/%DL";
      String string1 = "\\=@6uPK_WVF^p\\$=tr+";
      // Undeclared exception!
      try { 
        MockURI.create("=@6uPK_WVF^p$=tr+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 10: =@6uPK_WVF^p$=tr+
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultArgName = "cmdLineSyntax not provided";
      String string1 = "";
      String string2 = "5n,MI%Yl4b6::";
      Options options0 = new Options();
      String string3 = "";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("N5");
      int int0 = 4090;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-24), "79St)V+x", "[ Options: [ short ", options0, "79St)V+x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "L[})+4J?KI6Y:8*uZ@", true, "[");
      helpFormatter0.printHelp("L[})+4J?KI6Y:8*uZ@", "A.SQ7(ZsZg_", options1, "The option '", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "Q;Ob=u+)i!wMD");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      optionGroup0.setRequired(true);
      helpFormatter2.printHelp("arg", ".z:nmqYGcid", options1, "arg", true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 114, 1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1868));
      helpFormatter0.createPadding(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("nC684aH[qP}JrJQe>", "IIs", options1, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.hasLongOption(".Jqn@u");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1422), options0, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Pqt>>j!F_M%}e]6x");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg", "-");
      File file0 = MockFile.createTempFile("]8?_;#4hQ\"Njg", " ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 50;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 50, "   ", (String) null, options0, 1152, 1, "]8?_;#4hQ\"Njg", true);
      String string0 = null;
      int int1 = (-5174);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-3134), "dPBxFI3z_^q?g]4p3W", "arg", options0, (-2773), 3128, "\r!+#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", (String) null, options0, "", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1348), options0, 0, 821);
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 2653, 44);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 1, 1);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 40, options1, 9, 3);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.createPadding(9);
      StringBuffer stringBuffer0 = new StringBuffer(411);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "arg", "--", options0, "4rdttVGOQl,C", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption((String) null, "", true, "-");
      options1.addOption("arg", true, "\"");
      helpFormatter0.printHelp("                               ", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-888));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      helpFormatter0.printHelp(3, "\n", "1", options1, (String) null, true);
      helpFormatter1.setNewLine("\n");
      helpFormatter1.rtrim("`3ry");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-1579), options1, 3, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      MockFile mockFile0 = new MockFile("-", "");
      File file0 = MockFile.createTempFile("8?[5@vG", "8?[5@vG", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.write(64);
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "~w8~euou|JkGQnKQd%", "Na!e7", (Options) null, (-1135), 0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-196));
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<J}:vj<j39n21v", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 97;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(97, "}", "1|G5yfZZs5^Pw", (Options) null, "}", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("J_e8[yE?y", "E", (Options) null, "E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding(1);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(4);
      helpFormatter0.setLeftPadding(1115);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(114);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter1.printOptions(mockPrintWriter0, 18, options0, 34, 3);
      helpFormatter1.rtrim("U>gwS.)Jjh]`\u0007%");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "org.apache.commons.cli.Option", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wupR6M)bXQD8rD9E");
      mockPrintWriter0.write((-1));
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), (String) null, "v3-!+E)WGQBf?soA.g;", (Options) null, 26, (-1), "wupR6M)bXQD8rD9E", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "rsp\"eQvn_J'PE";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rsp\"eQvn_J'PE");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      helpFormatter0.findWrapPos("rsp\"eQvn_J'PE", 0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1274, 32, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1374);
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(783, "usage: ", "<", options0, "K,;\"P]-@W5", true);
      helpFormatter1.printHelp("[", options0);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "w9+QR", false);
      Options options1 = new Options();
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2, "usage: ", "--", options0, "", false);
      helpFormatter1.printHelp("w9+QR", ">/", options0, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getLeftPadding();
      MockFile mockFile0 = new MockFile((String) null, ">/");
      File file0 = MockFile.createTempFile("w<\"S7},%4G[-_1V", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.", "\n", options1, 1, 1, "usage: ", true);
      helpFormatter1.findWrapPos("-", 2, 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.", "-", options1, 63, 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      int int1 = 1;
      String string0 = "[";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "[", "[", options0, "[");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "w9+QR", options0, "", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = new Locale("E'e&r*G`6Z", "arg", "arg");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "E'e&r*G`6Z";
      objectArray0[2] = (Object) pipedInputStream0;
      objectArray0[3] = (Object) "w9+QR";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "/L4nLijEu#Pt`#", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) helpFormatter0;
      PrintWriter printWriter1 = mockPrintWriter1.format("", objectArray1);
      helpFormatter0.printHelp(printWriter1, 3, "S\"*;_q(6\"q5#:", "", options1, 3, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "w9+QR", false);
      helpFormatter0.setWidth(32);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options0.addOption((String) null, "", true, (String) null);
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      helpFormatter1.printHelp(2, "usage: ", "--", options0, "", false);
      helpFormatter1.printHelp("w9+QR", ">/", options0, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getLeftPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "w9+QR", false);
      Options options1 = new Options();
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2, "usage: ", "--", options0, "", false);
      Options options2 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "usage: ", options1, 1489, 3, " k-HMg!A>@$A");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(17);
      helpFormatter0.createPadding(17);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("^~72=.I;fTn]L%{B", "^~72=.I;fTn]L%{B", options2, "JuAN0V1zfYZq?3vfz", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      PrintStream printStream0 = mockPrintStream0.printf("                 ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 17, "", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-512), "w9+QR", "Dmos", options1, 16, 16, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("arg");
      MockFile.createTempFile("[ Options: [ short ", "' contains an illegal character : '", (File) mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "[ Options: [ short ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, (-1168), "", "usage: ", options0, (-2), 1, "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.printHelp(2, "-", "", options0, "--", true);
      options0.getOptions();
      helpFormatter0.printHelp("                               ", ";6[\"|\u00049`j-&", options0, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      MockFile mockFile0 = new MockFile("/3UaKh");
      MockFile.createTempFile("D%OgO!s#G.$?MQAw@m9", "I<:U(:yL,Ud?%k1;)", (File) mockFile0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter4.renderOptions(stringBuffer0, 3, options0, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, (-931), 1150, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      option0.setRequired(false);
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", "\n", false, "-");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      helpFormatter1.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 63, 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      option0.setRequired(false);
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      Options options2 = new Options();
      helpFormatter1.printHelp("--", "", options2, "--", false);
      helpFormatter1.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("'", "--");
      File file0 = MockFile.createTempFile("usage: ", "[", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "/!Fap5]q&x ?g~", "", options1, 74, (-1), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.printHelp(2, "-", "", options0, "--", true);
      helpFormatter0.printHelp("usage: ", "", options0, "arg");
      helpFormatter1.findWrapPos("oxDLG,k[x^_R'", 30, 3);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("MG");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.append('U');
      PrintStream printStream0 = mockPrintStream0.append('+');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.close();
      mockPrintWriter1.append('&');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "-", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1195), "org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null, (Options) null, 0, 3, " | ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w9+QR";
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      String string1 = "";
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      int int0 = 22;
      int int1 = 190;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "w9+QR", "", options0, 22, 190, "Q2:?3^1BI");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print((-898));
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatterzOptionComparator");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "", false, "jrh");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatterzOptionComparator", options4);
      Options options5 = new Options();
      helpFormatter0.printHelp("jrh", "(RN79", options2, "RY:xxY1c07]5D=1\"fo");
      String string0 = "line.separator";
      int int0 = (-62);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-62), " ]", "", options2, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(17);
      helpFormatter0.createPadding(17);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("^~72=.I;fTn]L%{B", "^~72=.I;fTn]L%{B", options2, "r Bs,Fn\nX0", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-", options0);
      helpFormatter0.printHelp(2, "-", "", options0, "--", true);
      helpFormatter0.printHelp("                               ", ";6[\"|\u00049`j-&", options0, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      MockFile mockFile0 = new MockFile("/3UaKh");
      File file0 = MockFile.createTempFile("D%OgO!s#G.$?MQAw@m9", "I<:U(:yL,Ud?%k1;)", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 943, " ", "", options0, 34, (-2578), "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print((-898));
      helpFormatter0.setSyntaxPrefix("esq7V6MD^Q<JJ3");
      StringBuffer stringBuffer0 = new StringBuffer("-");
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[2] = '{';
      stringBuffer0.append(charArray0);
      helpFormatter0.rtrim("!VzF6@4VF)aVnF");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-898), "!VzF6@4VF)aVnF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.OptionValidator";
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.OptionValidator";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "w9+QR", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      helpFormatter1.printHelp(2, "usage: ", "--", options0, "", false);
      helpFormatter1.printHelp("w9+QR", ">/", options0, (String) null, false);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getLeftPadding();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.");
      File file0 = MockFile.createTempFile("w<\"S7},%4G[-_1V", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.", "\n", options1, 1, 1, "FIp?'-;SPx5O9VO.", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      option0.setRequired(false);
      options0.addOption(option0);
      options0.addOption("arg", "\n", false, "-");
      helpFormatter0.createPadding(3892);
      helpFormatter0.rtrim("Ifq");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print((-898));
      helpFormatter0.defaultDescPad = 322;
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "]", "]", options0, (-2283), 1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 91, "-(vr'CxrjWd[XdWh~J");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      int int1 = (-21);
      int int2 = (-1);
      String string1 = "[";
      options0.getOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      stringWriter1.append('3');
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-629));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2472), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      option0.setRequired(false);
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", "\n", false, "-");
      options1.hasShortOption("Q2:?3^1BI");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 34, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      option0.setRequired(false);
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      Options options2 = new Options();
      helpFormatter1.printHelp("\n", "usage: ", options2, "DL%+*kq");
      helpFormatter1.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultNewLine = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(31);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 273, "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      options0.addOption("arg", "\n", false, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "w9+QR");
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      stringBuffer0.append(charArray0);
      helpFormatter0.defaultArgName = "w9+QR";
      helpFormatter0.renderWrappedText(stringBuffer0, 2710, 2710, "l");
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.getOption(" ");
      options1.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options1, 0, 837);
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = new Options();
      helpFormatter0.printHelp(1804, "&L]", "D ^s9.J2$sPqp#", options2, ", ", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(3838);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((String) null);
      String string0 = null;
      Options options1 = options0.addOption((String) null, false, "\n");
      options1.toString();
      options0.getOptions();
      options1.getOption("");
      options0.hasOption((String) null);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 408, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptPrefix("d@nc7");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.getOption(" ");
      options1.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options1, 0, 837);
      helpFormatter0.setNewLine("");
      helpFormatter0.findWrapPos("g'", (-856), (-856));
      helpFormatter0.printHelp("B9(),*501LVgL", "t", options0, " ");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setLongOptSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "-");
      options1.hasShortOption("Q2:?3^1BI");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      Options options1 = options0.addOption("", true, "Oh),BYj!");
      options1.getOption(" ");
      options1.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options1, 0, 837);
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options2 = new Options();
      helpFormatter0.printHelp(1804, "&L]", "D ^s9.J2$sPqp#", options2, ", ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = new Locale("Oh),BYj!", "_'g|");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter2;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "D ^s9.J2$sPqp#";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "D ^s9.J2$sPqp#";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "_'g|", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3838, "", options1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      StringBuffer stringBuffer2 = stringBuffer1.append(charArray0);
      helpFormatter0.renderWrappedText(stringBuffer2, 64, (-2371), "--");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "--";
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, (-1221), "Q2:?3^1BI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("has already been selected: '", "", options0, "");
      helpFormatter0.findWrapPos("", 0, 0);
      helpFormatter0.printHelp("a_JLPPt4", "has already been selected: '", options0, "");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("qyvF<H>1@HA?k?R^9/");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "4~$/a8|4eB";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("nK~[Oa'hO_", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'nK~[Oa'hO_' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      String string0 = ">w:]2^5w@<+QuYx(G\\(";
      helpFormatter0.printHelp(">w:]2^5w@<+QuYx(G(", options0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      stringBuffer0.append(charArray0);
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("zOryC", "", true, "M6Bgf}9WD2g-~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "zOryC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "-");
      options1.hasShortOption("Q2:?3^1BI");
      List list0 = new LinkedList<Integer>();
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      helpFormatter0.findWrapPos("R(szTKsMKCR", 0, 0);
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      helpFormatter0.printHelp(31, "                               ", "? LVBZ\"ibTj; 6rJ", options0, " ] [ long ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("                               ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultArgName = "cmdLineSyntax not provided";
      String string1 = "";
      String string2 = "5n,MI%Yl4b6::";
      Options options0 = new Options();
      String string3 = "";
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("N5");
      int int0 = 4090;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "[ Options: [ short ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "[", (Options) null, "Y", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('3');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      Options options0 = new Options();
      stringWriter2.write("");
      options0.getOption(" ");
      options0.hasOption("D ^s9.J2$sPqp#");
      helpFormatter0.defaultSyntaxPrefix = "$`|' W";
      helpFormatter0.renderOptions(stringBuffer0, 3838, options0, 0, 837);
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      helpFormatter0.printHelp(1804, "&L]", "D ^s9.J2$sPqp#", options1, ", ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), ", ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-776), (-776), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options1 = new Options();
      stringWriter0.write("-");
      Options options2 = options1.addOption("arg", false, "-");
      options2.getOption("");
      options1.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-229), options0, 3838, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      options1.getMatchingOptions("");
      option0.setType((Object) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "<", options0, ">", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)0;
      mockFileOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1548, 1548, "'{u){,PT");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Y", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.ParseException", options0, "org.apache.commons.cli.ParseException", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 31;
      String string0 = "";
      Options options0 = new Options();
      String string1 = ".?qRia/^iS";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(".?qRia/^iS", " | ", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.?qRia/^iS' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "[ Options: [ short ";
      helpFormatter0.defaultArgName = "cmdLineSyntax not provided";
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      String string1 = ">w:]2^5w@<+QuYx(G\\(";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">w:]2^5w@<+QuYx(G(", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2568);
      helpFormatter0.setWidth((-2568));
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "IB2BLM2y1_^l";
      File file0 = MockFile.createTempFile("IB2BLM2y1_^l", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "IB2BLM2y1_^l";
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.format("p6YR!WEE.N)", objectArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", (-4156), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setNewLine("");
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getNewLine();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      PrintWriter printWriter0 = null;
      String string0 = "o<1Zdl";
      Options options0 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "                               ", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, (-21), (-1), "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptPrefix("q'dYd`6u]mWo");
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("--", "w9+QR", options0, "w9+QR", false);
      options0.hasShortOption("Q2:?3^1BI");
      options0.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2, "usage: ", "--", options0, "", false);
      helpFormatter1.printHelp("w9+QR", ">/", options0, (String) null, false);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.getLeftPadding();
      MockFile mockFile0 = new MockFile((String) null, ">/");
      File file0 = MockFile.createTempFile("w<\"S7},%4G[-_1V", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.", "\n", options0, 1, 1, "usage: ", true);
      helpFormatter0.findWrapPos("", (-334), 3);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("L:8V)Lr", options0);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print((-898));
      mockPrintWriter0.print("O8e");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "fIo");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-\u0005:?UmJ<");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "org.apache.commons.cli.HelpFormatter$OptionComparator", "                               ", options0, 31, 22, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "'%X";
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile((String) null, "usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, " [ARG]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-4728), (-4728), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "\n", true, "-");
      String string0 = "Q2:?3^1BI";
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      String string1 = "";
      helpFormatter0.printHelp("[ option: ", "", options0, "org.apache.commons.cli.AlreadySelectedException");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-629));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "-");
      option0.setRequired(false);
      Options options1 = options0.addOption(option0);
      options0.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      Options options2 = new Options();
      helpFormatter1.printHelp("\n", "usage: ", options2, "DL%+*kq");
      String string0 = "line.separator";
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "&49f!2^Y*T^", options0, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "w9+QR", options0, "", false);
      Options options1 = options0.addOption("arg", "\n", true, "-");
      options1.hasShortOption("Q2:?3^1BI");
      options1.getMatchingOptions("");
      helpFormatter0.printHelp("w9+QR", "w9+QR", options1, "");
      int int0 = helpFormatter0.findWrapPos("R(szTKsMKCR", 0, 0);
      assertEquals(0, int0);
      
      helpFormatter0.printHelp("R(szTKsMKCR", "", options0, "R(szTKsMKCR");
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.createPadding(31);
      Options options0 = new Options();
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((String) null);
      Options options1 = options0.addOption((String) null, true, "\n");
      String string0 = " ";
      options1.getOption("");
      options0.hasOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 408, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%sk8Ol");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "%sk8Ol";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) null;
      Object object1 = new Object();
      objectArray0[8] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", ">g:iGG+Ceoi8sp", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, ":vQn>CY|[_5]9~Ii/P4");
      Options options3 = options2.addOption("Hm", true, "]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1180), "", "", options3, 0, 126, ">g:iGG+Ceoi8sp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", "<", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ", 1150, (-1839));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.setArgName("");
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-50), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }
}
