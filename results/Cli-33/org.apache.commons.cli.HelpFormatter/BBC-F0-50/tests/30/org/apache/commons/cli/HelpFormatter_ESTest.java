/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:43:29 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-492));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xc??ZD.", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      PrintWriter printWriter0 = null;
      int int1 = 0;
      String string0 = "awrDDj";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 134, 0, "awrDDj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2937), "xp<!)v_!29gly");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println((long) 3);
      Options options0 = new Options();
      helpFormatter0.createPadding(10);
      helpFormatter0.renderOptions((StringBuffer) null, 7, options0, 7, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 10, options0, (-169), 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLongOptPrefix = "'/Qy$pB}";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1997);
      helpFormatter0.setWidth((-1456));
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.findWrapPos("", (-1456), (-1673));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      String string0 = "org.apache.commons.cli.OptionGroup";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionGroup");
      mockPrintWriter0.append('2');
      int int0 = 105;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, "The option '");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options1.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "k3J6f/u<6VAw =", "--", options1, 74, 1, "-", true);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-52), options1, 1, 2418);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "[ option: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options1, true);
      helpFormatter0.findWrapPos("!)%N_", 1, 1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(2);
      StringBuffer stringBuffer0 = new StringBuffer(8);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      StringBuffer stringBuffer0 = new StringBuffer(64);
      int int1 = 2374;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2374, (Options) null, 64, 2374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("q", true, ":FSVAk-Mm`|Ti");
      Options options2 = options1.addOption("", "", true, "q");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", (String) null, options3, (-1), 74, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal option name '");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-530), 205, "Illegal option name '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-1195);
      Options options1 = options0.addOption("arg", "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", "The option '", options1, "7xa");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", ">", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ]");
      PrintStream printStream0 = mockPrintStream0.append('C');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 74, (Options) null, 1462, 1462);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-278);
      helpFormatter0.defaultLeftPad = (-278);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":]xn\u0005}{LsRV|?@.<N6");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 4535, "\n", "\n", (Options) null, 2281, 1944, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = "arg";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("gJpzqk7}=7");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 13, "gJpzqk7}=7");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", false, "JR");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter1.printUsage(printWriter0, 1851, "arg", options3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-132), " ", "-", options3, 31, (-906), " ] [ long ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Object[] objectArray0 = new Object[16];
      objectArray0[0] = (Object) "+c:;!";
      objectArray0[1] = (Object) bufferedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter1.printUsage(printWriter0, 74, "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "-", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, (-1833), options2, 1, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("q", true, ":FSVAk-Mm`|Ti");
      Options options2 = options1.addOption("", "", true, "q");
      options1.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1860), "\n", (String) null, options3, (-1), (-1860), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "u)f";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "u)f");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("q", true, ":FSVAk-Mm`|Ti");
      Options options2 = options1.addOption("", "", true, "q");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1892), "\n", (String) null, options3, (-1), (-1892), (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1430, "6y");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.HelpFormatter$1");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 2, (-1445));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?";
      int int0 = (-2);
      String string1 = "tEP";
      Options options0 = new Options();
      String string2 = null;
      Options options1 = options0.addOption((String) null, false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "?", "tEP", options1, "9", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      String string1 = ")JjRiPWZgeh`k$c";
      Options options1 = options0.addOption("", false, ")JjRiPWZgeh`k$c");
      options0.addOption((String) null, false, "usage: ");
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("mO9Hoc?83gbof7\"", options1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.print('t');
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 4, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, (String) null);
      helpFormatter0.printHelp("usage: ", (String) null, options1, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1454, options0, (-2447), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", (String) null);
      options0.addOption(option0);
      helpFormatter0.printHelp((-1), ",FD60=~d/`v.(#$", "", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v`&");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2165), "'7!;(AWB", "", options0, (-2141), 110, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      Options options0 = new Options();
      helpFormatter0.printHelp(" O.v46", options0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.print((long) 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 118, options0, (-889), 118);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", (String) null, true, "\n");
      String string1 = "";
      options1.hasShortOption("arg");
      options1.getOption("");
      helpFormatter0.renderOptions(stringBuffer0, 3, options1, 3, 2709);
      String string2 = "";
      String string3 = "";
      String string4 = "[ Options: [ short ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("[ Options: [ short ", "--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$SXpDxETNt]|.<b\"!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "2k{*qt$K`", "org.apache.commons.cli.AlreadySelectedException", options0, 2165, 2165, "org.apache.commons.cli.AlreadySelectedException", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1979, ",FD60=~d/`v.(#$", "2k{*qt$K`", options0, (-1), 43, " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?{E1j#,Y,37OP1X#Kzr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, ",0U06(bAur?", "C]\"q,t.", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?{E1j#,Y,37OP1X#Kzr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("Ka+e}0:UUe", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "NO_ARGS_ALLOWED", "", options0, 3, 1, "", true);
      helpFormatter1.getDescPadding();
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream("arg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", options0);
      Options options1 = options0.addOption("", "", true, "The option '");
      options1.addOption("arg", "", true, "]");
      helpFormatter0.printOptions(mockPrintWriter0, 10, options1, 10, 116);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "$28K2}/y";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3458, "", "-", options0, "$28K2}/y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4983), "-", "-", options1, 721, 32, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" %>SIZk%Q");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "O_ }H04LA", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1024, (String) null, "The option '", options1, 13, 3, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",9j]fRpfG!;t");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)119;
      mockFileOutputStream1.write(byteArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", ">]", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "-;x~,10[w= ", options1, 8, (int) (byte)26, "<*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      mockPrintStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      options0.addOption("", "", true, "The option '");
      dataOutputStream0.writeBoolean(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "sr:.5 K5dEXm64+", "7 :khwugW+S>l", options0, 74, (-4464), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "'m?(R0tp:<ka");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 4440, "\n", "cMI]V`+wN|p7u}{P\"~@", options1, 3, 1994, (String) null, true);
      helpFormatter0.getDescPadding();
      helpFormatter1.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "k3J6f/u<6VAw =", "--", options1, 74, 1, "-", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "' contains an illegal character : '", options1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",9j]fRpfG!;t");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-1);
      mockFileOutputStream1.write(byteArray0);
      Options options0 = new Options();
      options0.addOption("", ">]", false, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "?{E1j#,Y,37OP1X#Kzr", "*TfcFppgvm:", options0, 0, 4, "AcM/]q\"A.@");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 871, 4, ">]");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = new Options();
      helpFormatter1.renderOptions(stringBuffer0, 3, options1, 3, 554);
      helpFormatter1.getNewLine();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "--");
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("4", "RbN");
      Options options1 = options0.addOption(option0);
      option0.setType("@pi");
      options0.addOption(option0);
      option0.getValues();
      options1.addOption("", " ", true, "usage: ");
      helpFormatter0.printHelp("i$?v-", options0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(18);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      int int0 = 108;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "R9nksEOQ|-A[dP";
      Option option0 = null;
      try {
        option0 = new Option("R9nksEOQ|-A[dP", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R9nksEOQ|-A[dP' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "k3J6f/u<6VAw =", "--", options1, 74, 1, "-", false);
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "usage: ", options1, 1994, 74, "-", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?{E1j#,Y,37OP1X#Kzr");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.print((Object) printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1315), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "The option '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-952), "usage: ", "", options1, 13, 3, "k3J6f/u<6VAw =", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("4", "RbN");
      Options options1 = options0.addOption(option0);
      String string0 = "";
      option0.setType("@pi");
      option0.getValues();
      Options options2 = options1.addOption("", " ", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1238), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = ")JjRiPWZge`k$c";
      Options options1 = options0.addOption("", true, ")JjRiPWZge`k$c");
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("mO9Hoc?83gbof7\"", options1, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 39, "-", "lHL{D5W%E@*", options1, 31, 39, "\n", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      String string0 = "";
      mockPrintWriter0.flush();
      mockFileOutputStream0.getChannel();
      helpFormatter0.setArgName("");
      Options options1 = options0.addOption("", "-", false, "kEr|(6Q~");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "'ADZLk`T$Uvzr", options1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 16, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",9j]fRpfG!;t");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-1);
      mockFileOutputStream1.write(byteArray0);
      Options options0 = new Options();
      options0.addOption("", ">]", false, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "?{E1j#,Y,37OP1X#Kzr", "*TfcFppgvm:", options0, 0, 4, "AcM/]q\"A.@");
      StringBuffer stringBuffer0 = new StringBuffer(",9j]fRpfG!;t");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, options0, 2, (-2596));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "\n", "2Hrc8qM-[u", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp(" ", "#m`Rn8Z", options0, " ");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("-", options0);
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((-214), "-", "-", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "\n", "2Hrc8qM-[u", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options1 = new Options();
      helpFormatter0.printHelp(" ", "--", options1, "--");
      helpFormatter1.getNewLine();
      helpFormatter2.printHelp("-", options1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp(3, "usage: ", "usage: ", options1, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter3.setDescPadding((-1311));
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, (-3526), "0jkoz?`q)8p1?B");
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText(stringBuffer1, (-792), 3, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(2203, "arg", "", options0, "V lf=gH;WyvV4o\"");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      String string0 = ">Qzes#- qAie%";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, ">Qzes#- qAie%", options0, "V lf=gH;WyvV4o\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-143), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Option option0 = new Option("4", "RbN");
      Options options1 = options0.addOption(option0);
      option0.setType("@pi");
      option0.getValues();
      Options options2 = options1.addOption("", " ", true, "usage: ");
      options2.getOption("--");
      options2.getMatchingOptions("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setLeftPadding(0);
          helpFormatter0.getArgName();
          helpFormatter0.getArgName();
          helpFormatter0.rtrim("|c$RX~^76[");
          helpFormatter0.defaultWidth = 0;
          helpFormatter0.getLongOptSeparator();
          Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          helpFormatter0.setOptionComparator(comparator0);
          // Undeclared exception!
          helpFormatter0.printHelp("qMWIa:#Z\bqz:", "qMWIa:#Z\bqz:", (Options) null, "bg?br");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "\n", "2Hrc8qM-[u", options0, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      helpFormatter1.printHelp("--", "]4&)K:0b#g", options0, "\n");
      helpFormatter2.getNewLine();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter1.printHelp(74, "arg", "usage: ", options0, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      String string0 = "Cannot add value, list full.";
      Options options0 = null;
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "Cannot add value, list full.", "", (Options) null, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setLongOptPrefix("DxWh>`");
      helpFormatter0.setLeftPadding(1219);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.getArgName();
      helpFormatter1.rtrim("\n");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "_rTXv-&?I @%\"#eRn", (Options) null, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      Options options0 = null;
      String string0 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.ParseException", "arg", (Options) null, "arg");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?{E1j#,Y,37OP1X#Kzr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.addOption("", "]", false, "");
      Options options1 = options0.addOption((String) null, false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, false, "3JCB}BIw5;-v[jPU");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?{E1j#,Y,37OP1X#Kzr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(32);
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.rtrim("0v[SgO%_\"@xPYx");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "org.apache.commons.cli.Util", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(32);
      helpFormatter0.createPadding(10);
      Options options0 = new Options();
      helpFormatter0.printHelp("C[FRR[{8", options0);
      helpFormatter0.findWrapPos("", 103, 10);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(2212);
      helpFormatter0.setSyntaxPrefix("e :S2vMxK0@JE1]LY");
      Options options1 = new Options();
      options0.getMatchingOptions("\n");
      helpFormatter0.printHelp("-", "-", options1, "");
      helpFormatter0.setNewLine("C[FRR[{8");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-494), "", (String) null, options2, "o.5|lr'^", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "+BUFfoeak\"HXoo";
      String string2 = null;
      helpFormatter0.defaultOptPrefix = "";
      String string3 = "";
      Option option0 = new Option((String) null, "");
      Options options1 = options0.addOption(option0);
      options1.addOption("", "", false, "27p$+/nJHdTDj~!S");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1433, "", "+BUFfoeak\"HXoo", options1, (-2), 1433, "Q6v4zWR~", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, ")JjRiPWZge`k$c");
      Option option0 = new Option("", "arg");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(31, "                                                                          ", "                                                                          ", options3, "", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("i-X");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setLeftPadding(0);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 0, 0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.helpOptions();
      String string1 = "]";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "]", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",FD60=~d/`v.(#$");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "The option '");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 0, options1, 0, 0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      Options options0 = null;
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "Cannot add value, list full.", "", (Options) null, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "i?{z%R*";
      helpFormatter0.setSyntaxPrefix("i?{z%R*");
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "i?{z%R*";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 542, "has already been selected: '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      long long0 = 0L;
      stringBuffer0.insert(1, 0L);
      stringBuffer0.append('N');
      helpFormatter0.renderWrappedText(stringBuffer0, 874, 1, "S)/TNo:'y%");
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("|c$RX~^76[");
      Options options0 = null;
      helpFormatter0.defaultWidth = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "|c$RX~^76[", (Options) null, "|c$RX~^76[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("?{E1j#,Y,37OP1X#Kzr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "cmdLineSyntax not provided");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "?{E1j#,Y,37OP1X#Kzr", "?{E1j#,Y,37OP1X#Kzr", options1, 0, 0, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("V*XfmqiBBV", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", " ", true, "B&wB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("]VpVNj$G7-RI");
      PrintWriter printWriter0 = null;
      int int0 = 672;
      String string0 = "";
      String string1 = "])>{95ReC1@jx/@!";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("(]W}ooKR_V nLiuB%", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(]W}ooKR_V nLiuB%' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getNewLine();
      helpFormatter0.defaultLongOptPrefix = "\n";
      helpFormatter0.setDescPadding(32);
      helpFormatter0.createPadding(10);
      String string0 = "C[FRR[{8";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("C[FRR[{8", options0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1169);
      helpFormatter0.setSyntaxPrefix("[");
      helpFormatter0.setNewLine("$vIlk!xQy!7");
      assertEquals(1169, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("*N>Q~r");
      helpFormatter0.setLongOptPrefix("07O=Hb$']R]Y<U8");
      helpFormatter0.setSyntaxPrefix("%7mV");
      String string0 = "<";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.AlreadySelectedException", ">a*V=sDLA%Lh", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.createPadding(0);
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "'ADZLk`T$Uvzr";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "'ADZLk`T$Uvzr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      MockFile mockFile0 = new MockFile("r,D;d");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = (-1563);
      String string0 = "]";
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", "usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "NO_ARGS_ALLOWED";
      String string1 = "";
      Options options0 = null;
      int int0 = (-1262);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1219, "NO_ARGS_ALLOWED", "", (Options) null, 1219, (-1262), "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
