/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:03:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      int int0 = 1167;
      Options options0 = null;
      helpFormatter0.defaultLeftPad = 99;
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(99, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      int int1 = 1708;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1167, (Options) null, 44, 1708);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.setLongOptPrefix("");
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", " ", options0, 3, 74, " ");
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      int int0 = 0;
      helpFormatter0.setLongOptPrefix("6");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("6", helpFormatter0.getLongOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      int int1 = helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 0, 1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("6", helpFormatter0.getLongOptPrefix());
      assertFalse(int1 == int0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, int1);
      
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.OptionGroup";
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("org.apache.commons.cli.OptionGroup", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("6", helpFormatter0.getLongOptPrefix());
      
      int int2 = (-1252);
      String string0 = "W.uoM* dpI709";
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.defaultArgName = "";
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setArgName("");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getArgName();
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertNotNull(string1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      
      String string2 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string2);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string2);
      
      int int0 = helpFormatter0.getDescPadding();
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, int0);
      
      String string3 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", string0);
      
      int int0 = 97;
      String string1 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(97, "--", (String) null, (Options) null, "+R|8oD)Ut0:&qkv\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u%}@XPL !gFO>[LeA>*");
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      int int0 = (-1211);
      helpFormatter0.setDescPadding((-1211));
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-1211), helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1211), helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals((-1211), helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals((-1211), helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", string0);
      
      StringBuffer stringBuffer0 = null;
      Options options0 = new Options();
      assertNotNull(options0);
      
      int int1 = (-1871);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vZ!Oao;-o7", "line.separator", options0, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      mockPrintWriter0.println((-2));
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Option option0 = new Option((String) null, "usage: ", true, "GB(");
      assertNotNull(option0);
      assertEquals("GB(", option0.getDescription());
      assertEquals(117, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("GB(", option0.getDescription());
      assertEquals(117, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertEquals("GB(", option0.getDescription());
      assertEquals(117, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options2 = options0.addOption("arg", "SD9Y~Cr", false, "-");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      helpFormatter1.printHelp("t`O)S", options2, true);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.setWidth(812);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      
      helpFormatter0.setNewLine((String) null);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string1 = helpFormatter0.getNewLine();
      assertNull(string1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string2 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string2);
      
      String string3 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string3);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(812, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(812, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string3);
      
      helpFormatter0.setWidth(76);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(76, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(76, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      int int0 = helpFormatter0.findWrapPos("", (-1), 38);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(76, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(76, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), int0);
      
      String string4 = helpFormatter0.createPadding(34);
      assertNotNull(string4);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(76, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(76, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("                                  ", string4);
      
      String string5 = helpFormatter0.getSyntaxPrefix();
      assertNotNull(string5);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(76, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(76, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", string5);
      
      String string6 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string6);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertNull(helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(76, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(76, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string6);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultWidth = 1;
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", "-", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", " ", true, " ");
      assertNotNull(option0);
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      optionGroup1.setRequired(true);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertTrue(optionGroup1.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp(" ", " ", options1, "@tg$Y%-VIj'KFdULR", true);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertTrue(option0.hasArg());
      assertEquals(" ", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasArgs());
      assertTrue(option0.hasLongOpt());
      assertEquals(" ", option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getValue());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals(97, option0.getId());
      assertFalse(option0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertTrue(optionGroup0.isRequired());
      assertNull(optionGroup1.getSelected());
      assertTrue(optionGroup1.isRequired());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator", true, "org.apache.commons.cli.OptionValidator");
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options1.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(1, option0.getArgs());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArgName());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp("jp3MkD8| ?Sz$v_]}", "jp3MkD8| ?Sz$v_]}", options0, "@tg$Y%-VIj'KFdULR", true);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator1).toString();
      doReturn(0).when(comparator1).compare(any(org.apache.commons.cli.Option.class) , any(org.apache.commons.cli.Option.class));
      helpFormatter0.setOptionComparator(comparator1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter1.setDescPadding(74);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      mockPrintWriter0.println(1);
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = new Option((String) null, "usage: ", false, " ");
      assertNotNull(option0);
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(117, option0.getId());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(117, option0.getId());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals(" ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertFalse(option0.isRequired());
      assertEquals("usage: ", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(117, option0.getId());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(optionGroup1.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options0.addOption("", "J", false, "arg");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      helpFormatter0.printHelp("-", options2, false);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter1.printHelp("-", "", options2, "--", true);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-60);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)32, (byte)73, (byte)11, (byte)45, (byte)1, (byte) (-60)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, 1144, "L!syoYYIam(D|g-m");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertNotNull(helpFormatter2);
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(5783, "\n", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "arg");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      StringBuffer stringBuffer0 = new StringBuffer(22);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", " ", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      String string0 = options1.toString();
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2651), options1, 1213, 1213);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setLongOptPrefix("~c!T");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setDescPadding((-2080));
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.setSyntaxPrefix("");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.setLeftPadding(24);
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultOptPrefix = "";
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      
      helpFormatter0.defaultLongOptPrefix = "~c!T";
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      
      helpFormatter0.setLeftPadding(1989);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals(1989, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1989, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.setWidth((-1891));
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("~c!T", helpFormatter0.getLongOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals(1989, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1989, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.setLongOptPrefix("M!=aAA;%");
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals(1989, helpFormatter0.getLeftPadding());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1989, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      helpFormatter0.setLeftPadding(24);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      String string0 = helpFormatter0.createPadding(2012);
      assertNotNull(string0);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      String string1 = helpFormatter0.getArgName();
      assertNotNull(string1);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string1.equals((Object)string0));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("arg", string1);
      
      String string2 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string2);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("", string2);
      
      String string3 = helpFormatter0.rtrim("");
      assertNotNull(string3);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("", string3);
      
      String string4 = helpFormatter0.getArgName();
      assertNotNull(string4);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("arg", string4);
      
      String string5 = helpFormatter0.getOptPrefix();
      assertNotNull(string5);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("", string5);
      
      Comparator comparator2 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator2);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      
      String string6 = helpFormatter0.getOptPrefix();
      assertNotNull(string6);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("", string6);
      
      String string7 = helpFormatter0.getNewLine();
      assertNotNull(string7);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("\n", string7);
      
      String string8 = helpFormatter0.getSyntaxPrefix();
      assertNotNull(string8);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("", string8);
      
      String string9 = helpFormatter0.getNewLine();
      assertNotNull(string9);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("\n", string9);
      
      String string10 = helpFormatter0.rtrim("s-");
      assertNotNull(string10);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals((-1891), helpFormatter0.getWidth());
      assertEquals("M!=aAA;%", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(24, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals((-2080), helpFormatter0.getDescPadding());
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertEquals(24, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1891), helpFormatter0.defaultWidth);
      assertEquals((-2080), helpFormatter0.defaultDescPad);
      assertEquals("s-", string10);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      int int0 = (-1462);
      helpFormatter0.defaultLeftPad = (-1462);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      String string0 = "63q_v*guj`";
      int int1 = 1716;
      helpFormatter0.defaultWidth = 1716;
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      
      helpFormatter0.defaultNewLine = "63q_v*guj`";
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      
      helpFormatter0.setArgName("63q_v*guj`");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("63q_v*guj`", helpFormatter0.getArgName());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-1462), helpFormatter0.defaultLeftPad);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("63q_v*guj`", helpFormatter0.getArgName());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-1462), helpFormatter0.defaultLeftPad);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string1);
      
      int int2 = (-1249);
      helpFormatter0.setLeftPadding((-1249));
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("63q_v*guj`", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("63q_v*guj`", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string2 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("usage: ", string2);
      
      int int3 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("63q_v*guj`", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1716, int3);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("63q_v*guj`", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("63q_v*guj`", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options1, options0);
      assertSame(options0, options1);
      assertNotNull(options1);
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup0.isRequired());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("63q_v*guj`", options1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options2 = options1.addOption("", false, "\n");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options3 = options2.addOption("arg", "\n", false, "$'ZtDL");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options1, options3);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertSame(options3, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertNotNull(options3);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      // Undeclared exception!
      helpFormatter0.printHelp(1, "4[l(!KWbu*)ExO", "4[l(!KWbu*)ExO", options3, "~{Z-'_q", false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("zT0", "zT0", (Options) null, "zT0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 12, "tf8*3scC8{6$tqFFbJ#", (String) null, options0, 103, 2068, "", false);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      char[] charArray0 = new char[6];
      charArray0[3] = 'J';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'J', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "hYwfe!FQB");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", string0);
      
      helpFormatter0.setWidth((-1));
      assertEquals((-1), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.printHelp((-1), "-", "", options0, "hYwfe!FQB");
      assertEquals((-1), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setLeftPadding(69);
      assertEquals((-1), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(69, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(69, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals((-1), helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(69, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(69, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals((-1), helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Option option0 = new Option("", "-");
      assertNotNull(option0);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options1.addOption("arg", false, "--");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options3 = options2.addOptionGroup(optionGroup0);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertSame(options3, options0);
      assertNotNull(options3);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options4 = options3.addOption("arg", "\n", false, "--");
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options1, options4);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options4);
      assertSame(options2, options0);
      assertSame(options3, options2);
      assertSame(options3, options1);
      assertSame(options3, options4);
      assertSame(options3, options0);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertNotNull(options4);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options5 = options4.addOption(option0);
      assertSame(options0, options5);
      assertSame(options0, options3);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options4);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options1, options3);
      assertSame(options1, options4);
      assertSame(options1, options5);
      assertSame(options2, options1);
      assertSame(options2, options3);
      assertSame(options2, options4);
      assertSame(options2, options5);
      assertSame(options2, options0);
      assertSame(options3, options2);
      assertSame(options3, options5);
      assertSame(options3, options1);
      assertSame(options3, options4);
      assertSame(options3, options0);
      assertSame(options4, options2);
      assertSame(options4, options0);
      assertSame(options4, options5);
      assertSame(options4, options1);
      assertSame(options4, options3);
      assertSame(options5, options1);
      assertSame(options5, options3);
      assertSame(options5, options4);
      assertSame(options5, options2);
      assertSame(options5, options0);
      assertNotNull(options5);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "usage: ", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1054), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", true, "9R2Gc$~#U!h?[=Fp");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options2 = options1.addOptionGroup(optionGroup0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1605), "]", "q", options2, "9R2Gc$~#U!h?[=Fp", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      String string0 = "FYw+e\\!FQB";
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      String string1 = "NO_ARGS_ALLOWED";
      helpFormatter0.setDescPadding((-1));
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals((-1), helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals((-1), helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("FYw+e!FQB", "NO_ARGS_ALLOWED", options0, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      int int0 = (-1462);
      helpFormatter0.defaultLeftPad = (-1462);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      String string0 = "";
      int int1 = 1716;
      helpFormatter0.defaultWidth = 1716;
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.defaultNewLine = "";
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setArgName("");
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1462), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string1);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals((-1462), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1462), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string1);
      
      int int2 = (-1249);
      helpFormatter0.setLeftPadding((-1249));
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string2 = helpFormatter0.getNewLine();
      assertNotNull(string2);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string2);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      int int3 = helpFormatter0.getWidth();
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1716, int3);
      
      Comparator comparator2 = helpFormatter0.getOptionComparator();
      assertSame(comparator2, comparator0);
      assertSame(comparator2, comparator1);
      assertNotNull(comparator2);
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1716, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals((-1249), helpFormatter0.getLeftPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1249), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1716, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Options options1 = options0.addOptionGroup(optionGroup0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setOptPrefix("");
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "", true);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.createPadding(14);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("              ", string0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertNotNull(string1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      mockPrintWriter0.flush();
      Options options2 = options1.addOption("", false, "arg");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 45, "GLI5fzT:Zzi-{", "--", options1, 2, 1015, "FYw+e!FQB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "' was specified but an option from this group ", options0, "' was specified but an option from this group ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      int int0 = (-1597);
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('0');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("0", stringWriter0.toString());
      assertEquals("0", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("0", stringWriter0.toString());
      assertEquals("0", stringWriter1.toString());
      assertEquals("0", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      int int1 = 0;
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1015, "--", "--", options1, 45, 2, "GLI5fzT:Zzi-{", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1015, " ", options0);
      assertSame(options0, options1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", string0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertNotNull(helpFormatter2);
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 262, (-567), "-");
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter2.defaultDescPad);
      
      HelpFormatter helpFormatter3 = new HelpFormatter();
      assertNotNull(helpFormatter3);
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      
      String string1 = helpFormatter3.getOptPrefix();
      assertNotSame(helpFormatter3, helpFormatter2);
      assertNotSame(helpFormatter3, helpFormatter0);
      assertNotSame(helpFormatter3, helpFormatter1);
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());
      assertEquals(" ", helpFormatter3.getLongOptSeparator());
      assertEquals("arg", helpFormatter3.getArgName());
      assertEquals(74, helpFormatter3.getWidth());
      assertEquals(1, helpFormatter3.getLeftPadding());
      assertEquals("\n", helpFormatter3.getNewLine());
      assertEquals("-", helpFormatter3.getOptPrefix());
      assertEquals("--", helpFormatter3.getLongOptPrefix());
      assertEquals(3, helpFormatter3.getDescPadding());
      assertFalse(helpFormatter3.equals((Object)helpFormatter2));
      assertFalse(helpFormatter3.equals((Object)helpFormatter0));
      assertFalse(helpFormatter3.equals((Object)helpFormatter1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, helpFormatter3.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter3.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter3.defaultDescPad);
      assertEquals("-", string1);
      
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("arg", 1, (-567));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Locale locale0 = new Locale("-", "usage: ", "");
      assertNotNull(locale0);
      assertEquals("USAGE: ", locale0.getCountry());
      assertEquals("-_USAGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("-", locale0.getLanguage());
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("USAGE: ", locale0.getCountry());
      assertEquals("-_USAGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("-", locale0.getLanguage());
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, (String) null, "", options0, 10, (-875), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, ">", "A CloneNotSupportedException was thrown: ", options0, 106, 64, " ", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 84, "\n", "", options0, 10, 3, "-", false);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = helpFormatter0.getDescPadding();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, int0);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", string0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertNotNull(helpFormatter2);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator comparator0 = helpFormatter2.getOptionComparator();
      assertNotSame(helpFormatter2, helpFormatter1);
      assertNotSame(helpFormatter2, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      mockPrintWriter0.flush();
      Option option0 = options1.getOption("");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(option0);
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      boolean boolean0 = options1.hasLongOption("--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertFalse(boolean0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "GLI5fzT:Zzi-{", "Cannot add value, list full.", options1, 103, 1015, (String) null, true);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setOptPrefix("");
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.printHelp("[", "", options0, "", true);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 101, 101, "");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.defaultSyntaxPrefix = "";
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options1 = options0.addOption("arg", true, "arg");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2440, "{*sf<Kt C`Vmz", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, 2440, (-1), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "GLI5fzT:Zzi-{";
      objectArray0[1] = (Object) "GLI5fzT:Zzi-{";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3707), "\"kKUZg_3M};:4", "J$0en%8 PPV<]u>", (Options) null, 63, (-212), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("arg", "-");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      mockPrintWriter0.flush();
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/arg", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("-", mockFile0.getName());
      assertEquals("/experiment/arg/-", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "GLI5fzT:Zzi-{", " ", (Options) null, 3024, 1706, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("", "", false, "arg");
      assertNotNull(option0);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("", option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 45, options1, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      mockPrintWriter0.flush();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1015, "FYw+e!FQB", "FYw+e!FQB", options1, 45, 2, "GLI5fzT:Zzi-{", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertEquals("-", option0.getDescription());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption("", false, "arg");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      List list0 = options0.helpOptions();
      assertSame(options0, options1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      helpFormatter0.printHelp("B.,wYaE/FZhO", (String) null, options1, "B.,wYaE/FZhO", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 5155, "-", "arg", options1, 9, 10, "", false);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("usage: ", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals("usage: ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      int int0 = helpFormatter1.getDescPadding();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "", options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertNotNull(optionGroup1);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options0.addOptionGroup(optionGroup1);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options3 = options2.addOption((String) null, true, "arg");
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options0, options3);
      assertSame(optionGroup0, optionGroup1);
      assertSame(optionGroup1, optionGroup0);
      assertSame(options2, options3);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertSame(options3, options0);
      assertSame(options3, options1);
      assertSame(options3, options2);
      assertNotNull(options3);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      assertFalse(optionGroup1.isRequired());
      assertNull(optionGroup1.getSelected());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Q", (String) null, options2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string0);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasOptionalArg());
      assertEquals(97, option0.getId());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertNull(option0.getArgName());
      assertFalse(option0.hasArgs());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp("-", "-", options0, (String) null, false);
      assertSame(options0, options1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string1 = helpFormatter0.getLongOptPrefix();
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", string1);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 109, "", "", options1, (-2), 1015, "hfHOVl8t=)Bc8p;d9S?", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      StringBuffer stringBuffer0 = new StringBuffer("--");
      assertNotNull(stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("--", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append(2127L);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("--2127", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(6, stringBuffer1.length());
      assertEquals("--2127", stringBuffer1.toString());
      
      helpFormatter1.setOptPrefix("usage: ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      StringBuffer stringBuffer2 = helpFormatter1.renderWrappedText(stringBuffer0, 45, 45, "usage: ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(12, stringBuffer0.length());
      assertEquals("--2127usage:", stringBuffer0.toString());
      assertEquals("--2127usage:", stringBuffer2.toString());
      assertEquals(12, stringBuffer2.length());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer3 = helpFormatter0.renderOptions(stringBuffer2, 74, options0, 2, 3);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer0);
      assertNotNull(stringBuffer3);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("usage: ", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(12, stringBuffer0.length());
      assertEquals("--2127usage:", stringBuffer0.toString());
      assertEquals("--2127usage:", stringBuffer2.toString());
      assertEquals(12, stringBuffer2.length());
      assertEquals(12, stringBuffer3.length());
      assertEquals("--2127usage:", stringBuffer3.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter1.defaultOptPrefix = " ";
      assertEquals(" ", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      
      StringBuffer stringBuffer4 = helpFormatter0.renderOptions(stringBuffer3, 3, options0, 1, 120);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer4);
      assertSame(stringBuffer2, stringBuffer4);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer3, stringBuffer4);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer4, stringBuffer3);
      assertSame(stringBuffer4, stringBuffer0);
      assertSame(stringBuffer4, stringBuffer2);
      assertSame(stringBuffer4, stringBuffer1);
      assertNotNull(stringBuffer4);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(12, stringBuffer0.length());
      assertEquals("--2127usage:", stringBuffer0.toString());
      assertEquals("--2127usage:", stringBuffer2.toString());
      assertEquals(12, stringBuffer2.length());
      assertEquals(12, stringBuffer3.length());
      assertEquals("--2127usage:", stringBuffer3.toString());
      assertEquals(12, stringBuffer4.length());
      assertEquals("--2127usage:", stringBuffer4.toString());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setWidth(1);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      int int0 = helpFormatter0.getDescPadding();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, int0);
      
      helpFormatter1.printHelp(":f}9i?h,lfBltr^8Yc", options0, true);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(" ", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      StringBuffer stringBuffer5 = helpFormatter1.renderOptions(stringBuffer4, 3, options0, 1, 3);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer5);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer4);
      assertSame(stringBuffer2, stringBuffer4);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer5);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer3, stringBuffer4);
      assertSame(stringBuffer3, stringBuffer5);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer4, stringBuffer3);
      assertSame(stringBuffer4, stringBuffer0);
      assertSame(stringBuffer4, stringBuffer2);
      assertSame(stringBuffer4, stringBuffer1);
      assertSame(stringBuffer4, stringBuffer5);
      assertSame(stringBuffer5, stringBuffer2);
      assertSame(stringBuffer5, stringBuffer1);
      assertSame(stringBuffer5, stringBuffer0);
      assertSame(stringBuffer5, stringBuffer4);
      assertSame(stringBuffer5, stringBuffer3);
      assertNotNull(stringBuffer5);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(12, stringBuffer0.length());
      assertEquals("--2127usage:", stringBuffer0.toString());
      assertEquals("--2127usage:", stringBuffer2.toString());
      assertEquals(12, stringBuffer2.length());
      assertEquals(12, stringBuffer3.length());
      assertEquals("--2127usage:", stringBuffer3.toString());
      assertEquals(12, stringBuffer4.length());
      assertEquals("--2127usage:", stringBuffer4.toString());
      assertEquals("--2127usage:", stringBuffer5.toString());
      assertEquals(12, stringBuffer5.length());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, helpFormatter0.getWidth());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("usage: ", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("aGWk1emR o/", (String) null, options0, (String) null, true);
      assertSame(options0, options1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.setOptPrefix("");
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertNotNull(helpFormatter2);
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter2.defaultWidth);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('y');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("y", stringWriter0.toString());
      assertEquals("y", stringWriter1.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("yarg", stringWriter0.toString());
      assertEquals("yarg", stringWriter1.toString());
      
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, " ", "arg", (Options) null, (-1731), 6, "org.apache.commons.cli.OptionGroup");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", "arg", options0, "usage: ", true);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1839), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", " ", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("-", "--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertTrue(boolean0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "arusg");
      assertNotNull(option0);
      assertEquals("arusg", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals("arusg", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertNull(option0.getValue());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      helpFormatter0.printHelp("-", (String) null, options0, "-", true);
      assertSame(options0, options1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-786), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("-");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, (String) null);
      assertNotNull(option0);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertFalse(option0.isRequired());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertNull(option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp("#gXZFwSr0jpD{WhM", "", options0, "org.apache.commons.cli.OptionGroup", true);
      assertSame(options0, options1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "--", true, "");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-167), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter1.setDescPadding(74);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultDescPad);
      
      mockPrintWriter0.println(1);
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", "J", false, "arg");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("-", options1, false);
      assertNotSame(helpFormatter0, helpFormatter1);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter1.printHelp("-", "", options1, "--", true);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(74, helpFormatter1.getDescPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "\n");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      String string0 = helpFormatter1.getSyntaxPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string0);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("usage: ", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "X-@BEKjzd^");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.rtrim("-");
      assertNotNull(string1);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("--");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      mockPrintWriter0.write(charArray0);
      assertNotSame(mockFile1, mockFile0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f'}, charArray0);
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals("--", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canRead());
      assertEquals("--", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(5, charArray0.length);
      
      mockPrintWriter0.write(charArray0);
      assertNotSame(mockFile1, mockFile0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f'}, charArray0);
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertTrue(mockFile1.exists());
      assertEquals("--", mockFile1.getName());
      assertNull(mockFile1.getParent());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canRead());
      assertEquals("--", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.length());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("--", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(comparator1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 104, "usage: ");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      charArray0[6] = '4';
      charArray0[7] = 'm';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f', '\"', '4', 'm'}, charArray0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("--", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertEquals(8, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " ");
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("--", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 10, 10, ";fk,mxJZI}Wr");
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(30L, mockFile0.length());
      assertEquals("--", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string2 = helpFormatter0.rtrim(" ");
      assertNotNull(string2);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("--", mockFile0.toString());
      assertEquals("--", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, (-1675), "usage: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2838, 104, "usage: ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 16, "", "--", (Options) null, 1, 2983, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options1.addOption("@", false, "arg");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      List list0 = options1.helpOptions();
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertNotNull(list0);
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp("-", "org.apache.commons.cli.HelpFormatter$1", options2, " :: ", true);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertEquals('\u0000', option0.getValueSeparator());
      assertNull(option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasLongOpt());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasOptionalArg());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "FYw+e!FQB", true, " ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "FYw+e!FQB", "L!syoYYammD|g-3'm", options1, 2, 44, "1pQYx'!");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("", false, "-");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4197, "-", "Fqm\"Gb", options0, 64, 44, "FYw+e!FQB");
      assertSame(options0, options1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getNewLine();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "arg");
      assertNotNull(option0);
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasOptionalArg());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      helpFormatter0.printHelp("-", (String) null, options0, "-", true);
      assertSame(options0, options1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "FYw+e!FQB", true, " ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("arg", "--", options1, "-", true);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1442), 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'J';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'J', 'f', 'f'}, charArray0);
      assertEquals(6, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "hYwfe!FQB");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("-", string0);
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(378, "", "L[,8~le", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("usage: ");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      helpFormatter0.defaultLongOptPrefix = null;
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertNull(helpFormatter0.getLongOptPrefix());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "arg");
      assertNotNull(option0);
      assertFalse(option0.hasOptionalArg());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasArgName());
      assertNull(option0.getLongOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertEquals("arg", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals(97, option0.getId());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getOpt());
      assertFalse(option0.hasArgs());
      assertNull(option0.getValue());
      assertFalse(option0.isRequired());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(74);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = "Y14@m*\"2f4x7,x";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y14@m*\"2f4x7,x");
      assertNotNull(mockPrintWriter0);
      
      int int0 = 9;
      Options options0 = new Options();
      assertNotNull(options0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      helpFormatter0.setOptPrefix("");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      int int1 = 3158;
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string1 = "n6";
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'A';
      mockPrintWriter0.write(charArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertArrayEquals(new char[] {'3', 'A'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Option option0 = options0.getOption("n6");
      assertNull(option0);
      
      int int2 = (-6081);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "n6");
      assertNotNull(stringBuffer0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("n6", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 39, 115, "[ARG...]");
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals("n6[ARG...]", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals(10, stringBuffer1.length());
      assertEquals("n6[ARG...]", stringBuffer1.toString());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 30, options0, (-2122), 115);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      boolean boolean0 = options0.hasLongOption("");
      assertFalse(boolean0);
      
      Options options1 = options0.addOption((String) null, "\n", true, "usage: ");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Collection collection0 = options0.getOptionGroups();
      assertSame(options0, options1);
      assertNotNull(collection0);
      
      helpFormatter0.printHelp("?D!'", "+bt91U<FX4$?o", options0, "?D!'", true);
      assertSame(options0, options1);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "\n");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals("--", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator comparator1 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 1, " ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertEquals("--", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      String string2 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string2);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(string2.equals((Object)string1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals("-", string2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "usage: ");
      assertNotNull(option0);
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      List list0 = options0.helpOptions();
      assertSame(options0, options1);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Options options2 = options1.addOption(option0);
      assertSame(options0, options1);
      assertSame(options0, options2);
      assertSame(options1, options2);
      assertSame(options1, options0);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(option0.hasArgs());
      assertEquals("usage: ", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getValue());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", string0);
      
      MockFile mockFile0 = new MockFile(" ");
      assertNotNull(mockFile0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(" ", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(" ", mockFile0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '$';
      charArray0[2] = '4';
      charArray0[3] = '\"';
      charArray0[4] = '/';
      charArray0[5] = 'f';
      charArray0[6] = 'm';
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer0 = helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 32, 32);
      assertNull(stringBuffer0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 32, 32);
      assertNull(stringBuffer1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      charArray0[7] = 'm';
      charArray0[8] = 'O';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {',', '$', '4', '\"', '/', 'f', 'm', 'm', 'O'}, charArray0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(" ", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.toString());
      assertEquals(9, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.HelpFormatter$1");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(" ", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.toString());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "-");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(" ", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(" ", mockFile0.toString());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "--", true, "<s;2");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp("<s;2", "<s;2", options1, "", false);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.rtrim("-");
      assertNotNull(string1);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertTrue(string1.equals((Object)string0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("--");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      mockPrintWriter0.write(charArray0);
      assertNotSame(mockFile1, mockFile0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f'}, charArray0);
      assertTrue(mockFile1.canExecute());
      assertEquals("--", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertEquals("--", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(5, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "-");
      assertNotSame(mockFile1, mockFile0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertTrue(mockFile1.canExecute());
      assertEquals("--", mockFile1.getName());
      assertFalse(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertNull(mockFile1.getParent());
      assertEquals("--", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canWrite());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals(0L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string2 = helpFormatter0.getOptPrefix();
      assertNotNull(string2);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertTrue(string2.equals((Object)string1));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string2);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(19, "L[,8~le", "lT:pbcQ>zU\"5{", options0, "");
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.setLeftPadding(531);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(531, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(531, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption("arg", "", false, "");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      Options options2 = options1.addOption((String) null, true, "");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-531), "xV", (String) null, options2, 2, (-531), "EFjq/ZERit`aw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-949), options0, 1, 1);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, 3, (-2052), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", string0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option("arg", "-");
      assertNotNull(option0);
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasArg());
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertEquals(97, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertFalse(option0.hasOptionalArg());
      assertEquals("-", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals((-2), Option.UNLIMITED_VALUES);
      assertEquals((-1), Option.UNINITIALIZED);
      
      Options options2 = options0.addOption("", true, "eYD=pC{}nqv");
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options2, options1);
      assertSame(options2, options0);
      assertNotNull(options2);
      
      helpFormatter0.printHelp("@", "eYD=pC{}nqv", options0, "", false);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Option option0 = new Option((String) null, "arg");
      assertNotNull(option0);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options1 = options0.addOption(option0);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      List list0 = options1.helpOptions();
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(list0);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      Options options2 = options1.addOption(option0);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertSame(options1, options2);
      assertSame(options2, options0);
      assertSame(options2, options1);
      assertNotNull(options2);
      assertFalse(option0.hasValueSeparator());
      assertNull(option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getDescription());
      assertEquals('\u0000', option0.getValueSeparator());
      assertFalse(option0.isRequired());
      assertNull(option0.getValue());
      assertNull(option0.getOpt());
      assertFalse(option0.hasArg());
      assertNull(option0.getLongOpt());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasArgName());
      assertFalse(option0.hasOptionalArg());
      assertEquals((-1), Option.UNINITIALIZED);
      assertEquals((-2), Option.UNLIMITED_VALUES);
      
      helpFormatter0.printHelp("hYwfe!FQB", (String) null, options0, "hYwfe!FQB", true);
      assertSame(options0, options2);
      assertSame(options0, options1);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getArgName();
      assertNotNull(string0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setLeftPadding(0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.defaultNewLine = "ff##L]\".8E#";
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("ff##L]\".8E#", helpFormatter0.getNewLine());
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      String string0 = helpFormatter0.createPadding(1);
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("ff##L]\".8E#", helpFormatter0.getNewLine());
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", string0);
      
      helpFormatter0.setLeftPadding(0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("ff##L]\".8E#", helpFormatter0.getNewLine());
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("ff##L]\".8E#", helpFormatter0.getNewLine());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("ff##L]\".8E#", helpFormatter0.getNewLine());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(0, int0);
      
      String string1 = "Uz";
      MockFile mockFile0 = new MockFile("Uz", " ");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Uz/ ", mockFile0.toString());
      assertEquals("/experiment/Uz", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      
      boolean boolean0 = mockFile0.setExecutable(true, true);
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals("/experiment/Uz/ ", mockFile0.toString());
      assertEquals("/experiment/Uz", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertNotSame(helpFormatter0, helpFormatter1);
      assertNotNull(comparator1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3298, 2, "S48'p");
      assertNotSame(helpFormatter0, helpFormatter1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertFalse(helpFormatter0.equals((Object)helpFormatter1));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string2 = helpFormatter1.getOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string2);
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertFalse(string2.equals((Object)string1));
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("-", string2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, "l6,-_=U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.rtrim("HO:7dQv");
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("HO:7dQv", string0);
      
      MockFile mockFile0 = new MockFile(",uTht7kfs[h<S", "wdKwo@r");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile("HO:7dQv");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-12), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(501);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = 'f';
      charArray0[2] = 'S';
      charArray0[3] = 'A';
      charArray0[4] = 'G';
      charArray0[5] = '*';
      charArray0[6] = 'F';
      charArray0[7] = '{';
      mockPrintStream0.print(charArray0);
      assertArrayEquals(new char[] {']', 'f', 'S', 'A', 'G', '*', 'F', '{'}, charArray0);
      assertEquals("]fSAG*F{", byteArrayOutputStream0.toString());
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals(8, charArray0.length);
      
      mockPrintWriter0.print(0L);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertEquals("]fSAG*F{", byteArrayOutputStream0.toString());
      assertEquals(8, byteArrayOutputStream0.size());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.setDescPadding(17);
      assertEquals(17, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(17, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.printOptions(mockPrintWriter1, 501, options0, 842, 842);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertEquals(17, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("]fSAG*F{", byteArrayOutputStream0.toString());
      assertEquals(8, byteArrayOutputStream0.size());
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertEquals(17, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertNotNull(string0);
      assertEquals(17, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(17, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals("usage: ", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      charArray0[6] = '4';
      charArray0[7] = 'm';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f', '\"', '4', 'm'}, charArray0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertEquals(8, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " ");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string2 = helpFormatter0.getOptPrefix();
      assertNotNull(string2);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", string2);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 10, 10, "-");
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setDescPadding(10);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(10, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(10, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "FYw+e!FQB");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      charArray0[6] = '4';
      charArray0[7] = 'm';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f', '\"', '4', 'm'}, charArray0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("--", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(8, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " ");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("--", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5043, " ");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("--", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Comparator comparator1 = helpFormatter0.getOptionComparator();
      assertNotNull(comparator1);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("d\"[Y LYN5-Q", "d\"[Y LYN5-Q", options0, "org.apache.commons.cli.Util");
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.printHelp("d\"[Y LYN5-Q", "d\"[Y LYN5-Q", options0, "l<s-d:E", true);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setLeftPadding(0);
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      helpFormatter0.defaultNewLine = "ff##]\".8E#";
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("ff##]\".8E#", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      
      String string0 = helpFormatter0.createPadding(0);
      assertNotNull(string0);
      assertEquals(0, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("ff##]\".8E#", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(0, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("", string0);
      
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("ff##]\".8E#", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      int int1 = 0;
      helpFormatter0.setWidth(0);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("ff##]\".8E#", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      int int2 = helpFormatter0.findWrapPos(" ", 32, 0);
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("ff##]\".8E#", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-1), int2);
      
      int int3 = helpFormatter0.getLeftPadding();
      assertEquals((-1), helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("ff##]\".8E#", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals((-1), helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-1), int3);
      
      String string1 = "Uz";
      MockFile mockFile0 = new MockFile("Uz", " ");
      assertNotNull(mockFile0);
      
      mockFile0.deleteOnExit();
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Uz", mockFile0.getParent());
      assertEquals("/experiment/Uz/ ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      boolean boolean0 = mockFile0.setExecutable(true, true);
      assertEquals(" ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.exists());
      assertEquals("/experiment/Uz", mockFile0.getParent());
      assertEquals("/experiment/Uz/ ", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(boolean0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(55, "d\"[Y LYN5-Q", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setLongOptSeparator("");
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setNewLine("");
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.rtrim("line.separator");
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("line.separator", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = "arg";
      helpFormatter0.setLongOptSeparator("");
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2045, (Options) null, 0, 2045);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      String string0 = "FYw+e\\!FQB";
      Options options0 = new Options();
      assertNotNull(options0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      helpFormatter1.setNewLine(" ");
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      
      String string1 = helpFormatter1.getLongOptPrefix();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(string1);
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals(" ", helpFormatter1.getNewLine());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals("--", string1);
      
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "oR8+}w-SA@", "usage: ", options0, 1, (-4068), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.setWidth(74);
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D9yHbhT40J");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Option option0 = options0.getOption("n6");
      assertNull(option0);
      
      List list1 = options0.getMatchingOptions("\n");
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter1.defaultDescPad);
      
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "]@\"-I&f+F_#bJ6Q:qwp");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      int int0 = 0;
      helpFormatter0.setWidth(0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(0, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(0, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      String string0 = "Y14@m*\"2f4x7,x";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y14@m*\"2f4x7,x");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Option option0 = options0.getOption("n6");
      assertNull(option0);
      
      List list1 = options0.getMatchingOptions("\n");
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "Y14@m*\"2f4x7,x", "Y14@m*\"2f4x7,x", options0, 3158, (-6081), "Y14@m*\"2f4x7,x");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setWidth(74);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y14@m*\"2f4x7,x");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Option option0 = options0.getOption("n6");
      assertNull(option0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'f';
      printWriter0.write(charArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertArrayEquals(new char[] {'\"', 'f'}, charArray0);
      assertEquals(2, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "o@*a_L&#,l0\"N/de");
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", string0);
      
      Options options1 = new Options();
      assertNotNull(options1);
      assertFalse(options1.equals((Object)options0));
      
      helpFormatter0.printHelp(31, "o@*a_L&#,l0\"N/de", "-", options1, "C{R");
      assertNotSame(options1, options0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertFalse(options1.equals((Object)options0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter1.setLeftPadding(34);
      assertNotSame(helpFormatter1, helpFormatter0);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(34, helpFormatter1.getLeftPadding());
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(34, helpFormatter1.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      String string0 = helpFormatter0.rtrim("line.separator");
      assertNotNull(string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("line.separator", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(1, int0);
      
      String string0 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(" ", string0);
      
      helpFormatter0.setLongOptSeparator("[0-3_k,%F:gQq");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("[0-3_k,%F:gQq", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      StringWriter stringWriter0 = new StringWriter(74);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      int int1 = 0;
      String string1 = "";
      Options options0 = new Options();
      assertNotNull(options0);
      
      OptionGroup optionGroup0 = new OptionGroup();
      assertNotNull(optionGroup0);
      assertFalse(optionGroup0.isRequired());
      assertNull(optionGroup0.getSelected());
      
      Option option0 = null;
      try {
        option0 = new Option("?Z7$9~,2T", "b_1lVzN!pJ}HQEC", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?Z7$9~,2T' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setOptPrefix("");
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertNotNull(helpFormatter1);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      assertNotSame(helpFormatter1, helpFormatter0);
      assertNotNull(comparator0);
      assertEquals("-", helpFormatter1.getOptPrefix());
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(74, helpFormatter1.getWidth());
      assertEquals(1, helpFormatter1.getLeftPadding());
      assertEquals("\n", helpFormatter1.getNewLine());
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(" ", helpFormatter1.getLongOptSeparator());
      assertEquals(3, helpFormatter1.getDescPadding());
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertFalse(helpFormatter1.equals((Object)helpFormatter0));
      assertEquals(3, helpFormatter1.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter1.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter1.defaultWidth);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HelpFormatter helpFormatter2 = new HelpFormatter();
      assertNotNull(helpFormatter2);
      assertEquals("arg", helpFormatter2.getArgName());
      assertEquals(3, helpFormatter2.getDescPadding());
      assertEquals("\n", helpFormatter2.getNewLine());
      assertEquals(74, helpFormatter2.getWidth());
      assertEquals("--", helpFormatter2.getLongOptPrefix());
      assertEquals(" ", helpFormatter2.getLongOptSeparator());
      assertEquals(1, helpFormatter2.getLeftPadding());
      assertEquals("-", helpFormatter2.getOptPrefix());
      assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
      assertFalse(helpFormatter2.equals((Object)helpFormatter0));
      assertFalse(helpFormatter2.equals((Object)helpFormatter1));
      assertEquals(3, helpFormatter2.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter2.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter2.defaultWidth);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", (Options) null, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      String string0 = helpFormatter0.getOptPrefix();
      assertNotNull(string0);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("-", string0);
      
      String string1 = helpFormatter0.getLongOptSeparator();
      assertNotNull(string1);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(" ", string1);
      
      MockFile mockFile0 = new MockFile("--");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'e';
      charArray0[2] = ',';
      charArray0[3] = 'B';
      charArray0[4] = 'f';
      charArray0[5] = '\"';
      charArray0[6] = '4';
      charArray0[7] = 'm';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\\', 'e', ',', 'B', 'f', '\"', '4', 'm'}, charArray0);
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertEquals(8, charArray0.length);
      
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, " ");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("--", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("--", mockFile0.toString());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      String string2 = helpFormatter0.getOptPrefix();
      assertNotNull(string2);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals("-", string2);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp(10, "-", " ", options0, "-");
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      helpFormatter0.setLeftPadding((-2862));
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals((-2862), helpFormatter0.getLeftPadding());
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals((-2862), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      helpFormatter0.printHelp("1[<{r;C<])", options0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9*!X?&W}ZsmSM/&q", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Options options0 = new Options();
      assertNotNull(options0);
      
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.printHelp("FYw+e!FQB", options0, false);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = helpFormatter0.createPadding(3);
      assertNotNull(string0);
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("   ", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      String string0 = " ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) printWriter0;
      PrintWriter printWriter1 = mockPrintWriter1.format("usage: ", objectArray0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, printWriter1);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(printWriter0, printWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertSame(mockPrintWriter1, printWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertSame(printWriter1, mockPrintWriter1);
      assertNotSame(printWriter1, printWriter0);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotNull(printWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertEquals(1, objectArray0.length);
      
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-1482), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      int int0 = 0;
      helpFormatter0.optionComparator = null;
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      assertNotNull(options0);
      
      List list0 = options0.helpOptions();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, (String) null, "DpS2L/,h,TWbZ5_FhZF", options0, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      
      String string0 = helpFormatter0.rtrim("line.separator");
      assertNotNull(string0);
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals("line.separator", string0);
      
      int int0 = helpFormatter0.getWidth();
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      assertNotNull(mockPrintWriter0);
      
      Options options0 = new Options();
      assertNotNull(options0);
      
      Options options1 = options0.addOption((String) null, true, "--");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertNotNull(options1);
      
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "FYw+e!FQB", "L!syoYYam(D|g-3m", options1, 2, 44, "1pQYx'!");
      assertSame(options0, options1);
      assertSame(options1, options0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      
      helpFormatter0.getNewLine();
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertNotNull(helpFormatter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      helpFormatter0.setLongOptPrefix((String) null);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      helpFormatter0.setSyntaxPrefix("[ARG...]");
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("[ARG...]", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
      
      MockFile mockFile0 = new MockFile("has already been selected: '", "G_Qut}G F0'vi");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("[ARG...]", "usage: ", (File) mockFile0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertEquals("G_Qut}G F0'vi", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/has already been selected: '", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", mockFile0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("[ARG...]0usage: ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi/[ARG...]0usage: ", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("G_Qut}G F0'vi", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/has already been selected: '", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", mockFile0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("[ARG...]0usage: ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi/[ARG...]0usage: ", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      mockPrintWriter0.println("org.apache.commons.cli.HelpFormatter");
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertEquals("G_Qut}G F0'vi", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/has already been selected: '", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", mockFile0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("[ARG...]0usage: ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi/[ARG...]0usage: ", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      assertNotNull(mockPrintWriter1);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2162, "`c*{9-");
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertSame(mockPrintWriter0, printWriter0);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.getDescPadding());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("[ARG...]", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.getLeftPadding());
      assertEquals(74, helpFormatter0.getWidth());
      assertEquals("\n", helpFormatter0.getNewLine());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertNull(helpFormatter0.getLongOptPrefix());
      assertEquals("G_Qut}G F0'vi", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/has already been selected: '", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", mockFile0.toString());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("[ARG...]0usage: ", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi/[ARG...]0usage: ", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertTrue(file0.isFile());
      assertEquals("/experiment/has already been selected: '/G_Qut}G F0'vi", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
      assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "A[qJkU[}R1Po)~@M";
      helpFormatter0.defaultArgName = "A[qJkU[}R1Po)~@M";
      helpFormatter0.setLongOptPrefix("A[qJkU[}R1Po)~@M");
      helpFormatter0.defaultLeftPad = 13;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      String string1 = "j";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      stringWriter0.append((CharSequence) "--");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[_#+]v=^w", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(9);
      helpFormatter0.setLeftPadding(74);
      String string0 = "usage: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.setOptPrefix("N8,KiX;i/G2m");
      helpFormatter0.getWidth();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2041), 34, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-12));
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", "26!_&C]1s_U=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 26!_&C]1s_U=
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 2;
      Options options0 = new Options();
      options0.addOption("arg", "FYw+e!FQB", true, " ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1475), "lT:pbcQ>zU\"5{", ">t(dWSAtM<", options0, "Cy$<I\u0003OFpn)k-mQ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "HjS`T,q2r'fQ,,A[Q";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("HjS`T,q2r'fQ,,A[Q", "HjS`T,q2r'fQ,,A[Q", (Options) null, "HjS`T,q2r'fQ,,A[Q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setSyntaxPrefix("[ARG...]");
      MockFile mockFile0 = new MockFile("has already been selected: '", "G_Qut}G F0'vi");
      File file0 = MockFile.createTempFile("[ARG...]", "usage: ", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      mockPrintWriter0.println("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp(64, "has already been selected: '", "6W]6*'cSG", options0, "TgLu*iPE,eSqom;Mu");
      helpFormatter0.setLeftPadding((-2862));
      assertEquals("[ARG...]", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("DT(zkT");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append('q');
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1219), (-1219), "DT(zkT");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      mockPrintWriter0.write(charArray0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ");
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals("-", string1);
      
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "\n", "QgGEJiMj+", options0, "8kIj_40yo");
      helpFormatter1.setLeftPadding(3);
      assertEquals(74, helpFormatter1.defaultWidth);
      assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
      assertEquals(3, helpFormatter1.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      options0.toString();
      options0.addOption("arg", "arg", false, "-");
      options0.toString();
      helpFormatter0.defaultNewLine = "ZZr2gFmDP?b";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-795), "n", " | ", options0, "n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("d\"[Y LYN5-Q", "d\"[Y LYN5-Q", options0, "l6,-_=U", true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultNewLine = "ff##]\".8E#";
      helpFormatter0.createPadding(0);
      int int0 = (-1);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setWidth(0);
      helpFormatter0.findWrapPos(" ", 0, 0);
      helpFormatter0.getLeftPadding();
      String string0 = "Uz";
      MockFile mockFile0 = new MockFile("Uz", " ");
      mockFile0.deleteOnExit();
      mockFile0.setExecutable(true, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 644;
      int int1 = (-235);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 644, (-235));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-499));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "n";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("az.v\".bc}6lQkh#Qy", "usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'az.v\".bc}6lQkh#Qy' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1654;
      helpFormatter0.setWidth(1894);
      StringBuffer stringBuffer0 = new StringBuffer(1894);
      Options options0 = new Options();
      options0.hasOption("The option '");
      String string0 = " ";
      Options options1 = options0.addOption((String) null, "arg", true, " ");
      options1.hasShortOption("--");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, 0, (-1910));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
