/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:05:13 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      helpFormatter0.printHelp(9, "!MWas}Q_/RlL4<Pdk", "!MWas}Q_/RlL4<Pdk", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "vS";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, 3, "arg");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-4324);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("l;s,~e", "l;s,~e", options0, "l;s,~e", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "FPfZBhZk'62}S9cfj");
      option0.setArgName("");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2918, "   ", "   ", options0, "FPfZBhZk'62}S9cfj", true);
      helpFormatter0.printHelp("-", "ZQ`$%!`\"=Y9a3)}ZO", options0, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 74);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "FPfZBhZk'62}S9cfj");
      option0.setArgName("");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1158, "--", "usage: ", options1, "org.apache.commons.cli.AlreadySelectedException", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.findWrapPos("c5o`;C1$*N", 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<Q!zNLn\"h6=q0!Q8vGy";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<Q!zNLn\"h6=q0!Q8vGy");
      mockPrintWriter0.println((double) 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "&pt?H:+t'b{3SF;", "<Q!zNLn\"h6=q0!Q8vGy", (Options) null, "<Q!zNLn\"h6=q0!Q8vGy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 0, 0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("qa~).OM@\f)h");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      StringWriter stringWriter3 = new StringWriter(1);
      stringWriter3.write(34);
      stringWriter3.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer("'");
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 1, " ] [ long ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 127, " ] [ long ", "", options0, (-2477), (-2477), " ] [ long ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      option0.setArgName("-");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[]Y&", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", " ", options0, "!MWas}Q_/RlL4<8Pk", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*:9Z";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*:9Z");
      int int0 = (-635);
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-635), "*:9Z", "B`dQ\"NWHH01C", options0, (-1), 74, "B`dQ\"NWHH01C");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("", false, "E");
      Option option0 = null;
      try {
        option0 = new Option("Tr`Kk>O3I1Csi", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Tr`Kk>O3I1Csi' contains an illegal character : '`'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2704));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "3l", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-224), "org.apache.commons.cli.HelpFormatter$1", "N<CNN}_YMXHjd'$o9SU", options0, "bK}?wR;]%+LKcD=(#\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = (-1569);
      helpFormatter0.defaultLeftPad = (-1569);
      Option option0 = new Option((String) null, true, "-");
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup0.setSelected(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(51, "-", "-", options0, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.setWidth((-1668));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f3P=+M9)LKe_", "i@?v,$kvNHW", options0, "g8[=},q[ i_S6s#{u", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", " ", options0, (String) null);
      helpFormatter0.findWrapPos("usage: ", 1, 3);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(10);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ", 1, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('7');
      helpFormatter1.printOptions(printWriter0, 1020, options0, 10, 10);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      Options options0 = new Options();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cw");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, ", ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "7xnh~OrB(i8N+OJ", options0, 1, (-867), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printHelp(printWriter0, 3297, "lW\"mF%kS:", (String) null, options0, 40, 3297, "", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1402), 3297, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      helpFormatter0.defaultArgName = " *3b<mkw(egYJX$h";
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 102, " *3b<mkw(egYJX$h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3290, options0, 3290, 3290);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3290, 279, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sLgZR[EG", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "arg", "\"", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "X0u(0K8DcCxVC1&C");
      option1.toString();
      helpFormatter0.findWrapPos("line.separator", 36, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(106);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter0, 59, "lW\"mF%kS:", "org.apache.commons.cli.OptionValidator", options0, 59, 59, (String) null, true);
      helpFormatter0.createPadding(2761);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "", options0, "");
      MockFile mockFile0 = new MockFile((File) null, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4696), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      option0.setValueSeparator('B');
      optionGroup0.addOption(option0);
      String string0 = "";
      Option option1 = new Option("", "^L*I%S4FrBR?p7D`");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      optionGroup0.setSelected(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      options1.getOption("VkN_Dco&QW");
      option1.clearValues();
      options1.addOptionGroup(optionGroup0);
      options1.hasShortOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 23, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 9, "RM19x^$eV");
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = 'j';
      charArray0[2] = ']';
      charArray0[3] = '0';
      charArray0[4] = '(';
      charArray0[5] = '-';
      charArray0[6] = 'R';
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "\n");
      String string0 = "V.l<T7LNyFe";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      Options options2 = options1.addOption("", "-", true, "");
      boolean boolean0 = true;
      helpFormatter0.printHelp(1715, " ", "V.l<T7LNyFe", options2, " ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Nh[l&$!S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "uaAw", "\n", options1, 11, 74, "", true);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "\n");
      String string0 = "V.l<T7LNyFe";
      helpFormatter1.rtrim("arg");
      String string1 = "oRO8;1Qb f=D!T4Z1";
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-819), options1, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      option0.setValueSeparator('B');
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "^L*I%S4FrBR?p7D`");
      optionGroup0.setSelected(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("VkN_Dco&QW");
      options1.hasShortOption("-");
      helpFormatter0.rtrim((String) null);
      Option option2 = null;
      try {
        option2 = new Option("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", false, "\n");
      options0.hasShortOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = 'X';
      charArray0[2] = 'y';
      charArray0[3] = '\"';
      charArray0[4] = 'J';
      charArray0[5] = 'X';
      charArray0[6] = '9';
      charArray0[7] = 'J';
      charArray0[8] = '.';
      mockPrintWriter0.print(charArray0);
      helpFormatter0.printWrapped(printWriter0, 31, "");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PrintWriter printWriter0 = null;
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      option0.setValueSeparator('B');
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "^L*I%S4FrBR?p7D`");
      optionGroup0.setSelected(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOption("VkN_Dco&QW");
      options1.hasShortOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 23, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 66, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1345), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp(74, "hd", "hd", options2, ",!VjOE%Fz!izE]t", false);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 75, "2J3L>", "arg", options1, 75, 74, " ", true);
      StringWriter stringWriter1 = new StringWriter(31);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 3, " ");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.defaultOptPrefix = "P_%%h=x=or{gde";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 10, "\n");
      Option option0 = new Option("arg", "");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "K&@o?Wy{jZ5(F", "y,~lq5)#8d2S6g>FT=", options1, 36, 717, "y,~lq5)#8d2S6g>FT=");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\n");
      String string0 = "u~)8T|`MeB-";
      helpFormatter0.printHelp(3, "NT6MXsU~HB6(-Xq", "NT6MXsU~HB6(-Xq", options1, "u~)8T|`MeB-", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, (String) null, options1, 1907, 1907, "*8c{Y'=", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, " ");
      Options options1 = options0.addOption(option0);
      options1.addOption("", "3,E0[, 6`&#b&%|", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("uOa%4ezDz}V", "W`o^oAxsz!DJJH", options1, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("-", (String) null, options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      options0.hasOption("P_%%h=x=or{gde");
      Options options1 = options0.addOption("", false, "usage: ");
      options1.hasShortOption("\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "zV~X$}j#&Gs;!~m", "-", options1, "arg", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options1, 74, 3, "usage: ", false);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 317, 3, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-358), (Options) null, 317, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      options0.hasOption("P_%%h=x=or{gde");
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.defaultOptPrefix = "P_%%h=x=or{gde";
      options1.hasShortOption("\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "zV~X$}j#&Gs;!~m", "-", options1, "arg", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options1, 74, 3, "usage: ", false);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 10, "\n");
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 65, "", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('^');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1252), "", "", options0, 34, (-1252), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("sLgZR[EG", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = 569;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 569, "org.apache.commons.cli.HelpFormatter$1", (String) null, options0, 3, 13, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", " ", options0, "--");
      Options options1 = new Options();
      helpFormatter0.printHelp(944, " ", "lu]", options1, " ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "\n");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, 34, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("I", "", false, "+WB3aoe1}Tp");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "--", "--", options2, (-1), (-2), " [ARG]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Option option0 = new Option("", false, "--");
      Options options1 = options0.addOption(option0);
      option0.setArgName("[");
      helpFormatter0.printHelp("rC@i5# U;EOr9J[=B{", options1, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "@#(o7kNaB}&0%o9", "", options0, (-2), (-2), "whBn;!wp", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      options1.hasOption(" ]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.printHelp(3, "e6wI", "zV~X$}j#&Gs;!~m", options1, " ]", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("e6wI", 3, (-645));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      options0.addOption((String) null, true, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "u~)8T|`MeB-", "lC4", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 122, 122, " ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "e");
      options0.hasShortOption(" ");
      options0.hasOption("usage: ");
      helpFormatter0.printHelp(3, "z9Mb{hHw~Ujh;mD,O-", "z9Mb{hHw~Ujh;mD,O-", options0, "z9Mb{hHw~Ujh;mD,O-", false);
      helpFormatter0.defaultWidth = 3;
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 3, options1, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "usage: ");
      options0.hasShortOption("--");
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2334), "   ", "arg", options0, "arg", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "e");
      options0.hasShortOption(" ");
      options0.hasOption("usage: ");
      helpFormatter0.printHelp(3, "z9Mb{hHw~Ujh;mD,O-", "z9Mb{hHw~Ujh;mD,O-", options0, "z9Mb{hHw~Ujh;mD,O-", false);
      helpFormatter0.defaultWidth = 3;
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options1, 3, 1432);
      helpFormatter0.renderWrappedText(stringBuffer1, 3238, 74, "e");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "s,(N^~X&D'<");
      Options options2 = options1.addOption(option0);
      options2.addOption("", "\"^Fp", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", "line.separator", options1, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      options0.hasOption("P_%%h=x=or{gde");
      Options options1 = options0.addOption("", false, "usage: ");
      options1.hasShortOption("\"");
      options1.hasOption("Knf!~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "zV~X$}j#&Gs;!~m", "-", options1, "arg", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options1, 74, 3, "usage: ", false);
      options1.addOption("", false, "azN\"$TF{[");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("sLgZR[EG", options1, false);
      StringBuffer stringBuffer0 = new StringBuffer(308);
      helpFormatter0.renderWrappedText(stringBuffer0, 308, (-1), "vjX96.aB.P=P!e7\"~");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1281));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v^", "+Skm[ou", (Options) null, "#Tq+ +J0bd");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      helpFormatter0.setWidth(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "u~)8T|`MeB-");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "-", "u~)8T|`MeB-", options1, 0, 33, "", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('O');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("", "", true, "+WB3aoe1}Tp");
      MockFile mockFile0 = new MockFile("", " [ARG]");
      MockFile.createTempFile("e.P%F2f<", "", (File) mockFile0);
      helpFormatter0.printHelp("l{e%K1S~r,;B", options1);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(3);
      Options options1 = options0.addOption((String) null, false, "e");
      options0.hasShortOption(" ");
      options0.hasOption("usage: ");
      helpFormatter0.printHelp(3, "z9Mb{hHw~Ujh;mD,O-", "z9Mb{hHw~Ujh;mD,O-", options0, "z9Mb{hHw~Ujh;mD,O-", false);
      helpFormatter0.defaultWidth = 3;
      Options options2 = new Options();
      helpFormatter0.printHelp("F", "F", options1, "");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1805), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("P_%%h=x=or{gde");
      Options options1 = options0.addOption("", false, "usage: ");
      options1.hasShortOption("\"");
      options1.hasOption("Knf!~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "zV~X$}j#&Gs;!~m", "-", options1, "arg", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options1, 74, 3, "usage: ", false);
      Options options2 = options1.addOption("", false, "azN\"$TF{[");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options2.addOption("9; `bZ@Z", "-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9; `bZ@Z' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "--", options1, ", ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sLgZR[EG", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(64);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer0, 3512, 74, "*7M[Lnvc~.Y~2W");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("f3P=+M9)LKe_", "", options0, "g8[=},q[ i_S6s#{u", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sLgZR[EG", "sLgZR[EG", options0, "org.apache.commons.cli.ParseException");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("NK`");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1720, "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      helpFormatter0.setWidth((-15));
      MockFile mockFile0 = new MockFile("-", "arg");
      MockFile.createTempFile("u~)8T|`MeB-", "arg", (File) mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      helpFormatter0.setWidth(0);
      MockFile mockFile0 = new MockFile("-", "arg");
      MockFile.createTempFile("arg", "\n", (File) mockFile0);
      // Undeclared exception!
      helpFormatter0.printHelp("zV~X$}jZ&Gs;-~m", options0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      options0.hasOption("P_%%h=x=or{gde");
      Options options1 = options0.addOption("", false, "usage: ");
      options1.hasShortOption("\"");
      options1.hasOption("Knf!~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 74;
      helpFormatter1.printHelp(74, "zV~X$}j#&Gs;!~m", "-", options1, "arg", true);
      Options options2 = new Options();
      helpFormatter1.printHelp(" ", "e", options0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 1, options2, 3, (-792));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("sLgZR[EG", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 74, "{yacX~Ja`UL");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, " :: ", "", (Options) null, "e", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1281));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.optionComparator = comparator1;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      helpFormatter0.setWidth(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1862));
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      MockFile mockFile0 = new MockFile("-", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 0, 752, "");
      String string1 = "b<";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3793), "b<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "\n");
      options0.hasShortOption("u~)8T|`MeB-");
      options1.hasOption(" ]");
      helpFormatter0.printHelp(3, "e6wI", "zV~X$}j#&Gs;!~m", options1, " ]", false);
      Options options2 = new Options();
      helpFormatter0.printHelp("^r1KJ", "e", options0, "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "$!xysl)");
      String string0 = "<";
      options0.hasShortOption("<");
      options0.hasOption((String) null);
      options1.addOption("", true, "");
      options1.getMatchingOptions("usage: ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5280), "e", "", options0, "&@:ic.%2/{hObl9Yau", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 98, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.getArgName();
      int int1 = (-359);
      helpFormatter0.findWrapPos("arg", (-359), (-359));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-359));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1281));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.toString();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      MockFile mockFile0 = new MockFile("--", "--");
      File file0 = MockFile.createTempFile("usage: ", " ", (File) mockFile0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter0.setWidth((-1674));
      helpFormatter0.setWidth(752);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      helpFormatter0.printHelp("qoY@?jH:", options1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[5] = (Object) "F6Am}E";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "qoY@?jH:";
      objectArray0[0] = (Object) "F6Am}E";
      Object object1 = new Object();
      objectArray0[7] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("F6Am}E", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1674), (-1674), "F6Am}E");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "e");
      options0.hasShortOption(" ");
      options0.hasOption("zV~X$}j#&Gs;!~m");
      helpFormatter0.printHelp(3, "z9Mb{hHw~Ujh;mD,O-", "z9Mb{hHw~Ujh;mD,O-", options0, "z9Mb{hHw~Ujh;mD,O-", false);
      helpFormatter0.defaultWidth = 3;
      Options options2 = new Options();
      helpFormatter0.printHelp("F", "F", options1, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1281));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      int int0 = 0;
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(1778);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1213), 2, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Y&g";
      objectArray0[4] = (Object) "Y&g";
      objectArray0[5] = (Object) mockFileOutputStream0;
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "org.apache.commons.cli.HelpFormatter", options0, "");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("rC@i5# U;EOr9J[=B{", options1, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1862));
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setWidth(752);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "\\\"cl(k1u7c>";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, ".2tI]rw4,lj9 no)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      Options options0 = null;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) " ] [ long ";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) " ] [ long ";
      PrintStream printStream0 = mockPrintStream0.printf(locale0, " ] [ long ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1766), "org.apache.commons.cli.Options", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("sLgZR[EG", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "e");
      options0.hasShortOption(" ");
      options0.hasOption("zV~X$}j#&Gs;!~m");
      helpFormatter0.printHelp(3, "z9Mb{hHw~Ujh;mD,O-", "z9Mb{hHw~Ujh;mD,O-", options0, "z9Mb{hHw~Ujh;mD,O-", false);
      helpFormatter0.defaultWidth = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "s|Q&i0R3c ^W>{6@&", (Options) null, "s|Q&i0R3c ^W>{6@&", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 491;
      String string0 = "Y&g";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 491, 491, "Y&g");
      mockPrintWriter0.print(0.0F);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Y&g";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "Y&g";
      objectArray0[5] = (Object) mockFileOutputStream0;
      mockPrintWriter0.printf("usage: ", objectArray0);
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      options0.getOptions();
      mockPrintWriter0.println("[ option: ");
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1862));
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      int int0 = 752;
      helpFormatter0.setWidth(752);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, false, "e");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      options0.hasShortOption(" ");
      options0.hasOption("zV~X$}j#&Gs;!~m");
      helpFormatter0.printHelp(3, "z9Mb{hHw~Ujh;mD,O-", "z9Mb{hHw~Ujh;mD,O-", options0, "z9Mb{hHw~Ujh;mD,O-", false);
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "s|Q&i0R3c ^W>{6@&", (Options) null, "s|Q&i0R3c ^W>{6@&", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.getLongOptSeparator();
      int int0 = (-2);
      String string0 = "f+nEO-Q_";
      String string1 = "SJY\"V9:Oh'Q+";
      Options options0 = new Options();
      options0.addOption("arg", true, "Q:NvqX?iNlfkX&cb)");
      Option option0 = null;
      try {
        option0 = new Option("<", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " ", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w@~xq*";
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.setArgName(" ");
      helpFormatter0.printHelp("w@~xq*", options0, true);
      helpFormatter0.setWidth((-864));
      helpFormatter0.setArgName(" ");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("   ", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1623);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding(173);
      helpFormatter0.defaultDescPad = 10;
      helpFormatter0.setWidth(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      assertEquals(173, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.defaultOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.defaultArgName = "NO_ARGS_ALLOWED";
      helpFormatter0.setSyntaxPrefix("w0<eF");
      int int0 = (-839);
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("w0<eF", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'w0<eF' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      int int0 = (-1674);
      helpFormatter0.setWidth((-1674));
      helpFormatter0.rtrim("");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("NQ+_oevo{3");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2824), "NQ+_oevo{3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.getOption("   ");
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "Z[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "", true, "+WB3aoe1}Tp");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1102), "--", "--", options2, (-1), (-2), " [ARG]", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`38)kJ!;8q", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      int int0 = (-3398);
      String string0 = "VGil{4";
      Options options0 = new Options();
      helpFormatter0.setNewLine("i");
      String string1 = "Bf%L\"";
      String string2 = "*K";
      options0.hasShortOption("*K");
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "Bf%L\"", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 74, (Options) null, 1, (-2192));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = null;
      String string1 = "[";
      Options options0 = new Options();
      options0.addOption((String) null, true, "line.separator");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1281));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, (-1095));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3000;
      helpFormatter0.getNewLine();
      int int0 = 1260;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = " ] [ long ";
      // Undeclared exception!
      try { 
        options0.addOption("--", "\n", false, " ] [ long ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
