/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:03:52 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.hasOption("`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("%ChYIDnpZ", (String) null, options0, (String) null);
      helpFormatter0.getArgName();
      int int0 = (-164);
      helpFormatter0.setWidth((-164));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setDescPadding((-387));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "\n", options0, "arg", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.defaultSyntaxPrefix = ", ";
      helpFormatter0.setLeftPadding((-4063));
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultLeftPad = 4048;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 3388, (-4063), "");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("e", "e", options0, "(FT|U@");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "   ";
      Options options0 = new Options();
      String string1 = "MYz'Z:GPB";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "   ", "   ", options0, 0, (-3204), "MYz'Z:GPB");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "8<3]=hv=)Yrd'e\"";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultWidth = (-2324);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "pMI9", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultWidth = (-2552);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Uzm]c`g?d^tJ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.findWrapPos("usage: ", 2, 2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Option option0 = new Option("", "(^4EL1kS", true, "usage: ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "usage: ", "wZgaG+ZwUO~>", options1, "(*tIW~[", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printUsage((PrintWriter) null, 3, "Is4ae:q@r", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      int int0 = 0;
      helpFormatter0.getOptPrefix();
      String string0 = "8<3]=hv=)Yrd'e\"";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "8<3]=hv=)Yrd'e\"");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" ");
      helpFormatter0.setLongOptPrefix(" ");
      Options options0 = new Options();
      helpFormatter0.findWrapPos("8<3]=hv=)Yrd'e\"", 0, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "}v0k46WF;)-");
      option0.setDescription("usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "\n", "\n", options0, "0FN~X(k<np5", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "8e,Bka)eY/!/(z:zC";
      helpFormatter1.defaultWidth = (-398);
      int int0 = 1462;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("arg", "The option '", options0, "arg", false);
      helpFormatter0.createPadding(74);
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 13, 74);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(561);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.createPadding(17);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultLeftPad = 17;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.createPadding(2559);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.createPadding(2559);
      helpFormatter0.getSyntaxPrefix();
      String string0 = "#\\fe>b/a@T3~!";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "#\fe>b/a@T3~!");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #\fe>b/a@T3~!
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("'", 3, (-2322));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("BN uQ6BW", " ", (Options) null, "BN uQ6BW", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "[";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "Cannot add value, list full.", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.insert(3, (Object) null);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-389), "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2628;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, 2628, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "}v0k46WF;)-");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 63, "\"-;GSbx");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 143, "-(Ka}lac)]=\"", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.findWrapPos("0~%Ai<9s{Ek", (-84), (-2745));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.OptionGroup");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.printHelp("g}dtu", "-", options1, "7mIoult,Hd%l_Y*", false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-258);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "", options1, 1, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "[");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1783, "WIpgdE9K", options1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-764), "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "' was specified but an option from this group ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string0 = "";
      Options options3 = options2.addOption((String) null, "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("l9HjO |", "l9HjO |", options3, "l9HjO |", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[0] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "arg", true, ":++!2<VhqoX");
      options0.hasLongOption("arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 82, " ", "$u0JbOS>hQU>eGn4i$L", options2, 13, 41, "org.apache.commons.cli.Options");
      helpFormatter1.findWrapPos("", 3, 74);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 16, "[");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "TJ?Wt&Vne`6#uB", "   ", options0, 32, 75, "TJ?Wt&Vne`6#uB", false);
      helpFormatter0.findWrapPos("arg", 32, 32);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options0, 104, 3334);
      helpFormatter0.renderWrappedText(stringBuffer1, 3334, 13, "Z{");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      String string1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options1, (-2), 66, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options1;
      PrintStream printStream0 = mockPrintStream0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 717, " ", (String) null, options0, 32, 32, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 32, "l^|6n)Y4\"5=");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = ",a@;1yx?o'GbLk&*j";
      Option option0 = new Option("", ",a@;1yx?o'GbLk&*j");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, "--");
      options0.hasOption(" ");
      options2.toString();
      options2.getMatchingOptions("org.apache.commons.cli.Option");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      helpFormatter0.optionComparator = comparator0;
      Options options4 = options3.addOption("arg", "--", true, "\n");
      helpFormatter0.printHelp(841, " ]", "", options4, "");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "xG 5nUm$&($VPnl$CZ", false, "--");
      Options options2 = options1.addOption("1Ku", false, "]");
      Option option0 = new Option((String) null, "", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(64, "D{tiS3+LI5Ft'L}O!", "cmdLineSyntax not provided", options4, "", false);
      Option option1 = null;
      try {
        option1 = new Option(",??3>_d{F@'(", "r}d{WX}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',??3>_d{F@'(' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "\\;V=`";
      Options options0 = null;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer(39);
      stringBuffer0.append(true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 7, (Options) null, 7, 3333);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("NO_ARGS_ALLOWED");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.rtrim("n?'?nQi(IC.");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1742, ".+Nf`URP6yH0", "", options0, 1742, 2561, "--");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1045, "\"", "COKF9:I~$-<H*", options0, 10, 1045, "", false);
      helpFormatter0.findWrapPos("", 2, 21);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, " ", "usage: ", options1, " ", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("--");
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.printHelp("usage: ", (String) null, options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "[";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l_:i$~", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "l_:i$~";
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "3a+{9+Isb";
      objectArray0[7] = (Object) "3a+{9+Isb";
      PrintStream printStream0 = mockPrintStream0.format("3a+{9+Isb", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "arg");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 35, (-3053), "");
      helpFormatter0.findWrapPos("Vg@fBcH{", (-777), 3);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("wIvui0");
      // Undeclared exception!
      try { 
        helpFormatter3.renderOptions(stringBuffer0, (-2189), options1, 2, 4517);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1922;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1922, "8[-heA,34NJ+sn", "", (Options) null, "8[-heA,34NJ+sn", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      StringWriter stringWriter0 = new StringWriter(32);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "vEg,v\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string0 = "CO\\KF9:I~$-<H*";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2189);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2189), "COKF9:I~$-<H*", (String) null, options0, (-87), 3736, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("[");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = new Options();
      int int0 = 1045;
      MockURI.URI((String) null, "-", "-", "\n", "5%,3`?o%yV");
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      options0.addOption((String) null, "--", false, "jh;lzP7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('!');
      String string0 = "";
      options0.hasOption("O)Gm@ XrF<nT");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1045, (String) null, "", options0, 63, 63, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      File file0 = MockFile.createTempFile("vEg,v\"", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 75, "vEg,v\"", "vEg,v\"", options0, 74, 5037, "vEg,v\"", true);
      helpFormatter0.findWrapPos("rAt~v~u<[Rt,)SICf", 3212, 1045);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[9];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 102, options0, 102, 31);
      objectArray0[0] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      Options options1 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.rtrim("arg");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = (-292);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-292), (-292), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-32), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      linkedList1.add((Locale) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter0.printf((Locale) null, "-jkM O6#gEYDrAHK", objectArray0);
      Options options0 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "$_Aq_";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$_Aq_", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(663);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (-2), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 10;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("ON27", "-", true, "d}pZCwG2{t:mw;!^:");
      helpFormatter0.printHelp("[ option: ", "[ option: ", options3, "[ option: ", true);
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        options4.addOption("usage: ", false, "*@'-F~<3(^V0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "(^4EL1kS", true, "usage: ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(74, "usage: ", "", options1, "(*tIW~[", true);
      helpFormatter0.printHelp((-1), "--", "arg", options0, "{b'^C};y1)zxn-1O");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "-", "ZwpXE", options0, 1, 10, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", ",a@;1yx?o'GbLk&*j");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, "--");
      options0.hasOption(" ");
      options2.toString();
      Options options4 = new Options();
      options2.getOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",a@;1yx?o'GbLk&*j");
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      helpFormatter0.printHelp(printWriter0, (int) 'B', "--", "@]m(i65V,ot", options3, 735, 735, "", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("]", ">", options1, "-24{s", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "arg", "usage: ", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      options0.addOption("", (String) null, false, "/i]B@");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 33, "Rp\"\"POc3XP", "]", options1, 13, 0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "--", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "arg", "-", options2, "]");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.printHelp("arg", "-", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "N+}-l}", "--", options1, (-2), 26, "", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3212, "COKF9:I~$-<H*", "", options0, 1045, 75, "", false);
      helpFormatter0.findWrapPos("COKF9:I~$-<H*", (-1070), 3212);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      mockPrintStream0.append('&');
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      options0.addOptionGroup(optionGroup0);
      options0.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "line.separator", "line.separator", options0, 1487, (-2808), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 914, 914, "?_.}NWx$9TjTY?V!");
      helpFormatter0.printHelp("?_.}NWx$9TjTY?V!", "pb3>lEw%$8QItae/", options0, "arg", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Tu858x)i'k79m)(eV,f");
      helpFormatter1.setWidth(12);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter2, (-2), "Tu858x)i'k79m)(eV,f", "usage: ", options0, 2, 3269, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "fM<8ZR  ;u~8IgA", "COKF9:I~$-<H*", (Options) null, 1, 1, "fICXjW?8z'Z*", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2442, "fM<8ZR  ;u~8IgA", "COKF9:I~$-<H*", (Options) null, 1550, (-1069), "COKF9:I~$-<H*", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#1K&xfC");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-121), " ]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 112, "[", "0ZW8Unx7@hp1=[Q", (Options) null, 112, 112, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.printHelp("COKF9:I~$-<H*", "\"&eeM1.}wj*z?mm1", options0, "L#IVNNuSGuRH~&#~SY");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.findWrapPos("usage: ", 10, 1633);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp(32, "arg", "arg", options1, "-");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-973), (String) null, "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "PZIPv\"Cd";
      options0.getOption("arg");
      helpFormatter0.printHelp(3, "^B)v", "^B)v", options0, "[", false);
      helpFormatter0.printHelp(74, "$\"M[;D%R>r?Q77jI+aB", "[", options0, (String) null);
      helpFormatter0.createPadding(1067);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 41, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      options0.addOptionGroup(optionGroup0);
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("line.separator");
      helpFormatter0.setWidth(1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "yeAc", "", options0, 2821, 2901, "\n");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      StringBuffer stringBuffer0 = new StringBuffer("vEg,v\"");
      int int0 = 18;
      Options options0 = new Options();
      int int1 = 2649;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-1125), 2649);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 7;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 7, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter1, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "N0D-P9g:";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "N0D-P9g:";
      objectArray0[4] = (Object) "N0D-P9g:";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "N0D-P9g:", objectArray0);
      Options options0 = new Options();
      PrintWriter printWriter2 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.printUsage(printWriter2, 13, "K?-", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "PZIPv\"Cd";
      helpFormatter0.printHelp(3, "^B)v", "^B)v", options0, "[", false);
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "$\"M[;D%R>r?Q77jI+aB", "[", options0, (String) null);
      helpFormatter0.createPadding(1067);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vEg,v\"", "?Pb*712cvDW", (Options) null, ";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "COKF9:I~$-<H*", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, 670, "d5c76ym^");
      helpFormatter0.setLeftPadding(670);
      helpFormatter0.setLongOptSeparator("d5c76ym^");
      helpFormatter0.setLongOptPrefix("COKF9:I~$-<H*");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "COKF9:I~$-<H*", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 13, "(Ps", options0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 13, "COKF9:I~$-<H*");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "";
      Options options0 = new Options();
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = ">,h-M,f}f0h+";
      helpFormatter0.printHelp(2901, ">,h-M,f}f0h+", ">,h-M,f}f0h+", options0, "5?dk4#lP;w;", false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-368), "<", "usage: ", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(1, "usage: ", "--", (Options) null, "\n");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2821, "gjSWW/S<O6r/D[6,(", " ]", (Options) null, (-1454), 1309, "yeAc");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), "cmdLineSyntax not provided", "The option '", options1, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter1.renderWrappedText(stringBuffer0, 1185, 74, "--");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3907));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1016), "", "", options0, "p{(", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "5?dk4#lP;w;", ">,h-M,f}f0h+", options0, "5?dk4#lP;w;", false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter1.renderWrappedText(stringBuffer0, 2015, 74, " ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append(1.0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-979), (-979), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "COKF9:I~$-<H*";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "COKF9:I~$-<H*", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 13, "(Ps", options0);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.rtrim(":N<");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Option option0 = new Option("9Gt2", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option1 = new Option("arg", "~qBD)mgV?0/", false, "@bZ%Qy_8B,gx?");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      options2.addOptionGroup(optionGroup2);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("}v0k46WF;)-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options0.addOption(option1);
      Options options4 = options3.addOption("", "", true, "");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 44, "-", options4);
      // Undeclared exception!
      helpFormatter1.printHelp(1, "D#j1>NnGlmH!Tq\"oe", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options3, " ", false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("g<)AwyV:H0wyI<");
      helpFormatter1.setOptPrefix("");
      helpFormatter1.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", ": E", options1, "qQp}`lcZ@v%", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      options0.addOption("", (String) null, false, "/i]B@");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(13, "]", (String) null, options1, "a");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "`b'B26:be]47'Z}~v", options1, "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D";
      Options options0 = new Options();
      String string1 = helpFormatter0.defaultOptPrefix;
      boolean boolean0 = true;
      helpFormatter0.printHelp("D", options0, true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setNewLine("D");
      String string2 = "]3dHZu8R%:Fr-I";
      helpFormatter0.printHelp("]3dHZu8R%:Fr-I", options0);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("r");
      helpFormatter1.renderOptions(stringBuffer0, 18, options1, 2483, 1);
      int int0 = 2849;
      String string0 = ">^Xa=>.^1/AJV3*s";
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEg,v\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1309, "2~= ", "' was specified but an option from this group ", (Options) null, "vEg,v\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", "org.apache.commons.cli.HelpFormatter", options0, "\n");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "-", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("-", 1, 1);
      helpFormatter0.setNewLine("arg");
      String string0 = "]3dHZu8R%:Fr-I";
      helpFormatter0.printHelp("]3dHZu8R%:Fr-I", options0);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = ">,h-M,f}f0h+";
      helpFormatter0.printHelp(2901, ">,h-M,f}f0h+", ">,h-M,f}f0h+", options0, "5?dk4#lP;w;", false);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("?Dv1Zc$*!Qf$", "G^", true, "Go[d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '?Dv1Zc$*!Qf$' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", options0, true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("-", 1, 1);
      helpFormatter0.setNewLine("arg");
      helpFormatter0.printHelp("]3dHZu8R%:Fr-I", options0);
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setWidth(1089);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("gezn,M/)N(6y", "w)b7&VOiNRgZBr|3%~L", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'gezn,M/)N(6y' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('&');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options1, (-947), (-2), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = new Option("", "ZuO_\u0001\"G-Lw~");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "SIv", options2, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter1.renderWrappedText(stringBuffer0, 1354, 3, "sPMQz,P0n}E");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("\n.9?I?/(c2IG]3gmO");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1072), "", "", options0, 3, 1550, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      boolean boolean0 = false;
      options0.addOption("", " ", false, "   ");
      Option option0 = null;
      try {
        option0 = new Option("Ev&,<`", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Ev&,<`' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      int int1 = (-1016);
      String string0 = "";
      int int2 = 0;
      helpFormatter0.setLeftPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1016), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getOptPrefix();
      String string1 = "<";
      String string2 = "3e&,?";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "3e&,?");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 3e&,?
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "4Uq&ZB1Dp)LpfGR\\`a5";
      helpFormatter0.setArgName("4Uq&ZB1Dp)LpfGR`a5");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 450;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", true, "w|@pB6rQ92.#t");
      Option option0 = null;
      try {
        option0 = new Option("4Uq&ZB1Dp)LpfGR`a5", true, "w|@pB6rQ92.#t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4Uq&ZB1Dp)LpfGR`a5' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName(" ] [ long ");
      helpFormatter0.setLongOptPrefix(" ] [ long ");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      PrintWriter printWriter0 = null;
      String string1 = "[";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "[");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("sw.R;(c2Z[TewJjN");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "usage: ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1112);
      String string0 = "sa+G_{8N\"G) }X<z[-";
      String string1 = "--";
      Options options0 = new Options();
      String string2 = " ] [ long ";
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasOption("t<0(B5k[t5");
      options1.hasLongOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1112), "sa+G_{8N\"G) }X<z[-", "--", options0, " ] [ long ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      String string1 = "d";
      helpFormatter0.setDescPadding(9);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("The option '", "d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // d
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2254);
      helpFormatter0.getArgName();
      OutputStream outputStream0 = null;
      boolean boolean0 = true;
      String string0 = "n";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "t vN+v9qlN9F8qx` ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "NO_ARGS_ALLOWED";
      helpFormatter0.setLeftPadding((-758));
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.getOption("--");
      // Undeclared exception!
      try { 
        options0.addOption("%e!;}6bu&L", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '%e!;}6bu&L' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ", ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("-", "D<B[VK%*ha_-:]", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
