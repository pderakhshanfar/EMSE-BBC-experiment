/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1277);
      helpFormatter0.setLeftPadding((-1277));
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "\"K";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\"K", "\"K", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1617));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.defaultWidth = (-537);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("[ option: ");
      File file0 = MockFile.createTempFile("!W,sc8f!y168T5i8", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockFile0.setExecutable(false);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "[ option: ";
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) file0;
      mockPrintWriter1.printf("The option '", objectArray0);
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) "[ option: ";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, " ", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-537), "^5dqfwazX=");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      helpFormatter0.setWidth(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.setLeftPadding((-575));
      helpFormatter0.setSyntaxPrefix("rQ#,p.Sf2>=");
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 3217);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("fm\"bx&oVk$x ]a!", "", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1952);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLeftPadding();
      String string0 = "";
      String string1 = "flN*c";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("~B3PazU>U=wkx]qod", true, "flN*c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '~B3PazU>U=wkx]qod' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-637);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-637), "[", "[", options0, "[", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "\n", options0, "\n", true);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.renderOptions((StringBuffer) null, 1454, options0, 111, 111);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "<";
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      int int0 = (-2957);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1187), (-2957), "*t_%/?4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = new Locale("usage: ", "D'_qnQHanY.V^\"", "   ");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) "D'_qnQHanY.V^\"";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "   ";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "   ";
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 77, "D'_qnQHanY.V^\"");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = 328;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 328);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "";
      options0.getOption((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!iV^rG*m-@P zO&o$EA");
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options0, 0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.defaultLeftPad = 18;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 1888;
      int int1 = (-552);
      helpFormatter0.defaultWidth = (-552);
      helpFormatter0.findWrapPos("", 1888, 1888);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string0 = "arg";
      Locale locale0 = new Locale("arg", "arg", "-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) comparator0;
      mockPrintWriter1.printf(locale0, "", objectArray0);
      int int2 = 74;
      String string1 = "m/R\"M>OZ%t~(<Ow";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Nz[V~1<T", "", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Nz[V~1<T' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[24];
      options0.hasLongOption(" ");
      byteArray0[7] = (byte)18;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)18;
      Option option0 = new Option("arg", "\n", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      option0.setArgName("");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options0, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-1);
      helpFormatter0.defaultLeftPad = (int) (byte)8;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)113;
      options0.getOption("");
      byteArray0[5] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option("arg", "\n", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "\n", true, "usage: ");
      option1.setArgName(" ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", options0, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o0+Z}Ek]&<e&tH");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Options options1 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.optionComparator = comparator0;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "\n", "", options1, 3, 1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2690), "arg", "`bY?", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "\n", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", options0, true);
      StringBuffer stringBuffer0 = new StringBuffer("3d|Yp7@");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 94, 94);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 77, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, options0, 52, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-2291));
      Option option0 = new Option("arg", "\n", true, "usage: ");
      option0.setArgName("--");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 80, (-600), "(O(ol]<p^$vKF@");
      helpFormatter0.rtrim("-");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(30, "(O(ol]<p^$vKF@", "", options1, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      option0.setArgName("--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options2, true);
      helpFormatter0.printHelp("-", "Ls:+s#IvaE", options2, "-", true);
      helpFormatter0.printHelp("Ls:+s#IvaE", "-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", false, "usage: ");
      StringWriter stringWriter0 = new StringWriter(22);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      stringWriter1.append((CharSequence) " ");
      Options options1 = options0.addOption("", "org.apache.commons.cli.OptionGroup", false, "");
      helpFormatter0.printHelp("FeluMm+", options1, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('j');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      stringWriter1.append((CharSequence) " ");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = ".IY# P@o1c";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasOption(".IY# P@o1c");
      String string1 = "D:\"KU";
      options0.hasLongOption("D:\"KU");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      Options options1 = options0.addOption((String) null, "usage: ", true, "usage: ");
      helpFormatter0.printHelp("s f", options1, true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 66, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.hasLongOption("[ARG...]");
      helpFormatter0.printHelp("}.3", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "l5*b4LT%%7XK9<", false);
      PrintWriter printWriter0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ".GxOM/nw,vXVYCF";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, ".GxOM/nw,vXVYCF", "}.3", options0, 13, 66, "K,@Qah", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      options0.addOption("", "arg", false, (String) null);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("S:\"", options0, true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", false, "usage: ");
      helpFormatter0.setWidth(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.rtrim("q;`K");
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-362), (String) null, (String) null, options0, (-362), (-362), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = "-";
      helpFormatter1.printHelp("--", "4Rg-}O7ha", options0, "@QMb]", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim((String) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 52, "usage: ", "", options0, 63, 0, "W", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", false, "usage: ");
      helpFormatter0.setWidth(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 9, "\n", (String) null, options0, (-2), 74, " :: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter1.printf("arg", objectArray0);
      int int0 = 2;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "\n");
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1060, "\n", "arg", options0, 2139, 1060, "", true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2, "sIt~B|,9K~");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1145, options0, 3751, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      PrintWriter printWriter1 = printWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped(printWriter1, 1509, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("?CZ");
      PrintWriter printWriter2 = mockPrintWriter0.format(".9", objectArray0);
      helpFormatter1.printHelp(printWriter2, 11, "<tj6V`8ycyl1IHs9RE", "#a{Lu", options0, 1, 3, "--", false);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.printHelp(13, "usage: ", "\n", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", "-", true, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "arg", true, "arg");
      Options options3 = options2.addOption((String) null, "062Cp5uH]", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("062Cp5uH]", options3, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "-", "arg", (Options) null, "),MxVzGZTL<a24:o]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "", options0, " ", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(2);
      helpFormatter0.rtrim("d/GwRW4IUVB.\"2I");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1219, "", "?=Ji", options0, 2, 1, "org.apache.commons.cli.Option", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "usage: ", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(2);
      helpFormatter0.printHelp(2, "  ", "or3#9-20V!%", options0, "");
      MockPrintStream mockPrintStream0 = new MockPrintStream("[ Options: [ short ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) "[ Options: [ short ";
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) "or3#9-20V!%";
      objectArray0[8] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "  ", "(!y>]c|]x3KJK~A", options0, 3, 2, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      Options options0 = new Options();
      options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "-");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 64, 9, "@3%r&c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      helpFormatter0.setWidth(74);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      helpFormatter0.printWrapped(printWriter0, (-1), "\n");
      helpFormatter0.rtrim("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-859), "czsD9]grt4,M(", "", options0, 74, 1219, "\"", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((Object) stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      Options options2 = options1.addOption("", "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "");
      options1.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("TWPx+c.[@2", options4, false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", (String) null, true, "--");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("-Abmv'$gD_$Ek", options1, true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      PrintStream printStream0 = mockPrintStream0.append('@');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options1 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 34, " ", "^B\"I&5t", options1, 9, 4, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.AlreadySelectedException", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.AlreadySelectedException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", "+Bj_Am;D", true, "");
      options3.hasOption("");
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.printHelp(":[E$GH,.UW{1tp:e", "", options1, "", true);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 2, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasOption(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2489, "", "", options0, 2489, 4369, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Option option1 = new Option("", false, "--");
      Options options1 = options0.addOption(option1);
      Options options2 = options1.addOption("arg", "", false, "\n");
      options2.hasOption("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp("k}lqxuO=K;N@S", "\n", options1, "org.apache.commons.cli.HelpFormatter$1", false);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, (String) null, options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption("arg", "", true, "-");
      options0.hasOption("--");
      helpFormatter0.setLongOptSeparator("dG.xK0_O=1s|)M");
      helpFormatter0.printHelp("|/Y+SsJ` bs*%l n", "A:i]Y>oO,WE$v%Tz", options1, (String) null, true);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-772), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[24];
      options0.hasLongOption(" ");
      byteArray0[7] = (byte)18;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)18;
      Option option0 = new Option("arg", "\n", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = new Options();
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.defaultDescPad = (-1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ARG...]", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.append('r');
      options0.getOption("");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 779, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-1), (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yG\"iSAm*c$XgGsn+");
      String string0 = " ] [ long ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, "usage: ");
      helpFormatter0.getNewLine();
      int int0 = (-1685);
      String string1 = "";
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", "usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getNewLine();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 768);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) bufferedOutputStream0;
      objectArray0[1] = (Object) ",eJyyI";
      mockPrintWriter0.format(locale0, ",eJyyI", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3869, ",eJyyI", "[ option: ", (Options) null, 5, 2, "r,pU/59F5WwSy**");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[ Options: [ short ");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      String string0 = "i";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i");
      helpFormatter0.getLeftPadding();
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "[ Options: [ short ", "L", (Options) null, "B,");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedExccption was thrown: ", 0, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "i_~ 5_xH");
      optionGroup0.addOption(option0);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedExccption was thrown: ", 0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", false, "--");
      options0.addOption(option0);
      Options options1 = new Options();
      options1.addOption("arg", "", false, "");
      options1.hasOption("NZ}d1s");
      helpFormatter0.setLongOptSeparator("C9_:1z!U");
      helpFormatter0.printHelp("z;gyM|E1<", (String) null, options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("|/Y+SsJ` bs*%l n", 34, (-3285));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('@');
      options0.getOption("");
      helpFormatter0.printWrapped(printWriter0, 2048, "\n");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "_go[:jab'", options1, "_go[:jab'", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasOption(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1677), "cmdLineSyntax not provided", "", options0, 2489, 9, "|Y`]q");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      options0.getOption("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 2048, "\n");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "lK#Nf~g^", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1529), 1867);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append('@');
      options0.getOption("");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2800), "", "2,C", options0, "\"\"!xS}B+=|6]Qy=2`6?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.hasOption("TPZ[>");
      helpFormatter0.getLeftPadding();
      Options options3 = new Options();
      helpFormatter0.printHelp(121, "\n", (String) null, options3, "TPZ[>");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1, false);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("usage: ", options0, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-303), "\n", "\n", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("arg", 0, 0);
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = "Cannot add value, list full.";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Cannot add value, list full.";
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) byteArrayOutputStream0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2, (-272), "Y|*O%8S};C.|g7+^L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "-");
      options0.hasOption("--");
      helpFormatter0.setLongOptSeparator("dG.xK0_O=1s|)M");
      helpFormatter0.printHelp("|/Y+SsJ` bs*%l n", "A:i]Y>oO,WE$v%Tz", options2, (String) null, true);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 2726, "|/Y+SsJ` bs*%l n", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setLeftPadding(74);
      Options options0 = null;
      int int0 = 0;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedExccption was thrown: ", 0, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("A CloneNotSupportedExccption was thrown: ", (-1791), 4645);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(">Xon7N+?\"O=Q", "]", options2, "");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      Option option0 = new Option("arg", "--", false, ">h0+0!)(1t]]%");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "usage: ", false, "fhZ:");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options2.addOptionGroup(optionGroup2);
      helpFormatter0.printHelp(".2=^n]'@?=r`s}NY_C", options0, false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "-");
      helpFormatter0.findWrapPos("#MR(:3-FK2Ft0IxQ", 3, 4651);
      Options options3 = new Options();
      options0.addOption("arg", false, "SK35^f~]]`t");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("#MR(:3-FK2Ft0IxQ", "", options2, "a-$]/5`,QH|");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasOption(".IY# P@o1c");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(".IY# P@o1c", options0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getNewLine();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "j>DFO2zLzITMab";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, ",?6KJy#{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 0, 0);
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      Options options0 = new Options();
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3O{H", (String) null, options0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "", options0, "\n", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.createPadding(2);
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 3094, "(m32`7WKrXg[nfFx_");
      Options options1 = new Options();
      options0.hasOption("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("\n", options1, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 46, 13, ".IY# P@o1c");
      Options options0 = new Options();
      options0.hasOption(" ");
      helpFormatter0.getLeftPadding();
      boolean boolean0 = false;
      int int0 = (-5374);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5374), ".IY# P@o1c", "_Vkf34S>5earM9", options0, "_Vkf34S>5earM9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options3, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasOption("xYZ2Y&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string0 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "xYZ2Y&", "|Y`]q", options0, (-1677), (-1), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedExccption was thrown: ", 0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "A CloneNotSupportedExccption was thrown: ", "A CloneNotSupportedExccption was thrown: ", (Options) null, 2489, (-1677), " ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedExccption was thrown: ";
      helpFormatter0.findWrapPos("A CloneNotSupportedExccption was thrown: ", 0, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 71, "A CloneNotSupportedExccption was thrown: ", "A CloneNotSupportedExccption was thrown: ", (Options) null, 2489, (-1677), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 0, 0);
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "", options0, "\n", false);
      Options options1 = new Options();
      helpFormatter0.setArgName("");
      int int0 = helpFormatter0.defaultWidth;
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(2189);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultDescPad = 1594;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.printHelp("B*c./3w`", "B*c./3w`", options0, "B*c./3w`", true);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, "B*c./3w`", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 1, 1);
      helpFormatter0.setWidth(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteArrayOutputStream0.reset();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2799), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      String string1 = "[OALD;2K,%APM<,";
      int int0 = 34;
      helpFormatter0.setDescPadding(34);
      Options options0 = null;
      helpFormatter0.defaultLongOptPrefix = "";
      boolean boolean0 = false;
      helpFormatter0.createPadding(34);
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(14, "[OALD;2K,%APM<,", "                                  ", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "i[1srN4";
      Options options0 = null;
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "Fb", "Fb", (Options) null, "Fb", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("line.separator", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'line.separator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2495);
      helpFormatter0.setArgName("xGc9_2rX=IB1 DmCc");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "C[");
      helpFormatter0.rtrim("i[1srN4");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-2727), (-3485), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 46, 13, ".IY# P@o1c");
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((-832L));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 13, 1, ".IY# P@o1c");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 46, 13, ".IY# P@o1c");
      Options options0 = new Options();
      options0.hasOption(" ");
      helpFormatter0.printHelp("B%`xw1Z8ddL2cG", "Ic>NS)FciiftJk6MN,", options0, "FG<^", false);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-386), "jCe,{J*\"Ma,%a!#Wk", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "", true, "-");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.append(';');
      options0.getOption("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 12, "Fr;do{$rC");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((-1), "org.apache.commons.cli.Option", "-", options1, "w6a ,AN>k!.tDJb=0", true);
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "has already been selected: '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write(74);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "has already been selected: '", (Object[]) null);
      Options options0 = new Options();
      Object object0 = new Object();
      mockPrintWriter0.printf("--", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 3122, "i[1srN4");
      helpFormatter0.setLeftPadding((-3540));
      helpFormatter0.setSyntaxPrefix("has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 0, 0);
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("pvyRV:tE}16", options0, true);
      Option option0 = null;
      try {
        option0 = new Option("-", "y#kTF!uJP<jd)WY", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "x";
      helpFormatter1.rtrim("x");
      String string1 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Z');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 104, options1, (-1), 849);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("I^9-SG", "I^9-SG", (Options) null, "I^9-SG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "i[1srN4";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 66, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.hasOption("usage: ");
      helpFormatter0.printHelp("}.3", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "l5*b4LT%%7XK9<", false);
      helpFormatter0.getLeftPadding();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, ".GxOM/nw,vXVYCF", options0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "i[1srN4";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i[1srN4", "", (Options) null, ">0\"M&dJ*Y\u0005~`R", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      String string0 = "B*c./3w`";
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultDescPad = 1594;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 849, "B*c./3w`");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          File file0 = null;
          Options options0 = new Options();
          helpFormatter0.printHelp("I", options0, false);
          StringBuffer stringBuffer0 = new StringBuffer(74);
          int int0 = 61;
          StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 61, options0, 0, 61);
          // Undeclared exception!
          helpFormatter0.renderWrappedText(stringBuffer1, 0, 61, ">et+");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = 13;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("0ax>Dz]", "--", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0ax>Dz]' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.rtrim("!cA]*$g~7sa^2vU");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2790), "!cA]*$g~7sa^2vXUv");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((Object) stringWriter0);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "bb");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A CloneNotSupportedException was thrown: ";
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 0, 0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Cannot add value, list full.";
      Object object0 = new Object();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-2041), options0, 0, 0);
      int int0 = 0;
      helpFormatter0.renderOptions(stringBuffer1, 13, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", "\n", options0, "Pt{nmM:JW|x^,G%2}92");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "i[1srN4";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i[1srN4", "i[1srN4", (Options) null, "i[1srN4", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.printHelp(".IY# P@o1c", "Hmm1T/+<(oZ~", options0, "Hmm1T/+<(oZ~", true);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(".IY# P@o1c", 7, (-4582));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-196));
      helpFormatter0.setLongOptPrefix(",\")m7z?NvYf");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "zx3'hO4Xecjm,A";
      helpFormatter0.createPadding(0);
      String string0 = helpFormatter0.createPadding(2156);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      int int0 = (-1);
      helpFormatter0.setWidth((-1939));
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptPrefix("");
      Comparator<Integer> comparator2 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator2);
      String string1 = " cc)Rcb=^R";
      MockFile mockFile0 = new MockFile(" cc)Rcb=^R");
      File file0 = MockFile.createTempFile("arg", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //

         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getLongOptPrefix();
      int int1 = (-531);
      String string0 = null;
      helpFormatter0.defaultOptPrefix = "Fd";
      String string1 = "mwIj4j";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      String string2 = "";
      Option option0 = null;
      try {
        option0 = new Option("--", "qq", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName("");
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0J!4TUjlXo@k,&5";
      helpFormatter0.setArgName("0J!4TUjlXo@k,&5");
      helpFormatter0.setArgName("0J!4TUjlXo@k,&5");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("0J!4TUjlXo@k,&5", "q~trVRc1T.j0f", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0J!4TUjlXo@k,&5' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "!:@9MMF";
      StringBuffer stringBuffer0 = new StringBuffer("!:@9MMF");
      helpFormatter0.setDescPadding(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "!:@9MMF");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.setDescPadding(2495);
      String string0 = "C[";
      helpFormatter0.setArgName("C[");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-1);
      String string1 = ",.~>x>p\"lU`";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), ",.~>x>p\"lU`");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("-");
      File file0 = MockFile.createTempFile("ya[~5nSj9k EEz", "-");
      String string0 = "-";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Bb79'ts%jF_[";
      helpFormatter0.setOptPrefix("Bb79'ts%jF_[");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setArgName("Bb79'ts%jF_[");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "Bb79'ts%jF_[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Bb79'ts%jF_[
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.setWidth(2400);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "arg");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", "", options0, "\n", false);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(2346);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("\n", options0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append('@');
      options0.getOption("");
      helpFormatter0.printWrapped(printWriter0, 2048, "\n");
      helpFormatter0.printHelp(3, "\n", "lK#Nf~g^", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.setLeftPadding(74);
      Options options0 = null;
      String string0 = null;
      stringBuffer0.insert(0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, (Options) null, 3, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", 0, 0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setWidth((-1894));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Cannot add value, list full.";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("Cannot add value, list full.", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "O");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      int int0 = 690;
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 1594;
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 849, "");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      StringBuffer stringBuffer2 = stringWriter1.getBuffer();
      helpFormatter0.renderOptions(stringBuffer2, (-2298), options0, 31, 31);
      String string1 = "--";
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("\n", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("!cA]*$g~7sa^2vXUv", options3, false);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "bb");
      assertEquals(2, stringBuffer0.length());
      assertEquals("bb", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.defaultArgName = " ";
      helpFormatter0.findWrapPos("b?sBl", 10, 10);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding(10);
      helpFormatter0.setLeftPadding((-1));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      char char0 = '~';
      StringWriter stringWriter1 = stringWriter0.append('~');
      int int0 = 13;
      int int1 = (-290);
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "usage: ", 13, (-290));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "i[1srN4";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i[1srN4", "i[1srN4", (Options) null, "i[1srN4", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 0;
      Options options0 = new Options();
      helpFormatter0.printHelp("I", options0, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("A~{dZ5&3TPX2p D");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator("]");
      MockFile mockFile0 = new MockFile("-", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
