/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:36:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg", true, "arg");
      option0.setArgName("-");
      options0.addOption(option0);
      helpFormatter0.printHelp("\n", "\n", options0, "\n", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "\n", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "[v]pl");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1318), options2, (-1318), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultWidth = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "-", (String) null, options0, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setWidth((-2823));
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "w!{", options0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("w!{", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 792, "=55mue9y5_~");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("i(MN=rVNp^fiM#v", "bwMoyCi R");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.createNewFile();
      mockFile0.setReadable(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1674), "bwMoyCi R", "[ option: ", options0, "bwMoyCi R", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1177));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "]", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "aGar", "aGar", options1, "aGar", true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CrU|~");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3110);
      helpFormatter0.defaultWidth = (-3110);
      helpFormatter0.getWidth();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.setLeftPadding(692);
      helpFormatter0.createPadding(125);
      helpFormatter0.findWrapPos("Fo?eA,(cw_/3u#TY", (-359), (-3110));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", "usage: ", true, (String) null);
      helpFormatter1.printHelp("arg", options0);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, ",iZEEdl{|M~", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", true, "uh6~!>3Sy");
      optionGroup1.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", " ]", options0, "}q('HVkx0", true);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("E>j%YzIj");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "#]jz)RLYP,");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("#]jz)RLYP,", "E>j%YzIj", options1, "Iq", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options1 = options0.addOption("", true, "--");
      options1.toString();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " ", options0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usage: ", "arg", options1, 1, 2407, "y*T._k|Nk;,N", true);
      helpFormatter1.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("]CHt");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 2000, 3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "--", "\n", options0, 1, 3, "B!ISQ/>vYk5l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("+0ODS\"62~(t]`iZ)", "", options0, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer(104);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 9, " ");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 3;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "8s`Q\"g'hL!cn|uh*GX");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("8s`Q\"g'hL!cn|uh*GX", "k$kUK(Z{Aa6}jC[:", options0, "[hkz#", false);
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1074), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(788);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dataOutputStream0;
      objectArray0[1] = (Object) dataOutputStream0;
      objectArray0[2] = (Object) "b?o5ltr";
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2846, "b?o5ltr", "]", options0, 2846, 2846, (String) null, true);
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.format("8s`Q\"g'hL!cn|uh*GX", (Object[]) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "8s`Q\"g'hL!cn|uh*GX");
      helpFormatter0.getArgName();
      helpFormatter0.setLongOptPrefix("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 117, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 76;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 76, 76, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("E>j%YzIj");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "arg";
      Option option0 = new Option("arg", "\n", true, "#]jz)RLYP,");
      optionGroup0.addOption(option0);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1354), 118, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "usage: ", "--", options0, 1937, (-1919), "LCWk<RD_+%kAx", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.rtrim("E>j%YzIj");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n", true, "#]jz)RLYP,");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 41, "", options1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("UfH{V~Fw\"zP<= u");
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 13, "y+rdp+$lS~F'C%mY", (String) null, options0, 13, 52, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1471), "\"vBB1G9Y~g^J;", "^", options0, (-1685), (-1), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-904));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NO_ARGS_ALLOWED");
      helpFormatter0.getLongOptSeparator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getNewLine();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.getMatchingOptions("ngR;p7kL:S\"yJT3uEd");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3NOwE", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "^", false, "-");
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "T", "B", options2, 52, 52, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1441, (String) null, "", options0, (-1575), (-1319), "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 44;
      stringBuffer0.append(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = null;
      int int1 = 873;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 44, (Options) null, 873, 873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1907, "]", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "^", false, "-");
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "T", "B", options2, 52, 52, "-", true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 792, "org.apache.commons.cli.Options", (String) null, options1, (-893), 44, "org.apache.commons.cli.Options");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      options0.hasLongOption("[ Options: [ short ");
      helpFormatter2.renderOptions(stringBuffer0, 74, options0, 1188, 1);
      helpFormatter1.findWrapPos("D-nelf9a", 1, 3);
      helpFormatter3.printHelp("usage: ", options0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, " ");
      helpFormatter0.setNewLine("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      char[] charArray0 = new char[2];
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1950, (-3215), "$F$c(");
      helpFormatter0.setLongOptPrefix("@7~/.ssS|g8");
      helpFormatter0.findWrapPos("E$o[>g5", (-3215), 1950);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$F$c(", "$F$c(", (Options) null, "@7~/.ssS|g8", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "^", true, "-");
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "T", "", options2, 52, 52, "-", true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 792, "org.apache.commons.cli.Options", (String) null, options1, (-893), 44, "org.apache.commons.cli.Options");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "^", true, "<5XY Ay9r5");
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "T", "", options2, 52, 52, "-", true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-942), ":HbfHW~GJ6r", "", options1, 792, 1364, "org.apache.commons.cli.Options");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (float) 74);
      helpFormatter1.renderOptions(stringBuffer0, 125, options1, 711, 1);
      Options options2 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 125, "uo''F<ey-F", "-", options1, 711, 125, "");
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 13, "");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UDd}]O1X\\+F&u%";
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "q>BNT");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "^o+)>#h", "UDd}]O1X+F&u%", options0, 10, (-1), "Illegal option name '", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter2.setLongOptSeparator("usage: ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 97, options0, 74, 3);
      helpFormatter2.findWrapPos("usage: ", 74, 34);
      helpFormatter1.printHelp("usage: ", options0);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.setNewLine("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, (String) null, "--", options0, 496, 3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("GbVxhq2jYT5E$K");
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      // Undeclared exception!
      helpFormatter1.printOptions(mockPrintWriter0, 1, options1, 74, 63);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(8);
      helpFormatter0.setDescPadding(2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("-DZ,1m\"K,V[");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-762), (-1123));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      String string1 = "The option '";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "GK!/1a<0a`LL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "Q<b=MzT%6gbkP&BOJW");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", true, " ");
      options0.toString();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options2);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 43, 891, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {j.$pW*>=CQ=[ option: null j.$pW*>=CQ  [ARG] :: Q<b=MzT%6gbkP&BOJW ]} ]");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setNewLine("4$?1");
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
          char[] charArray0 = new char[3];
          charArray0[0] = '3';
          charArray0[1] = '@';
          charArray0[2] = 'c';
          mockPrintWriter0.print(charArray0);
          mockPrintWriter0.flush();
          helpFormatter0.setSyntaxPrefix("4$?1");
          // Undeclared exception!
          helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 36, "4$?1");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UDd}]O1X\\+F&u%";
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string1 = null;
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "iSmg~Z/");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", true, " ");
      String string2 = "1v>c>;J-cj1T=e/*t% ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "UDd}]O1X+F&u%", "", (Options) null, 0, 0, "1v>c>;J-cj1T=e/*t% ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "iSmg~Z/");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-407), "j.$pW*>=CQ", "j.$pW*>=CQ", options2, 0, (-407), "[ Options: [ short ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      charArray0[8] = 'k';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 0, " I^@[");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 1, options0, 74, 66);
      Options options1 = new Options();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(" ", "nK_z6!+^|n6UUG,_s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 9, 9);
      helpFormatter0.setNewLine("--");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1752);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 64, "--");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.defaultDescPad = 3;
      Options options0 = new Options();
      helpFormatter0.createPadding(3);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 97, options0, 74, 1302);
      Options options1 = new Options();
      helpFormatter0.printHelp(40, "]", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "Q<b=MzT%6gbkP&BOJW");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, " ");
      Option option0 = new Option("arg", "", true, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=emwS}Sc$'wq*zAr@V");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1913), "`_8p4SoyG?`dki48G]I", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[4];
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp(40, "]", "", options0, "");
      helpFormatter2.printOptions(mockPrintWriter0, 74, options0, 74, 1540);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.defaultDescPad = (-3428);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Wrc{V{-Fw!MO");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-4871), (-4871), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("&UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "iSmg~Z/");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p]YG|d 9[&olBf)uZ?");
      options2.addOption("", true, " ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1150), options2, 770, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8]");
      char[] charArray0 = new char[10];
      charArray0[0] = 'd';
      mockPrintWriter0.print(charArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderOptions(stringBuffer0, 1, options0, 12, 3);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter3.setOptionComparator(comparator0);
      helpFormatter2.getOptPrefix();
      helpFormatter1.getOptionComparator();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3087), "\n", "arg", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Options options1 = options0.addOption((String) null, "^", true, "<5XY Ay9r5");
      Options options2 = options1.addOption("arg", true, "?(");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "T", "", options2, 31, 31, "]z", true);
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(31);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "iSmg~Z/");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p]YG|d 9[&olBf)uZ?");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 19, (-1672), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", (String) null, true, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 115, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 792, "6le(U7+iY");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 791, "]");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1302, 2180);
      Options options1 = new Options();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      Options options2 = options1.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp(3, "", "org.apache.commons.cli.HelpFormatter$1", options2, " :: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      String string0 = "Q<b=MzT%6gbkP&BOJW";
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "Q<b=MzT%6gbkP&BOJW");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", true, " ");
      Option option0 = new Option("arg", "", true, (String) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options2, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 's';
      charArray0[4] = '*';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      helpFormatter0.setSyntaxPrefix("SF/NQ!~uB)g}");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1716, 22, "org.apache.commons.cli.Option");
      helpFormatter0.setLongOptPrefix("]");
      String string0 = "E$o[>g5";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("SF/NQ!~uB)g}", 0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(2150, " | ", "org.apache.commons.cli.Options", options0, "31>Id9%");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-E$";
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("-E$", "-E$", options0, "-E$", true);
      helpFormatter0.printHelp("}M.uR+`:J}1|4i{7", options0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "}M.uR+`:J}1|4i{7");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      options0.hasLongOption("");
      options1.hasOption("O");
      Option option0 = new Option((String) null, "The option '");
      Options options2 = new Options();
      options2.hasLongOption("01[Ri:^8whPm(>fU{4Q");
      options2.hasShortOption("");
      Options options3 = options2.addOption("", false, "V+,UG9h-9`%:&o~}AI");
      option0.clearValues();
      options3.toString();
      helpFormatter0.printHelp(1714, "<", "", options3, (String) null, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5h$,{%oP6gI*JE>[");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "'{/kGc/", options2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      options0.hasLongOption("");
      options1.hasOption("O");
      Option option0 = new Option("arg", "", false, "O");
      option0.setRequired(true);
      Options options2 = options1.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options2.hasShortOption("");
      Options options3 = options2.addOption("", false, "V+,UG9h-9`%:&o~}AI");
      option0.clearValues();
      helpFormatter0.printHelp(1714, "<", "--", options3, (String) null, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1499);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1499), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 1302, options0, 1, 0);
      Options options1 = new Options();
      helpFormatter2.printHelp(40, "arg", " ", options0, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      Options options2 = options1.addOption("", "-", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("qVSJZ(");
      helpFormatter0.findWrapPos("", (-1433), (-1433));
      helpFormatter0.printHelp("qVSJZ(", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("-");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.renderOptions(stringBuffer0, 97, options0, 74, 1302);
      Options options1 = new Options();
      helpFormatter0.printHelp(40, "]", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UDd}]O1X\\+F&u%";
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string1 = "`_8p4SoyG?`dki48G]I";
      Options options0 = new Options();
      String string2 = "j.$pW*>=CQ";
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "iSmg~Z/");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string3 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p]YG|d 9[&olBf)uZ?");
      boolean boolean0 = true;
      options2.addOption("", true, " ");
      boolean boolean1 = true;
      String string4 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1150), options2, 770, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.setOptionComparator(comparator0);
      MockFile mockFile0 = new MockFile("[Q%*TX=%Nnq");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.Util");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setArgName("'.>I$w*1[9");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3, 3);
      Options options1 = options0.addOption("X", "org.apache.commons.cli.HelpFormatter$1", false, "/beCrEybR");
      helpFormatter1.printHelp(18, "line.separator", "[ Options: [ short ", options1, "line.separator");
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "Q<b=MzT%6gbkP&BOJW");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options2);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 849, options2, 2681, 2681);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 1, options3, 1, (-228));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      options0.hasLongOption("");
      options1.hasOption("O");
      Option option0 = new Option((String) null, "The option '");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("01[Ri:^8whPm(>fU{4Q");
      options2.hasShortOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getSyntaxPrefix();
      options0.getOption("--");
      helpFormatter0.printHelp("<z>Z55]m]KbgC-B_%!", "<z>Z55]m]KbgC-B_%!", options0, "has already been selected: '", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("CzDzU6q", "pn0F<;?QbA:_AE!g2^\"", options0, "0\"B}#fh1to");
      options0.getMatchingOptions(":ppaB:VbD6^3");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setNewLine(" 0d");
      helpFormatter0.rtrim("hu3");
      int int0 = 2284;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3652), "hu3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      options0.hasLongOption("");
      options1.hasOption("O");
      Option option0 = new Option("arg", "", false, "O");
      Options options2 = options1.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options2.hasShortOption("");
      Options options3 = options2.addOption("", false, "V+,UG9h-9`%:&o~}AI");
      option0.clearValues();
      helpFormatter0.printHelp(1714, "<", "--", options3, (String) null, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8]");
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.flush();
      mockPrintWriter0.print((long) 3);
      String string0 = "[";
      helpFormatter0.setSyntaxPrefix("[");
      String string1 = "arg";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3204), (-281), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = "7";
      String string1 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#!VT-N=:c|7Zvzo)C", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("<z>Z55]m]KbgC-B_%!", "<z>Z55]m]KbgC-B_%!", options0, "]", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UDd}]O1X\\+F&u%";
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      String string1 = "`_8p4SoyG?`dki48G]I";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "iSmg~Z/");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      boolean boolean0 = true;
      Options options3 = options2.addOption("", true, " ");
      boolean boolean1 = true;
      String string3 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "j.$pW*>=CQ", options3, 0, 0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "@~3px<t+)/ZJ'rH6Ka";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@~3px<t+)/ZJ'rH6Ka");
      mockPrintWriter0.println('@');
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1524, 1524, "@~3px<t+)/ZJ'rH6Ka");
      int int0 = (-3021);
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "3a\u0002{@apqg&L");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3021), options2, (-3021), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2763;
      helpFormatter0.setWidth(2763);
      int int1 = 0;
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "a*d_~";
      helpFormatter0.setDescPadding(0);
      options1.hasLongOption("Cannot add value, list full.");
      Option option0 = null;
      try {
        option0 = new Option("GiBq@", "", true, "x8g1d>hjJFL.VV{-e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'GiBq@' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "-E\\$";
      helpFormatter0.defaultSyntaxPrefix = "-E$";
      int int0 = 0;
      String string1 = "}M.uR+`:J}1|4i{7";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "}M.uR+`:J}1|4i{7");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "-";
      helpFormatter0.findWrapPos("-", (-2), (-2));
      helpFormatter0.rtrim("[ Options: [ short ");
      boolean boolean0 = true;
      String string1 = "!]]1~u5Ty";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "!]]1~u5Ty");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("]'I/1hi2- N[DBl;tgO");
      int int0 = (-2102);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2102));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      int int0 = (-371);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-371), "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#!VT-N=:c|7Zvzo)C";
      String string1 = " \\~\\k";
      Options options0 = null;
      String string2 = "7";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1630), " ~k", "[ Options: [ short ", (Options) null, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oZ:0F";
      helpFormatter0.defaultSyntaxPrefix = "oZ:0F";
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("--", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getLeftPadding();
      String string1 = "";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "qZQ!$.$i{SA+Y'q", false, "");
      String string3 = " | ";
      Options options2 = options1.addOption("arg", false, " | ");
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options2.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " *gp&H$@tr.a[vy";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getDescPadding();
      String string0 = null;
      Options options0 = new Options();
      options0.addOption("", "usage: ", false, "");
      Option option0 = null;
      try {
        option0 = new Option(" *gp&H$@tr.a[vy", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' *gp&H$@tr.a[vy' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.print(1278L);
      // Undeclared exception!
      try { 
        mockPrintWriter0.print((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#Y";
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      mockPrintWriter0.print(charArray0);
      int int0 = 0;
      mockPrintWriter0.flush();
      helpFormatter0.setSyntaxPrefix("]");
      int int1 = (-3204);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-3204), "$F$c(");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "#Y";
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 35, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("line.separator");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 1460;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1460, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptPrefix();
      String string0 = ">";
      Options options0 = new Options();
      String string1 = "ZCh;iC!s<bBX.kW";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("ZCh;iC!s<bBX.kW", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ZCh;iC!s<bBX.kW' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      options0.hasLongOption("");
      options1.hasOption("O");
      Option option0 = new Option((String) null, "The option '");
      Options options2 = new Options();
      options2.hasLongOption("01[Ri:^8whPm(>fU{4Q");
      options2.hasShortOption("");
      Options options3 = options2.addOption("", false, "V+,UG9h-9`%:&o~}AI");
      option0.clearValues();
      helpFormatter0.printHelp(1714, "<", "", options3, (String) null, false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options2 = options1.addOption("", "-", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter$1", "P,U", options3, "");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 101;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      helpFormatter0.defaultLeftPad = 101;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "L{", "usage: ", (Options) null, "DU(EWqPMd!l4N%l+\"J_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      int int0 = 1341;
      helpFormatter0.setDescPadding(1341);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      byteArrayOutputStream0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      helpFormatter0.printWrapped(printWriter0, 1341, "");
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      String string0 = "QbS";
      Options options0 = new Options();
      String string1 = "3!%}Ah#p#C)KN]ns";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "3!%}Ah#p#C)KN]ns", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "arg", true, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "", options0, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("#Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("8]");
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '*';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setArgName("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderOptions(stringBuffer0, 1, options0, 12, 3);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3087), "\n", "arg", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-3652);
      helpFormatter0.setNewLine(" 0d");
      String string0 = "hu3";
      helpFormatter0.rtrim("hu3");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "hu3", 2284, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "'";
      Options options0 = new Options();
      String string1 = " | ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "'", options0, " | ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "-E$";
      Options options0 = new Options();
      helpFormatter0.printHelp("-E$", "-E$", options0, "-E$", true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "}M.uR+`:J}1|4i{7");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0\"B}#fh1to";
      String string1 = "CzDzU6q";
      Options options0 = new Options();
      String string2 = "pn0F<;?QbA:_AE!g2^\"";
      helpFormatter0.printHelp("CzDzU6q", "pn0F<;?QbA:_AE!g2^\"", options0, "0\"B}#fh1to");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "<");
      options0.hasLongOption("");
      options1.hasOption("O");
      Option option0 = new Option((String) null, "The option '");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("01[Ri:^8whPm(>fU{4Q");
      options2.hasShortOption("");
      Options options3 = options2.addOption("", false, "V+,UG9h-9`%:&o~}AI");
      option0.clearValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1714, "<", "", options3, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      int int1 = 0;
      helpFormatter0.createPadding(0);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("{OY{%J9x.");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("UDd}]O1X+F&u%");
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "j.$pW*>=CQ", true, "Q<b=MzT%6gbkP&BOJW");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, " ");
      Option option0 = new Option("arg", "", true, (String) null);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "UDd}]O1X+F&u%", "`_8p4SoyG?`dki48G]I", options4, (-1), 1364, "wko");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("");
      String string0 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
