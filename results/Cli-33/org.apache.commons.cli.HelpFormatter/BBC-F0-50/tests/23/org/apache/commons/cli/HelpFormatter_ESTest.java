/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:05:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "{!U;4YJa}q0'=ASx{", true, "usage: ");
      Options options1 = options0.addOption(option0);
      option0.setArgName("--");
      options0.addOption("arg", "-", true, "~I");
      options1.toString();
      helpFormatter0.printHelp("L%1MR%", (String) null, options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) mockFile0;
      mockPrintStream0.format("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", true, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "Bov~P+-pO", options2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      int int1 = 1038;
      helpFormatter0.defaultWidth = 1038;
      int int2 = (-1958);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1958), "--", "--", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFile0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-608), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      int int0 = 427;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.ParseException");
      mockPrintWriter0.write("@4 kz6y(-Q");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2250), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 15, options0, 59, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "o:50wzCXI%{ng/c";
      Options options0 = new Options();
      options0.getOptions();
      options0.hasShortOption("org.apache.commons.cli.HelpFormatter");
      Option option0 = new Option("J", "-", false, "T6@[]RHc&]0rN!w~");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("o:50wzCXI%{ng/c", options1, false);
      helpFormatter0.createPadding(1583);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("o:50wzCXI%{ng/c", 4277, 1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      StringBuffer stringBuffer0 = new StringBuffer(36);
      helpFormatter0.renderWrappedText(stringBuffer0, 36, 36, "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&b.hyY`Kn;", "&b.hyY`Kn;", options0, "&b.hyY`Kn;");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "!PRW[1iJGHEq$", (String) null, options0, 26, 1005, "O,E*vBrp", false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-583);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "vz{2Fc']|8=F'>", "vz{2Fc']|8=F'>", options0, "PU3M");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultNewLine = "";
      String string0 = "   ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("_ AB_@SMFVH?.", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "_ AB_@SMFVH?.");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options0, "--");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(": \"wf+UV3jQc", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "}[zfU";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 3, options0, 1, 1582);
      options0.helpOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 2568, 2568, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o#uK?(u:YR>Cu3%T!Df";
      StringBuffer stringBuffer0 = new StringBuffer("o#uK?(u:YR>Cu3%T!Df");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "hK9X&", "", options0, "I00<n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("org.apche.commons.cli.Optios", "GlBdiQ~*Wd^H]qMnB<]");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "org.apche.commons.cli.Optios";
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printHelp(7, "\n", "zkIc\"", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp(74, "\n", " ", options0, "0");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("o#uK?(u:YR>Cu3%T!Df");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "o#uK?(u:YR>Cu3%T!Df");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("o#uK?(u:YR>Cu3%T!Df", 1, 2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.defaultOptPrefix = "";
      char[] charArray0 = new char[0];
      stringBuffer0.append(charArray0);
      helpFormatter0.defaultSyntaxPrefix = "TItaam0a";
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "TItaam0a");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 31, (-406));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockFile0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[2] = (Object) "org.apache.commons.cli.Options";
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "org.apache.commons.cli.Options";
      mockPrintStream0.format("WRIV;xGNGRd3%nSt", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2543), "Bov~P+-pO", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!}]?e*_ mzO~";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.defaultNewLine = "!}]?e*_ mzO~";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!}]?e*_ mzO~");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      int int0 = (-2);
      helpFormatter0.defaultLongOptPrefix = "I";
      String string1 = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "A CloneNotSupportedException was thrown: ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-");
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Option option1 = new Option((String) null, true, "arg");
      options0.addOption(option1);
      Options options1 = options0.addOption("", "[", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">h:!tz@% W<B!Jrw`", "W:g\"qJP", options1, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 290, 503, "--");
      helpFormatter0.renderWrappedText(stringBuffer1, 74, 558, "--");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 290, "Q/");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      mockPrintWriter0.close();
      mockPrintStream0.write((-944));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter0.write("a#w;?N\"*]");
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 37, "", options0);
      helpFormatter0.getWidth();
      options0.toString();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1014);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 37, options0, 74, (-1014));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.renderOptions(stringBuffer0, 2197, options0, 67, 67);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2197, "", "", options0, "org.apache.commons.cli.OptionValidator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append(9);
      int int0 = 290;
      int int1 = (-1304);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "", "", options0, 9, 37, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^9,$0Lx");
      Options options0 = new Options();
      mockPrintWriter0.print((long) 1);
      helpFormatter0.printHelp("^9,$0Lx", (String) null, options0, " :: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 122, "^9,$0Lx", "^9,$0Lx", options0, 1, 1, (String) null, false);
      helpFormatter0.rtrim("^9,$0Lx");
      helpFormatter0.getNewLine();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("D", "", options0, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "Tczz[a%XBf`~`Q>U", options0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", true, (String) null);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 669, options3, 53, 2);
      stringBuffer1.append((-1));
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer0, 31, (-2), "");
      helpFormatter0.renderWrappedText(stringBuffer2, 53, (-1740), "");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("~W'_9i8KJ~");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6, (String) null, "-", options0, (-1345), (-3784), "Z1d)_:t<u57)|", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 954;
      StringWriter stringWriter0 = new StringWriter(954);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      stringWriter1.getBuffer();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("arg", "is]+VGXx>uFO@R", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 954, "is]+VGXx>uFO@R", "~8yP>|2O#j9 &bSt'7~", options0, 954, 14, (String) null);
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "RLK|{'SGW<u:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-851), "eFP2)G/*qi+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append(669);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println((double) 1);
      mockPrintWriter1.println(false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "--", "usage: ", options0, 56, (-937), "gFO5w`loC36++", false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(8, "-", "--", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "--");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I6 +O65)uQIxb 0");
      Options options1 = options0.addOption(option0);
      options1.addOption("VTy1cL", "usage: ", true, "B'");
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pj  <&", "VTy1cL", options0, "W:g\"qJP", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      options0.addOption(option0);
      helpFormatter0.setLongOptSeparator("~W'_9i8KJ~");
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "E`1QF", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("6`y`.W,VT ");
      options0.hasShortOption("-");
      helpFormatter0.printHelp(3, "--", (String) null, options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 1560);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o#uK?(u:YR>Cu3%T!Df";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ", ", options0, "o#uK?(u:YR>Cu3%T!Df");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) "VbL-E6?zhbjGjmWE";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "VbL-E6?zhbjGjmWE";
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) mockPrintWriter0;
      objectArray1[3] = (Object) helpFormatter0;
      objectArray1[4] = (Object) mockPrintWriter0;
      objectArray1[5] = (Object) helpFormatter0;
      objectArray1[6] = (Object) "VbL-E6?zhbjGjmWE";
      mockPrintWriter0.println(0.0F);
      objectArray1[7] = (Object) mockPrintWriter0;
      objectArray1[8] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("VbL-E6?zhbjGjmWE", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 2188, (-217), "rXp&HrTm<ex`|$~");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "cmdLineSyntax not provided";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2139, 1, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setDescPadding((-697));
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      Collection collection0 = new LinkedList<Object>();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2695, 2077, " ");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      String string0 = "The option '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "\n", "The option '", (Options) null, 3, (-1289), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("odM", "Nrn(Sr>w-26~?cZN", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "Nrn(Sr>w-26~?cZN", options0, "W:g\"qJP", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "B]Rk&bDy9{`%S7", "odM", options1, 2, 476, "arg", true);
      helpFormatter1.printHelp("arg", "arg", options0, "-");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockFile0.setWritable(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      options0.addOption(option0);
      helpFormatter0.findWrapPos("~", 3, (-2));
      helpFormatter0.printHelp(" :: ", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      options0.addOption("arg", true, "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rr>g", false);
      mockFileOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 118, "rr>g");
      helpFormatter0.findWrapPos("", 426, 118);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2695, 2077, " ");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("--");
      options0.getOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("rVg9--Q+fLY", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.println((-2452.358827008));
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "Nr$!3U", "&W|(j5a|(", options0, 2776, 426, "Nr$!3U", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("-");
      // Undeclared exception!
      try { 
        options0.addOption(", ", "usage: ", false, "-8[F|Sft<aE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ', ' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(".)S,!<");
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(3);
      Options options1 = options0.addOption((String) null, "&W|(j5a|(", true, ".)S,!<");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("has already been selected: '", "]mEV(}8<J`cDPu", options0, " ] [ long ", true);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "&W|(j5a|(", "]mEV(}8<J`cDPu", options1, "]mEV(}8<J`cDPu");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      Options options0 = new Options();
      Option option0 = new Option("$dM", true, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I6 +O65)uQIxb 0");
      Options options1 = options0.addOption(option0);
      options1.addOption("VTy1cL", "usage: ", true, "B'");
      helpFormatter0.printHelp(3, "I6 +O65)uQIxb 0", "i", options0, "cmdLineSyntax not provided");
      helpFormatter0.rtrim("VTy1cL");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "k;6c.,wj-";
      helpFormatter0.defaultNewLine = "k;6c.,wj-";
      helpFormatter0.setLongOptPrefix("jsr");
      String string1 = "";
      int int0 = 889;
      int int1 = 0;
      String string2 = "r8~bBuFhT [k~N";
      int int2 = 0;
      String string3 = "&o\\^PTPs2E4*ol";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('x');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "vHp=1n,\"7>9{xL");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "arg");
      Option option0 = new Option("", "\n", true, "ny!0nAmfuoT}");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption((String) null, "@eswUG", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-320), options0, 38, 532);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1560), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I6 +O65)uQIxb 0");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", true, "B'");
      String string0 = "x:*.YHv`";
      helpFormatter0.printHelp("x:*.YHv`", "VTy1cL", options0, "W:g\"qJP", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "odM", "", options2, (-1), 1010, "The option '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("j", true, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      String string0 = "f6 +O65)uQIxb 0";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "f6 +O65)uQIxb 0");
      options0.addOption(option0);
      int int0 = 1978;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "j", "The option '", options0, 3, 1978, "", false);
      helpFormatter0.setOptPrefix("f6 +O65)uQIxb 0");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(".)S,!<");
      String string0 = " ";
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(3);
      Options options1 = options0.addOption((String) null, "&W|(j5a|(", true, ".)S,!<");
      String string1 = "has already been selected: '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options1, "&W|(j5a|(", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("MA 1y!", "MA 1y!", (Options) null, "MA 1y!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultDescPad = 2735;
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(2735);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", "&S0Ose6a?+Gc\">q0c+", options0, ".W)>_-  J", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2017), "Wdtt.l(+y-DW=", "&W|(j5a|(", options0, (-2017), 981, "D8SH[5X>LFEV.N&", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I6 +O65)uQIxb 0");
      options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "odM", "The option '", options0, 3, 1978, "", false);
      helpFormatter0.setOptPrefix("I6 +O65)uQIxb 0");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "I6 +O65)uQIxb 0");
      helpFormatter0.renderWrappedText(stringBuffer0, 1978, 1978, "--");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 426, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "");
      Option option0 = new Option("", true, "yl_2c");
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", (String) null, true, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.renderOptions(stringBuffer0, 63, options2, 426, 10);
      helpFormatter0.renderWrappedText(stringBuffer1, 74, (-3163), "yl_2c");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("rVg9--Q+fLY");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options1, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName("[");
      helpFormatter0.setArgName("[QX6`On}g");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "[");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", true, "-");
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(4, "", "NO_ARGS_ALLOWED", options1, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("rVg9--Q+fLY");
      options0.getOption("");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-415), "h;R`&{'t: Fp", ">65D&TP/,|/{)w%S55|", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(".)S,!<");
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-859));
      Options options1 = options0.addOption((String) null, "&W|(j5a|(", true, ".)S,!<");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.forLanguageTag("ST");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[2] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "--", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "ST", objectArray0);
      Options options2 = new Options();
      helpFormatter0.printOptions(printWriter0, (-859), options2, 426, 4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(".)S,!<");
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-859));
      options0.addOption((String) null, "&W|(j5a|(", true, ".)S,!<");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "FzC", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "I6 +O65)uQIxb 0");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", true, "B'");
      helpFormatter0.printHelp("x:*.YHv`", "VTy1cL", options0, "W:g\"qJP", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "odM", "\n", options2, (-1), 1010, "The option '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 426, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "");
      Option option0 = new Option("", true, "yl_2c");
      options0.addOption(option0);
      Options options2 = options1.addOption("arg", (String) null, true, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.renderOptions(stringBuffer0, 63, options2, 426, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-874), (-3163), "yl_2c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("E");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1073), 1, "jo2C");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2695, 2077, " ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "k;6c.,wj-";
      helpFormatter0.setLongOptPrefix("jsr");
      String string0 = "";
      int int0 = 889;
      int int1 = 0;
      String string1 = "r8~bBuFhT [k~N";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "k;6c.,wj-", "&o^PTPs2E4*ol", options0, "k;6c.,wj-", false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", true, "B'");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "odM", "\n", options2, (-1), 1010, "The option '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      int int1 = 1038;
      String string0 = "";
      helpFormatter0.defaultWidth = 1038;
      int int2 = (-1958);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1958), "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockFile0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 74, "h,s$&E 2vnC?o@Xx9", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      options0.getOption("rVg9--Q+fLY");
      options0.getOption("");
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      helpFormatter0.getLongOptPrefix();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-150), "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.defaultLongOptPrefix = "arg";
      int int0 = 44;
      helpFormatter0.setDescPadding(44);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      String string1 = "<1XEzL A,WBCrH";
      String string2 = " ]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(".)S,!<");
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(3);
      options0.addOption((String) null, "&W|(j5a|(", true, ".)S,!<");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(" ", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("o#uK?(u:YR>Cu3%T!Df");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 503, "o#uK?(u:YR>Cu3%T!Df");
      assertEquals(40, stringBuffer0.length());
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("1,]rp*D{!LV@^qaPwmQ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1594);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("(#?488<0", false, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(#?488<0' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = ">";
      String string1 = "Z37ND@&6-hX'";
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("rVg9--Q+fLY");
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("R; B");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-859));
      options0.addOption((String) null, "&W|(j5a|(", true, "");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1073), "]", "--", options0, (-1073), 426, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = null;
      String string0 = "\\XQx`9Agz15B2+[cp(";
      helpFormatter0.setSyntaxPrefix("XQx`9Agz15B2+[cp(");
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "HC(";
      helpFormatter0.setLongOptSeparator("HC(");
      int int1 = 0;
      String string1 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "I*zOaFk$v1dF}_c`cn", true, ">");
      Options options1 = options0.addOption(option0);
      String string2 = "";
      option0.getValues();
      options1.addOption("", "-", true, "k1ou:U;%`;{.}] _");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "`.+)TeTTERS`3[";
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLongOptSeparator("`.+)TeTTERS`3[");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("`.+)TeTTERS`3[");
      String string0 = "#>+YG|E{";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = ">nr+kZaxAx/-t?yn";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(">nr+kZaxAx/-t?yn", true, "`.+)TeTTERS`3[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>nr+kZaxAx/-t?yn' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      helpFormatter0.rtrim((String) null);
      mockFileOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 426, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-615);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      Options options2 = options1.addOption("arg", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-615), options2, (-615), (-615));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("O1", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "--", false, "");
      Option option0 = new Option("O1", "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(752, " ] [ long ", " ] [ long ", options4, "", false);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append(669);
      helpFormatter0.renderWrappedText(stringBuffer0, 317, 503, "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 317, 1730, "\n");
      assertEquals(7, stringBuffer0.length());
      assertEquals("\n", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append(669);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 290, 503, "--");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 558, "\n");
      assertEquals(5, stringBuffer0.length());
      assertEquals("669--", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[");
      helpFormatter0.setArgName("[QX6`On}g");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 9;
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-859));
      options0.addOption((String) null, "&W|(j5a|(", true, "");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1073), "]", "--", options0, (-1073), 426, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 893;
      String string0 = "org.apache.commons.cli.ParseException";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 893, 893, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setWidth(893);
      Options options1 = options0.addOption((String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 893, options1, 893, (-428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = (-3256);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3256), "J[pz7<=r|*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      helpFormatter0.setWidth(74);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "", options0, 494, (-1), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      int int0 = 9;
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) " ", 9, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
