/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:39:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "J)";
      helpFormatter0.setNewLine("J)");
      int int0 = 32;
      helpFormatter0.createPadding(32);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("J)");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('&');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "                                ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1315), (Options) null, 32, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding((-299));
      options0.getOption(" ");
      options0.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", "", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 65, "PK<u3-7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.printHelp("--", "-", options0, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 3324, 3324);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("arg", false, (String) null);
      options0.hasLongOption("arg");
      helpFormatter0.defaultWidth = (-2738);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Util", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("s)4v~{c", "s)4v~{c", options0, "");
      helpFormatter0.printHelp(" ]", "", options1, " ]", true);
      helpFormatter0.renderOptions((StringBuffer) null, 1990, options1, 1990, 1990);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("d<OxOBfj{! 2F", 1, 1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptionGroups();
      option0.setArgName("");
      options0.addOptionGroup(optionGroup1);
      String string0 = ":k_E1P_\"ep[LcF\"o";
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.printHelp(1698, "org.apache.commons.cli.HelpFormatter$1", ":k_E1P_\"ep[LcF\"o", options0, ":k_E1P_\"ep[LcF\"o", true);
      MockFile mockFile0 = new MockFile("P`6uqlfR1:M6I?eZ]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.HelpFormatter$1
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptionGroups();
      option0.setArgName("usage: ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "y^KD:7R", ":k_E1P_\"ep[LcF\"o", options1, "y^KD:7R", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "i!KVlz");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-299));
      options0.getOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter1.getDescPadding();
      MockFile mockFile0 = new MockFile((String) null, "[ARG...]");
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption("odM", "-", false, (String) null);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      helpFormatter0.printHelp(3, "f{l=.1)[%}M6", "Illegal option name '", options1, " ");
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (String) null, options0, "[");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      helpFormatter0.defaultWidth = (-658);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "*0l1vQID~[wGF";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*0l1vQID~[wGF", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption("odM", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "\n", options0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2833);
      Options options0 = new Options();
      options0.toString();
      Options options1 = options0.addOption("", "", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(784, "*0lE1vQID~[wGF", "", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      String string0 = "biS$?b7&]nHe~mZ(4";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "biS$?b7&]nHe~mZ(4");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", (String) null, true, " :: ");
      Option option0 = new Option((String) null, true, "biS$?b7&]nHe~mZ(4");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "biS$?b7&]nHe~mZ(4", "biS$?b7&]nHe~mZ(4", options4, "biS$?b7&]nHe~mZ(4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      int int0 = 70;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 70, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6J";
      helpFormatter0.rtrim("6J");
      Options options0 = new Options();
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-228), "}[e;Vp*%)", "6J", options0, "6J");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("<t@dFn.C`rr?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "-";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setLongOptPrefix(" ");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(750, " ] [ log", " ] [ log", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = (-847);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 6, (-847), " ] [ log");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.rtrim("6J");
          StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "6J");
          Options options0 = new Options();
          options0.addOption("arg", "\n", true, "usage: ");
          Options options1 = new Options();
          Options options2 = options1.addOption((String) null, "]", true, "\"4jES#cv4):/7J9C");
          OptionGroup optionGroup0 = new OptionGroup();
          options2.addOptionGroup(optionGroup0);
          // Undeclared exception!
          helpFormatter0.renderOptions(stringBuffer0, 0, options2, 299, 3994);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "odM";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6J";
      helpFormatter0.rtrim("6J");
      StringBuffer stringBuffer0 = new StringBuffer("6J");
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, 31, "hky~Ha");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("6J");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "6J");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",L=JzSU:'FTe\"a4vRw");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 0;
      String string0 = "S";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("S", "[", (Options) null, "S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "odM";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "odM", "odM", options0, "");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 6;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "Illegal option name '";
      Options options0 = new Options();
      mockPrintWriter0.print((Object) mockFileOutputStream0);
      mockPrintWriter0.append('T');
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6, "Illegal option name '", "Illegal option name '", options1, 6, 6, "Illegal option name '");
      Locale locale0 = new Locale("\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[]";
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.format(locale0, "--", objectArray0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("Illegal option name '", 10, (-623));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("arg");
      File file0 = MockFile.createTempFile("usage: ", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) comparator0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-4454), (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "S");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("O1", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "--", false, "");
      helpFormatter0.printHelp(752, "+", " ] [ lojng ", options2, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp("F^\"<ah@G'P", options0);
      helpFormatter1.printHelp("8bzhhD", "y}]t*7eR}g]#>xBb.L", options1, " ] [ lojng ", true);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append(':');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "8bzhhD";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) optionGroup0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) comparator0;
      objectArray0[7] = (Object) "O1";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 4008, "$x2%v7LY,#(h");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("VTy1cL", "usage: ", false, "B'");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(3, "odM", "", options0, "8=)Vz", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1894));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", "", false, "usage: ");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "7~%)'.cM2j4:3E-S_", options4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = "!)<i\"(Hy234/K-86J";
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getDescPadding();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.getOptPrefix();
      String string0 = "hr=kP'T}aUU]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "--", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("VTy1cL", "usage: ", true, "B'");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "The option '", "The option '", options1, 0, 0, "B'", true);
      helpFormatter0.printHelp(28, "AQ4[-9Rz+6", "\n", options1, ":-tD_.Vi[kz44 ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "AQ4[-9Rz+6");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", false, "B'");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.hasShortOption("");
      options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "arg", options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(2088);
      helpFormatter0.rtrim(string0);
      MockFile mockFile0 = new MockFile("H1V", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print(false);
      Options options0 = new Options();
      String string1 = "1j";
      String string2 = "";
      options0.hasOption("arg");
      options0.addOption("1j", "", true, "+~}aOC");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.Util", string0, options0, (-1), 86, "}nWv");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", false, "B'");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.hasShortOption("");
      options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "odM", "\n", options2, (-1), 74, "The option '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "Uj#NkJ5\"z.s$", false, "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3222, "The option '", "", options1, 3222, 12, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", false, "B'");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "The option '", options2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "--", false, "");
      Option option0 = new Option("O1", "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(752, " ] [ lojng ", " ] [ lojng ", options4, "", false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("o#uK?(u:YR>Cu3%T!Df");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "arg", "org.apache.commons.cli.ParseException", (Options) null, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options1.toString();
      Options options2 = options1.addOption("", "", false, "");
      Options options3 = options2.addOption("", false, "--");
      helpFormatter0.printHelp("ewb.qnhd,jj#bb", "", options3, "|^Q_+Qiajq(+/|");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      optionGroup0.toString();
      helpFormatter0.printHelp("r=*}1cW", "", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter1.printHelp("nK*H %.GOa+2n", options0);
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp(3, "-", (String) null, options0, "nK*H %.GOa+2n");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("VTy1cL", "usage: ", true, "B'");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1910), "\n", (String) null, options1, (-1910), (-2247), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, 3, options0, 1822, 3);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      String string0 = "";
      Option option0 = null;
      try {
        option0 = new Option("The option '", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      mockPrintWriter0.println(2256L);
      helpFormatter0.setLeftPadding((-859));
      options0.addOption((String) null, "&W|(j5a|(", true, "");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1073), "]", "--", options0, (-1073), 426, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      options0.addOption("arg", "", true, " ");
      Option option0 = new Option("", "--");
      options0.addOption(option0);
      helpFormatter0.rtrim("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-641), "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2935, options0, 3, 2935);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-230), options0, (-230), 63);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      options0.addOption(option0);
      options0.addOption((String) null, (String) null, true, "[ARG...]");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 11, "odM");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "   ", options0, 503, 11, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.renderWrappedText(stringBuffer0, 67, 1, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setWidth(1006);
      String string1 = "";
      options0.addOption("", false, "");
      helpFormatter0.renderOptions(stringBuffer0, 426, options0, 3, 34);
      String string2 = "P%I:KEL?A%N ";
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("s", "~p(]]@QYGSG{HP}2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "The option '";
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", true, "--");
      options1.getOptionGroups();
      options0.getOption("");
      helpFormatter0.printHelp("The option '", options2);
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1099, options0, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(39);
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) options0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      objectArray0[6] = (Object) "odM";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "odM", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), (String) null, "?uj\"/k,iRx7n%B3ZRX", options0, (-1), (-2), "m]|8[ueN^J!6-W>EHt", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", true, "--");
      options1.getOptionGroups();
      options0.getOption("");
      helpFormatter0.printHelp("The option '", options2);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", (String) null, options2, "The option '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.print(false);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-859));
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("O1", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "--", false, "");
      Option option0 = new Option("", "-", false, "arg");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(752, " ] [ long ", " ] [ long ", options4, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " ] [ long ", options2, "(g4tVi>PDE8RyJ3/Y,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", "-", true, "--");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(115, "--", "", options2, "B'", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      String string0 = "";
      Option option0 = new Option("", "--");
      options0.addOption("arg", "--", false, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-518), 1, "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      String string1 = "&W|(j5a|(";
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      options0.addOption("", true, "ueR_QvgY6)s}i");
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(1);
      options0.addOption((String) null, "&W|(j5a|(", true, "");
      int int0 = 503;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 503, 8, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      mockPrintWriter1.format(locale0, "-", (Object[]) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "m]|8[ueN^J!6-W>EHt", "The option '", options0, 3, 60, "m]|8[ueN^J!6-W>EHt", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "org.apache.commons.cli.ParseException";
      helpFormatter0.defaultOptPrefix = "ZtXWLrYF]bpoCx]lBnR";
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.defaultDescPad = (-3027);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.defaultOptPrefix = "bp^XIOk";
      helpFormatter0.getDescPadding();
      String string0 = "fMP3viNeWuBDHph";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fMP3viNeWuBDHph");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("so-o<j[i%/-j", " ", false, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'so-o<j[i%/-j' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      Options options1 = new Options();
      Option option0 = new Option((String) null, true, (String) null);
      Options options2 = options0.addOption(option0);
      Options options3 = options2.addOption("", " w([(k{'cm$m", true, "The option '");
      mockFile0.setWritable(true, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "srPmHWmn+^", (String) null, options3, (-1114), (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("'", "arg", options0, "arg", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "usage: ", (String) null, options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "   ");
      optionGroup0.setRequired(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Options");
      Locale locale0 = Locale.TAIWAN;
      locale0.clone();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "   ";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) option0;
      mockPrintWriter0.format(locale0, " ", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 35, options0, (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "   ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setNewLine(">");
      Option option1 = new Option("arg", "I*zOaFk$v1dF}_c`cn", true, ">");
      options0.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      String string0 = "The option '";
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      mockFile0.mkdir();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      option0.getValues();
      String string1 = "k1ou:U;%`;{.}] _";
      options1.addOption("", "\n", false, "");
      String string2 = "[ Options: [ short ";
      Options options2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", "S", (Options) null, "E~kl@QUkZ>V9w-e!~9", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "zy}'U-^FHJG";
      objectArray0[3] = (Object) "The option '";
      objectArray0[4] = object0;
      mockPrintWriter1.format(locale0, "zy}'U-^FHJG", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "m]|8[ueN^J!6-W>EHt", "?d8<(zA3y(Z(6+", options0, 3, 3, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "k;6c.,wj-";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("jsr");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 9;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("\".=$`TAW", "arg", true, "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '\".=$`TAW' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockFile0.setExecutable(true, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Locale locale0 = Locale.forLanguageTag("--");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      mockPrintStream0.println("The option '");
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "The option '";
      mockPrintWriter0.format(locale0, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "The option '", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      MockFile mockFile0 = new MockFile("Mm*Hh 1c{)", "usage: ");
      mockFile0.setExecutable(false, false);
      Options options1 = new Options();
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "&W|(j5a|(";
      mockPrintWriter0.format(locale0, "", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 1, "=6^WS.\">4|VSJ", "", options1, (-1), 112, "", false);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      options0.addOption(option0);
      Option option1 = new Option("odM", "]");
      options0.addOption(option0);
      options0.addOption((String) null, " ", true, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 36, "Illegal option name '", "Illegal option name '", options0, 2519, (-200), ",C_?XlWW2{g/", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      helpFormatter0.setSyntaxPrefix("-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.FRENCH;
      option0.setRequired(true);
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", (Object[]) null);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter2.format(locale0, "", (Object[]) null);
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-2139), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      MockFile mockFile0 = new MockFile("Mm*Hh 1c{)", "usage: ");
      mockFile0.setExecutable(false, false);
      Options options1 = new Options();
      Option option0 = new Option("", true, "&W|(j5a|(");
      Locale locale0 = Locale.forLanguageTag(" | ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      mockPrintStream0.println("\n");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "Mm*Hh 1c{)";
      objectArray0[2] = (Object) "";
      mockPrintWriter0.format(locale0, "Mm*Hh 1c{)", objectArray0);
      Options options2 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "--", options2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      options0.hasLongOption("--");
      Options options1 = options0.addOption("CwmLyA", "", false, "");
      helpFormatter0.printHelp("g\"zXV ]XTJ`ku", (String) null, options1, " ]", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1710, "", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("", "-", true, "--");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "--", "", options0, 1904, (-1), "B'", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      MockFile mockFile0 = new MockFile("arg", "wc+1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-344), "wc+1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      String string0 = "3";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string1 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-239), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-", false, "   ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Option option1 = new Option("arg", "I*zOaFk$v1dF}_c`cn", true, ">");
      options0.addOption(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "zy}'U-^FHJG";
      objectArray0[3] = (Object) "The option '";
      objectArray0[4] = object0;
      mockPrintWriter1.format(locale0, "zy}'U-^FHJG", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 712, "h,s$&E 2vnC?o@Xx9", options0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1842, "JF= yK}TeXqG*E@yz");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "o#uK?(u:YR>Cu3%T!Df";
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 55, 55, "   ");
      int int0 = 9;
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "--", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 10;
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 10, "usage: ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      String string0 = "";
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 10;
      int int1 = 117;
      int int2 = (-1521);
      helpFormatter0.renderWrappedText(stringBuffer0, 117, (-1521), "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[", "", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "I*zOaFk$v1dF}_c`cn", true, ">");
      Options options1 = options0.addOption(option0);
      String string2 = "";
      helpFormatter0.setWidth((-1));
      option0.getValues();
      options1.addOption("", "-", true, "k1ou:U;%`;{.}] _");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("^w?O", 74, 32);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "k;6c.,wj-";
      helpFormatter0.setLongOptPrefix("jsr");
      String string0 = "";
      int int0 = 889;
      int int1 = 0;
      String string1 = "r8~bBuFhT [k~N";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "k;6c.,wj-", "&o^PTPs2E4*ol", options0, "k;6c.,wj-", false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", true, "B'");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "odM", "\n", options2, (-1), 1010, "The option '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 0;
      int int1 = 1038;
      String string0 = "";
      helpFormatter0.defaultWidth = 1038;
      int int2 = (-1958);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1958), "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockFile0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 74, "h,s$&E 2vnC?o@Xx9", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 964, "usage: ");
      helpFormatter1.rtrim("!QW7YJX");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      helpFormatter0.setSyntaxPrefix("-");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "eR[c!{e:wLF~Rl4us", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      helpFormatter0.defaultLongOptPrefix = "arg";
      int int0 = 44;
      helpFormatter0.setDescPadding(44);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      String string1 = "<1XEzL A,WBCrH";
      String string2 = " ]";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("-");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("o#uK?(u:YR>Cu3%T!Df");
      helpFormatter0.renderWrappedText(stringBuffer0, 13, 503, "o#uK?(u:YR>Cu3%T!Df");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("1,]rp*D{!LV@^qaPwmQ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1594);
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("(#?488<0", false, "[ARG...]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '(#?488<0' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = ">";
      String string1 = "Z37ND@&6-hX'";
      Options options0 = new Options();
      String string2 = "";
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("rVg9--Q+fLY");
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      Object object0 = new Object();
      Object object1 = new Object();
      options0.hasLongOption("-");
      Options options1 = options0.addOption("arg", "-", false, "");
      helpFormatter0.printHelp("P+K%RJ{.dgC_|%;Hg", "@|[@Nk>+q*+{J?ClYO", options0, "-", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      // Undeclared exception!
      helpFormatter1.printHelp(0, "--", "i$bfXjT=+RErR9~ia\"B", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = null;
      String string0 = "\\XQx`9Agz15B2+[cp(";
      helpFormatter0.setSyntaxPrefix("XQx`9Agz15B2+[cp(");
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "HC(";
      helpFormatter0.setLongOptSeparator("HC(");
      int int1 = 0;
      String string1 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "I*zOaFk$v1dF}_c`cn", true, ">");
      Options options1 = options0.addOption(option0);
      String string2 = "";
      option0.getValues();
      options1.addOption("", "-", true, "k1ou:U;%`;{.}] _");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "`.+)TeTTERS`3[";
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setLongOptSeparator("`.+)TeTTERS`3[");
      helpFormatter0.setWidth(0);
      helpFormatter0.rtrim("`.+)TeTTERS`3[");
      String string0 = "#>+YG|E{";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = ">nr+kZaxAx/-t?yn";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option(">nr+kZaxAx/-t?yn", true, "`.+)TeTTERS`3[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>nr+kZaxAx/-t?yn' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer1 = new StringBuffer("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-615);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      Options options2 = options1.addOption("arg", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-615), options2, (-615), (-615));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("O1", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("", "--", false, "");
      Option option0 = new Option("O1", "");
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp(752, " ] [ long ", " ] [ long ", options4, "", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "'{AmbS+]", options1, (-192), 32, "'{AmbS+]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "The option '");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Options options0 = new Options();
      Option option0 = new Option("odM", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("VTy1cL", "usage: ", true, "B'");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "(w&", options2, "arg", false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("[");
      helpFormatter0.setArgName("[QX6`On}g");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 9;
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      mockPrintWriter0.println((double) 3);
      mockPrintWriter0.println((double) 426);
      mockPrintWriter0.println(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 426, "&W|(j5a|(", "&W|(j5a|(", options0, 426, 2776, "", false);
      helpFormatter0.setOptPrefix(" ");
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding((-859));
      options0.addOption((String) null, "&W|(j5a|(", true, "");
      helpFormatter0.setLongOptSeparator("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1073), "]", "--", options0, (-1073), 426, "NO_ARGS_ALLOWED", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 893;
      String string0 = "org.apache.commons.cli.ParseException";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 893, 893, "org.apache.commons.cli.ParseException");
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.setWidth(893);
      Options options1 = options0.addOption((String) null, true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 893, options1, 893, (-428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      int int0 = (-3256);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3256), "J[pz7<=r|*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      helpFormatter0.setWidth(74);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", "", options0, 494, (-1), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      int int0 = 9;
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) " ", 9, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
