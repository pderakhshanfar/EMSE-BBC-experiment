/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(597);
      stringBuffer0.append(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 597, 597, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", 91, (-689));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("arg", "usage: ", true, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("8Q ^O");
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options1);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos(",c.a}a|OmS/I{s:cw`", 0, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("arg", "usage: ", true, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.println((-965.862));
      helpFormatter0.setLongOptPrefix("8Q ^O");
      optionGroup0.addOption(option0);
      option0.setArgName("");
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("H0rjpkJ,Iv8?Z;", options1, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "\"", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("arg", "usage: ", true, "]");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.println((-965.862));
      helpFormatter0.setLongOptPrefix("8Q ^O");
      optionGroup0.addOption(option0);
      option0.setArgName("");
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "\"", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("arg", "\n", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options1, 57, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.hasLongOption(",9~Ml)f%#UMAl");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wCQG`OD]_J|GSv~#lc");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ",9~Ml)f%#UMAl";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, (String) null, options0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 14, (-952), "");
      Options options1 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 1620, (-952));
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "wCQG`OD]_J|GSv~#lc");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Option option0 = new Option("arg", "\n", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      mockPrintWriter0.println((double) 3);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.setArgName("\n");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "'", options1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1061);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, "-");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp("\n", "org.apache.commons.cli.OptionValidator", options0, "BUm]57?0+p$fQ8sb-8");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.helpOptions();
      options0.hasOption(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 112, "-", "", options0, 1, (-2013), "p.Ax)jxRFy:0KN5>s7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "[ARG...]";
      Option option0 = new Option("arg", "[ARG...]", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 16;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 16, 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-724);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth((-2562));
      int int0 = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("yT12/l3gg'g", ";[", options0, ";[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "");
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 0, options1, 0, 1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("|z3V/6*C", 84, 84);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Eg)Q^n*bHdh", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.OptionGroup", 32, (-1115));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      PrintWriter printWriter0 = null;
      int int0 = (-1233);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1233), "   ", "   ", options0, "   ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "xfDI3{-,(b`";
      // Undeclared exception!
      helpFormatter1.printHelp(1, "org.apache.commons.cli.Util", "arg", options0, ".R", false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("btWucUu<<hbs}fX", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      MockFile mockFile0 = new MockFile("&Z:@v", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.OptionGroup", "--", options0, 74, 74, "--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter4.printUsage((PrintWriter) mockPrintWriter0, 1, "LKCGjoJ]87");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 70, "6OHLzY!2", "6OHLzY!2", options0, 20, 20, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-892));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/M@r^(", "/M@r^(", options0, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "OHcUW}?TXX|20XQa,x?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 3, "]");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 32, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth((-2562));
      helpFormatter0.getWidth();
      Options options0 = new Options();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultWidth = 0;
          helpFormatter0.getOptionComparator();
          Options options0 = new Options();
          boolean boolean0 = true;
          Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
          helpFormatter0.setLongOptSeparator("]94r@-h9+}F32");
          options1.hasLongOption("-");
          String string0 = "line.separator";
          // Undeclared exception!
          helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", false);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1, (-766), "II0u^I8");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 56, "6OHLzY!2", "", (Options) null, 0, 56, "6OHLzY!2", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3969, "'", (String) null, options0, 695, (-393), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "-", false, "");
      options0.addOption(option0);
      Option option1 = new Option((String) null, "", true, "-");
      Options options1 = options0.addOption(option1);
      helpFormatter0.printHelp("\n", "\n", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('q');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Options options1 = options0.addOption("", false, (String) null);
      helpFormatter0.printOptions(mockPrintWriter0, 1327, options1, 1, 63);
      boolean boolean0 = true;
      Option option0 = new Option("arg", "usage: ");
      options0.hasLongOption(" | ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "x9,gy.hBi{2n.)k7Y^");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", "\n", options1, (String) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      options1.hasOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-402), "arg", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      options0.hasLongOption("&zf\"'>");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "line.separator", "", options0, (-2211), 74, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-16);
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 3, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", "\n", options1, (String) null, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      options1.hasOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "./&T~o)", "arg", options1, 680, (-6432), "./&T~o)", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      String string0 = "]94r@-h9+}F32";
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      Option option0 = new Option("", "arg", true, "NO_ARGS_ALLOWED");
      Options options2 = options0.addOption(option0);
      boolean boolean0 = false;
      helpFormatter0.printHelp("^i}{]*QJuM.", " ]", options2, "Q", false);
      helpFormatter0.getDescPadding();
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 0, options0, 300, 10);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("^i}{]*QJuM.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Util");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptions();
      options1.addOption("", true, "");
      helpFormatter0.getWidth();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.printOptions(mockPrintWriter0, 926, options1, 1209, 926);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setNewLine("^6!W7O#tcTW");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^6!W7O#tcTW", options0, false);
      Option option0 = new Option("", "", true, "--");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp("[ARG...]", "-", options2, "NO_ARGS_ALLOWED", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(301);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 3, options1, 32, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.hasLongOption(",9~Ml)f%#UMAl");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wCQG`OD]_J|GSv~#lc");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ",9~Ml)f%#UMAl";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1638), "4bg|tUi}6cduV");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Options options0 = new Options();
      options0.hasLongOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 3, "usage: ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 74, 74);
      Options options1 = new Options();
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.hasLongOption(",9~Ml)f%#UMAl");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wCQG`OD]_J|GSv~#lc");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ",9~Ml)f%#UMAl";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, (String) null, options0);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 14, (-952), "");
      Options options1 = new Options();
      helpFormatter0.getWidth();
      options0.hasShortOption("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 1620, (-952));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "wCQG`OD]_J|GSv~#lc");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2330;
      // Undeclared exception!
      try { 
        stringBuffer0.delete(2330, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "-");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/\\Ux+-9;V");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "Ux+-9;V");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(35, "g", "+,;;KWo\"]~Xv]<KaXtf", options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "Ux+-9;V", "8", options1, 443, 43, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("V8U5", "", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "arg", options0, "V8U5", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 64, "kG$gFNn;G!4", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", "\n", options1, (String) null, true);
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append('1');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stringWriter1;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "nJI.T$wWYr` ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2), options0, (-2), 609);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      helpFormatter0.printHelp("' contains an illegal character : '", "RX}Q$ZrJbo", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(283);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("Q+54");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1176), ",3R,D!!VY", "arg", options0, 3137, 74, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      options0.toString();
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("\"]J$RkkCw");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "has already been selected: '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "has already been selected: '", options0, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      Collection collection0 = new LinkedList<String>();
      options0.hasLongOption(",9~Ml)f%#UMAl");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("wCQG`OD]_J|GSv~#lc");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) ",9~Ml)f%#UMAl";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " N=:TQBp%<ZZ-", "wCQG`OD]_J|GSv~#lc", options0, (-385), 3, "<", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = new Options();
      options0.hasLongOption((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r~");
      Options options2 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1902), "r~", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("arg", false, "-");
      helpFormatter0.printHelp("' contains an illegal character : '", "RX}Q$ZrJbo", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine(", ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter1.printHelp("RX}Q$ZrJbo", options0, true);
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("CKf{u1-4YDA5:F&kq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, ", ", " ", options0, 3, (-2), "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("\"]J$RkkCw");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasLongOption("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "rs=^YxkHCF", options0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";|sIO\"QF}8'`6w50G");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('c');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 35, ";|sIO\"QF}8'`6w50G");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      helpFormatter0.printHelp("' contains an illegal character : '", "RX}Q$ZrJbo", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setNewLine(", ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter1.printHelp("RX}Q$ZrJbo", options0, true);
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ", ", "arg", options1, 74, 74, "org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-370), (String) null, ")", options0, 14, 14, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("gX}Q$ZrJb", "", options0, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter4.printHelp(63, "", "", options0, "BDyZq`)>`R=\"E8}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      boolean boolean0 = true;
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      helpFormatter0.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-1399), 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      helpFormatter0.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "-", options0, 74, 0, "--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("-");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "@wQ+XE[V 6?$u{Wq)", "", options0, 31, 1, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "-", options0, 74, 0, "--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", " ", options1, (-184), 0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("e&", "FXZ", (Options) null, "x;HO>c?f-;BE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "-");
      MockFile mockFile0 = new MockFile(" | ", "]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) " | ";
      objectArray0[3] = (Object) "]";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "]";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.apache.commons.cli.HelpFormatter$1", objectArray0);
      int int0 = 1830;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1830, "gjEK B1!(v2l", "--", options0, (-2), 1830, "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2156);
      String string0 = "";
      helpFormatter0.setOptPrefix("The option '");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2156), "", "ILX1)+lH", (Options) null, "ILX1)+lH", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("line.separator");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1325), " ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("\"]J$RkkCw");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("\"]J$RkkCw", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      MockFile mockFile0 = new MockFile("73|tmLT7JkI{Xsw");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "73|tmLT7JkI{Xsw", "' was specified but an option from this group ", options0, 1, 858, "usage: ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 771, " ", "54<FOOR4A>@T!jMpcN]", options0, 31, 1, "", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("\"]J$RkkCw");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, " [ARG]", " [ARG]", options0, 56, 32, "<", false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("' was specified but an option from this group ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-741), " ", " ", options0, "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("]94r@-h9+}F32", "usage: ", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("-", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 10, "");
      helpFormatter1.printHelp(" ", options1);
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.createPadding(28);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "usage: ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", true, "' was specified but an option from this group ");
      options0.hasLongOption("arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("' was specified but an option from this group ", "' was specified but an option from this group ", options1, "O]J$RkkCb", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", true, "' was specified but an option from this group ");
      options0.hasLongOption("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 34, 960);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 960, options0, 34, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("\"]J$RkkCw");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, " [ARG]", options0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      helpFormatter0.setLongOptSeparator("]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter0.printHelp("line.separator", "*k7 H^V<`^fGfz`", options0, "9i `kE", true);
      helpFormatter0.getWidth();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.hasOption("\"]J$RkkCw");
      helpFormatter0.printHelp("' was specified but an option from this group ", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      helpFormatter0.findWrapPos("\"]J$RkkCw", (-1), (-1));
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "gaP");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "-", options0, 74, 0, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "", "arg", options1, 2763, 31, "<", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "-");
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "Ux+-9;V");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "Ux+-9;V", "8", options1, 443, 43, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-3223), "QWyk,&)iE", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 77, "cVwUK3YQr\"i[W;|3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2936, 41, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("Y;@#DaH[~,J", "+D0@<suiAS3g_", options0, "", false);
      helpFormatter0.setNewLine("]");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("oK+hJ1#A>", "oK+hJ1#A>", options0, "6aS1 #0W9[au nO", true);
      helpFormatter0.setNewLine("oK+hJ1#A>");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", true, "' was specified but an option from this group ");
      options0.hasLongOption("q2");
      options0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "q2", options2, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      boolean boolean0 = true;
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "", "-", options0, 74, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("yN9 3");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1/$q=", "[", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator((Comparator) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "-");
      options0.hasLongOption("\"]J$RkkCw");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.hasOption("\"]J$RkkCw");
      helpFormatter0.printHelp("' was specified but an option from this group ", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "-");
      options0.hasLongOption("");
      helpFormatter0.printHelp("cmdLineSyntax not provided", "\n", options0, "#jG-O2xV*7g _w_Klc", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.findWrapPos("@=M0~XR:sqT5l", (-1), (-2));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding((-2389));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.write("usage: ");
      stringBuffer0.insert(1, '_');
      int int0 = (-1324);
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1324), (-1324), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Bkf`sCg$");
      Options options0 = new Options();
      helpFormatter0.printHelp("~lEP", "Bkf`sCg$", options0, "[", false);
      helpFormatter0.setNewLine("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("-", options0, false);
      helpFormatter0.rtrim("Bkf`sCg$");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("QuW||3 TAt]a:[}b", options1);
      helpFormatter0.setArgName("QuW||3 TAt]a:[}b");
      Object object0 = new Object();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "]94r@-h9+}F32";
      objectArray0[3] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1107), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", true, "' was specified but an option from this group ");
      options0.hasLongOption("O]J$RkkCb");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "dHKf", options1, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("cmdLineSyntax not provided", "6aS1 #0W9[au nO", options0, "", false);
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1737;
      helpFormatter0.setLeftPadding(1737);
      helpFormatter0.setSyntaxPrefix("~dr4IRxzg'q7kE");
      int int1 = 3501;
      helpFormatter0.setDescPadding(3501);
      helpFormatter0.defaultLongOptPrefix = "~dr4IRxzg'q7kE";
      helpFormatter0.defaultDescPad = 3501;
      helpFormatter0.setLongOptSeparator(" :: ");
      helpFormatter0.setSyntaxPrefix("~dr4IRxzg'q7kE");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "M6";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix("M6");
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "p0e/dUAKbyu)N");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, (String) null, options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ", ";
      helpFormatter0.setOptionComparator((Comparator) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ", ";
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(239);
      helpFormatter0.setArgName("<");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      Option option0 = new Option("", "arg", true, "NO_ARGS_ALLOWED");
      Options options2 = options0.addOption(option0);
      helpFormatter1.printHelp("arg", "]", options2, "arg", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, options0, (-257), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.hasLongOption("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", " ", true, "' was specified but an option from this group ");
      options0.hasLongOption("' was specified but an option from this group ");
      options0.addOption(option0);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("line.separator", (String) null, options1, "line.separator", false);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Bkf`sCg$");
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 5357, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5357, "=b", "~lEP", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ", ";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 110, 492, ", ");
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setNewLine("]");
      stringBuffer0.append(0.0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("HfNY'\"57HfL", "]", options1, ">0(-M^lk0qal-j", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 110, 3);
      helpFormatter0.setDescPadding(64);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(1, "-", "]", options1, "jNA!Uo!bwvw*QQLWMw");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2936, 2936, "+D0@<suiAS3g_");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.toString();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setNewLine("+D0@<suiAS3g_");
      stringBuffer0.append((-1.0));
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("+D0@<suiAS3g_", "+D0@<suiAS3g_", options1, "+D0@<suiAS3g_", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 3, 2936);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(44, "+D0@<suiAS3g_", "jRsD", options0, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(2491);
      helpFormatter0.printHelp("--", "--", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3089, options0, 2491, 337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Object[] objectArray0 = new Object[9];
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = '=';
      mockPrintWriter0.write(charArray0, 1, 3);
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) comparator0;
      objectArray0[6] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 403, (Options) null, 403, 1356);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Bkf`sCg$");
      Options options0 = new Options();
      helpFormatter0.printHelp("~lEP", "", options0, "[", true);
      helpFormatter0.setNewLine("0c\"-DSe'");
      helpFormatter0.getWidth();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.printHelp("QuW||3 TAt]a:[}b", options1);
      helpFormatter0.setArgName("QuW||3 TAt]a:[}b");
      String string0 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "R!qC";
      helpFormatter0.setLongOptPrefix("R!qC");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      int int0 = 1584;
      String string1 = "'_vMisxkBR0 1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, "arg");
      Option option0 = new Option("", true, "R!qC");
      options2.addOption(option0);
      options0.hasShortOption("\n");
      // Undeclared exception!
      try { 
        options1.addOption("R!qC", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'R!qC' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-892);
      helpFormatter0.setLeftPadding((-892));
      String string0 = "X5xH0";
      helpFormatter0.setNewLine("X5xH0");
      helpFormatter0.setNewLine("X5xH0");
      helpFormatter0.getOptionComparator();
      String string1 = "<KA]Xv>D]~2";
      File file0 = MockFile.createTempFile("<KA]Xv>D]~2", "--");
      MockFile mockFile0 = new MockFile(file0, "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "", true, "-");
      options0.hasLongOption("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", options1, (String) null, true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("*&hEF&UH{MS@(`(");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n", 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), (-766), "II0u^I8");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.defaultLongOptPrefix = "";
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.setLeftPadding(863);
      int int0 = (-1952);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1952), (-1952), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2437);
      String string0 = "org.apache.commons.cli.Option";
      File file0 = MockFile.createTempFile("6M]7n)", "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "6M]7n)";
      objectArray0[1] = (Object) "yh[*";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "org.apache.commons.cli.Option";
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) "org.apache.commons.cli.Option";
      PrintStream printStream0 = mockPrintStream0.printf("yh[*", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2437), "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "j'|A[jH_wc8#-";
      Options options1 = options0.addOption("", true, "j'|A[jH_wc8#-");
      String string2 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setArgName("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        options1.addOption("-", "usage: ", true, "@+9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-824));
      String string0 = " ;2aU1xHt5Rf";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ;2aU1xHt5Rf");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-H>xD@Yt4?P2O=g0";
      objectArray0[1] = (Object) " ;2aU1xHt5Rf";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) helpFormatter0;
      mockPrintWriter0.format("-H>xD@Yt4?P2O=g0", objectArray0);
      int int0 = 2148;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "-H>xD@Yt4?P2O=g0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "]94r@-h9+}F32");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("]94r@-h9+}F32", "^i}{]*QJuM.", options1, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("^i}{]*QJuM.", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim("usage: ");
      MockFile mockFile0 = new MockFile("--", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "-", options0, 74, 0, "--");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", " ", options1, (-184), 0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "vpXT`j0";
      Options options0 = new Options();
      helpFormatter0.printHelp("vpXT`j0", "vpXT`j0", options0, "vpXT`j0", true);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = "eiS";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "eiS");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // eiS
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
