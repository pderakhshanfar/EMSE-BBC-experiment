/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 17:05:21 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.rtrim("\n");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultDescPad = 3227;
      helpFormatter0.rtrim("I&qe}%f%xz6");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      helpFormatter0.setWidth(32);
      helpFormatter0.setDescPadding(708);
      helpFormatter0.defaultLeftPad = 1823;
      helpFormatter0.defaultSyntaxPrefix = "54N45";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptPrefix("54N45");
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.Util";
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.rtrim("org.apache.commons.cli.Util");
      helpFormatter0.rtrim("org.apache.commons.cli.Util");
      helpFormatter0.rtrim("Jh\"iog");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "54N45");
      helpFormatter0.printHelp("g2r#^Rg7MQQ6k", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("54N45", (String) null, options1, (String) null);
      int int1 = 99;
      StringBuffer stringBuffer0 = new StringBuffer(99);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b+QXyf2");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1140, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1140
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "}\"5yY6o}pAVEPB>e,", true, "xRqf");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "T|YWJHZyW", "", options1, "");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "-");
      option0.setDescription("j");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = options1.addOption(option0);
      option0.setArgName("' was specified but an option from this group ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(74, "-", "-", options3, "j", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "j", "j", options2, "' was specified but an option from this group ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "-");
      option0.setDescription("j");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      option0.setArgName("");
      option0.setArgName("f}hpb(i*Z([wPI");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "-", options0, "' was specified but an option from this group ");
      Options options2 = options1.addOption("arg", true, " ");
      helpFormatter1.printHelp("Illegal option name '", options2);
      helpFormatter0.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("j", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "-");
      option0.setDescription("[G<Y");
      options1.addOption(option0);
      Option option1 = new Option("", "usage: ", true, "");
      option0.setArgName("");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup2.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(2040, "j", "", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "j", "j", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", true, "-");
      option0.setDescription("[G<Y");
      options1.addOption(option0);
      Option option1 = new Option("", "usage: ", true, "");
      option0.setArgName("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(74, "-", "-", options2, "", true);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[G<Y", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 47;
      MockFile mockFile0 = new MockFile("0mdA7Rqe*.B", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-807), " :: ", "0mdA7Rqe*.B", options0, 46, 47, "@mJpS=o)wc9]7p^F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      mockFile0.getAbsoluteFile();
      helpFormatter0.setLongOptSeparator("T?$,4[[ox*A74u4m|G");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "usage: ", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "-", "-", options2, "", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1));
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3953);
      int int1 = 3312;
      helpFormatter0.setWidth(3312);
      helpFormatter0.defaultDescPad = (-3953);
      String string0 = "DyynYtr?";
      String string1 = "\"ZG`\"`a[FM,d";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("DyynYtr?", "\"ZG`\"`a[FM,d", (Options) null, "DyynYtr?", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix((String) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "BQ]n\"Hh!9+7f@([!");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("i~Tpc)N@+", options1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.rtrim("M");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasShortOption(".'p68:!#iZV0nT%,{");
      helpFormatter0.printHelp((-1), ".'p68:!#iZV0nT%,{", "Lv88M`op9XX$ um/", options1, "", true);
      helpFormatter0.rtrim("Lv88M`op9XX$ um/");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("rlsB]}ZSt(1%0bR1u#", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "rlsB]}ZSt(1%0bR1u#", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "arg");
      helpFormatter0.printHelp(3, "usage: ", "--", options1, "arg", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options2 = options0.addOption((String) null, true, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "--", "-", options2, "irE:F^?C\"'h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "}Gbp({%z^");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(1773, "0$1{", "0$1{", options2, "", true);
      helpFormatter0.rtrim("TE");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "-", "usage: ", options1, "usage: ", true);
      helpFormatter1.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options1, 13, 74);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLeftPadding();
      String string0 = "--";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      int int0 = 24;
      String string1 = "";
      mockFileOutputStream0.write(1);
      Options options0 = new Options();
      mockPrintWriter0.println(1543.8086F);
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "t9]eYN", (Options) null, "-bld~0*M!(&", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "{n.^", true, "--");
      helpFormatter0.printHelp(63, "{n.^", "{n.^", options0, "{n.^", true);
      helpFormatter0.printHelp(63, "org.apache.commons.cli.HelpFormatter$1", (String) null, options1, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 2, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 105, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, 105, 3, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", true, "--");
      boolean boolean0 = true;
      int int0 = 104;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 104, "", "P[ApuSS\"L<YW", options0, 104, 104, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer("6ToRXrZ'6b6;t~M");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 27, "   ");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1354);
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(13, "line.separator", " ", options0, " ", true);
      helpFormatter0.renderOptions((StringBuffer) null, (-1461), options0, 114, 63);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("yd HQZn9");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      File file0 = MockFile.createTempFile("h9n", "MChG&l");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "MChG&l";
      objectArray0[2] = (Object) "MChG&l";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter1.printHelp(printWriter0, 3, "[D", "-", options0, 1, 74, "arg", false);
      // Undeclared exception!
      helpFormatter1.printHelp("yd HQZn9", "<l*0q2I", options0, "]");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, (String) null);
      helpFormatter0.setDescPadding((-4232));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, ".'<p68:!#iHV0n,0", "--", options1, "arg", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "cFOm'.Z/$>}3$(N";
      helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.hasOption(" ");
      helpFormatter0.printHelp("!LZx", "", options0, "kji%->H%#GdXVpq", true);
      File file0 = MockFile.createTempFile("!LZx", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getNewLine();
      String string1 = null;
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", "org.apache.commons.cli.HelpFormatter$1", options0, 116, 3845, "--");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, "", true, "");
      helpFormatter0.printHelp(2, "sa/zqIvW", "^=oi#Ry5R", options0, ".'<p68:!#iHV0n,0", true);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      List list0 = options0.getMatchingOptions(" [ARG]");
      helpFormatter0.rtrim("mf");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) " [ARG]";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) list0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) fileDescriptor0;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2115, " [ARG]", " [ARG]", options0, 32, (-4359), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Av)0";
      helpFormatter0.rtrim("Av)0");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("<", options0);
      helpFormatter0.findWrapPos("szv\"FxjvIC", 2, 2);
      MockFile mockFile0 = new MockFile("", "szv\"FxjvIC");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("\n");
      helpFormatter0.printHelp("Z^t#]_0,VrP~$", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(2266, "$xG6", "", (Options) null, "-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("line.separator", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("[7w~~");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 116, options0, 116, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1473, options0, 1473, 1473);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.renderWrappedText(stringBuffer1, 1614, 1614, "cH!9LE%n>fPpMW;=s)#");
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1300, 1300, "");
      stringBuffer1.append('&');
      helpFormatter0.renderWrappedText(stringBuffer1, 778, 778, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      Options options2 = options1.addOption("arg", "--", true, (String) null);
      helpFormatter0.printHelp("Z", options1);
      helpFormatter0.printHelp(3, "\n", "--", options2, "arg", true);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      helpFormatter0.rtrim("Z");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "+2";
      helpFormatter0.printHelp("+2", "+2", options0, "+2");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-190), "+2", "+2", options0, " ]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2151;
      String string0 = "WKe";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("WKe", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSSL<YW");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]1sg");
      int int0 = 34;
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 116, options0, 2246, (-784));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      PrintStream printStream0 = mockPrintStream1.printf("-", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "C~}0@/QG3}xPg");
      Options options2 = options1.addOption("", true, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "=~??", "=~??", options3, 32, 32, "=~??");
      Options options4 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 31, options4, 31, 31);
      helpFormatter0.defaultLeftPad = (-910);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "i|=&C?k[mYdXLOFNJ";
      String string1 = "";
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-965), (Options) null, 32, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      Option option0 = new Option("", "usage: ", true, "kNExx\u0003}_;U");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", "[ Options: [ short ", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "\"D^Mc&c*U");
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "", options0, "+Y?)u");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("iH=O(M3YDR)A^i!H");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("@", "-", false, (String) null);
      helpFormatter0.defaultDescPad = 2;
      options1.addOption((String) null, " ", false, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.printHelp("P[ApuSS\"Lp<YW", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", (String) null, options1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("$u~MJb5yG}^<(B8G");
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-926), "#eYk2a<:+");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSSL<YW");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1911);
      helpFormatter0.setOptPrefix("P[ApuSSL<YW");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]1sg");
      Options options1 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.printUsage(printWriter0, 9, "Q@vnpAFcL-F");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "arg", 33, 1295);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("\n");
      helpFormatter0.printHelp("\n", "org.apache.commons.cli.Util", options0, "arg");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSSL<YW");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 12, 12, "Ac");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]1sg");
      helpFormatter0.rtrim("P[ApuSSL<YW");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#V1qG");
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("arg", "", false, "");
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, (String) null, true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", (String) null, options1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("P[ApuSS\"L<YW", "", options0, "cmdLineSyntax not provided");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(654, "IhP38c<Q D>8!+C", "line.separator", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      helpFormatter0.printHelp("P[ApuSS\"L<YW", "P[ApuSS\"L<YW", options0, "org.apache.commons.cli.Util");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, (String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      helpFormatter0.printHelp("WMvp.5nF.qO@im1", options0);
      helpFormatter0.createPadding(45);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("hrVo[M?F}pL%wX7}i3.");
      Options options1 = options0.addOption("", false, "h?Twch4Um{");
      helpFormatter0.renderOptions(stringBuffer0, 45, options1, 45, 45);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 407, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"Lp<YW");
      Options options0 = new Options();
      String string0 = "";
      String string1 = "";
      Options options1 = options0.addOption("arg", "", true, "");
      Options options2 = options1.addOption("arg", "--", true, (String) null);
      helpFormatter0.printHelp("Z", options1);
      helpFormatter0.printHelp(13, ".'<p68:!#iHV0n,0", (String) null, options2, "`,I2T4-Jv", true);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 13, (-2811));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"Lp<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      Options options2 = options1.addOption("arg", "--", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", options2);
      String string0 = "40\\hyIU]TqmF]1v ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1410), ".YWz}81", "arg", options1, "40hyIU]TqmF]1v ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("arg", "", false, "");
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = (-2025);
      int int1 = 59;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2025), 59, "UdnU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"Lp<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", (String) null, options1, 34, (-1554), "WVj~Wp.kNEV", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.hasOption(" ");
      File file0 = MockFile.createTempFile("!LZx", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "cFOm'.Z/$>}3$(N");
      helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "M0:$ rMq", options0, 51, 1, (String) null, true);
      String string0 = "";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"Lp<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      Options options2 = options1.addOption("arg", "--", true, (String) null);
      helpFormatter0.printHelp("Z", options1);
      helpFormatter0.printHelp(13, ".'<p68:!#iHV0n,0", (String) null, options2, "`,I2T4-Jv", true);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "cFOm'.Z/$>}3$(N";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("cFOm'.Z/$>}3$(N", "kji%->H%#GdXVpq", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      options1.hasOption("arg");
      MockFile.createTempFile("usage: ", "-");
      File file0 = MockFile.createTempFile("arg", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "!LZx", options1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("Q\"");
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-2966));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("uX6?@A8fgCf:y=kf$fy", "4] TM<E{j1H_j]'1p", options0, "}'O2x-#?4kv:>>k8M%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "");
      File file0 = MockFile.createTempFile("usage: ", "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-4649), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockFile mockFile0 = new MockFile(">", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      String string0 = "~c";
      PrintWriter printWriter0 = mockPrintWriter0.format("~c", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 646, " ", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("~c");
      helpFormatter0.setDescPadding(63);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1194), (-2698), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "--", ", ", (Options) null, 3, 63, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      Options options1 = new Options();
      helpFormatter0.rtrim("[");
      helpFormatter0.printHelp("[", "[", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(";Z'`I", "usage: ", false, "8ddV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';Z'`I' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockFileOutputStream0.close();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 63, "usage: ", "--", options0, 51, 51, "\n", false);
      helpFormatter0.printHelp("i Mw]%Y(;!$wS", options0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("p.ldtzg$", 1779, 1779);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1253, options0, 1779, 1779);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-3128), options0, 1253, (-4108));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.createPadding(4704);
      StringBuffer stringBuffer0 = new StringBuffer(59);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 4704, options0, 59, 2);
      helpFormatter0.renderOptions(stringBuffer1, 59, options2, 4704, 22);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "");
      helpFormatter0.printHelp("P[ApuSS\"L<YW", options1);
      Options options2 = new Options();
      options2.addOption("", "D#wIR?", false, "~L3$#t7oSOs u*");
      helpFormatter0.printOptions(mockPrintWriter0, 74, options1, 1458, 1458);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", false, "P[ApuSS\"L<YW");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1664), "", (String) null, options1, "fgev_+~snVVhv&k", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.hasOption(" ");
      File file0 = MockFile.createTempFile("!LZx", "-");
      file0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(1);
      Options options1 = options0.addOption("", "/[w_c:9:$w", false, "-");
      helpFormatter0.printHelp("--", options1);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "NcKb.uFzTP", "wJi5/5r", options0, "--", true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      Option option0 = new Option("", " | ", false, "arg");
      Options options2 = options1.addOption(option0);
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printUsage(printWriter0, (-1), " ", options2);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\u0003.9(mD%K2<rC", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3720);
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      String string0 = "[ Options: [ short ";
      helpFormatter0.getNewLine();
      String string1 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(1129);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 71, 2976, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P[ApuSS\"L<YW";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      helpFormatter0.defaultArgName = "P[ApuSS\"L<YW";
      Options options0 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-61);
      byte byte0 = (byte)32;
      byteArray0[2] = (byte)32;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-61), "P[ApuSS\"L<YW");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      String string1 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "");
      helpFormatter0.printHelp("P[ApuSS\"L<YW", options1);
      helpFormatter0.printHelp(13, "P[ApuSS\"L<YW", "", options0, "P[ApuSS\"L<YW", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P[ApuSS\"L<YW";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = false;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "YrJlBr*$fesu*9/", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.hasOption(" ");
      File file0 = MockFile.createTempFile("!LZx", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "cFOm'.Z/$>}3$(N");
      helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.close();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", " ", options0, 74, 64, "i Mw]%Y(;!$wS", true);
      helpFormatter1.printHelp("-", (String) null, options0, "qE");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Option option0 = new Option("", "usage: ", true, "kNExx\u0003}_;U");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "6/.LjVA$O+M8[e", options2);
      helpFormatter0.getLongOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.hasOption(" ");
      File file0 = MockFile.createTempFile("!LZx", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter0.setOptPrefix("");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (-26), "");
      helpFormatter0.setDescPadding(3);
      // Undeclared exception!
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, 31, "--");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      Option option0 = new Option("", "usage: ", true, "kNExx\u0003}_;U");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "6/.LjVA$O+M8[e", options2);
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 17, "6/.LjVA$O+M8[e", "[ Options: [ short ", options3, (-2), 13, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, "<");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      options0.hasOption(" ");
      File file0 = MockFile.createTempFile("!LZx", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2), "cFOm'.Z/$>}3$(N");
      helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-18), "org.apache.commons.cli.HelpFormatter$OptionComparator", "", (Options) null, (-18), (-18), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      Option option0 = new Option("arg", "   ", true, "--");
      options1.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "[ Options: [ short ", options1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6/.LjVA$O+M8[e", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a#7x>k24X<}M<", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", "", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp("P[ApuSS\"L<YW", options1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append((CharSequence) "-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 22, "", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 671, 74, ">");
      helpFormatter1.setDescPadding(64);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 64, 22, " ");
      helpFormatter0.setOptPrefix("arg");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = (-2132);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.defaultWidth = (-2132);
      helpFormatter0.defaultDescPad = 21;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setArgName("Ni");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setDescPadding((-328));
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Rla</?u\"+2XyTp]zi");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "Rla</?u\"+2XyTp]zi", true, "--");
      // Undeclared exception!
      helpFormatter0.printHelp("!F53/+50qXOCr", options4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("[ Options: [ short ");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(195);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      mockPrintWriter0.print((float) 1);
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      Option option0 = new Option("", "usage: ", true, "kNExx\u0003}_;U");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "6/.LjVA$O+M8[e", options2);
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      String string0 = null;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
      helpFormatter0.defaultArgName = "P[ApuSS\"L<YW";
      Options options0 = new Options();
      options0.helpOptions();
      String string0 = "";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)76;
      byte byte0 = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)64;
      PrintWriter printWriter0 = mockPrintWriter0.format("-", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 11, "", "org.apache.commons.cli.AlreadySelectedException", options0, 44, (int) (byte)64, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = " ]";
      Option option0 = new Option("", true, " ]");
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1014, (String) null, (String) null, options1, (-1257), 32, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      int int0 = 0;
      helpFormatter0.findWrapPos("T%qQywZQ", 0, 0);
      String string0 = "#3T&:jOw3{J";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "#3T&:jOw3{J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-848);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-848));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setNewLine("PIy5! g$bThWvw6&=");
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      int int0 = 1867;
      String string1 = "9X+<h4$!EjyE`;";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        option0.addValue("<");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      mockFile0.getAbsoluteFile();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-586), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "!?ilang");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // !?ilang
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1639;
      helpFormatter0.setLeftPadding(1639);
      helpFormatter0.getLongOptSeparator();
      String string0 = "sY 7X']1Y-~)`w0}{9l";
      String string1 = "]0,GbX,e>gwG/";
      File file0 = MockFile.createTempFile("sY 7X']1Y-~)`w0}{9l", "]0,GbX,e>gwG/");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1611);
      helpFormatter0.setDescPadding((-1611));
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[puSSL <W";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[puSSL <W");
      Options options0 = new Options();
      options0.hasOption("\n");
      helpFormatter0.getNewLine();
      options0.getOptionGroups();
      helpFormatter0.setOptPrefix("[puSSL <W");
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      String string1 = "7w";
      helpFormatter0.setOptPrefix("7w");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4YCP$;;:$% >", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, false);
      options0.hasOption(" :: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", " ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("[ Options: [ short ");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kji%->H%#GdXVpq", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)28;
      mockFileOutputStream0.write(byteArray0, 3, 161);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte)1, "kji%->H%#GdXVpq");
      helpFormatter0.rtrim("kji%->H%#GdXVpq");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSSL<YW");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]1sg");
      Options options1 = new Options();
      helpFormatter0.rtrim("P[ApuSSL<YW");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), (-1), "[ARG...]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ";l";
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer("'W");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1874, (-2378), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSSL<YW");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]1sg");
      Options options1 = new Options();
      Options options2 = options0.addOption("", "--", false, "-");
      helpFormatter0.printHelp("P[ApuSSL<YW", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "\n", "-", options2, 74, 1, "", false);
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kji%->H%#GdXVpq", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)28;
      mockFileOutputStream0.write(byteArray0, 3, 161);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, "kji%->H%#GdXVpq");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-3720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, "");
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ Options: [ short ", true, "-");
      Option option0 = new Option("", "usage: ", true, "kNExx\u0003}_;U");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ Options: [ short ", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      int int0 = 1;
      int int1 = 455;
      helpFormatter0.setDescPadding(455);
      helpFormatter0.setWidth(1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptSeparator("");
      int int0 = (-1029);
      helpFormatter0.setWidth((-1441));
      helpFormatter0.defaultWidth = (-1475);
      helpFormatter0.setDescPadding((-1029));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1029));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, false);
      MockFile mockFile0 = new MockFile((File) null, "VHG=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "usage: ", 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultWidth = (-2132);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = (-2132);
      helpFormatter0.defaultDescPad = 21;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setArgName("Ni");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setDescPadding((-328));
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Rla</?u\"+2XyTp]zi");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "Rla</?u\"+2XyTp]zi", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!F53/+50qXOCr", options4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = null;
      String string1 = null;
      Options options0 = new Options();
      helpFormatter0.setNewLine((String) null);
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "arg", true, "CN XMAiI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 554;
      helpFormatter0.findWrapPos("E<S^.O+YMpo\u0005[:uo]", (-2817), 554);
      PrintWriter printWriter0 = null;
      int int1 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Option option0 = null;
      try {
        option0 = new Option("-", "+>noK1W+D3+-DOs+\"$", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
