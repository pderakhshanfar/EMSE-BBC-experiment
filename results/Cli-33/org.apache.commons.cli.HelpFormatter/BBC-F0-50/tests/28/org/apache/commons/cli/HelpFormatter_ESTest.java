/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:07:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4101, "6}]g>hb[+,N");
      String string0 = helpFormatter0.createPadding(2140);
      helpFormatter0.createPadding(4420);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.printHelp(120, string0, ":<shp%1_ S", options0, "");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Options options0 = new Options();
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultWidth = 3;
          helpFormatter0.printHelp("0paH!uq6?)nF", "0paH!uq6?)nF", options0, "0paH!uq6?)nF");
          StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
          int int0 = 0;
          // Undeclared exception!
          helpFormatter0.renderWrappedText(stringBuffer0, 0, 1609, "0paH!uq6?)nF");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, ",|");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.defaultLeftPad = (-154);
      helpFormatter0.getLeftPadding();
      String string0 = "0rpaH!uq6?{)nF";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("0rpaH!uq6?{)nF", "0rpaH!uq6?{)nF", options0, "0rpaH!uq6?{)nF");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--", false, "arg");
      optionGroup0.addOption(option0);
      StringWriter stringWriter0 = new StringWriter();
      options1.addOptionGroup(optionGroup0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1516, "", options1);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(117, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      Options options0 = new Options();
      helpFormatter0.printHelp(1062, "-", "-", options0, " ");
      Options options1 = new Options();
      options1.addOption("", true, "arg");
      String string0 = "XaSqcu^KiGUi";
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      helpFormatter0.printHelp("XaSqcu^KiGUi", "", options1, "[");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.defaultDescPad = 1637;
      helpFormatter0.defaultLongOptPrefix = "R^J<U[M}z}$!";
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1637, "R^J<U[M}z}$!", "usage: ", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("   ", "   ", options0, "   ");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "   ", "   ", options0, "   ");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("i", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(74, "F1v", "arg", options1, "F1v", true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", "\n", options0, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 801, ",w!6z61N7Psk4lu", ",w!6z61N7Psk4lu", options1, (-755), 196, ",w!6z61N7Psk4lu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setWidth((-1980));
      Options options0 = new Options();
      Option option0 = new Option("e", "", true, "B==oiJWT]s|rq_3");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "arg", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "\n");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 64, (-466));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "\n", options0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3915, "--");
      helpFormatter0.printOptions(printWriter0, 3915, options0, 3915, 91);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      String string0 = "Aue]o`\\-ny";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultNewLine = "k927{tjnW";
      helpFormatter0.defaultNewLine = "Aue]o`-ny";
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      int int0 = (-198);
      helpFormatter0.defaultDescPad = (-198);
      MockFile mockFile0 = new MockFile("B#n~}A=xcVUS2G1m;6", "Aue]o`-ny");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      String string1 = "72%\\7]Cbn3W0yWr!";
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("", "Aue]o`-ny", true, "org.apache.commons.cli.HelpFormatter$1");
      Option option0 = null;
      try {
        option0 = new Option("--", false, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      options0.addOption((String) null, true, "--");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.printHelp("+", "-", options0, "#8z10\"gM_00}bQ ?qVG", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "--", options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-969), "--", "--", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      helpFormatter0.printHelp("XaSqcu^KiGUi", "", options0, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("cmdLineSyntax not provided", 63, (-840));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      options0.getMatchingOptions("usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "", options0, "hN");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 13, (Options) null, 19, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      mockPrintWriter0.printf((Locale) null, "M(a;o#B", objectArray0);
      Options options1 = options0.addOption("oaFs_", "M(a;o#B", true, "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2326), "?Si'<!]z?Ii<)+", "org.apache.commons.cli.HelpFormatter$1", options1, (-2326), 4631, "PMX*.P+4:`4V.Dq+g~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "?eS?'VLYh/JeU^(l", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 64, options1, 105, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter1.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "-");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", (String) null, (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.write("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, (String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, 13, 13, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      option0.setDescription("ygn j8+M\"p");
      Options options2 = new Options();
      Options options3 = options1.addOption("AptQ8", true, (String) null);
      options1.getOption("-");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options3.getMatchingOptions("arg");
      options3.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.addOption("arg", true, " ");
      options1.getMatchingOptions("?");
      helpFormatter1.printHelp("2", "j-_8szm", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 738, "~_qt#I]'t5,FE(S", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 738, 2, "", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption("arg", true, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.getMatchingOptions("-");
      options3.getMatchingOptions("AvhU8:H-,9X<<n=");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("KHHHI/B]8`Rqxp~s", "&F]9W6!R'k", options3, "arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      int int1 = 31;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options3, 74, 31);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.findWrapPos("SA6:HvHjS3|XQ6W!+/Z", 32, 32);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(14);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 14, options2, (-2), 32);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Option option0 = new Option("", "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "-", "", options0, (-2848), (-2848), "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print('_');
      mockPrintWriter0.write("-", 3, (-67));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 0, 1);
      helpFormatter0.renderOptions(stringBuffer0, 115, options0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      options0.addOption(option0);
      Options options1 = new Options();
      options0.addOption("", false, "arg");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.comons.cli.AlreadSelectedException");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("p0VL(J'(B6!|X[iR,(");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 3727, "2o.-8Bp}Xu6WFpL \"4", "-", options1, 74, 1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      Options options3 = options1.addOption("AptQ8", true, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      List list0 = options3.getMatchingOptions("arg");
      options3.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "es", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter0 = new StringWriter(1);
      options3.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "AptQ8";
      objectArray0[3] = (Object) "AptQ8";
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "I%F", options1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print('_');
      mockPrintWriter0.write("-", 3, (-67));
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("WfBE!M@o_*~", "", options0, "WfBE!M@o_*~");
      helpFormatter0.createPadding(1926);
      helpFormatter0.setDescPadding((-67));
      helpFormatter0.renderOptions((StringBuffer) null, 6, options0, 175, 1394);
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 0, 175);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      String string0 = "gR4nY-V</KH{:;i";
      Options options3 = options1.addOption("arg", true, "gR4nY-V</KH{:;i");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options0.getMatchingOptions("");
      options3.getMatchingOptions("9$[Lhy2");
      options2.getMatchingOptions("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2180), options3, 1, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setSyntaxPrefix("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter1.printHelp("--", " ", options0, "-");
      helpFormatter1.createPadding(74);
      helpFormatter1.setDescPadding(3);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "                                                                          ", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultDescPad = (-3729);
      Option option0 = new Option("i", true, "arg");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i", "i", options1, "$C-}gH2]hK5;&i[:b", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      options2.getMatchingOptions("mqi.(xmk");
      helpFormatter0.printHelp("es", (String) null, options1, "org.apache.commons.cli.Option");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write("arg", 3207, (-2256));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-67), "HsWkVo/659");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 6, "~_qt#I]'t5,FE(S", "\"", (Options) null, (-1), 82, "\"", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("$=aI44n0s<n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 6, " | ", "", options1, 0, 6, "$=aI44n0s<n", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.print('_');
      mockPrintWriter0.write("-", 3, (-67));
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("WfBE!M@o_*~", "", options0, "WfBE!M@o_*~");
      helpFormatter0.createPadding(1926);
      helpFormatter0.setDescPadding((-67));
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-67), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setSyntaxPrefix("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print(false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      helpFormatter1.createPadding(214);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 3, "arg", "usage: ", options0, 3, 3, "[ Options: [ short ", false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = helpFormatter0.createPadding(1926);
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "8M*VK|LYW?dvt!4P/\"", "8M*VK|LYW?dvt!4P/\"", options0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = null;
      Option option0 = new Option("", true, (String) null);
      Options options1 = options0.addOption(option0);
      int int0 = 4022;
      helpFormatter0.renderOptions(stringBuffer0, 2, options1, 4022, 4022);
      options1.getOption("");
      // Undeclared exception!
      try { 
        options1.addOption("Gv]R", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Gv]R' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1191), "F1v", "org.apache.commons.cli.HelpFormatter$1", options1, "F1v", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 6, "<3GLM-r=bXd}z", (String) null, options1, 0, 1922, "<3GLM-r=bXd}z", false);
      helpFormatter0.printHelp("<3GLM-r=bXd}z", "pL%z^=28'J*FrFu.", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      options1.addOption("AptQ8", true, "es");
      options0.getMatchingOptions("./Wy-*XT#1`Z_b");
      helpFormatter0.printHelp("./Wy-*XT#1`Z_b", (String) null, options1, "", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.write("-", 3, (-67));
      mockPrintWriter0.write("--", 74, (-1105));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-167), (-167), "|qjrc&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("sx", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.print("-");
      helpFormatter1.defaultWidth = 1;
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "{>G\"j45PsGS]w", "{>G\"j45PsGS]w", options1, 3, 1822, "arg");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 6, "<3GLM-r=bXd}z", (String) null, options1, 0, 1922, "<3GLM-r=bXd}z", false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(905, "p", "p", (Options) null, "p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("sx", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "{>G\"j45PsGS]w", "{>G\"j45PsGS]w", options1, 3, 1822, "arg");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'";
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0);
      int int0 = 905;
      Options options1 = new Options();
      helpFormatter0.printHelp(905, "G67TF_so", "ZN\"Hqx!aC?#,", options1, ", ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 905, "vrt00", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", " ", true, "");
      options2.getMatchingOptions("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1989, options2, 35, 1);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      option0.setDescription("");
      int int0 = 44;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1801), 44, "1`{T'RPz&vqJ5 h&5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("'", options0);
      int int0 = 905;
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(905, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp("~_qt#I]'t5,FE(S", (String) null, options0, "WfBE!M@o_*~");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding((-67));
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 33, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "%):3U,}/hbw";
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(68, "", "%):3U,}/hbw", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("w3", "org.apache.commons.cli.HelpFormatter");
      Option option1 = new Option((String) null, "`H^yy`FHe8", true, "'i<x(x)E ");
      Options options1 = options0.addOption(option1);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 2746, "");
      MockFile mockFile0 = new MockFile("1R+", "b*,S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 63, (-2), "`H^yy`FHe8");
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options1, 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "-");
      String string0 = "";
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "v4YV;_{;.", options2, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "arg");
      String string0 = "/";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "4hd+ERAIn4", options0, 11, (-1), "--", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter1.setLongOptSeparator("");
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("", true, "4!S$;+j#Nz IuKQV9L~");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "arg", false, "%tMV{");
      options3.helpOptions();
      helpFormatter0.printHelp("--", "--", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1887));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("sS^@gf -@x!Nq");
      mockPrintWriter0.write("arg", 74, (-1));
      mockPrintWriter0.println(1.0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 659, 44, "sS^@gf -@x!Nq");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(31);
      helpFormatter0.printHelp(74, "%):3U,}/hbw", "", options1, "%):3U,}/hbw", false);
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]j9'#Jp";
      String string1 = "v-56&<T}}f}|![1:";
      Options options0 = null;
      boolean boolean0 = true;
      String string2 = "gha{|LZ]";
      File file0 = MockFile.createTempFile("Dwq", "gha{|LZ]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultArgName = "Dwq";
      helpFormatter0.setWidth((byte)2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4022, "Dwq", "", (Options) null, (-1657), 4022, "Dwq");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter0.setLongOptSeparator("D{");
      helpFormatter0.setSyntaxPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1385), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter1.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("--");
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = false;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
      MockFile mockFile0 = new MockFile((File) null, "");
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("oYsJ9");
      helpFormatter0.setSyntaxPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 9, "D|q3J=>2B7");
      assertEquals("oYsJ9", helpFormatter0.getLongOptSeparator());
      
      helpFormatter0.rtrim("oYsJ9");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!J72>");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 11, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "", "|;zy8/.k", options1, 1822, 1822, "MCD5=:(gPy.1~znj@6|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter1.setSyntaxPrefix("arg");
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setSyntaxPrefix("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.print(false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", " ", true, "");
      options2.getMatchingOptions("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "arg", options2, "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "usage: ", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("arg");
      options1.toString();
      helpFormatter0.printHelp("5V#R-", "5V#R-", options1, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.setArgName(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("L{?|f_DFxgk*uae2");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 0, 0);
      boolean boolean0 = true;
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "y J'|`$#x@gjd$QC", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "%):3U,}/hbw";
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(31);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      Options options3 = options1.addOption("AptQ8", true, (String) null);
      List list0 = new LinkedList<String>();
      options3.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "es", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.chars();
      helpFormatter1.renderOptions(stringBuffer0, 3, options3, 3, 1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "-oo~,";
      MockFile mockFile0 = new MockFile("-oo~,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-977), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.write("~_qt#I]'t5,FE(S", 3, (-67));
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("WfBE!M@o_*~", "", options0, "WfBE!M@o_*~");
      helpFormatter0.createPadding(1926);
      helpFormatter0.setDescPadding((-67));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "%):3U,}/hbw";
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(31);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2), "b*,S");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("oYsJ9");
      helpFormatter0.setSyntaxPrefix("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.checkError();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 9, "D|q3J=>2B7");
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("org.apache.commons.cli.OptionValidator", (-1), 32);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("5V#R-", "5V#R-", options1, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.setArgName(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("L{?|f_DFxgk*uae2");
      int int0 = 0;
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 0, 0);
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "sa", "sa", options0, "y J'|`$#x@gjd$QC", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      String string0 = "~_qt#I]'t5,FE(S";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "";
      Option option0 = new Option("", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2322), "", "/", options0, (-1), 13, "/", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.getOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1187), "", "<3GLM-r=bXd}z", options1, 6, 6, "_E<b(y*Y=", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("arg");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-695), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2503;
      helpFormatter0.defaultDescPad = (-1877);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth(0);
      helpFormatter0.setWidth(1265);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("5V#R-", "5V#R-", options1, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.setArgName(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("L{?|f_DFxgk*uae2");
      int int0 = 0;
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 0, 0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "y J'|`$#x@gjd$QC", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.write("~_qt#I]'t5,FE(S", 3, (-67));
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "|qjrc&");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      options0.hasOption("Illegal option name '");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("!J72>");
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getOptionComparator();
      options0.getMatchingOptions((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.rtrim((String) null);
      int int0 = 657;
      helpFormatter0.createPadding(657);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.defaultArgName = "";
      int int1 = 0;
      int int2 = 930;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(930, (-144.659232));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 930
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3830;
      helpFormatter0.defaultLeftPad = 3830;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3830, 3830, "");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.setDescPadding(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      int int1 = 32;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", 3830, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-4003);
      helpFormatter0.defaultNewLine = "";
      Option option0 = new Option("", (String) null);
      String string0 = "Seo;K\\{ykMN5fb*ulZ3";
      option0.setDescription("Seo;K{ykMN5fb*ulZ3");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4^fwHMGM{&qmX,E9", "", options0, " [ARG]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      int int0 = (-6112);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-6112), "/", "' was specified but an option from this group ", options0, (-1), 0, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1622);
      helpFormatter0.setOptPrefix("Ho_#q!}UU]gT");
      helpFormatter0.defaultLeftPad = (-1622);
      String string0 = "Q/s";
      helpFormatter0.defaultSyntaxPrefix = "S6ws&u#";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1596));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      char char0 = 'P';
      mockPrintWriter0.print(true);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 0;
      int int1 = 32;
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 32, "");
      Options options0 = new Options();
      stringWriter0.write("-");
      Option option0 = null;
      try {
        option0 = new Option("=SfxW9h(M*?O{{IO$", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=SfxW9h(M*?O{{IO$' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = "N^C??";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.createPadding(1);
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "N^C??");
      String string2 = "}Bb]}";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("}Bb]}", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '}Bb]}' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setLeftPadding(611);
      helpFormatter0.findWrapPos("[ Options: [ short ", 1123, 0);
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(0);
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      options1.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "Ig");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getOptPrefix();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("(rb1yV");
      int int0 = 1963;
      helpFormatter0.setWidth(1963);
      helpFormatter0.getOptPrefix();
      int int1 = (-4572);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-4572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      URI uRI0 = MockURI.aHttpURI;
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", " ", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option(" ", false, "^^.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      int int0 = 3;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("T?", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      Options options3 = options1.addOption("AptQ8", true, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options3.getMatchingOptions("arg");
      options3.getMatchingOptions("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "es", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options3, 3, 1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, 0, options0, (-1), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("5V#R-", "5V#R-", options1, "");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultSyntaxPrefix = " ";
      helpFormatter0.setArgName(" ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("L{?|f_DFxgk*uae2");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 0, 0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals("L{?|f_DFxgk*uae2", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-469));
      String string0 = "";
      MockFile mockFile0 = new MockFile("--", " ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", " ", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3724);
      String string0 = "";
      String string1 = " :: ";
      Options options0 = new Options();
      helpFormatter0.setWidth((-3724));
      Option option0 = null;
      try {
        option0 = new Option("\n", "-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("%):3U,}/hbw", options1, false);
      String string1 = "";
      Options options2 = new Options();
      boolean boolean0 = false;
      options2.toString();
      Option option1 = new Option("", false, " [ARG]");
      Options options3 = options2.addOption(option1);
      // Undeclared exception!
      try { 
        options3.addOption("Sq|B", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Sq|B' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 688;
      stringWriter0.write(688);
      StringWriter stringWriter1 = stringWriter0.append('v');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.GERMAN;
      stringWriter0.write(1);
      Object[] objectArray0 = new Object[1];
      Locale locale1 = Locale.GERMAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList2);
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "FXG*9pI4");
      helpFormatter0.setWidth(0);
      helpFormatter0.setDescPadding(0);
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(":p1/GAx^7SxIU,^");
      StringWriter stringWriter0 = new StringWriter(74);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      String string0 = "s1?(~j&=n(P17K|2=";
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 0, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cjy\\eNYV34d!";
      helpFormatter0.setLongOptPrefix("CjyeNYV34d!");
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.toPath();
      boolean boolean0 = true;
      mockFile0.setExecutable(true);
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      int int0 = (-648);
      int int1 = (-2142);
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, (-648), (-2142));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }
}
