/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:51 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = ">";
      boolean boolean0 = false;
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), 1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2391);
      String string0 = " | ";
      helpFormatter0.setSyntaxPrefix(" | ");
      helpFormatter0.setWidth((-2391));
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", true, "B1");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding(1475);
      Option option1 = new Option((String) null, "-", false, "usage: ");
      optionGroup0.addOption(option1);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options0, true);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.defaultWidth = (-14);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.renderWrappedText(stringBuffer0, 115, 115, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(Q6REzw!RMoz'4*q'&", "", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("7'lc0$M]b5{bm", 0, 0);
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "},X2T|`Z]sk7[", options0, "@", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("[n!$DqJ7G)", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      helpFormatter0.renderWrappedText(stringBuffer0, 1649, 5960, "");
      helpFormatter0.createPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "[n!$DqJ7G)", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t", "t", (Options) null, "'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-721), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4051;
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      helpFormatter0.setLongOptPrefix("");
      Option option0 = new Option("EtKkT", true, (String) null);
      options0.addOption(option0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(4051);
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 4051, 76);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultWidth = (-203);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("(Q6REzw!RMoz'4*q'&", "(Q6REzw!RMoz'4*q'&", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.getLeftPadding();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2284));
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      Option option0 = new Option("", " ", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v.\"d1mbO?>IO1!", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      Option option0 = new Option("", " ", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("arg", "-", true, "--");
      options0.addOption("", "-t64@+", true, "\n");
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)13;
      helpFormatter0.defaultOptPrefix = "";
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Options options0 = new Options();
      options0.helpOptions();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Rnc9");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("<nVv1o[e^}qx9F/b$V");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale.forLanguageTag("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X1IuX'M5");
      Options options1 = new Options();
      helpFormatter0.setNewLine("<y 1Z8!dG&Pbi@");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("", "X1IuX'M5", true, "f2HQhe");
      helpFormatter1.printHelp(3, "usage: ", "", options2, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 9, (-362));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", " ", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 67, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 1, "");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "xY:v4U%m/86'yZr|z_6", "-", options1, "-t64@+", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.reset();
      Locale.forLanguageTag("org.apache.commons.cli.HelpFormatter$OptionComparator");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp(2, "usage: ", (String) null, options0, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "PvueJ#`PmkF7K", (String) null, options0, 2, (-437), "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.reset();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-585), 10, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultArgName = "";
      Options options2 = options1.addOption("", "", false, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "e4rR0^gR4U|1I(", options2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "f[bU", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "f[bU";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) stringBuffer0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "f[bU";
      objectArray0[7] = (Object) "usage: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "<[`F0lO1vXB@>Wl", "Nn],", options0, 1, 1, "<[`F0lO1vXB@>Wl");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setNewLine("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options2);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("ip]MTFUCA]:{C", options0, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Object object0 = new Object();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Option option0 = new Option("arg", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      helpFormatter0.printHelp("CD", "/C1v9o}T7t~ksn", options1, "org.apache.commons.cli.HelpFormatter$1", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 3, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "-");
      options0.addOption(option0);
      helpFormatter0.setLeftPadding((-1));
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("Q");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", " ", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("arg", "-t64@+", true, "--");
      options0.addOption("", "-t64@+", true, "Q");
      helpFormatter0.printHelp("-:z8T", "7.\"d1mb>O?>IO1!", options1, "", true);
      helpFormatter0.printHelp(3, "cwu=&Y{u=y,;!FqgV", "<ksBA.aG\">j*R)jc\"^", options1, "7.\"d1mb>O?>IO1!");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "^>RY6G", "", options0, 63, 21, " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 1176, "\n");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object object0 = new Object();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options0.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "   ", "r<", options0, 1909, 3, "/C1v9o}T7t~ksn", true);
      helpFormatter0.printHelp(3, "   ", "", options0, "{Qq");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(88, "org.apache.commons.cli.AlreadySelectedException", "", (Options) null, "org.apache.commons.cli.AlreadySelectedException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("i,]pp#AKy", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setSyntaxPrefix("2");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ] [ long ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ] [ long ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-445));
      helpFormatter0.setSyntaxPrefix("E!Tx!z*{]S=q0=zDj6");
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.defaultNewLine = "[";
      helpFormatter0.setWidth(0);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 618;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "b}$+cP9o/fpM1-.]#");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("b}$+cP9o/fpM1-.]#", true, "MQ+i=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'b}$+cP9o/fpM1-.]#' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1104), 1176, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(2);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "usage: ", options0, "-");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(1598, "\n", "y^;TrSx", options0, "arg");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object object0 = new Object();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "   ", "r<", options0, 1909, 3, "/C1v9o}T7t~ksn", true);
      options0.hasOption("Cannot add value, list full.");
      helpFormatter0.printHelp("   ", "r<", options0, "yMge7", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2791), "[oXH(.tYF", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "yMge7", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "usage: ";
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.setNewLine("");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options0 = new Options();
      String string0 = "";
      boolean boolean0 = false;
      String string1 = null;
      Options options1 = options0.addOption("", "--", false, (String) null);
      options1.toString();
      helpFormatter0.printOptions(printWriter0, 65, options1, 33, 65);
      int int0 = 2478;
      options1.toString();
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2478, (String) null, ",c;h`J3Cq,v^+o", (Options) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2715), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object object0 = new Object();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "   ", "r<", options0, 1909, 1, "/C1v9o}T7t~ksn", true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter$1");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "-", 1, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")DSPc?U,^;FA");
      options0.toString();
      options0.getMatchingOptions("_oApgCluy4HF2c");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printOptions(mockPrintWriter0, 684, options1, 13, 33);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(4);
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      Locale locale0 = Locale.CHINESE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "r{DB=9wMOK%kTSyA", " ", options0, 100, 2, "", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "NO_ARGS_ALLOWED", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.HelpFormatter$1");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "-", 1, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")DSPc?U,^;F9");
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "w&", "org.apache.commons.cli.HelpFormatter$1", options2, 13, 84, "org.apache.commons.cli.HelpFormatter$1");
      options2.addOption("", false, "org.apache.commons.cli.Option");
      options0.getMatchingOptions("_oApgCluy4HF2c");
      helpFormatter0.getLongOptSeparator();
      int int0 = 374;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("w&", 374, 15);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 60, ")DSPc?U,^;F9", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      mockPrintWriter0.printf(locale0, " ]", objectArray0);
      Options options0 = new Options();
      byteArrayOutputStream0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "usa1ge ", "usa1ge ", options0, 34, (-969), "!qIt~W=ht", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.setNewLine("A");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultWidth;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.hasOption(">");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      option0.getValues();
      helpFormatter0.printHelp("<y 1Z8!dG&Pbi@", "usage: ", options1, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".`sZHmb;eIx?&#iwl:");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3212, ".`sZHmb;eIx?&#iwl:", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, options0, (-2), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Options options0 = new Options();
      options0.helpOptions();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Options options1 = new Options();
      Option option0 = new Option("arg", false, "KY#=u6gqqz6%}At}E");
      option0.getValues();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Rnc9");
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("<nVv1o[e^}qx9F/b$V");
      helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 58, 3);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      Locale.forLanguageTag("");
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 200, "[ Options: [ short ", "[ Options: [ short ", (Options) null, 200, 3, " | ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.hasOption(">");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      option0.getValues();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".`sZHmb;eIx?&#iwl:");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1865), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-30), "usa1ge ", "usa1ge ", options0, (-874), (-738), "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "3y^'sV;%1{HN[W1");
      options1.getOptionGroups();
      Option option0 = new Option("", "K", true, "");
      option0.clearValues();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOption(option1);
      options1.hasOption("usage: ");
      options1.addOption(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      option1.getValues();
      option0.getValues();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3212, "<y 1Z8!dG&Pbi@", options2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      helpFormatter0.setNewLine((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      int int0 = helpFormatter1.defaultDescPad;
      helpFormatter1.setNewLine("usage: ");
      helpFormatter0.getLongOptSeparator();
      int int1 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine("-");
      helpFormatter2.defaultOptPrefix = "arg";
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-1594), "arg", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter0.setOptPrefix("J");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append('_');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3411, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2575, "usa1ge ", "usa1ge ", options0, 31, 3, "usa1ge ", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, " ");
      helpFormatter0.renderOptions(stringBuffer1, 74, options0, 63, 9);
      helpFormatter0.printHelp(printWriter0, 64, "usa1ge ", "", options0, 586, 3, " ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2575, "usa1ge ", "usa1ge ", options0, 70, 3, "usa1ge ", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      Options options0 = new Options();
      helpFormatter0.printHelp(51, " ", "' was specified but an option from this group ", options0, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.defaultWidth = 34;
      mockPrintWriter0.append('_');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Locale locale0 = Locale.CHINESE;
      mockPrintWriter0.printf(locale0, " ]", objectArray0);
      Option option0 = new Option("arg", true, "EX^`RA_WJ^oU3AHOPM,");
      option0.clearValues();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("lj97W", "", true, "lj97W");
      Options options2 = options1.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("t<?h!Dp;IVb", "", options2, "lj97W", true);
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.getOption("arg");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.hasOption(">");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2705);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printHelp(printWriter0, 117, "mT.u|lE<", "mT.u|lE<", options0, 1, 117, (String) null, false);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped(printWriter0, 31, "");
      // Undeclared exception!
      helpFormatter1.printHelp(1, "RzRZ/+~Q=m8ICb,Ukq", (String) null, options1, "-");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.append('_');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2), "org.apache.commons.cli.OptionValidator", "zez(hd", (Options) null, (-2), (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3376));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "D@", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2575, "usa1ge ", "usa1ge ", options0, 31, 3, "usa1ge ", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(31);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "D@", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 2575, "usa1ge ", "usa1ge ", options0, 31, 3, "usa1ge ", false);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter1 = mockPrintWriter0.append('}');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "1V<d", "zez(hd", options0, (-2), 74, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "usage: ";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 546;
      int int1 = 34;
      String string0 = "";
      helpFormatter0.renderWrappedText(stringBuffer0, 42, (-635), "");
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-635), (Options) null, 10, 2300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("arg", "usage: ");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, ">}3l!Q?%!~jF");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "", "", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4051;
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(4051);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, (String) null, (String) null, options1, 118, (-2444), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("09y/C?dUM[H8", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "", options0, "kK+*lm7nLNtL}`=;HH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "", options1, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.println((-295L));
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 23, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", ":_d<w}x\"-Te'", options2, 2170, 2, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string0 = ">}3l!Q?%!~jF";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, ">}3l!Q?%!~jF");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "v.\"d1mbO?>IO1!");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 546, "g@q9F?@C1+Bz");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, ">}3l!Q?%!~jF");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "v.\"d1mbO?>IO1!");
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options2, 1348, (-1322));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string0 = ">}3l!Q?%!~jF";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, ">}3l!Q?%!~jF");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "v.\"d1mbO?>IO1!");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-331), 546, "g@q9F?@C1+Bz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4051;
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 4051, 76);
      helpFormatter0.printHelp("ft?%_#]]5E{A/k", (String) null, options0, "u5M:");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.rtrim("W#xHc]rDy}T#Pb");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.OptionGroup", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4051;
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(4051);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 4051, 76);
      helpFormatter0.printHelp(111, "org.apache.commons.cli.Util", "R-4t;;\"dhDK7Or", options0, "R-4t;;\"dhDK7Or");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("line.separator", ">", options2, "", false);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, (String) null, "M\"ef,N]H?M3Z", options1, ">", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "w{Wt~Jk";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "line.separator";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      options0.addOption("arg", " ", false, "-");
      helpFormatter0.defaultLongOptPrefix = "d;";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "E 7yn");
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("w{Wt~Jk", objectArray0);
      printWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "line.separator", options0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "", options1, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = (-1470);
      String string0 = ">}3l!Q?%!~jF";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "", ":_d<w}x\"-Te'", options2, 2170, 2, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", true, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string0 = ">}3l!Q?%!~jF";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 3, ">}3l!Q?%!~jF");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "v.\"d1mbO?>IO1!");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-331), 546, "g@q9F?@C1+Bz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      helpFormatter0.rtrim("W#xHc]rDy}T#Pb");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "p", options0, "-t64@+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      Options options0 = new Options();
      String string0 = ".HQM$U:G\"8P";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-t64@+", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 3, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("m@-dLx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m@-dLx");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ] [ long ", objectArray0);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(printWriter0, 2575, " ] [ long ", "usage: ", options0, 2575, 2575, " ] [ long ", false);
      helpFormatter0.defaultSyntaxPrefix = " ] [ long ";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printUsage(printWriter0, 1005, "m@-dLx");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("m@-dLx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m@-dLx");
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      mockPrintWriter0.format("-", objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 112, "~:`");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Locale locale0 = new Locale("");
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "/C1v9o}T7t~ksn", "", options0, 3, 200, "[ Options: [ short ", false);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      helpFormatter0.rtrim((String) null);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 76;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1562), 'S');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 4051;
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer(4051);
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 4051, 76);
      helpFormatter0.printHelp("ft?%_#]]5E{A/k", (String) null, options0, "u5M:");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "TjL)o";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "TjL)o");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 546, 34, "");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 546, "g@q9F?@C1+Bz");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "k$FU\"rI";
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.setLeftPadding(72);
      String string1 = "+d[pnbB7u3]N";
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 72, (Options) null, 72, 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", true, "");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 122, options1, 817, 122);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 63, (-1381), "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-1381), (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar/--");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.findWrapPos(", ", 4990, (-819));
      helpFormatter0.setWidth((-539));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      PrintWriter printWriter0 = null;
      int int0 = 105;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 105, "CjKAonxq4#^? %");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3, "^wh7bC^L*");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("sKN0m\"{Sm.Vr");
      helpFormatter0.printWrapped(printWriter0, 2, 2, "line.separator");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(" ", "arg", (Options) null, "m=XlWV_", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "[ARG...]";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLongOptSeparator("[ARG...]");
      helpFormatter0.defaultDescPad = 0;
      String string1 = "";
      Options options0 = null;
      URI uRI0 = MockURI.URI("=E");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      int int0 = helpFormatter0.defaultDescPad;
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.setLongOptSeparator("-t64@+");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "7\":e`$4", ">", options0, " ");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("The option '");
      helpFormatter0.getLongOptSeparator();
      int int0 = 3673;
      String string0 = "line.separator";
      String string1 = "r_h&n9!>";
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "line.separator";
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("w{Wt~Jk", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3673, "line.separator", options0);
      options0.getMatchingOptions("line.separator");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("w{Wt~Jk", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'w{Wt~Jk' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('<');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4118, "", "", options1, (-1509), 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("{s&?#w!S~8");
      helpFormatter0.getOptionComparator();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "c$XC|c`";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("c$XC|c`", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      String string1 = "v.\"d1mbO?>IO1!";
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-1470), ">}3l!Q?%!~jF");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      try { 
        MockURI.URI("=9|S-z/'4s`~d):v", "-", "\n", 0, "cmdLineSyntax not provided", "", "-");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: =9|S-z/'4s`~d):v://-@
         // :0cmdLineSyntax%20not%20provided?#-
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 111;
      helpFormatter0.defaultLeftPad = 111;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLeftPadding(902);
      String string0 = "";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.getOptionGroups();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringWriter stringWriter2 = stringWriter1.append('=');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      int int0 = 32;
      String string1 = "Q<.B";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = null;
      options1.addOption((String) null, (String) null, true, (String) null);
      Option option0 = null;
      try {
        option0 = new Option("-", ".:bs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.setArgName("]");
      String string1 = null;
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "[ option: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [ option: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      String string0 = "";
      options0.getOptions();
      Options options1 = options0.addOption("", false, "");
      options1.hasShortOption("");
      String string1 = null;
      options1.getMatchingOptions((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.JAPANESE;
      String string1 = "R-~E+&{)24|89<c4]h";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) stringWriter1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.format(locale0, "R-~E+&{)24|89<c4]h", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "R-~E+&{)24|89<c4]h", options0, "\".IqWytLXw~.gvF", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("i,]pp#AKy", " ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-763), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Locale locale0 = new Locale("");
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      option0.getValues();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("J-f:zT", "v.\"d1mbO?>IO1!", options1, "", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      String string0 = ">}3l!Q?%!~jF";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, ">}3l!Q?%!~jF");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "v.\"d1mbO?>IO1!");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-331), 546, "g@q9F?@C1+Bz");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      byteArrayOutputStream0.reset();
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      Locale locale0 = Locale.CHINESE;
      mockPrintWriter0.printf(locale0, " ]", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("Rnc9", true, "arg");
      option0.getValues();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "<y 1Z8!dG&Pbi@", options0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3, "^wh7bC^L*");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setSyntaxPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      String string1 = "[{)`Ti ;THeY:[eX7";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "[{)`Ti ;THeY:[eX7");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2276), ", ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("arg", "\n", false, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("--", "I[t^Nx]-", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 9, "TjL)o");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 546, 5, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "Nmo=%<";
      helpFormatter0.setSyntaxPrefix("Nmo=%<");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = (-756);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("The option '", "`FW7:N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "k$FU\"rI";
      String string0 = "+d[pnbB7u3]N";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("k$FU\"rI", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "-t64@+";
      helpFormatter0.defaultOptPrefix = "-t64@+";
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      Option option0 = new Option("", ">", false, "");
      option0.clearValues();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.rtrim("W#xHc]rDy}T#Pb");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "]*&a{Yhi\"MmueRqM", "xZ!_", options2, "R-4t;;\"dhDK7Or");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "TjL)o";
      String string0 = helpFormatter0.rtrim("~wr");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("~wr", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }
}
