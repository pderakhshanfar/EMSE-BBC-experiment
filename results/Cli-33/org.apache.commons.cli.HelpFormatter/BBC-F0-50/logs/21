* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 13643
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 2383135099
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 16:51:47.919 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 425 generations, 168351 statements, best individual has fitness: 118.0
* Minimizing test suite
[MASTER] 17:03:05.129 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 201
* Number of covered goals: 201
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 149
* Number of covered goals: 142
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 59
* Number of covered goals: 59
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 478
* Number of covered goals: 445
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 78%
* Total number of goals: 46
* Number of covered goals: 36
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 149
* Number of covered goals: 140
* Generated 134 tests with total length 2123
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:04:08.683 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 6%
* Compiling and checking tests
[MASTER] 17:04:28.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:28.289 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:28.349 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:28.396 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:30.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_146_tmp__ESTest.test0(HelpFormatter_146_tmp__ESTest.java:43)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:30.547 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.getArgName();
options0.hasOption(" ");
File file0 = MockFile.createTempFile("!LZx", "-");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
helpFormatter0.getNewLine();
helpFormatter1.setOptPrefix((String) null);
helpFormatter0.setDescPadding(1);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "cFOm'.Z/$>}3$(N");
helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
mockFileOutputStream0.close();
helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", " ", options0, 74, 64, "i Mw]%Y(;!$wS", true);
helpFormatter1.printHelp("\n", options0);

[MASTER] 17:04:34.082 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_159_tmp__ESTest.test0(HelpFormatter_159_tmp__ESTest.java:43)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:34.082 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, "<");
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.getArgName();
options0.hasOption(" ");
File file0 = MockFile.createTempFile("!LZx", "-");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
helpFormatter0.getNewLine();
helpFormatter1.setOptPrefix((String) null);
helpFormatter0.setDescPadding(1);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2), "cFOm'.Z/$>}3$(N");
helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", " ", options0, (-2), 64, "i Mw]%Y(;!$wS", true);

[MASTER] 17:04:39.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_170_tmp__ESTest.test0(HelpFormatter_170_tmp__ESTest.java:43)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:39.641 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.getArgName();
options0.hasOption(" ");
File file0 = MockFile.createTempFile("!LZx", "-");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
helpFormatter0.getNewLine();
helpFormatter1.setOptPrefix((String) null);
helpFormatter0.setDescPadding(1);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2), "cFOm'.Z/$>}3$(N");
helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", " ", options0, (-2), 64, "i Mw]%Y(;!$wS", true);

[MASTER] 17:04:43.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_174_tmp__ESTest.test0(HelpFormatter_174_tmp__ESTest.java:43)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:43.854 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("kji%->H%#GdXVpq", false);
byte[] byteArray0 = new byte[6];
byteArray0[1] = (byte)1;
byteArray0[2] = (byte)43;
MockFile.createTempFile("arg", "kji%->H%#GdXVpq");
MockFile mockFile0 = new MockFile("rh]c}2alA");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
Options options0 = new Options();
helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)43, "rh]c}2alA", options0);
helpFormatter0.getNewLine();
helpFormatter0.setOptPrefix("rh]c}2alA");
helpFormatter0.setDescPadding(878);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte)43, 156, "kji%->H%#GdXVpq");
helpFormatter0.setOptPrefix("rh]c}2alA");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream1, false);
helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)1, "'", "The option '", options0, (-302), (-2), (String) null, false);

[MASTER] 17:04:51.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_180_tmp__ESTest.test0(HelpFormatter_180_tmp__ESTest.java:44)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:51.162 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.getArgName();
options0.hasOption(" ");
helpFormatter0.printHelp("!LZx", "", options0, "kji%->H%#GdXVpq", true);
File file0 = MockFile.createTempFile("!LZx", "-");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
helpFormatter0.getNewLine();
helpFormatter1.setOptPrefix((String) null);
helpFormatter0.setDescPadding(1);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2), "cFOm'.Z/$>}3$(N");
helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
options0.helpOptions();
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", " ", options0, (-2), 64, "i Mw]%Y(;!$wS", true);

[MASTER] 17:04:57.464 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_186_tmp__ESTest.test0(HelpFormatter_186_tmp__ESTest.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:57.465 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
Option option0 = new Option("", true, "I:pya");
options0.addOption(option0);
helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.getArgName();
options0.hasOption(" ");
File file0 = MockFile.createTempFile("!LZx", "-");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
helpFormatter0.getNewLine();
helpFormatter1.setOptPrefix((String) null);
helpFormatter0.setDescPadding(1);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "cFOm'.Z/$>}3$(N");
helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
mockFileOutputStream0.close();
helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, " ]", " ", options0, 74, 64, "i Mw]%Y(;!$wS", true);
helpFormatter1.printHelp("-", (String) null, options0, "qE");
options0.addOption("-", "arg", true, " ");

[MASTER] 17:05:02.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_198_tmp__ESTest.test0(HelpFormatter_198_tmp__ESTest.java:31)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:05:02.068 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P[ApuSS\"L<YW");
Options options0 = new Options();
Options options1 = options0.addOption("arg", "", true, "");
helpFormatter0.printHelp("P[ApuSS\"L<YW", options1);
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
mockFileOutputStream0.close();
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "usage: ", options0, 1, 19, "I", true);
helpFormatter0.printHelp("arg", options0);

[MASTER] 17:05:05.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_202_tmp__ESTest.test0(HelpFormatter_202_tmp__ESTest.java:44)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:05:05.206 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
helpFormatter0.printHelp("kji%->H%#GdXVpq", "cFOm'.Z/$>}3$(N", options0, " ");
HelpFormatter helpFormatter1 = new HelpFormatter();
helpFormatter1.getArgName();
options0.hasOption(" ");
File file0 = MockFile.createTempFile("!LZx", "-");
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
helpFormatter0.getNewLine();
helpFormatter1.setOptPrefix((String) null);
helpFormatter0.setDescPadding(1);
helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "cFOm'.Z/$>}3$(N");
helpFormatter1.setOptPrefix("cFOm'.Z/$>}3$(N");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
byte[] byteArray0 = new byte[0];
FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
helpFormatter1.printHelp("-", options0);
helpFormatter0.getOptionComparator();

[MASTER] 17:05:06.306 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-50/tests/21
* Done!

* Computation finished
