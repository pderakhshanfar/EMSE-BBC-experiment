* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 12745
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 3358538585
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 16:51:31.581 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 137 generations, 67934 statements, best individual has fitness: 145.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 17:02:48.955 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 99%
* Total number of goals: 201
* Number of covered goals: 199
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 149
* Number of covered goals: 132
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 55
* Number of covered goals: 55
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 478
* Number of covered goals: 440
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 46
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 149
* Number of covered goals: 132
* Generated 119 tests with total length 2028
* Resulting test suite's coverage: 84% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:03:35.375 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.73315% of time used, but only 15/119 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 17:04:09.462 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:09.528 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:09.581 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:09.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:09.680 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:09.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:04:15.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_158_tmp__ESTest.test0(HelpFormatter_158_tmp__ESTest.java:249)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:15.503 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertNotNull(helpFormatter0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);

helpFormatter0.defaultNewLine = "-t64@+";
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

helpFormatter0.defaultOptPrefix = "-t64@+";
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

helpFormatter0.setNewLine("");
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);

int int0 = helpFormatter0.getLeftPadding();
assertEquals(1, int0);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);

String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
assertEquals("usage: ", string0);
assertNotNull(string0);

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertTrue(int1 == int0);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);

Options options0 = new Options();
assertNotNull(options0);

Collection collection0 = options0.getOptionGroups();
assertNotNull(collection0);

Option option0 = new Option("", "t", false, "");
assertFalse(option0.hasOptionalArg());
assertEquals("t", option0.getLongOpt());
assertTrue(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgName());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getArgName());
assertFalse(option0.hasArgs());
assertEquals("", option0.getDescription());
assertFalse(option0.hasArg());
assertEquals((-1), option0.getArgs());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertNotNull(option0);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

option0.clearValues();
assertFalse(option0.hasOptionalArg());
assertEquals("t", option0.getLongOpt());
assertTrue(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgName());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getArgName());
assertFalse(option0.hasArgs());
assertEquals("", option0.getDescription());
assertFalse(option0.hasArg());
assertEquals((-1), option0.getArgs());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

Options options1 = options0.addOption(option0);
assertFalse(option0.hasOptionalArg());
assertEquals("t", option0.getLongOpt());
assertTrue(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgName());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getArgName());
assertFalse(option0.hasArgs());
assertEquals("", option0.getDescription());
assertFalse(option0.hasArg());
assertEquals((-1), option0.getArgs());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertNotNull(options1);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options0, options1);
assertSame(options1, options0);

OptionGroup optionGroup0 = new OptionGroup();
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertNotNull(optionGroup0);

String[] stringArray0 = option0.getValues();
assertFalse(option0.hasOptionalArg());
assertEquals("t", option0.getLongOpt());
assertTrue(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgName());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getArgName());
assertFalse(option0.hasArgs());
assertEquals("", option0.getDescription());
assertFalse(option0.hasArg());
assertEquals((-1), option0.getArgs());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertNull(stringArray0);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

OptionGroup optionGroup1 = optionGroup0.addOption(option0);
assertFalse(option0.hasOptionalArg());
assertEquals("t", option0.getLongOpt());
assertTrue(option0.hasLongOpt());
assertEquals('\u0000', option0.getValueSeparator());
assertFalse(option0.hasArgName());
assertFalse(option0.hasValueSeparator());
assertNull(option0.getArgName());
assertFalse(option0.hasArgs());
assertEquals("", option0.getDescription());
assertFalse(option0.hasArg());
assertEquals((-1), option0.getArgs());
assertEquals("", option0.getOpt());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup1.isRequired());
assertNull(optionGroup1.getSelected());
assertNotNull(optionGroup1);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(optionGroup0, optionGroup1);
assertSame(optionGroup1, optionGroup0);

Options options2 = new Options();
assertFalse(options2.equals((Object)options1));
assertFalse(options2.equals((Object)options0));
assertNotNull(options2);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
assertFalse(fileDescriptor0.valid());
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

helpFormatter0.printUsage(printWriter0, 32, "", (Options) null);

[MASTER] 17:04:27.711 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_208_tmp__ESTest.test0(HelpFormatter_208_tmp__ESTest.java:407)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:04:27.718 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertNotNull(helpFormatter0);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

helpFormatter0.defaultNewLine = "-t64@+";
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());

helpFormatter0.defaultOptPrefix = "-t64@+";
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getNewLine());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());

helpFormatter0.setNewLine("");
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

int int0 = helpFormatter0.getLeftPadding();
assertEquals(1, int0);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("", helpFormatter0.getNewLine());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

int int1 = helpFormatter0.getLeftPadding();
assertEquals(1, int1);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("", helpFormatter0.getNewLine());
assertTrue(int1 == int0);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

Options options0 = new Options();
assertNotNull(options0);

Collection collection0 = options0.getOptionGroups();
assertNotNull(collection0);

Option option0 = new Option("arg", "--");
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertNotNull(option0);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

option0.clearValues();
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

Options options1 = options0.addOption(option0);
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertNotNull(options1);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options0, options1);
assertSame(options1, options0);

Options options2 = options0.addOption(option0);
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertNotNull(options2);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options2, options1);
assertSame(options2, options0);

OptionGroup optionGroup0 = new OptionGroup();
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertNotNull(optionGroup0);

Option option1 = new Option("", "-t64@+");
assertFalse(option1.hasArgs());
assertFalse(option1.hasValueSeparator());
assertNull(option1.getArgName());
assertEquals((-1), option1.getArgs());
assertFalse(option1.hasOptionalArg());
assertFalse(option1.hasLongOpt());
assertEquals('\u0000', option1.getValueSeparator());
assertFalse(option1.hasArgName());
assertEquals("-t64@+", option1.getDescription());
assertNull(option1.getLongOpt());
assertFalse(option1.hasArg());
assertNull(option1.getValue());
assertFalse(option1.isRequired());
assertEquals("", option1.getOpt());
assertFalse(option1.equals((Object)option0));
assertNotNull(option1);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

String[] stringArray0 = option1.getValues();
assertFalse(option1.hasArgs());
assertFalse(option1.hasValueSeparator());
assertNull(option1.getArgName());
assertEquals((-1), option1.getArgs());
assertFalse(option1.hasOptionalArg());
assertFalse(option1.hasLongOpt());
assertEquals('\u0000', option1.getValueSeparator());
assertFalse(option1.hasArgName());
assertEquals("-t64@+", option1.getDescription());
assertNull(option1.getLongOpt());
assertFalse(option1.hasArg());
assertNull(option1.getValue());
assertFalse(option1.isRequired());
assertEquals("", option1.getOpt());
assertFalse(option1.equals((Object)option0));
assertNull(stringArray0);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertNotSame(option1, option0);

OptionGroup optionGroup1 = optionGroup0.addOption(option1);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(option1.hasArgs());
assertFalse(option1.hasValueSeparator());
assertNull(option1.getArgName());
assertEquals((-1), option1.getArgs());
assertFalse(option1.hasOptionalArg());
assertFalse(option1.hasLongOpt());
assertEquals('\u0000', option1.getValueSeparator());
assertFalse(option1.hasArgName());
assertEquals("-t64@+", option1.getDescription());
assertNull(option1.getLongOpt());
assertFalse(option1.hasArg());
assertNull(option1.getValue());
assertFalse(option1.isRequired());
assertEquals("", option1.getOpt());
assertNull(optionGroup1.getSelected());
assertFalse(optionGroup1.isRequired());
assertFalse(option1.equals((Object)option0));
assertNotNull(optionGroup1);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(optionGroup0, optionGroup1);
assertNotSame(option1, option0);
assertSame(optionGroup1, optionGroup0);

Options options3 = options0.addOption(option0);
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertFalse(option0.equals((Object)option1));
assertNotNull(options3);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options3, options1);
assertSame(options3, options0);
assertSame(options3, options2);
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options0, options3);
assertNotSame(option0, option1);

Options options4 = options3.addOptionGroup(optionGroup0);
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(option0.equals((Object)option1));
assertNotNull(options4);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options3, options1);
assertSame(options3, options4);
assertSame(options3, options0);
assertSame(options3, options2);
assertSame(options4, options1);
assertSame(options4, options0);
assertSame(options4, options2);
assertSame(options4, options3);
assertSame(options0, options1);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options0, options3);
assertNotSame(option0, option1);
assertSame(optionGroup0, optionGroup1);

helpFormatter0.printHelp(13, "\"&,R{G%zIjznO", "' was specified but an option from this group ", options4, "", true);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("", helpFormatter0.getNewLine());
assertFalse(option0.hasLongOpt());
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertEquals(97, option0.getId());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("--", option0.getDescription());
assertFalse(option0.hasArgName());
assertNull(option0.getLongOpt());
assertFalse(option0.hasArg());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(option0.equals((Object)option1));
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options3, options1);
assertSame(options3, options4);
assertSame(options3, options0);
assertSame(options3, options2);
assertSame(options4, options1);
assertSame(options4, options0);
assertSame(options4, options2);
assertSame(options4, options3);
assertSame(options0, options1);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options0, options3);
assertNotSame(option0, option1);
assertSame(optionGroup0, optionGroup1);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertFalse(fileDescriptor0.valid());
assertNotNull(fileDescriptor0);

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
assertFalse(fileDescriptor0.valid());
assertNotNull(printWriter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

helpFormatter0.printUsage(printWriter0, 1552, "' was specified but an option from this group ", options0);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-t64@+", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("", helpFormatter0.getNewLine());
assertFalse(fileDescriptor0.valid());
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertSame(mockPrintWriter0, printWriter0);
assertSame(options0, options1);
assertSame(options0, options4);
assertSame(options0, options2);
assertSame(options0, options3);
assertSame(printWriter0, mockPrintWriter0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-50/tests/19
* Done!

* Computation finished
