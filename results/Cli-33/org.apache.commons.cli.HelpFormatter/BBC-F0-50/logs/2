* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 18134
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 2573847870
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 16:50:22.453 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 602s and 158 generations, 68116 statements, best individual has fitness: 138.0
* Minimizing test suite
[MASTER] 17:01:37.611 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 201
* Number of covered goals: 199
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 88%
* Total number of goals: 149
* Number of covered goals: 131
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 54
* Number of covered goals: 54
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 478
* Number of covered goals: 439
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 46
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 88%
* Total number of goals: 149
* Number of covered goals: 131
* Generated 133 tests with total length 1985
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:02:27.172 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7837833333333334% of time used, but only 19/133 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 17:02:57.096 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:02:57.147 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:02:57.182 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:02:57.218 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:02:57.264 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:02:57.302 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:03:01.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_179_tmp__ESTest.test0(HelpFormatter_179_tmp__ESTest.java:101)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:03:01.736 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

int int0 = 3;
String string0 = helpFormatter0.createPadding(3);
assertNotNull(string0);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("   ", string0);

helpFormatter0.defaultOptPrefix = "M|ih";
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("M|ih", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());

helpFormatter0.setArgName("AgA");
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("M|ih", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("AgA", helpFormatter0.getArgName());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

String string1 = "E'V,nT#`2";
Options options0 = new Options();
assertNotNull(options0);

byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)84;
byteArray0[1] = (byte) (-82);
mockFileOutputStream0.write(byteArray0, 1, (-2435));

[MASTER] 17:03:11.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_220_tmp__ESTest.test0(HelpFormatter_220_tmp__ESTest.java:166)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:03:11.070 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

helpFormatter0.defaultDescPad = 48;
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());

helpFormatter0.defaultLongOptPrefix = "";
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());

helpFormatter0.setLongOptSeparator("");
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(48, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

String string0 = helpFormatter0.getLongOptSeparator();
assertNotNull(string0);
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(48, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("", string0);

helpFormatter0.setDescPadding(48);
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(48, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

String string1 = helpFormatter0.getArgName();
assertNotNull(string1);
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertFalse(string1.equals((Object)string0));
assertEquals(48, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("arg", string1);

String string2 = helpFormatter0.createPadding(48);
assertNotNull(string2);
assertEquals(48, helpFormatter0.getDescPadding());
assertEquals("", helpFormatter0.getLongOptSeparator());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));
assertEquals(48, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("                                                ", string2);

String string3 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
int int0 = 44;
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
assertNotNull(bufferedOutputStream0);
assertFalse(fileDescriptor0.valid());

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
assertNotNull(mockPrintWriter0);

int int1 = (-3662);
Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("", true, "usage: ");
assertSame(options1, options0);
assertSame(options0, options1);
assertNotNull(options1);

options1.addOption("QzK1;\"", "", true, " ");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-50/tests/2
* Done!

* Computation finished
