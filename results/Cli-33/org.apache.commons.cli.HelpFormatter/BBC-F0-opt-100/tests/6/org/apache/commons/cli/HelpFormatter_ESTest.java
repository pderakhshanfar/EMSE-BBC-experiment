/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:02:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 41;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 41, 41, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("Jv`JRZ)'7", 0, 0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-69);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "{!s:VZ\"^!Mx9w+%s(Z", " ", (Options) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "|N1B1@", "|N1B1@", options0, 3, 1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\"", 31, (-1987));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-361));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "-");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.getLeftPadding();
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 34;
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options1, 34, 3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1058, options0, 1058, 1058);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1058, options0, 45, (-88));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("pf ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      mockPrintWriter0.println((float) 74);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      helpFormatter1.getNewLine();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.defaultLongOptPrefix = "[ Options: [ short ";
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = new Options();
      int int0 = (-1132);
      helpFormatter0.defaultDescPad = (-1132);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-=g~", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      int int0 = 58;
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      String string1 = "ion!Xi$R";
      Option option0 = null;
      try {
        option0 = new Option("-", "ion!Xi$R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "L{KJfI[Kq/V8,?!Wpp", options0, "im@pTduv");
      helpFormatter0.findWrapPos("im@pTduv", 1, 1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">9", ">9", (Options) null, ">9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "f<w|QBY?", options1, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1102, "Rb$?*qy", "S<g%4G7", options0, 74, 64, "", true);
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.getLongOptPrefix();
      String string0 = "@KVl\"#$hJL!3{:OOr:";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Wwh~0N/W|E194");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "'ShX";
      Options options0 = new Options();
      options0.addOption("", true, " ");
      Option option0 = new Option("arg", "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 525, "usage: ", "arg", options0, 74, 100, "8+/J@Yj>4!H$[x,");
      Options options1 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1889, "", options1);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2339));
      Options options0 = new Options();
      options0.hasOption("usage: ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "-", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter0.getOptPrefix();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 35, "--", (String) null, options0, (-91), 35, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "-", options0, 9, 14, " ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-114), (-114));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-3937));
      options0.getMatchingOptions("\n");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("R", "hpPv^_dj92U", options0, ">9");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("K5FL9V");
      stringBuffer0.append(115);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1425, "");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      options0.getOption("_Fm}\b-'$?wM");
      options1.helpOptions();
      Options options2 = options1.addOption("", "--", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The option '", (String) null, options2, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      String string0 = null;
      String string1 = "";
      String string2 = "njR\"*:c!#*7!CE[|B";
      options0.addOption("", "njR\"*:c!#*7!CE[|B", false, "-");
      String string3 = "org.apache.commons.cli.Util";
      boolean boolean0 = true;
      Option option0 = new Option((String) null, "org.apache.commons.cli.Util", true, "g&6HF@pS0eUg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-162), "g&6HF@pS0eUg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CANADA;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "\n");
      Option option0 = new Option("Pp", " ", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "' was specified but an option from this group ", options2);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("Pp", true, "--");
      options4.helpOptions();
      helpFormatter0.printHelp(13, "' was specified but an option from this group ", "--", options4, " ", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "' was specified but an option from this group ", "{A[\"#", options0, 1, 44, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(72, "Pp", "", options3, "");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "< |)`H";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "< |)`H");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.setDescPadding(8);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.renderOptions(stringBuffer0, 3495, options0, 8, 8);
      int int0 = (-1414);
      String string1 = "@-}qgb~1\"9";
      Options options1 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1414), "@-}qgb~1\"9", "< |)`H", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CANADA;
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "r4`fFdf7$[eq_&!0", options0, 1, 3, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter1.defaultLongOptPrefix = "-";
      options0.toString();
      helpFormatter0.printHelp(350, "w?bcH.{W", "org.apache.commons.cli.OptionGroup", options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 41, "-", "X$L[3bVe6SO", options0, 0, (-1687), " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "'ShX";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      options1.helpOptions();
      Options options2 = options1.addOption(option0);
      options2.toString();
      Options options3 = options0.addOption((String) null, " ] [ long ", true, "0se~9)?x9U&TB'");
      options3.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", " | ", options3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "", options0, 74, 1245, "--", true);
      Options options1 = new Options();
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "Ek6RYPT", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, " ");
      Option option0 = new Option("arg", (String) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*Dc6zY288ckcD,:Savc");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*Dc6zY288ckcD,:Savc");
      Locale locale0 = Locale.CANADA;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "*Dc6zY288ckcD,:Savc";
      objectArray0[4] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "A($<kZF\"", objectArray0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "--", "--", (Options) null, 0, 0, "--", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "hpPv^_dj92U", options0, ">9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptionGroups();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("usage: ", options1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter1.printOptions(mockPrintWriter0, 2, options1, 2, 28);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*Dc6zY288ckcD,:Savc");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "\n");
      Option option0 = new Option("Pp", " ", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "' was specified but an option from this group ", options2);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("Pp", false, "*Dc6zY288ckcD,:Savc");
      helpFormatter0.printHelp(13, "' was specified but an option from this group ", "*Dc6zY288ckcD,:Savc", options4, " ", true);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "*Dc6zY288ckcD,:Savc";
      objectArray0[4] = (Object) "--";
      mockPrintWriter0.format(locale0, "A($<kZF\"", objectArray0);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*Dc6zY288ckcD,:Savc");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "\n");
      Option option0 = new Option("", " ", false, "arg");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getArgName();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "' was specified but an option from this group ", options2);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("", false, "*Dc6zY288ckcD,:Savc");
      helpFormatter0.printHelp(13, "' was specified but an option from this group ", "*Dc6zY288ckcD,:Savc", options4, " ", true);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "*Dc6zY288ckcD,:Savc";
      objectArray0[4] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "A($<kZF\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", (Options) null, 0, 0, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.print((Object) null);
      int int0 = (-1872);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", false, "arg");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(621, (String) null, (String) null, options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      option0.setOptionalArg(true);
      options1.helpOptions();
      options1.addOption(option0);
      options1.addOption("", "*bq]bAQ.@h?", true, " ");
      helpFormatter0.printHelp(" ] [ long ", "*bq]bAQ.@h?", options0, " ] [ long ", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "Xmldb?#mpCt", false, (String) null);
      String string0 = "";
      Option option0 = new Option("", false, "");
      options2.addOption("arg", false, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "oc", "0C7X's[aRsPKiks0X", options1, 0, (-2), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Options options2 = options1.addOption((String) null, "Xmldb?#mpCt", false, (String) null);
      Option option0 = new Option("", false, "");
      options2.addOption("arg", false, "arg");
      String string0 = "?1;+].Fu}GkI#xO( q";
      String string1 = "Ia2.`@F(";
      String string2 = "AZH";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 966, "Ia2.`@F(", "AZH", options2, (-2), (-1), "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1403, 1403, "");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(">");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "o!s";
      objectArray0[4] = (Object) "o!s";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "o!s";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "o!s", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1148), "usage: ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.append((Object) "eLVN");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      helpFormatter0.setWidth((-2));
      helpFormatter0.setLongOptSeparator("eLVN");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName("T");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.append('}');
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
      helpFormatter0.printHelp("!&I*#fDsPh)#1'1:)", options1, true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int0 = 2409;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-688), 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "Xmldb?#mpCt", false, (String) null);
      Option option0 = new Option("", false, "");
      Options options3 = options2.addOption("arg", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "arg", " ", options3, 74, 25, "Xmldb?#mpCt");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getOptPrefix();
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-3546), "--", "org.apache.commons.cli.HelpFormatter$1", options1, 3, (-89), "3o?|h");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "9", "-", options0, 74, 1, "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.write("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append('{');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "                                                                          ");
      options0.addOption("arg", "", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3978), (-3978), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CGHTM~a^;e");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1150), "CGHTM~a^;e", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      int int0 = 983;
      int int1 = 460;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-914), (String) null, "", options0, 1139, (-1598), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'ShX";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "'ShX", true, "--");
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "'ShX");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.append('{');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1694, "x1Bb'Pdc#+Mq_=|y", (String) null, options0, 1906, 1694, "x1Bb'Pdc#+Mq_=|y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      option0.setOptionalArg(true);
      options1.helpOptions();
      options1.addOption(option0);
      options1.addOption("", "*bq]bAQ.@h?", true, " ");
      helpFormatter0.printHelp(" ] [ long ", "*bq]bAQ.@h?", options0, " ] [ long ", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      options1.helpOptions();
      Options options2 = options1.addOption(option0);
      options2.toString();
      options1.addOption("", "*bq]bAQ.@h?", true, " ");
      options1.getOptions();
      helpFormatter0.printHelp((-1), "0se~9)?x9U&TB'", "'ShX", options2, " ] [ long ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1719, (Options) null, 91, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter0.write("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append('(');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1058, "org.apache.commons.cli.HelpFormatter");
      Option option0 = new Option("", true, "");
      options0.addOption(option0);
      helpFormatter0.printHelp("                                                                          ", options0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      options0.getMatchingOptions("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "hpPv^_dj92U", options0, ">9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("arg", "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("' was specified but an option from this group ", options1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "'ShX", true, "--");
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "'ShX");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      mockPrintWriter0.append('{');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      mockPrintWriter0.append('{');
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 34, "                                                                          ");
      boolean boolean1 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("=DrmoPDS0~B+QzHzBnL", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, " [ARG]");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 63;
      StringWriter stringWriter0 = new StringWriter(63);
      StringWriter stringWriter1 = stringWriter0.append('g');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 14, 1862, "0se~9)?x9U&TB'");
      helpFormatter0.renderWrappedText(stringBuffer1, 1862, (-1), "v);85s6y");
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[ Options: [ short ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ Options: [ short ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.defaultSyntaxPrefix = "DiX";
      mockPrintWriter0.write("/Wz<YDsgInX/Y'=");
      mockPrintWriter0.append('{');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2130), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", "usage: ", false, "arg");
      Option option0 = new Option("", false, "Rk?St{iZW)TXX'66g");
      options1.getMatchingOptions("usage: ");
      Options options2 = options1.addOption(option0);
      options1.hasOption("");
      options2.getOptionGroups();
      options2.getOptions();
      helpFormatter0.printHelp("d1Lu\"^6[a3?+%R7", "", options2, "d1Lu\"^6[a3?+%R7", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "arg");
      File file0 = MockFile.createTempFile("WCg/", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 983, "                                                                          ", "WCg/", options0, (-914), 460, "                                                                          ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      char[] charArray0 = new char[1];
      stringBuffer0.append((Object) helpFormatter0);
      charArray0[0] = '&';
      stringBuffer0.replace(3, 74, "QXu8L>qw");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 989, 989, "uv1QUGTcJ|xr=");
      helpFormatter0.getNewLine();
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*Dc6zY288ckcD,:Savc");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) "*Dc6zY288ckcD,:Savc";
      helpFormatter0.setNewLine("");
      mockPrintWriter0.format(locale0, "A($<kZF\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("*Dc6zY288ckcD,:Savc", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", "usage: ", false, "arg");
      String string0 = "Rk?St{iZW)TXX'66g";
      Option option0 = new Option("", false, "Rk?St{iZW)TXX'66g");
      options1.getMatchingOptions("usage: ");
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('#');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 64, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, (-653), "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      int int0 = (-1);
      helpFormatter0.printWrapped(printWriter0, (-1), "");
      Option option0 = new Option("", false, "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp("                                                                          ", options0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int1 = 38;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 38, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1, options0, 0, 74);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 0, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 3589, 2164, "");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      helpFormatter0.defaultDescPad = (-359);
      helpFormatter0.setSyntaxPrefix("The option '");
      helpFormatter0.defaultLongOptPrefix = "The option '";
      int int0 = 32;
      String string1 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(684);
      int int0 = (-2488);
      String string0 = "--";
      String string1 = "2lfNDZIJ=zQ";
      Options options0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      int int1 = 550;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2488), (Options) null, 550, (-2488));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultDescPad = 32;
      helpFormatter0.findWrapPos("", 32, 1180);
      helpFormatter0.setArgName("");
      helpFormatter0.setNewLine("");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*Dc6zY288ckcD,:Savc");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "*Dc6zY288ckcD,:Savc";
      objectArray0[3] = (Object) "*Dc6zY288ckcD,:Savc";
      objectArray0[4] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "A($<kZF\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", (Options) null, 0, 0, "--", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ARG...]", "[ARG...]", options1, "%c?WiF7|--BVHoyy", true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, " ");
      Option option0 = new Option("arg", (String) null);
      options1.getOption("--");
      options1.helpOptions();
      Options options2 = options1.addOption(option0);
      options1.addOption("", "*bq]bAQ.@h?", true, " ");
      helpFormatter0.printHelp((-1), "0se~9)?x9U&TB'", "'ShX", options2, " ] [ long ", false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      char[] charArray0 = new char[1];
      stringBuffer0.append((Object) helpFormatter0);
      charArray0[0] = '&';
      stringBuffer0.replace(3, 74, "QXu8L>qw");
      stringBuffer0.append(charArray0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "uv1QUGTcJ|xr=");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1046);
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "Xmldb?#mpCt", false, (String) null);
      Option option0 = new Option("", false, "");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "-", "-", options4, (-1), 0, "?1;+].Fu}GkI#xO( q", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2865);
      helpFormatter0.setWidth((-2865));
      String string0 = "line.separator";
      helpFormatter0.setNewLine("line.separator");
      int int1 = 31;
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      helpFormatter0.printWrapped(printWriter0, (-1), "");
      Option option0 = new Option("", false, "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp("                                                                          ", options0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((float) 3);
      String string0 = "v);85s6y";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 697, 697, "v);85s6y");
      int int0 = 0;
      helpFormatter0.renderWrappedText(stringBuffer1, 697, 0, "v);85s6y");
      String string1 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("v);85s6y", false, "Y7]2gdsW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'v);85s6y' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.printHelp("X\u0000.F[", options0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(0);
      String string0 = "iy=SuwQh9HkYJ?6";
      String string1 = "$E";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", "-", false, "qpmnx^ea0d#<S=");
      String string2 = "1eakG'78sluO9 ";
      Option option0 = null;
      try {
        option0 = new Option("1eakG'78sluO9 ", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1eakG'78sluO9 ' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-970);
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "r@");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("&G|Rcql:&=w0pkd&:", "?)<4*Gjwhzu", options1, "&G|Rcql:&=w0pkd&:", false);
      option0.setArgs((-2));
      boolean boolean0 = true;
      Options options2 = options1.addOption("", "\n", true, "");
      // Undeclared exception!
      try { 
        options2.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "[ option: ";
      String string1 = "3w*;d.#,MCj[";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("[ option: ", "\n", false, "1)>FKwTf~k>ltC]=\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-947));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("usage: ");
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-947), "usage: ", "usage: ", options0, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", "usage: ", false, "arg");
      Option option0 = new Option("", false, "Rk?St{iZW)TXX'66g");
      options1.getMatchingOptions("usage: ");
      Options options2 = options1.addOption(option0);
      options1.hasOption("");
      options2.getOptionGroups();
      options2.getOptions();
      helpFormatter0.printHelp("d1Lu\"^6[a3+%R7", "--", options2, "d1Lu\"^6[a3+%R7", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.getBuffer();
      int int0 = 31;
      // Undeclared exception!
      try { 
        options2.addOption("oS3>o?E;Td", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'oS3>o?E;Td' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, " ] [ long ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("=DrmoPDS0~B+QzHzBnL", "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix((String) null);
      String string1 = "\\";
      options0.getMatchingOptions("");
      String string2 = ",yd:W~";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "line.separator", options0, ",yd:W~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
