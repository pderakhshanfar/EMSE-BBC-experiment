/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 03:34:23 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 9;
      helpFormatter0.setDescPadding((-1555));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "\n", "\n", options0, "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      Options options2 = options1.addOption("", "usage: ", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "", options2, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "\n", "\n", options0, "\n", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 9, options0, 32, 32);
      helpFormatter0.printHelp(">", "Cr[sP<BU[)", options0, " | ");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "";
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 69, 117, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("i0q", ".(^=\"OeE f0%C1(Mn", true, "2[0ql(?V^9|\"@");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options1, 71, 71);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) stringWriter1;
      objectArray0[5] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 88, "", (String) null, options1, (-1857), (-1857), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(9, "\n", "\n", options0, "\n", false);
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      helpFormatter0.getDescPadding();
      options0.addOption("arg", (String) null, true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "-", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[H", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      options0.addOptionGroup(optionGroup1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 403, "'nV*V{YFldS%\"B~aD?", options0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1563, "i7(9", "(O&KpO", options0, 1563, 1563, "(O&KpO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      optionGroup1.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption(option0);
      String string0 = "'nV*V{YFldS%\"B~aD?";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((-1), "'nV*V{YFldS%\"B~aD?", "", options3, "\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.rtrim("p~I|=Vku3:<Q9=zeaJ)");
      helpFormatter0.setLongOptPrefix("p~I|=Vku3:<Q9=zeaJ)");
      helpFormatter0.getSyntaxPrefix();
      int int0 = 0;
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.findWrapPos("p~I|=Vku3:<Q9=zeaJ)", 0, 0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      String string0 = "arg";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.findWrapPos("j/~\"df](\" {dz-0{V", (-3761), 9);
      Options options1 = new Options();
      helpFormatter0.printHelp("Ziz0howC'_g_2re", options0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("]1*;R\"KZ$G", objectArray0);
      helpFormatter1.printHelp(printWriter0, 126, "-", "--", options0, 108, 406, "Rv", false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.printHelp(printWriter0, 74, "iXDABmc%Fw", "", options0, 1, 9, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-1264);
      helpFormatter0.defaultWidth = (-1264);
      int int1 = 10;
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.Option");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, (Options) null, 10, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      helpFormatter1.findWrapPos("\n", 30, 322);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("k~%5P!Dtk", options0);
      // Undeclared exception!
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, 31, "arg");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", "", options1, 15, 1, "'$jKs~`RL-Q+K6");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      options1.getOptions();
      helpFormatter0.printHelp("D8*<n$t-[&&s{?E~", options1, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1245), options1, (-1245), (-1245));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("B@/G>oEc$XbG';'&IN_", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "Q1JPnL3y&2'O{e^hf,&", false, "");
      Options options3 = options2.addOption("", true, "sn+t&l,[mQ4");
      helpFormatter1.printHelp("arg", options3, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-165), 23, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&!b`Gn-\"Z]~}\"}fGN4");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 37, "usage: ", (String) null, options0, 4, 37, " ]", false);
      OptionGroup optionGroup0 = new OptionGroup();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "arg");
      helpFormatter0.printHelp("GJ-Un32<su>Fb(-l", "GJ-Un32<su>Fb(-l", options1, "GJ-Un32<su>Fb(-l", false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      stringBuffer0.ensureCapacity(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 3660, 3660, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3660, "uXvI-{Oz'_rqeO[J.E", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(2051, "'nV*V{YFldS%\"B~aD?", "<\"bj'", options1, "<\"bj'");
      helpFormatter0.getOptPrefix();
      options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, "", true, "Vkej}{[Uw01,2");
      helpFormatter0.printHelp("x", options2, true);
      int int0 = helpFormatter0.defaultLeftPad;
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "Illegal option name '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 0, 26);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 47, "=-", "I", options0, 47, 47, "", true);
      int int0 = 9;
      String string0 = "Rv";
      int int1 = 1;
      OptionGroup optionGroup0 = new OptionGroup();
      int int2 = 732;
      StringBuffer stringBuffer0 = new StringBuffer(732);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 63, 64);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object object0 = new Object();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, "", options0, 1, (-178), "[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-402), (-402));
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) options1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "Rv";
      objectArray0[4] = (Object) "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 3, "7");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp(403, "usage: ", "usage: ", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", options1, true);
      int int0 = helpFormatter0.defaultLeftPad;
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-402), (-402));
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "Rv";
      objectArray0[4] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("8:|", objectArray0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "Rv", "", options2, 3, (-402), "b&", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 19;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A CloneNotSupportedException was thrown: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.UK;
      mockFileOutputStream0.getChannel();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 10, (Options) null, 1539, 1539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "X^Vi&T]b!$]TH^/wfN", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setDescPadding(31);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(31);
      helpFormatter0.rtrim("");
      helpFormatter0.setNewLine("line.separator");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, " ");
      helpFormatter1.printHelp("   ", "arg", options0, "arg");
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter1.append('5');
      helpFormatter1.printUsage(printWriter0, 74, (String) null, options1);
      helpFormatter1.getArgName();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2;
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-13), ".r(\"Y/>ZD`ld%(W#W", "Rv", options0, 63, 1, ":rSSTNHh1MK1W~T6>", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, " ] [ long ", options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "arg", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.setWidth((-1469));
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("--", 2, (-643));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 79, (-25), " ");
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.renderOptions(stringBuffer1, 72, options0, 72, 64);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-402), (-402));
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "-");
      options0.hasOption(" ");
      helpFormatter0.printHelp("t[0qd%*^OjmE ]mqk", options1, false);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, (-402), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", 63, 64);
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      PrintWriter printWriter1 = mockPrintWriter1.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-1844), "%;3{dSm3AA-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 3;
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, ".r(\"Y/>ZD`ld%(W#W", "Rv", options0, 63, 1, ":rSSTNHh1MK1W~T6>", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp((-1), "--", "arg", options0, "arg");
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.setWidth(74);
      helpFormatter1.setLongOptPrefix("FD*`b]'&@V{Sw>&j");
      helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 1, 3);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.printHelp("--", options0);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter1.renderWrappedText(stringBuffer0, 762, 1, "XkUVc");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.setWidth(31);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter1.findWrapPos("", (-390), (-2863));
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter", "   ", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "", options1, (-2602), 74, "", true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 39, "", "", options0, 64, 39, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, " ] [ long ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 63, 64);
      String string1 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      String string2 = "np";
      helpFormatter0.printHelp("np", options0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = 63;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "En%lt+H]vRn^r@24S#e", "En%lt+H]vRn^r@24S#e", options0, 2818, 3, " {", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      Options options1 = new Options();
      Options options2 = options0.addOption(option0);
      options2.addOption("", "2ppEcPpdz3c", true, "`\"]3?f@mUt[H_[(I");
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.rtrim("--");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp(403, "usage: ", "usage: ", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("-", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      stringWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "mJ0?B`ca''Qzk8.fKpa", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options1, true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 2, options1, 1046, 60);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "00cKZ]}a7UHUD/EH", true, "");
      helpFormatter0.printHelp("O+:gMLI4^", options1, false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("n!C");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter0.setLeftPadding(1262);
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.getOptionComparator();
      helpFormatter1.findWrapPos("\n", 3, 1262);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.setLongOptPrefix(" ");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-1), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 2;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("4k>n_|jO#$FKq\"", "", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4k>n_|jO#$FKq\"' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp(31, "^h[c", "", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 31, options0, 0, (-4626));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("yOfs#8%7d!iX0");
      int int0 = 0;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "yOfs#8%7d!iX0", "", (Options) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("[", options0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, "uDF37j, 5Y{?,i22");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) "The option '";
      objectArray0[3] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.format("arg", objectArray0);
      mockPrintWriter1.print((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage(printWriter0, 64, "uDF37j, 5Y{?,i22");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("", (-402), (-402));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setWidth(31);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 31, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 6, 74, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = options1.addOption("arg", "", true, ">");
      helpFormatter0.printHelp("vI7&jX5~l`K!8>>", options3, true);
      helpFormatter1.printHelp(" ", "", options0, "A CloneNotSupportedException was thrown: ", true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("QH", "<", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p2A<XmHj");
      Option option0 = new Option("QH", " ", false, "arg");
      options2.addOption(option0);
      helpFormatter0.createPadding(7);
      helpFormatter0.setLeftPadding(2172);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.findWrapPos("", (-1), 31);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1990);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1990, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.format("arg", objectArray0);
      mockPrintWriter0.print(" [ARG]");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp(403, "The option '", "The option '", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      Option option1 = new Option("NO_ARGS_ALLOWED", (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "jk5/h.[s`0%]2LM", "--", options1, "*^T-a.T#<i,!1A", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      option0.setLongOpt("usage: ");
      option0.setValueSeparator(' ');
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp(403, "The option '", "The option '", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("-", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 32, "arg", "-", options1, 1, 74, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-525), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(1990);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1990, "uDF37j, 5Y{?,i22");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.format("arg", objectArray0);
      mockPrintWriter0.print(" [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 1, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", "", options0, "W:rRQ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-2608), "PQnJJy<^id0");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp(403, "The option '", "The option '", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp("-", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-525), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "Mmsgzb%<asn8 j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      Options options0 = new Options();
      String string0 = "QH";
      boolean boolean0 = true;
      String string1 = "";
      Options options1 = options0.addOption("QH", "<", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(31, " ", "<", options1, "", true);
      String string2 = "NO_ARGS_ALLOWED";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp(403, "The option '", "The option '", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      options0.helpOptions();
      options0.getMatchingOptions("'nV*V{YFldS%\"B~aD?");
      Option option1 = new Option("", "arg", false, "org.apache.commons.cli.OptionValidator");
      option0.setType(option1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      String string0 = "K]]9's1vMa36$.";
      helpFormatter0.setOptPrefix("K]]9's1vMa36$.");
      helpFormatter0.setLongOptPrefix("D;$ 3^i4/Yreh&1x)");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "<&@Dyy8MP;1/");
      helpFormatter0.printHelp("<&@Dyy8MP;1/", "@a$xIa 0*vsh", options1, ")_>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("@a$xIa 0*vsh");
      int int0 = (-1700);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      Options options0 = new Options();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, ">");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 0, 74, "--");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 774, 1166, "[ Options: [ short ");
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      helpFormatter0.setLeftPadding(1990);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1990, "uDF37j, 5Y{?,i22");
      helpFormatter0.setWidth(2213);
      helpFormatter0.setLeftPadding(1990);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("-", 36, 74);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.write("org.apache.commons.cli.HelpFormatter$OptionComparator", 1990, (-816));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2608);
      helpFormatter0.setWidth((-2608));
      String string0 = "K]]9's1vMa36$.";
      helpFormatter0.setOptPrefix("K]]9's1vMa36$.");
      helpFormatter0.setLongOptPrefix("D;$ 3^i4/Yreh&1x)");
      helpFormatter0.getLongOptSeparator();
      String string1 = "@a$xIa 0*vsh";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "<&@Dyy8MP;1/");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<&@Dyy8MP;1/", "@a$xIa 0*vsh", options1, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nGh:MvQl0";
      String string0 = "f/[kQXG&";
      helpFormatter0.defaultArgName = "f/[kQXG&";
      int int0 = 1060;
      helpFormatter0.setLeftPadding(1060);
      helpFormatter0.setLongOptSeparator("nGh:MvQl0");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string1 = "`&ON,R\"fn4c;^Ve.";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "org.apache.commons.cli.HelpFormatter", false, "p)P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 403;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      optionGroup0.setSelected(option0);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("-");
      helpFormatter0.printHelp(403, "The option '", "The option '", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      options0.helpOptions();
      helpFormatter0.printHelp((-1), "arg", "arg", options1, "'nV*V{YFldS%\"B~aD?", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NO_ARGS_ALLOWED");
      mockPrintWriter0.println("\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 403, "arg", "Au:M9l:2", options1, 403, 403, ";95>cZpIsQ]J?bk");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      int int1 = (-899);
      String string0 = "' was specified but an option from this group ";
      Options options0 = new Options();
      options0.getMatchingOptions("nD?f7@(<dD");
      Options options1 = options0.addOption("iPBlZtFi", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string1 = "-sR{~KPv5F8";
      options0.hasOption("-sR{~KPv5F8");
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-899), "h7Y~{M-l`zm", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1540, "Cannot add value, list full.", "Cannot add value, list full.", options0, "53G4", false);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("QH", "<", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("QH", " ", false, "arg");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "", " ] [ long ", options4, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("org.apache.commons.cli.OptionGroup");
      int int0 = 1990;
      helpFormatter0.setLeftPadding(1990);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1990, "uDF37j, 5Y{?,i22");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        mockPrintWriter1.append((CharSequence) "-", 1990, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      String string0 = "\\Nm.s";
      StringBuffer stringBuffer0 = new StringBuffer("Nm.s");
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-606), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -606
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "arg");
      helpFormatter0.printHelp(403, "The option '", "The option '", options0, "'nV*V{YFldS%\"B~aD?");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(1);
      stringWriter0.append((CharSequence) "\n");
      helpFormatter1.setWidth((-248));
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.setLongOptPrefix("^M 3^.d0>GgLS");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      String string0 = ";y\\u<p";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", "usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      Options options0 = new Options();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 774, 774, ">");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultWidth = 943;
      helpFormatter0.setWidth(1);
      helpFormatter0.getDescPadding();
      String string1 = ",nH(e\\5J&X9j~,2{4!";
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D8*<n$t-[&&s{?E~");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      helpFormatter0.printHelp("O+:gMLI4^", options1, false);
      helpFormatter0.printHelp("nvRH`", "O+:gMLI4^", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1353;
      helpFormatter0.setLeftPadding(1353);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      int int0 = (-1299);
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      String string0 = "org.apache.commons.cli.HelpFormatter";
      String string1 = "l_";
      boolean boolean0 = true;
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", "l_", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "`R";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "\\krJ&:bbU;|zd";
      Options options2 = options1.addOption((String) null, "krJ&:bbU;|zd", true, (String) null);
      String string2 = "";
      Options options3 = options2.addOption("", false, " ");
      // Undeclared exception!
      try { 
        options3.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setDescPadding(31);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "B*m", options0, "B*m", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-20), 74, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("yOfs#8%7d!iX0");
      int int0 = 0;
      Options options0 = null;
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", (Options) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, list full.";
      helpFormatter0.printHelp(264, "\n", "53WdWu.ER C", options0, "\n", true);
      helpFormatter0.printHelp("-", options0);
      String string0 = helpFormatter0.rtrim("53WdWu.ER C");
      assertEquals("53WdWu.ER C", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-99), "\n", " ", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLeftPadding(403);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      // Undeclared exception!
      try { 
        mockPrintWriter2.append((CharSequence) "uDF37j, 5Y{?,i22", 3, 3864);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7\\{;%O`ZM'p*0]v.k";
      helpFormatter0.setArgName("7{;%O`ZM'p*0]v.k");
      helpFormatter0.setLongOptSeparator("7{;%O`ZM'p*0]v.k");
      String string1 = "cmdLineSyntax not provided";
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("p3[$+JHB");
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3492), 0, "*I=A2\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-365);
      helpFormatter0.setArgName((String) null);
      String string0 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-365), (-365), "NO_ARGS_ALLOWED");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ush!x6$";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "1sVHW OK-7GZ7l";
      boolean boolean0 = true;
      optionGroup0.setRequired(true);
      options0.getOptionGroups();
      optionGroup0.setRequired(true);
      Option option0 = null;
      try {
        option0 = new Option("1sVHW OK-7GZ7l", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '1sVHW OK-7GZ7l' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
