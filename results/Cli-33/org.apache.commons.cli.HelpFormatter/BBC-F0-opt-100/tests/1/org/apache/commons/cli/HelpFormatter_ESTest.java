/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:45:31 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-1825);
      options0.addOption("arg", "usage: ", true, "p{}{/X2O~!<Ot");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("p{}{/X2O~!<Ot", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Y#Rdym BiT";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(116, "wd;h&B0wY", "h*E1bQqW;TT{SFF", (Options) null, "Y#Rdym BiT", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "L\"Vc*RbkUJ9af", objectArray0);
      helpFormatter0.printHelp(printWriter0, 2004, "L\"Vc*RbkUJ9af", (String) null, options1, 2004, 890, "bUv]fQ", true);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 105, "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 2004, options0, 2004, 0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/g%u9");
      Options options0 = new Options();
      mockPrintWriter0.print("usage: ");
      options0.addOption("", "arg", false, "[nF(ptAd:Z};FT");
      Options options1 = options0.addOption((String) null, "usage: ", false, "-");
      helpFormatter0.defaultLongOptPrefix = null;
      options1.addOption("", true, "");
      helpFormatter0.printHelp("\"", options0, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", " ", options0, 2008, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1875);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1875), (-2191), "t!t6k]]}2A#3!f\"\"m(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("cmdLineSyntax not provided");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("Illegal option name '");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(34);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter(53);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 53, 1231, "Illegal option name '");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2693), options1, 1231, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W\"1<s");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oP^WrO-H\"xrd";
      String string1 = " | ";
      String string2 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-496));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "\n", (Options) null, "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("arg", false, "\n");
      option0.setDescription("' was specified but an option from this group ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      optionGroup2.setRequired(true);
      options0.hasOption("--");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[", options1, true);
      helpFormatter1.printHelp("~cdt#'IBl*", options0, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 4166, (-2), "w4,[h,[v~Fcx;wp;J:L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{_5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped(printWriter0, 1, "\n");
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, ".Um^{_5v*uU", "S2]A~!2w2_lkcs3", options0, 1, 1, ".Um^{_5v*uU");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write("-");
      int int0 = 74;
      mockPrintWriter0.println("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "arg", (Options) null, 31, 74, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("qT@1", "", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 734, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 61, options0, 1, 61);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/g%u9");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 2686, "arg", "arg", options0, 74, 1, " ", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 74, " ", options0);
      helpFormatter1.setLongOptPrefix("HE[mUTGH7?\"6.XK");
      helpFormatter2.printHelp("-", options0, false);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/g%u9");
      Options options0 = new Options();
      mockPrintWriter0.print("usage: ");
      Options options1 = options0.addOption((String) null, "usage: ", false, "-");
      options1.addOption("", false, "");
      helpFormatter0.printHelp("\"", options0, false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options1.getOption(" ");
      options0.hasOption(" ");
      helpFormatter0.printHelp("w#\"#-_Rq }$BcG", options1, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printWrapped(printWriter0, (-1), " [ARG]");
      int int0 = helpFormatter0.defaultLeftPad;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, " [ARG]", " [ARG]", options1, 1706, (-2), "w#\"#-_Rq }$BcG", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/g%u9");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      boolean boolean0 = false;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, ">KxK=NMz?I=w", "'", options0, 3, 74, "-", false);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, ">KxK=NMz?I=w", options0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1170);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.renderOptions((StringBuffer) null, 0, options1, 2861, 1);
      helpFormatter0.renderOptions((StringBuffer) null, 1170, options0, 1170, 9);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "e&*(^r958}4}`9Rj_", true, (String) null);
      options0.getOption("");
      options0.hasOption(" [ARG]");
      helpFormatter0.printHelp("e&*(^r958}4}`9Rj_", options1, true);
      Options options2 = new Options();
      Options options3 = options2.addOption("arg", "e&*(^r958}4}`9Rj_", false, "-");
      helpFormatter0.printHelp((-1), "e&*(^r958}4}`9Rj_", "", options3, "");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.hasOption("arg");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 64, options0, 0, 223);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      mockPrintWriter1.append((CharSequence) "arg");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " [ARG]";
      objectArray0[1] = (Object) " [ARG]";
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, " ", objectArray0);
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 64, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/b%u9");
      Options options0 = new Options();
      mockPrintWriter0.print("usage: ");
      helpFormatter0.setArgName("yjlC/b%u9");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 596, "yjlC/b%u9", "", options0, 596, 1, "yjlC/b%u9", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "yjlC/b%u9", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yjlC/b%u9");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "yjlC/b%u9");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.hasOption("arg");
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 120);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/b%u9");
      Options options0 = new Options();
      mockPrintWriter0.print("usage: ");
      helpFormatter0.setArgName("yjlC/b%u9");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 596, "yjlC/b%u9", "", options0, 596, 2, "yjlC/b%u9", false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "yjlC/b%u9", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "yjlC/b%u9", "&Q_jjjfOpOI{Qx7$", options0, (-277), 596, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 596, "o'Lwtq*o+%e5! 5K.-", "o'Lwtq*o+%e5! 5K.-", options0, 596, 13, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1682, "&Q_jjjfOpOI{Qx7$", "&Q_jjjfOpOI{Qx7$", options0, 1682, 26, "org.apache.commons.cli.ParseException", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "line.separator", "d?.t_;T", options0, " :: ");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "zHB$yE");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "t}");
      options1.hasOption("-");
      Option option1 = new Option("", "arg");
      Options options2 = options0.addOptionGroup(optionGroup1);
      options0.getOption("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("cmdLineSyntax not provided", options2, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      optionGroup0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-2), "m}E{`xqA{.;Y%Z-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/g%u9");
      Options options0 = new Options();
      mockPrintWriter0.print("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "yjlC/g%u9", "&Q_jjjfOpOI{Qx7$", options0, (-277), 596, "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos("--", 31, 1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      mockPrintWriter0.print("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1106, "", "has already been selected: '", options0, 1106, 1, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.findWrapPos(";Bn6EX)c", 1410, 7);
      helpFormatter0.setDescPadding((-1));
      options0.addOption("arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(";Bn6EX)c", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "", options0, "", false);
      options0.getOptions();
      helpFormatter0.printHelp(1545, "'", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", options1, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 1545, 0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("b&AU^", "'");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // '
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.print("");
      String string0 = "P3";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-277), (String) null, "", options1, (-1173), (-277), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("]Ok%=ejfu[-igE{9", 0, (-403));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Collection collection0 = options0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth((-1));
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      options0.addOption((String) null, "-", true, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) collection0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) optionGroup1;
      objectArray0[6] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Locale locale0 = Locale.KOREA;
      Locale locale1 = locale0.stripExtensions();
      mockPrintWriter0.printf(locale1, "@X<(_", objectArray0);
      helpFormatter0.printUsage(printWriter0, (-1), "", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-72), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      byteArrayOutputStream0.write(1);
      Option option0 = new Option("QeI8zzvq", "[ARG...]");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, "A CloneNotSupportedException was thrown: ", true, "A CloneNotSupportedException was thrown: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printUsage(printWriter0, 2853, "QeI8zzvq", options0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{=5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, " [ARG]");
      Option option0 = new Option((String) null, false, "F\r6~wf( \",}_l0");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2885, " [ARG]", ".Um^{=5v*uU", options2, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options0.hasOption(" ");
      Option option0 = new Option("", true, "/~");
      options0.addOption(option0);
      helpFormatter0.printHelp("w3\"9-_R\"q }$BcG", options1, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options1.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.rtrim("w,u)eUAL~G%");
      helpFormatter0.printHelp((-1), " [ARG]", "", options0, "Q($+#0AhhlbUT", true);
      int int0 = 1637;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        stringBuffer0.replace(3402, 94, ";#bs%Dl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yjlC/g%u9");
      Options options0 = new Options();
      mockPrintWriter0.print("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-277), "yjlC/g%u9", "", options0, (-277), 2, "P3", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "   ";
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth(60);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options1.getOption(" ");
      options0.hasOption(" ");
      helpFormatter0.printHelp("w3\"9-_R\"q }$BcG", options1, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{=5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "\n");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("arg");
      mockPrintWriter1.append('*');
      helpFormatter0.printOptions(mockPrintWriter1, 10, options0, 10, 74);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options0.hasOption(" ");
      helpFormatter0.printHelp("\n", options1, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.rtrim("w,u)eUAL~G%");
      helpFormatter0.printHelp((-1), " [ARG]", "", options0, "Q($+#0AhhlbUT", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1637, (-2235), "[ Options: [ short java.util.HashMap@0000000006 ] [ long { [ARG]=[ option: arg  [ARG]  [ARG] :: arg ]} ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "LF@W-EA21weO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", options1, "^9G*Z<u7['vv[", true);
      options0.getOptions();
      helpFormatter0.setWidth(31);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 305, 118);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.hasOption("arg");
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.setWidth((-2227));
      helpFormatter0.printHelp((-1), "h*E1bQqW;TT{SFF", "7aI0tq0&Jz", options1, "", true);
      helpFormatter0.setNewLine("7aI0tq0&Jz");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      MockPrintStream mockPrintStream0 = new MockPrintStream(",$}~:r`tjBo$HnocG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) option0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) optionGroup1;
      objectArray0[5] = (Object) option0;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "oBBrAW", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, (-1), (-1969), "7aI0tq0&Jz");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options0.hasOption(" ");
      helpFormatter0.printHelp("SVn\"N~;.", options1);
      helpFormatter0.printHelp("w3\"9-_R\"q }$BcG", options1, true);
      helpFormatter0.defaultOptPrefix = "w3\"9-_R\"q }$BcG";
      options1.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.rtrim("w,u)eUAL~G%");
      helpFormatter0.printHelp((-1), " [ARG]", "", options0, "Q($+#0AhhlbUT", true);
      helpFormatter0.printHelp(1637, " [ARG]", "org.apache.commons.cli.OptionValidator", options0, " [ARG]", false);
      helpFormatter0.setNewLine("w,u)eUAL~G%");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options0.hasOption(" ");
      helpFormatter0.printHelp("w3\"9-_R\"q }$BcG", options1, true);
      helpFormatter0.defaultOptPrefix = "w3\"9-_R\"q }$BcG";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.rtrim("w,u)eUAL~G%");
      helpFormatter0.printHelp("w,u)eUAL~G%", "w,u)eUAL~G%", options1, " [ARG]", true);
      options1.getOptions();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(9);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1), "", "--", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{=5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter0.rtrim(".Um^{=5v*uU");
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("<");
      mockPrintWriter1.append('*');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 34, "org.apache.commons.cli.Options", "cmdLineSyntax not provided", options0, 98, 46, "NbrY'o!]$h)/?");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.toString();
      options1.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      File file0 = MockFile.createTempFile("i]vL)e]rU.tZ", "NbrY'o!]$h)/?");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-191), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, (-191), (-191), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(";Bn6EX)c", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-4789), options1, (-4789), (-4789));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.hasOption("arg");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options1, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 114, options0, 1, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-257), (-257), "6o:bnhvaqJ5I.R#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "iLnyWGs!j)5wrvPu", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "xri_xo", options0, "Paz", true);
      options1.getOptions();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "", "5d&: $2|7g${J]m", options0, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.printHelp("F3,Tz@", options0, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w3\"9-_R\"q }$BcG";
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", " [ARG]", true, "arg");
      options0.hasOption(" ");
      helpFormatter0.printHelp("w3\"9-_R\"q }$BcG", options1, true);
      helpFormatter0.defaultOptPrefix = "w3\"9-_R\"q }$BcG";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.rtrim("w,u)eUAL~G%");
      int int0 = (-1);
      String string1 = "";
      helpFormatter0.printHelp((-1), " [ARG]", "", options0, "Q($+#0AhhlbUT", true);
      String string2 = "";
      // Undeclared exception!
      try { 
        options1.addOption("2}PJFZ", false, "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '2}PJFZ' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("--", "Paz", options1, "Paz", false);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      options1.getOptions();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setWidth(31);
      helpFormatter0.printHelp(74, "h*E1bQqW;TT{SFF", "", options1, "", false);
      helpFormatter0.setNewLine("MbC-Is'7nH");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      mockPrintWriter0.format(locale0, "-", objectArray0);
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Y");
      char char0 = '*';
      MockPrintWriter mockPrintWriter2 = null;
      try {
        mockPrintWriter2 = new MockPrintWriter("[ option: ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("F3,Tz@");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "\">$sxT";
      objectArray0[1] = (Object) "\">$sxT";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(";Bn6EX)c", objectArray0);
      int int0 = (-1761);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1761), "\">$sxT", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("--", "Paz", options1, "Paz", false);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options1.getOptions();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-220), ";Bn6EX)c", "6o:bnhvaqJ5I.R#", options2, "bb", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("QeI8zzvq", "[ARG...]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", "--", true, "usage: ");
      helpFormatter0.printUsage(printWriter0, 2886, (String) null, options2);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "", "", options0, 8, (-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "qwuU");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption("arg", "rcGfQxvdj", true, "[ARG...]");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "{QJ~RoZS\" :'", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
      Option option0 = new Option("", "Paz");
      Options options2 = options1.addOption(option0);
      options2.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.getOptions();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(1054);
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 1, options1, 9, 74);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLeftPadding(1979);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("3BLS1H1#1J)", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.rtrim("7aI0tq0&Jz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('*');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 17, "NbrY'o!]$h)/?", "org.apache.commons.cli.Options", options0, 17, (-191), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 17;
      String string0 = "7aI0tq0&Jz";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.hasOption("arg");
      options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "?A?Xn -nR@A?~,/A", "org.apache.commons.cli.Option", options0, "H?.('/?d]Jf");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "+|B?N/dKDaJy[X");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "Paz");
      Options options2 = options1.addOption(option0);
      options2.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(">V)[_<7)+>D]iBGTp]", "org.apache.commons.cli.HelpFormatter$OptionComparator", options2, "", false);
      options1.getOptions();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(1054);
      helpFormatter0.setNewLine("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 1, options1, 9, 74);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("D");
      helpFormatter0.findWrapPos("c2aiwp{#hqKzU_@tt", 3796, 3796);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setOptPrefix("D");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "--");
      options2.addOption("D", "org.apache.commons.cli.HelpFormatter", false, "");
      Option option0 = new Option("", "usage: ", false, "D");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-544), "", "D", options0, "XwwI1D5^,}I7 JeX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "Mh9";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "sJ");
      Options options2 = options1.addOption(option0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options2.addOption("org.apache.commons.cli.HelpFormatter$1", "--", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$1' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{=5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      String string0 = "<";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "<");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("");
      int int0 = 88;
      String string0 = "";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("\n", "org.apache.commons.cli.HelpFormatter$OptionComparator", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "-", "usage: ", options0, "j", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{=5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "\n");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("arg");
      mockPrintWriter1.append('*');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 10, options0, 10, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]", "", options0, "", false);
      options0.getOptions();
      helpFormatter0.setWidth(14);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 14, 14, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.setOptPrefix(" :: ");
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim(" :: ");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("Sc;^o?1auS;Nu");
      Option option0 = new Option("arg", " ");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("$}##3`I", "Sc;^o?1auS;Nu", options2, (String) null);
      MockFile mockFile0 = new MockFile("ojq");
      mockFile0.getAbsoluteFile();
      options1.hasOption("--");
      Options options3 = options2.addOption(option0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "ojq");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Sc;^o?1auS;Nu";
      options3.toString();
      mockPrintWriter1.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2516), "Sc;^o?1auS;Nu", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "\n");
      helpFormatter0.printHelp(13, "p{}&/(2O~!<Ot", "b84IU|1Xu", options1, "4ul=Q8%EDB,>2");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2));
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      mockPrintStream0.print((float) 74);
      mockPrintWriter0.print((Object) objectOutputStream0);
      mockPrintWriter0.close();
      String string0 = "?laoOJ~qMY?W";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "?laoOJ~qMY?W");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("Sc;^o?1auS;Nu");
      stringBuffer0.chars();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1637, 1637, "k;N");
      helpFormatter0.renderWrappedText(stringBuffer1, 76, 76, "sD|9Q''r$MQW");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 31;
      options0.toString();
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      helpFormatter0.printHelp("--", "Paz", options1, "Paz", false);
      Comparator<Option> comparator1 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      options1.getOptions();
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.setWidth(31);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "h*E1bQqW;TT{SFF", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7aI0tq0&Jz";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      options0.hasOption("arg");
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption(" ");
      optionGroup1.setRequired(true);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(17, "7aI0tq0&Jz", "7aI0tq0&Jz", options2, "7aI0tq0&Jz");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 1637, "dk'q\"zD?}H%M@_Y4");
      assertEquals(17, stringBuffer0.length());
      assertEquals("-dk'q\"zD?}H%M@_Y4", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-3104));
      assertEquals((-3104), helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "line.separator");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // line.separator
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(".Um^{=5v*uU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLongOptSeparator("D");
      helpFormatter0.findWrapPos("c2aiwp{#hqKzU_@tt", 3796, 3796);
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setOptPrefix("D");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, "--");
      Options options3 = options2.addOption("D", "org.apache.commons.cli.HelpFormatter", false, "");
      Option option0 = new Option("", "usage: ", false, "D");
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("]impR FOKy");
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "vo6";
      Options options0 = new Options();
      String string1 = "z5ZgzD]Gn#`9";
      Option option0 = null;
      try {
        option0 = new Option(" ", true, "z5ZgzD]Gn#`9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("QeI8zzvq", "[ARG...]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("arg", "--", true, "usage: ");
      helpFormatter0.printUsage(printWriter0, 2886, (String) null, options2);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      String string0 = "org.apache.commons.cli.OptionGroup";
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.OptionGroup", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 44;
      Options options0 = new Options();
      Option option0 = null;
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("-V6^OP:Wx<>Sgm", 1, 1);
      helpFormatter0.findWrapPos("-V6^OP:Wx<>Sgm", 1, 2);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      int int0 = 0;
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3377;
      helpFormatter0.defaultWidth = 3377;
      helpFormatter0.setSyntaxPrefix("s2X`sD");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      option0.setDescription(" ");
      helpFormatter0.setWidth(74);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options1 = new Options();
      boolean boolean0 = options1.hasShortOption(">");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("_2zttl8G]vtk>v");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      assertEquals("_2zttl8G]vtk>v", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("nAr/sy_&>k*R}T#In)y");
      helpFormatter0.getNewLine();
      String string0 = "w~hbA@,Vp9ll";
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = "Hp$j";
      Options options0 = new Options();
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        options0.addOption("   ", "Hp$j", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("Vw(J+9");
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "--");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3109), options1, (-3109), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("A5");
      assertEquals("A5", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 989, "");
      helpFormatter0.createPadding(1663);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "6o:bnhvaqJ5I.R#";
      helpFormatter0.setLongOptSeparator("6o:bnhvaqJ5I.R#");
      helpFormatter0.rtrim(";Bn6EX)c");
      String string1 = "";
      String string2 = " :: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.toString();
      Option option0 = null;
      try {
        option0 = new Option("ZlzXb@cvWQ?6RrFN4", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ZlzXb@cvWQ?6RrFN4' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "ezv.wEN9";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "org.apache.commons.cli.ParseException";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
