/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 100, 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      helpFormatter0.defaultSyntaxPrefix = "Illegal option name '";
      helpFormatter0.setLongOptPrefix("Illegal option name '");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 11;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(11, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 11
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-255);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 16, (-255), "#yM#*lC&u^@bq+<{");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "=Uc5?F");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = null;
      options1.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 334, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth((-1546));
      helpFormatter0.setLeftPadding(114);
      helpFormatter0.defaultSyntaxPrefix = "7Sqyj?wO8`tl";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getWidth();
      helpFormatter0.setWidth((-1546));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = null;
      int int0 = 8;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 114, (Options) null, (-1546), 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "arg");
      option0.setArgName("<BEEx#:7n+'M7aENP`");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("line.separator", "org.apache.commons.cli.OptionValidator", options0, (String) null);
      helpFormatter0.findWrapPos("<", 711, 2259);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "=Uc5?F");
      option0.setArgName("");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("9jcs0#+J;Pud,rm;?z");
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setOptPrefix("' contains an illegal character : '");
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("arg", 74, 74);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('8');
      String string0 = null;
      stringWriter1.write((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "=Uc5?F");
      option0.setArgName("<");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("<", (String) null, options1, "LpJqe3~");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "=Uc5?F");
      option0.setArgName("<");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 556, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O\"Q`LB9+W88T;");
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      // Undeclared exception!
      helpFormatter1.printOptions(printWriter0, 1, options1, 3, 0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Option option1 = new Option("arg", "Cannot add value, list full.", true, "");
      optionGroup1.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IPlTYp[?un-e@ZRPQ~", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = null;
      int int0 = 38;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 607, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("usage: ");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasShortOption("]");
      helpFormatter0.printHelp("vC0*Ia!#LJ_\"g=", options1, false);
      int int0 = (-1257);
      helpFormatter0.setDescPadding((-1257));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " ");
      charBuffer0.codePoints();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.chars();
      helpFormatter0.setArgName(" ");
      int int0 = 2458;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2458, 2458, " ");
      stringBuffer1.append(" ");
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      helpFormatter0.getWidth();
      helpFormatter0.renderWrappedText(stringBuffer1, 2458, (-547), "u8G$");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "&^#q:j&1xd35qz0");
      helpFormatter0.getLeftPadding();
      String string1 = "lMy[Amml";
      Options options0 = new Options();
      String string2 = null;
      // Undeclared exception!
      try { 
        options0.addOption("|f!2,a*<+5K", "xHN_8HnnY0T&T", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '|f!2,a*<+5K' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1397);
      helpFormatter0.defaultWidth = (-1397);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, ":%[");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options1.addOption("7", "", false, (String) null);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Mv4k8%Y.=^n)", (String) null, options2, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      helpFormatter0.setLeftPadding((-438));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "V+Xjh'%;lfQK3(", "\">m?!%8K)(Rn[3]", options0, "\">m?!%8K)(Rn[3]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("ON1g", "Gj+q*CEem/.C6;MP");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      String string0 = ">";
      String string1 = "p@UB";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.printf(locale0, "?u;j", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, (-2), options1, (-250), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "A CloneNotSupportedException was thrown: ", "I", options0, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.rtrim("   ");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 1, 1001, "' was specified but an option from this group ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.setDescPadding((-2));
      String string1 = "\">m?!%8K)(Rn[3]";
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\">m?!%8K)(Rn[3]", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options1 = new Options();
      helpFormatter0.setOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2, "--", "--", options0, 1, 3, (String) null, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(52);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2, "S)m7xR:,bjViz_H");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.println('<');
      mockPrintWriter0.write(1);
      int int0 = 3;
      mockPrintWriter0.print('v');
      mockPrintWriter0.println(3);
      String string0 = ">";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ">", ">", (Options) null, 11, 3, ">");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultNewLine = "hovieU>MIH**;9;cL";
      Options options0 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.printHelp(" ", "", options0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.findWrapPos(" ]", 0, 0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R9L", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      helpFormatter0.printHelp(9, "R9L", "R9L", options1, ".Lw$kJ&f_<,uUcPNn");
      OptionGroup optionGroup2 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 66, "VAYV>3xi;", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R9L", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options0.addOption(option0);
      optionGroup1.setRequired(true);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(">", "R9L", options1, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter1.renderOptions(stringBuffer0, 3544, options2, 3, 1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "`! 6)vRE!";
      boolean boolean0 = true;
      PrintWriter printWriter0 = null;
      String string1 = " | ";
      String string2 = "- 9c:bl:V";
      Option option0 = new Option((String) null, true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 1359, "usage: ", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("arg", "LME*Z2lp14,Cloa3Z*");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      Options options2 = options1.addOption("arg", "", true, "");
      helpFormatter0.printHelp("Illegal option name '", "18'*gB|0R=:z{ w6", options2, "", true);
      options2.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("c8?:p]FV_J");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter0.printHelp("v[8OwP>h", options2, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ", options1);
      helpFormatter1.printOptions(mockPrintWriter0, 98, options2, 74, 3);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      optionGroup0.setRequired(true);
      String string1 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1371);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('|');
      helpFormatter0.printHelp(printWriter0, 28, "|l^RpjW/J%@2H*", (String) null, options0, 2483, 3, "", true);
      helpFormatter0.createPadding(28);
      helpFormatter0.createPadding(2483);
      helpFormatter0.printWrapped(printWriter0, 2483, "");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C!?bfpl)4");
      optionGroup0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "`! 6)vRE!", options1, 3339, 3, "-", true);
      Options options2 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "arg", options0);
      helpFormatter0.renderOptions((StringBuffer) null, 1587, options1, 97, 770);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.setWidth(1178);
      helpFormatter0.setWidth(3);
      helpFormatter0.printHelp("\n", "\n", options0, "\">m?!%8K)(Rn[3]");
      Options options4 = new Options();
      helpFormatter0.printHelp("BCJ)WbH6D.6[3SFa", options4, false);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('Y');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1178, (-464), "\">m?!%8K)(Rn[3]");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-908), 1178, ";%t(>*FJk'5Pv$`~");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix(";%t(>*FJk'5Pv$`~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z[2 )~^J0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp("1}@tBCC+K_<]!>", options2, true);
      helpFormatter1.createPadding(62);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 36, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("\n", "arg", options0, (String) null, false);
      Options options1 = new Options();
      helpFormatter1.printHelp(9, "\n", "usage: ", options1, "BCJ)WbH6D.6[3SFa");
      helpFormatter1.setWidth(544);
      String string1 = helpFormatter1.defaultLongOptPrefix;
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.getSyntaxPrefix();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " [ARG]", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter1.setOptPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("KcNu+");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 21;
      helpFormatter2.printHelp("--", options0, false);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1617), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setOptPrefix("--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2bu8;u^jb2v");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 48, "has already been selected: '", "--", options0, 3, 2, "arg", true);
      Options options1 = new Options();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 74, "-");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, "2bu8;u^jb2v");
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix(";%t(>*FJk'5Pv$`~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z[2 )~^J0");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter1.printHelp("1}@tBCC+K_<]!>", options2, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 9, "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setOptPrefix("--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2bu8;u^jb2v");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 48, "hVs already been selected: '", "--", options0, 3, 2, "arg", true);
      Options options1 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, "2bu8;u^jb2v");
      int int0 = 9;
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append('6');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter3.renderWrappedText(stringBuffer0, 3, (-487), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      boolean boolean0 = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-221), 3, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.createPadding(13);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter3.renderOptions(stringBuffer0, (-480), options1, 74, 128);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "usage: ");
      helpFormatter0.findWrapPos("+4`3", 32, 32);
      helpFormatter0.setLeftPadding(5);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(891);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 891, options0, 3, 891);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix(";%t(>*FJk'5Pv$`~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*0v56%/jy&\"GR<#;<BT");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter0.printHelp("*0v56%/jy&\"GR<#;<BT", options1, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      Locale locale0 = Locale.PRC;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "d?Ew[/^U_T.JsZ7^Lb`";
      objectArray0[3] = (Object) optionGroup0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "d?Ew[/^U_T.JsZ7^Lb`";
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) "--";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 7, "   ", "--", options0, 1260, 37, "N=r");
      helpFormatter0.printHelp(" [ARG]", options0, true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setLeftPadding(9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultLeftPad = (-2185);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      int int0 = 3;
      helpFormatter0.printWrapped(printWriter0, 3, "");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("arg", " ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("\n");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultNewLine = "usage: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m@;8-,*y=");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1432, "org.apache.commons.cli.Option", ">", options0, 37, 1311, "org.apache.commons.cli.Option", true);
      Options options1 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, (-1282), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 37;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 2225, "", "", (Options) null, 74, 74, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R9L", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(">", "R9L", options2, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = options1.addOption("", "", true, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "Illegal option name '", "org.apache.commons.cli.HelpFormatter", options3, 1, 74, "", true);
      Options options4 = new Options();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      int int0 = (-1835);
      // Undeclared exception!
      try { 
        helpFormatter2.createPadding((-1835));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R9L", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.println('0');
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2328, "@^Y!J}HiST@%EnnJ;", "-", options1, 3, 3, "L", true);
      int int0 = 857;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 75, "", "-", options0, 1, 857, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "", options0, 1, 3, "[", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("", false, "");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("arg", "", options1, "", false);
      Options options2 = new Options();
      helpFormatter0.setWidth((-1775));
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 3, 115, "?S|8j#J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth(118);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(118, "org.apache.commons.cli.HelpFormatter", "?$", (Options) null, "mULsf4Y9Y~{xLRdje", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1311, ">", "", (Options) null, 64, 44, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("arg", " ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultNewLine = "usage: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m@;8-,*y=");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1432, "org.apache.commons.cli.Option", ">", options0, 37, 1311, "org.apache.commons.cli.Option", true);
      Options options1 = new Options();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "d?w[/^U_T.J*Z7^Lb`", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 704, 79, " | ");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = null;
      int int0 = 165;
      String string0 = "~.g";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(165, "-", "~VJ", (Options) null, "~.g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      options0.getOptions();
      options0.addOption("arg", " ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultNewLine = "usage: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m@;8-,*y=");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1432, "org.apache.commons.cli.Option", ">", options0, 37, 1311, "org.apache.commons.cli.Option", true);
      Options options1 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(1);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "d?w[/^U_T.J*Z7^Lb`", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, "d?w[/^U_T.J*Z7^Lb`", "", options0, 3, 7, "-");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      boolean boolean0 = false;
      String string0 = "17xy{s ANBwXVYF";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("17xy{s ANBwXVYF", "bzfKEsMTD| 'QzW~|", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.forLanguageTag("[");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "[", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-438), "[", "[", options0, 1, 1, "[", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R9L", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp(">", "R9L", options2, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(63, "Ms]a}eb", "--", options1, "\">m?!%8K)(Rn[3]");
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("usage: ", options3);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter2.createPadding(74);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      optionGroup0.setRequired(true);
      optionGroup0.toString();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Util", options1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-422));
      StringWriter stringWriter0 = new StringWriter(7);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Option", " ", options0, 0, (-1002), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C!?bfpl)4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.getOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "`! 6)vRE!", options1, 3339, 3, "-", true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.createPadding(381);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 3, 53, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-47), options1, (-60), (-1315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("jj;%Rf", options1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-422));
      helpFormatter0.setDescPadding((-422));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "jj;%Rf", "", options1, "jj;%Rf", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp("-", "\">m?!%8K)(Rn[3]", options1, "-", false);
      int int0 = 683;
      Options options2 = new Options();
      helpFormatter0.printHelp(683, "MY{Y:ZM88xGg-OZF}=", "ad:0:%:pI;yE", options0, "[]");
      helpFormatter0.setWidth((-895));
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[]", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "usage: ");
      helpFormatter0.setWidth(1203);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.setWidth(3);
      helpFormatter0.printHelp("[]", "[]", options0, "\">m?!%8K)(Rn[3]");
      Options options4 = new Options();
      helpFormatter0.printHelp("BCJ)WbH6D.6[3SFa", options4, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 683, "[BIrOn", options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 948, 1, "|A#}U");
      int int0 = (-533);
      Options options0 = new Options();
      Option option0 = new Option("NH", true, ":");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = null;
      // Undeclared exception!
      try { 
        optionGroup0.addOption(option1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{:Vd&i;");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "d?w[/^U_T.J*Z7^Lb`", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-31), "d?w[/^U_T.J*Z7^Lb`", "", options0, 3, 7, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = ":d+zTK}jaA6*iAG1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string2 = "";
      Options options2 = options1.addOption("arg", "usage: ", true, "");
      String string3 = "BCJ)WbH6D.6[3SFa";
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2313), "ag", "", options2, "U)itxP/*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "usage: ", true, "");
      helpFormatter0.printHelp(":d+zTK}jaA6*iAG1", ":d+zTK}jaA6*iAG1", options2, ":d+zTK}jaA6*iAG1", true);
      helpFormatter0.setArgName("");
      helpFormatter0.getOptPrefix();
      Options options3 = new Options();
      helpFormatter0.printHelp("-", options3);
      helpFormatter0.getOptPrefix();
      Options options4 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("a9K[&W5yNqsgNFF/lh", ":d+zTK}jaA6*iAG1", options4, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = "arg";
      helpFormatter0.printHelp(1343, "usage: ", " ", options2, "", true);
      helpFormatter0.getArgName();
      helpFormatter1.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, " ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(":d+zTK}jaA6*iAG1", ":d+zTK}jaA6*iAG1", options2, ":d+zTK}jaA6*iAG1", true);
      helpFormatter0.setArgName("?zod9+tfIhYYBx7");
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("--", options3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-422));
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?zod9+tfIhYYBx7", options1, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1793, "\n", "mQ", (Options) null, (-1045), 1793, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(">", "\">m?!%8K)(Rn[3]", options1, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(64, " ] [ long ", "QMHLR%~Bt{", options0, "");
      helpFormatter0.setWidth(16);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("\">m?!%8K)(Rn[3]", options2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      String string0 = "#Ig7\"P$:qM!v";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = 0;
      String string1 = "e";
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1793, "\n", "mQ", (Options) null, (-1045), 1793, " ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "");
      helpFormatter0.setWidth(1203);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp("[]", options0);
      helpFormatter0.setDescPadding(7);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\">m?!%8K)(Rn[3]");
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      helpFormatter0.printWrapped(printWriter0, 1203, ";7SMF#]p%G_Y");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2125, "", "Qsv", options3, "|*fb{,", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(":d+zTK}jaA6*iAG1", ":d+zTK}jaA6*iAG1", options2, ":d+zTK}jaA6*iAG1", true);
      helpFormatter0.setArgName("?zod9+tfIhYYBx7");
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("--", options3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setWidth((-422));
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "--", "?zod9+tfIhYYBx7", options2, "-", false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "usage: ", true, "");
      helpFormatter0.printHelp(":d+zTK}jaA6*iAG1", ":d+zTK}jaA6*iAG1", options2, ":d+zTK}jaA6*iAG1", true);
      helpFormatter0.setArgName("");
      helpFormatter0.getOptPrefix();
      Options options3 = new Options();
      helpFormatter0.printHelp("-", options3);
      helpFormatter0.getOptPrefix();
      Options options4 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("a9K[&W5yNqsgNFF/lh", ":d+zTK}jaA6*iAG1", options4, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options1, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("]", 73, (-3145));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "org.apache.commons.cli.HelpFormatter$pinComparator", false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options0, "\">m?!%8K)(Rn[3]", true);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "{_U", "Cannot add value, list full.", options1, "--");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("w!Ml,^^A9{*BQ'E").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("30VC5o-3");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#Ig7\"P$:qM!v");
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "yAN", "gPq3rN$", options0, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      Options options2 = options1.addOption("", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("' contains an illegal character : '", "org.apache.commons.cli.HelpFormatter$1", options2, "%sLBpLh?TH8eyb");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      String string0 = "\">m?!%8K)(Rn[3]";
      helpFormatter0.printHelp("]", "", options0, "", true);
      Options options1 = new Options();
      helpFormatter0.printHelp(1557, "[BIrOn", " ", options0, "\">m?!%8K)(Rn[3]");
      helpFormatter0.setWidth(2692);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("gx0m|SqDah!X", "bzfKEsMTD| 'QzW~|", options1, "%sLBpLh?TH8eyb");
      helpFormatter0.setLongOptSeparator("bzfKEsMTD| 'QzW~|");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{:Vd&i;");
      helpFormatter0.findWrapPos("", (-1), (-1));
      helpFormatter0.setLeftPadding(4924);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setWidth((-2));
      Options options0 = new Options();
      String string0 = "EG_ge";
      Options options1 = options0.addOption("EG_ge", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", options1, "LE~yV_$Tg\"\"d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "S";
      Options options0 = new Options();
      options0.hasLongOption(" ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1777;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1777, options0, 1777, 1777);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 53, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "5@,E iq", options2, "gx0m|SqDah!X");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1832));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "5@,E%iq", options2, "");
      helpFormatter0.printHelp("-", options1, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("gx0m|SqDah!X", "bzfKEsMTD| 'QzW~|", options1, "%sLBpLh?TH8eyb");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?zod9+tfIhYYBx7";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "";
      options1.addOption("arg", "usage: ", true, "");
      Options options2 = new Options();
      String string2 = "";
      int int0 = 63;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "poZb";
      String string2 = null;
      options0.addOption("poZb", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "q9$g5h*w", options0, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.findWrapPos("-", 3, 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(3);
      helpFormatter1.getOptionComparator();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.createPadding(70);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "");
      helpFormatter0.setWidth(1203);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp("[]", options0);
      helpFormatter0.setWidth(0);
      helpFormatter0.setDescPadding(1203);
      helpFormatter0.printHelp(683, ";%t(>*FJk'5Pv$`~", "", options1, "--", false);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("{m'lZEn.hj]", 3, 3);
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      int int0 = (-1);
      String string1 = null;
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        options0.addOption("\n", "--", false, "org.apache.commons.cli.Option");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "2KX", true, "fp0F=7TP+X{");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption((String) null, true, "--");
      Option option0 = new Option("arg", "9z1,lr9|", true, "arg");
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "[ option: ";
      int int0 = 961;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[ option: ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = (-3448);
      String string0 = " ";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption(" ");
      options1.hasOption("T(=FU#nbQm");
      options0.addOption("", "--", true, "arg");
      String string2 = null;
      String string3 = "";
      Options options2 = options1.addOption((String) null, "", false, "-");
      String string4 = "<*~mGjf>?p6";
      // Undeclared exception!
      try { 
        options2.addOption("<*~mGjf>?p6", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '<*~mGjf>?p6' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setOptPrefix("--");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2bu8;u^jb2v");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 48, "has already been selected: '", "--", options0, 3, 2, "arg", true);
      Options options1 = new Options();
      helpFormatter0.createPadding(1);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, "2bu8;u^jb2v");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      String string1 = "r_3ti|Tsz{):l/G";
      MockFile mockFile0 = new MockFile("r_3ti|Tsz{):l/G");
      mockFile0.getAbsolutePath();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("30VC5o-3");
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#Ig7\"P$:qM!v");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, "e", (Options) null, 0, (-2113), "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptSeparator("30VC5o-3");
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#Ig7\"P$:qM!v");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, "e", (Options) null, 0, (-2113), "cmdLineSyntax not provided", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("%Jv/d0S");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 42;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1324, 42, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(13);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-445), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setNewLine((String) null);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-802), (String) null, (String) null, options0, "fxmL?nz6s1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nj";
      helpFormatter0.defaultArgName = "nj";
      helpFormatter0.setLeftPadding(220);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "O$Qo|Gozk~sEvB";
      helpFormatter0.setWidth(0);
      helpFormatter0.setLeftPadding((-4231));
      helpFormatter0.setNewLine("w;xV]8X%P");
      helpFormatter0.getSyntaxPrefix();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", "-", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getOptPrefix();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      MockFile mockFile0 = new MockFile("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) "org.apache.commons.cli.HelpFormatter$OptionComparator";
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.format("Y2=SapM4yJ", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Locale locale0 = Locale.KOREA;
      String string1 = "+s9,{t";
      mockPrintWriter0.printf(locale0, "+s9,{t", objectArray0);
      int int0 = 1598;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options1.addOption("+s9,{t", "usage: ", false, "Y2=SapM4yJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+s9,{t' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("line.separator", (-289), (-289));
      helpFormatter0.setOptPrefix("line.separator");
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      options0.toString();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.HelpFormatter", "\n", true, "C+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "usage: ", true, "");
      helpFormatter0.printHelp(":d+zTK}jaA6*iAG1", ":d+zTK}jaA6*iAG1", options2, ":d+zTK}jaA6*iAG1", true);
      helpFormatter0.setArgName("?zod9+tfIhYYBx7");
      helpFormatter0.getOptPrefix();
      Options options3 = new Options();
      helpFormatter0.printHelp("-", options3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-492), "--", "-", options3, ")$mTkWiaSG", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      int int0 = 683;
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "");
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp("--", options0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      String string0 = "BCJ)WbH6D.6[3SFa";
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "");
      helpFormatter0.setWidth(1203);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp("[]", options0);
      helpFormatter0.setWidth(0);
      // Undeclared exception!
      helpFormatter0.printHelp("[]", "[]", options0, "");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "arg", options2, "");
      helpFormatter0.setWidth(869);
      helpFormatter0.printHelp("-", "", options1, (String) null);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "2KX", true, "fp0F=7TP+X{");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "9z1,lr9|", true, "arg");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("arg", false, "8|XX&V<|GC#9}EA");
      helpFormatter0.printHelp(826, "cmdLineSyntax not provided", (String) null, options4, "cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "");
      helpFormatter0.setWidth(1);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      helpFormatter0.printHelp("\n", options3, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(665);
      assertEqualsstring0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("kOd'vHayq\"|\"V*");
      assertEquals("kOd'vHayq\"|\"V*", string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      optionGroup0.toString();
      helpFormatter0.printHelp(";%t(>*FJk'5Pv$`~", ";%t(>*FJk'5Pv$`~", options2, "\">m?!%8K)(Rn[3]", true);
      Options options3 = new Options();
      helpFormatter0.printHelp(683, "BCJ)WbH6D.6[3SFa", "[BIrOn", options3, "");
      helpFormatter0.setWidth(1203);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.printHelp("[]", options0);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      try { 
        MockURI.URI("", "<fs,", "fj+&ma^A");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :%3Cfs,#f%7Fj+&ma%5E%7FA
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 383;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "usage: ", true, "");
      helpFormatter0.printHelp(":d+zTK}jaA6*iAG1", ":d+zTK}jaA6*iAG1", options2, ":d+zTK}jaA6*iAG1", true);
      helpFormatter0.setArgName("?zod9+tfIhYYBx7");
      helpFormatter0.getOptPrefix();
      Options options3 = new Options();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", options3);
      helpFormatter0.getOptPrefix();
      Options options4 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("a9K[&W5yNqsgNFF/lh", ":d+zTK}jaA6*iAG1", options4, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderOptions(stringBuffer0, 3, options0, 1, 114);
      assertEquals("?zod9+tfIhYYBx7", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getOptionComparator();
      String string1 = "S*.[g-:H5PWjz#S";
      Options options0 = new Options();
      String string2 = "k^=q";
      boolean boolean0 = false;
      String string3 = "";
      // Undeclared exception!
      try { 
        options0.addOption("k^=q", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k^=q' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      Options options1 = options0.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{:Vd&i;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1251), "{:Vd&i;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0, true);
      options0.getOptions();
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-909), "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", " :: ", options0, "4%dqcvv$w[b!Tq3>", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      String string1 = "";
      String string2 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "5@,E%iq", options2, "gx0m|SqDah!X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
