/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:16:22 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("'");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "arg", options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp((-1), "7E83O", "Ruw000QFLB", options0, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('C');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "7E83O");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "The option '", "Cannot add value, list full.", options0, 2, (-1), "7E83O");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setDescPadding((-167));
      helpFormatter0.defaultLongOptPrefix = "?I";
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      int int0 = 2;
      helpFormatter0.createPadding(2);
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-2046));
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "\n", "\n", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(7, "\n", "\n", options0, "a=s\"\"#+'_{!\",TD");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";BvaU-");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "R'-=c0C-";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "R'-=c0C-";
      objectArray0[6] = (Object) options0;
      mockPrintWriter0.printf("R'-=c0C-", objectArray0);
      Locale locale0 = Locale.forLanguageTag("org.apache.commons.cli.Option");
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<.+\"p,", objectArray0);
      helpFormatter0.printHelp(printWriter0, 10, "org.apache.commons.cli.Option", "}:1~d<ij$T<s?+u1", options0, 10, 10, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "KH", true, "&Y:jLN|WJ$fi{d");
      helpFormatter0.setArgName("&Y:jLN|WJ$fi{d");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.getOptionGroups();
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options1, "&Y:jLN|WJ$fi{d");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1437);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName("'W!<[_6AC");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-408);
      helpFormatter0.setLongOptSeparator("0BW92y");
      helpFormatter0.findWrapPos("-", 0, 0);
      String string0 = "<[CO?73=(2P";
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      try { 
        MockURI.URI("<[CO?73=(2P", "org.apache.commons.cli.AlreadySelectedException", "--", "org.apache.commons.cli.ParseException");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: <[CO?73=(2P://org.apache.commons.cli.AlreadySelectedException--#org.apache.commons.cli.ParseException
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(10, "--", "--", options0, "a=s\"\"#+'_{!\",TD");
      helpFormatter0.renderOptions((StringBuffer) null, 10, options0, 10, 4309);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printHelp(39, "--", "--", options0, "--");
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "'%z:*", (String) null, options0, 3, 39, "'%z:*", true);
      helpFormatter0.rtrim("c8");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("tUhT#& =^5^@LCu", "", options0, "|k@W}s~AC<u9eP6");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "iu/ ^XpGZHSriDU`5`S";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "iu/ ^XpGZHSriDU`5`S";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "iu/ ^XpGZHSriDU`5`S", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 74, "", "tUhT#& =^5^@LCu", options0, 74, 74, "org.apache.commons.cli.Util");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("omgc[%)p)Y)WO2z4", 2, 2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-102);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (byte)32, (Options) null, (byte)32, (byte)32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-13), (-2522), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "{^!HE%";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "{^!HE%");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1855), options1, 84, 84);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1991);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "<");
      option0.setArgName("x(ImUjF&c");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(42, "$7]&0%h3'\"!-u}OypV", "", options1, "");
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(64, "#vz09>c3v_Kx6E3.NXQ", "' contains an illegal character : '", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "-", options0, "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 3, 10);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("/1-r](o;F;~w G", "y3F/M4>WF;;8", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2433, "org.apache.commons.cli.Util", "--", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 32, "--", "I,' <#a[p+X", options0, 1144, 32, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      String string0 = "Y";
      String string1 = "r'PSVDb_$^u1:wo%:xy";
      Options options2 = new Options();
      String string2 = "";
      // Undeclared exception!
      helpFormatter0.printHelp("r'PSVDb_$^u1:wo%:xy", options1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("N", true, "0DE");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1596), "]", "Xt.RbGYeu", options1, (-2), (-1596), "Xt.RbGYeu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "mM &f*KB46M(Um*]c");
      helpFormatter0.setDescPadding(10);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, ">", "mM &f*KB46M(Um*]c", options0, 10, 606, ">");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{f@$";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "-");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption((String) null, false, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 10, "-", "--", options4, 2, 74, "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "mM &f*KB46M(Um*]c");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "{f@$", "\n", options0, 10, 3, ">", false);
      helpFormatter0.setDescPadding(10);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, ">", "mM &f*KB46M(Um*]c", options0, 1, 606, ">");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 10, (String) null, ">", options0, 55, (-972), "[ Options: [ short ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.setArgName("<");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lf");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1158, 1158, "-");
      helpFormatter1.printHelp(3, "$7]&0%h3'\"!-u}OypV", "\n", options0, "--");
      helpFormatter1.getArgName();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp(42, "\n", "usage: ", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      options0.addOption((String) null, true, "^.NCUdT8;v");
      // Undeclared exception!
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (String) null, options0, "_T&Z_79+i;lqrhJv5", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "   ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "O`t/");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "", false, "   ");
      helpFormatter0.printHelp(102, "FA#D0/`jk0Uw7`cp>oQ", "", options4, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2075, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('L');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, ">", "", options0, 74, (-2589), "Py9H(SR]]oc2", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      String string0 = null;
      String string1 = "e'R$4Z8M?:Nq<T";
      String string2 = "!9yX";
      helpFormatter0.setLongOptSeparator("!9yX");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[19];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[2] = (Object) "NO_ARGS_ALLOWED";
      objectArray0[3] = (Object) "vz_.";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "vz_.";
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", objectArray0);
      helpFormatter0.printHelp(printWriter0, 31, "vz_.", "arg", options0, 31, 43, "", true);
      helpFormatter0.setDescPadding(1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.setLeftPadding(43);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.addOption((String) null, false, "D!JbZ&x]3#x[F[cfx ");
      helpFormatter0.printHelp("arg", "", options0, "\"", false);
      helpFormatter0.setDescPadding(36);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("4O\"T6xzQ", "4O\"T6xzQ", (Options) null, "Dit+>=oQmEq*_'<D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("23,%`C,g90Dl(");
      Options options1 = options0.addOption("", false, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(")F{ \"", "", options1, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-612));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[2];
      mockPrintWriter1.println("");
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      PrintWriter printWriter1 = mockPrintWriter2.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printOptions(printWriter1, (-1978), options1, 1018, 597);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 0, "[ option: ", "arg", options0, 10, 43, "GG9U5H0:=nUv|I1py", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.addOption("NO_ARGS_ALLOWED", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "]", true, "   ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter2.printHelp(10, "usage: ", "", options1, "");
      helpFormatter2.getLongOptSeparator();
      String string0 = "1";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("1", ")PR4oDbzhmG#}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )PR4oDbzhmG#}
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", (Object[]) null);
      String string0 = "";
      helpFormatter0.printUsage(printWriter0, 64, "");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", 3, 623);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(2483);
      helpFormatter0.setWidth(2483);
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setSyntaxPrefix(" :: ");
      helpFormatter0.printHelp("A]`}rVY?oM", "A]`}rVY?oM", options0, "=0.", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(654);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(2483);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("");
      options0.addOption((String) null, false, "D!JbZ&x]3#x[F[cfx ");
      helpFormatter0.printHelp("arg", "s<>7gU>I5KJ8!q", options0, "\"", false);
      helpFormatter0.setDescPadding(36);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-72), "org.apache.commons.cli.ParseException", "", options1, ".FfhhaZ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-2354));
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-3319));
      helpFormatter0.setLongOptSeparator(")(g]2Ijxu");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("arg");
      options0.getOption(")(g]2Ijxu");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "qZmb][:RN-!u ;");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("skM+9_'3", "org.apache.commons.cli.HelpFormatter$1", options0, "V!:@", true);
      helpFormatter2.setDescPadding((-849));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", true, "");
      options1.getOptions();
      helpFormatter0.printHelp("--", (String) null, options1, "WD++stupu.C<E<", false);
      helpFormatter0.defaultSyntaxPrefix = "f^|TK2";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-171), "`Ph(jC~sE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(4);
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("gUV[Fwhb0GmAmO");
      boolean boolean0 = false;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      PrintStream printStream0 = mockPrintStream1.append('>');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) "arg";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "gUV[Fwhb0GmAmO";
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      int int0 = 44;
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.printWrapped(printWriter0, 44, "' was specified but an option from this group ");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "LHHC3`~tGMh$`w3`%t", (String) null, (Options) null, "LHHC3`~tGMh$`w3`%t", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "arg");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1269);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-888), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 74, options1, 34, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 74, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-3319));
      helpFormatter0.getArgName();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.Util");
      helpFormatter0.setWidth(2712);
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("usage: ");
      options0.getOption("TlpI~n  h>C{");
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("arg", "", options1, "!", false);
      helpFormatter0.setDescPadding((-1951));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-344));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "uJY<$@0:(L,KKj(h";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-470));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      Options options1 = new Options();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "r'PSVDb_$^u1:wo%:xy", options1, "Y", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(2483);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 44, " ");
      String string0 = ">VQ6TS?d";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3253), ">VQ6TS?d", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "--");
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-1), options1, (-146), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(2483);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 44, "ik(dzAkfXKhAbwMM{");
      String string0 = ">VQ6TS?d";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 35, ">VQ6TS?d", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = ";ve&BGZS";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3639, ";ve&BGZS", ";ve&BGZS", (Options) null, "J]+:}@~d4b-9m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("cL(hYO(838");
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.defaultDescPad = 1161;
      helpFormatter0.printHelp(",sRZOcRZ\u0000#Spy@", "r- -", options1, ",sRZOcRZ\u0000#Spy@", true);
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cL(hYO(838", "", options1, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append('Z');
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, ";ve&BGZS", "8\"k=bs!v", options1, "J%GKY3UbPc&");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2417);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{f@$");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      String string0 = "-";
      int int1 = 101;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, "", "", options0, 713, 101, "{f@$", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{f@$");
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 10, " ", "-", options0, 1081, 195, "-", false);
      helpFormatter1.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer2 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer2, (-2417), options0, (-2336), (-660));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      Options options2 = options1.addOption("arg", " ", false, "--");
      options2.getOption("arg");
      options1.addOption("arg", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("cL(hYO(838", "-", options1, "", false);
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      helpFormatter0.printHelp(printWriter0, 31, "{f@$", "", options0, 10, 31, ">", false);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = new StringBuffer(stringBuffer0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1924), options0, (-1224), 116);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("");
      options0.addOption((String) null, false, "D!JbZ&x]3#x[F[cfx ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "N'", "--", options0, "arg", false);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(2483);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp(21, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "'K.");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "07UXiw}O", options0, "N%0qnz|(y*[^kpzT6");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("$Rb*&E=qz's*jvX{");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, "-");
      Options options1 = options0.addOption(option0);
      int int0 = 18;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 63, options1, (-2417), 18);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "$7]&0%h3'\"!-u}OypV", "\n", options0, "--");
      helpFormatter1.getArgName();
      helpFormatter0.setDescPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-2309), (-2309), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "EaN4kS";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("EaN4kS");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 29;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 29, 29, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-246), 13, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-3319));
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(2712);
      helpFormatter0.setLongOptSeparator("arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("   ");
      options0.getOption("TlpI~n  h>C{");
      Options options1 = options0.addOption("", false, " ");
      helpFormatter0.printHelp("arg", "", options1, "!", false);
      helpFormatter0.setDescPadding((-1951));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{f@$");
      mockPrintWriter0.append('K');
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2417), "-", "", options0, 31, 10, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{f@$");
      mockPrintWriter0.append('K');
      StringBuffer stringBuffer0 = new StringBuffer(44);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 2212, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "~-KdVKfc|&@k5#fq", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth((-3318));
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(2712);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(1, "l", "", options0, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer(2483);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer1, 2483, 44, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1585, "#01R", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append('Z');
      Options options1 = new Options();
      helpFormatter0.printHelp(1784, "yQ8:|zLahs ]Wb", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("");
      options0.addOption((String) null, false, "D!JbZ&x]3#x[F[cfx ");
      helpFormatter0.setWidth((-1308));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "s<>7gU>I5KJ8!q", options0, "\"", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("YN", "--", options0, "YN");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("--", 10, 6);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      String string0 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "X2g2)TTi'6v", true, "K[Kw~/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      Option option0 = new Option("", false, "line.separator");
      Options options1 = options0.addOption(option0);
      int int0 = 4387;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1866), options1, (-1), 4387);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      int int1 = (-408);
      helpFormatter0.setLongOptSeparator("0BW92y");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("usage: ");
      options0.addOption("", true, "uJY<$@0:(L,KKj(h");
      helpFormatter0.printHelp("cL(hYO(838", "uJY<$@0:(L,KKj(h", options0, "", true);
      helpFormatter0.setDescPadding((-2417));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-756));
      helpFormatter0.setLongOptSeparator("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("-", "U7}Nf?rq9.7*%b:a", (Options) null, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2417), "q(+N7AVvR", "", options0, 1784, 1784, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("hm-s:FI~(");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\"Vf@vb,");
      helpFormatter0.renderOptions(stringBuffer0, 1520, options1, 1, 1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("0BW92y", 31, 3);
      helpFormatter0.setLongOptSeparator("0BW92y");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, (Options) null, 2266, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      String string0 = " ] [ long ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3292), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("");
      Options options1 = new Options();
      options1.addOption("", false, "9;!CCRGUo");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "line.separator", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "z_DM-,!n7W.w$.l=9Q", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultSyntaxPrefix = "I,2bDEny1g";
      helpFormatter0.setSyntaxPrefix((String) null);
      String string0 = "";
      String string1 = "oMrw3u9^-D(y";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("-", "", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2));
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-2);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("IdC>.uo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.deleteOnExit();
      helpFormatter0.setLongOptSeparator("IdC>.uo");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-246), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("IdC>.uo");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.deleteOnExit();
      int int0 = (-246);
      helpFormatter0.setLongOptSeparator("IdC>.uo");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-246), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\u0004|PB");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", "arg", false, "^AD-la-");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.setLongOptPrefix("]");
      helpFormatter0.setOptPrefix("5cB[r18H? @h");
      helpFormatter0.getLongOptPrefix();
      String string1 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = ".]{\\(sB^f<]";
      // Undeclared exception!
      try { 
        options0.addOption("[", true, ".]{(sB^f<]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-758), "8B}u&D/BY:4", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-:/JP0R-!S92");
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption("NO_ARGS_ALLOWED", true, "");
      options1.getOptions();
      helpFormatter0.printHelp("arg", (String) null, options1, "vz_.", false);
      helpFormatter0.defaultSyntaxPrefix = "f^|TK2";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setDescPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "gqOJ.?2");
      Option option0 = new Option("", true, "--");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("cL(hYO(838");
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp(",sRZOcRZ\u0000#Spy@", "r- -", options1, ",sRZOcRZ\u0000#Spy@", true);
      helpFormatter0.setDescPadding(1027);
      helpFormatter0.printHelp("r- -", options1, true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "$FM-}!!";
      Options options0 = new Options();
      options0.getMatchingOptions("@rqbN4}=dLE'^7C`zml");
      options0.getOptions();
      Options options1 = options0.addOption("arg", true, "p[};fI&gD/");
      helpFormatter0.printHelp("$FM-}!!", options1);
      options0.hasLongOption(" ] [ long ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      int int0 = (-2886);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2886), "p[};fI&gD/", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      String string0 = "GV3a'WWP'D^,T\"Uk5";
      boolean boolean0 = true;
      String string1 = "+";
      // Undeclared exception!
      try { 
        options0.addOption("GV3a'WWP'D^,T\"Uk5", true, "+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'GV3a'WWP'D^,T\"Uk5' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 1779;
      String string0 = " F/|c";
      helpFormatter0.defaultOptPrefix = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 74;
      helpFormatter0.setNewLine("");
      String string0 = "cs$ =axmh9@m]kEf(!";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, "cs$ =axmh9@m]kEf(!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P\"w{O'pOV!r:";
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("P\"w{O'pOV!r:");
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-813));
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding((-813));
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      String string0 = null;
      MockFile mockFile0 = new MockFile("\n", "\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "w9J-a16Kw;?o6@{Gg";
      helpFormatter0.defaultNewLine = "w9J-a16Kw;?o6@{Gg";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      int int0 = 1956;
      helpFormatter0.setLeftPadding(1956);
      helpFormatter0.setWidth(1956);
      String string1 = "";
      String string2 = "cmdLineSyntax not provided";
      String string3 = "Pug}\"l";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("~MfZ`xb2bL~Z88h9");
      helpFormatter0.setDescPadding(0);
      String string0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(0);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("");
      options0.addOption((String) null, false, "D!JbZ&x]3#x[F[cfx ");
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "s<>7gU>I5KJ8!q", options0, "\"", false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0BW92y";
      int int0 = 31;
      int int1 = (-408);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("0BW92y", 31, (-408));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setWidth(43);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("");
      options0.getOption("-");
      options0.addOption("", false, "");
      helpFormatter0.printHelp("\n", "0;{I<.}.Fm", options0, "0;{I<.}.Fm", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding(3);
      helpFormatter1.createPadding(2385);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2417), ";ve&BGZS", ";ve&BGZS", options0, ";ve&BGZS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "-", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0BW92y";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("0BW92y", 31, (-408));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("cL(hYO(838");
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp(",sRZOcRZ\u0000#Spy@", "-", options1, ",sRZOcRZ\u0000#Spy@", true);
      helpFormatter0.setDescPadding(1027);
      assertEquals(1027, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-517);
      String string0 = "arg";
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string1 = "";
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "arg";
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) helpFormatter0;
      int int0 = 179;
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, " ");
      // Undeclared exception!
      try { 
        options1.addOption("f~TQm", "", false, "?C7/25b3`LS}>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'f~TQm' contains an illegal character : '~'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
