/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 17:37:01 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLeftPadding((-1249));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 23, 63);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 64;
      String string0 = "j>C9&\"bWZ5z:s1t";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      String string1 = "pqx`JG/eLh0:=+eL,59";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2532, options0, 8, 5899);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "AWw{#@{an-o.`s g", false, "ewRE1,fW");
      String string0 = "";
      Option option0 = new Option("", "--", true, "^%3!V*_Z]");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 2, 2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.findWrapPos(",n(>l[QC*$IWp}K.@g", (-433), 1101);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 0, "org.apache.commons.cli.HelpFormatter");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.createPadding((byte)106);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter", (String) null, false, "(Gl^,<_J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "NO_ARGS_ALLOED";
      Option option0 = new Option("NO_ARGS_ALLOED", "--", true, "-");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 144;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 144, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "pTL<wG|si";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 261, "RAi{ghmXP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "MhqC>=T-Mb~sGGwf]");
      helpFormatter0.printHelp("N!FP)#>r~j]", options1, true);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = new StringBuffer("-");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V!;0kiD'.w4~l{@b/'+");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "V!;0kiD'.w4~l{@b/'+", (String) null, options0, (-888), (-1), "<!9.5@@TJB`cMaQ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      PrintWriter printWriter0 = null;
      int int0 = (-2031);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "NO_ARGS_ALLOWED";
      Option option0 = new Option("NO_ARGS_ALLOWED", "\n", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2031), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = new Option("NO_ARGS_ALLOWED", "\n", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2031), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", "arg", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      helpFormatter0.defaultLeftPad = 3;
      stringWriter0.flush();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("Y", "\n", true, "usage: ");
      Options options3 = options2.addOption("arg", false, "Y");
      helpFormatter0.printHelp("4d*1R^D<", "4d*1R^D<", options3, "", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-100), "Ad[o7.8=;-%!,o3y`", "", options0, "arg", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("a", "a", options1, "a", true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("kH", "arg", options0, "arg");
      helpFormatter0.rtrim("~cmw<8K>q");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~cmw<8K>q", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      String string0 = "}Z{F2 2PY##SK8xw!";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4), "}Z{F2 2PY##SK8xw!", "}Z{F2 2PY##SK8xw!", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1251), options0, 2354, 1187);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, " ", "Jx_U-jh,K,#$v", options1, 1187, (-1251), "s[?aO5)v", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1533), (-1533), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("e9?6o|{kbi\u0005K", "usage: ", options0, ":<wMYx<VYUnN", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2, (String) null, "Z\"nx{)(F)= TrL,", options0, (-1762), 99, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a", "a", options0, "a", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      int int0 = (-2239);
      helpFormatter0.defaultLeftPad = (-2239);
      helpFormatter0.setLongOptPrefix("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2239), 5185, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      helpFormatter0.defaultLeftPad = 0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "5FsrDNS21JK");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1846), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " | ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      StringBuffer stringBuffer0 = new StringBuffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3, options0, 3, 25);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-869), 2108, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.createPadding(0);
      options0.addOption("", "usage: ", true, "5FsrDNS21JK");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "K+V-_", options0, 74, 0, "pA1", true);
      helpFormatter0.setSyntaxPrefix("JH .sT0}dQ2");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 69, "(yDt ahaH4.b.3UCR$Z", (String) null, options0, 0, 74, "+bQ?hG},Pt.Ce!rkzm");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      helpFormatter1.createPadding(32);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "r", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 41, "usage: ", "usage: ", options0, 41, 41, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.println(64);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 64, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.setLongOptSeparator("ci[");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintStream0.print("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) "ci[";
      mockPrintWriter1.format("_{$^jYi)fKK", objectArray0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 64, "--", options0);
      helpFormatter0.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('e');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "arg", (-1248), 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("-");
      helpFormatter0.setWidth(31);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1848, "]");
      helpFormatter0.defaultLongOptPrefix = "]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp(1306, "org.apache.commons.cli.Option", "Liog", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("83#<JMpHzS8#6lBE>");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          // Undeclared exception!
          helpFormatter0.printHelp(0, "org.apache.commons.cli.Util", "3)*rCl/=5onj1wci'", options0, "})cUu\">4V}*nG>@x%+");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options1 = new Options();
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1313, (String) null, options0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 104, "usage: ", "", options1, 3, 3, (String) null, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "", options0);
      helpFormatter1.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderOptions(stringBuffer0, 104, options0, 1313, 1197);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1848, "]");
      helpFormatter0.defaultLongOptPrefix = "]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("[", 1306, 1306);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("[", "\"", options0, "\n", true);
      helpFormatter1.createPadding(1874);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 13, 0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("P1EB", 114, (-345));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "5FsrDNS21JK");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "K+V-_", options0, 74, 0, "pA1", true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 110, "--", options0);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "--", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator((String) null);
      Options options1 = new Options();
      options0.toString();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1313, (String) null, options0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1313, (String) null, "usage: ", options0, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(64, "m", "m", options0, " :: ");
      helpFormatter0.printHelp("usage: ", "\n", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(37);
      helpFormatter0.setWidth(104);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 44, "K:$p");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("&Kc+29[89i");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options0);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "kc<!HG%:B=uTk>", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      helpFormatter0.printHelp(";", "arg", options1, "--", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "P+*:<D&UqHm5oMZo", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "+bQ?hG},Pt.Ce!rkzm");
      Options options2 = options1.addOption(option0);
      option0.setLongOpt("arg");
      Options options3 = options2.addOption("", true, "<");
      helpFormatter0.printHelp("=w<=uVCE6La%<zdK`9!", options3, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 64, (Options) null, 64, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "--");
      Options options1 = options0.addOption("", "\"B(al@BC", false, (String) null);
      helpFormatter0.printHelp("-Oa<\"O:p", "-Oa<\"O:p", options1, "-Oa<\"O:p", true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, " ]", " ]", (Options) null, 433, 0, "");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZJp8]");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-104), options0, 17, (-104));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println(44);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 44, 2612, "");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, (-1), 2069, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 72, "cmdLineSyntax not provided", options0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter2, (-626), options0, (-1), 2069);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Option option0 = new Option("NO_ARGS_ALLOWED", "-", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(false);
      boolean boolean0 = false;
      Option option1 = new Option("", "' contains an illegal character : '", false, " ");
      optionGroup1.addOption(option1);
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 37, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "mU").when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "+bQ?hG},Pt.Ce!rkzm");
      Options options2 = options1.addOption(option0);
      options1.addOption((String) null, true, "");
      option0.setLongOpt("arg");
      options2.addOption("", true, "<");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "arg", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      Options options2 = options1.addOption("", true, "-");
      helpFormatter0.printHelp("org.apache.commons.cli.Util", " ", options2, "org.apache.commons.cli.Util", true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "m");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "m", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("-");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ");
      helpFormatter0.defaultLongOptPrefix = "-";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("[", 0, 0);
      Options options0 = new Options();
      helpFormatter0.setArgName("<");
      // Undeclared exception!
      helpFormatter0.printHelp("[", "\"", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "+bQ?hG},Pt.Ce!rkzm");
      Options options2 = options1.addOption(option0);
      option0.setLongOpt("arg");
      options2.addOption("", true, "<");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "arg", options2, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setSyntaxPrefix("<");
      helpFormatter0.setWidth((-25));
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      Object object0 = new Object();
      helpFormatter0.defaultLongOptPrefix = "]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("[", 1306, 1306);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setArgName("<");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.setSyntaxPrefix("\n");
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println((Object) mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "9uR+bVK1COloq_pI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("&dGSgNyH`x1n>:Dg", 3, 10);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", "]", options0, "", true);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.setNewLine("--");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(37);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 44, "K:$p");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("&Kc+29[89i");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ", options0);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 63, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-714), "EE\"~7R", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "]");
      helpFormatter0.defaultLongOptPrefix = "]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("[", 1306, 1306);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setArgName("<");
      helpFormatter1.printHelp("[", "\"", options0, "\n", true);
      helpFormatter1.printHelp(36, "}}p-uJ ~5hTRdFe", "EaIs%zVYY&_~`I", options0, "Illegal option name '", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "UqXplXB#9z5l5(y8S(";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "X");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      mockPrintWriter0.println();
      options0.addOption("", "usage: ", true, "5FsrDNS21JK");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, 64, "%\"dCzJ", "--", options0, 48, 3, "", true);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "K+V-_", options0, 74, 0, "pA1", true);
      helpFormatter0.setSyntaxPrefix("JH .sT0}dQ2");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-1580), ",'X\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "");
      options1.addOption(option0);
      option0.setLongOpt("]");
      Options options2 = options0.addOption("tA8", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "]");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "+bQ?hG},Pt.Ce!rkzm", "2O4(>_b;L^}T.w$", options2, 0, 16, "", true);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(">!*VE");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultLeftPad = 44;
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(3);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) ">!*VE";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "N";
      mockPrintWriter0.format(locale0, "N", objectArray0);
      Options options0 = new Options();
      options0.addOption("", "[", false, " ");
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, ">!*VE", "eSuMo8J4F", options1, 1, 90, "", false);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      options0.hasOption("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "eg1st!jr!xo$CR][l", "eg1st!jr!xo$CR][l", options0, 127, (-3008), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      helpFormatter0.setArgName("");
      String string1 = "<";
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1848, "]");
      String string2 = "[";
      helpFormatter0.defaultLongOptPrefix = "]";
      helpFormatter0.findWrapPos("[", 1306, 1306);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultLeftPad = 2611;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(10);
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "E]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(">!*VE");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultLeftPad = 44;
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1366), (-1366), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "\n");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-893), (-893), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-18), 74, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 64, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = objectArray0[4];
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(4211);
      stringWriter0.append('o');
      StringWriter stringWriter1 = stringWriter0.append('o');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 11, "5FrDNS21JK");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      helpFormatter0.printHelp("Z\"nx{)(F)= TrL,", "-", options0, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-635), "Z\"nx{)(F)= TrL,", "", options0, (-635), 2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", true, "--");
      helpFormatter0.printHelp("a", "arg", options1, "t", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      options0.addOption("", "usage: ", true, "5FsrDNS21JK");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "K+V-_", options0, 74, 0, "pA1", true);
      helpFormatter0.setSyntaxPrefix("JH .sT0}dQ2");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 2523;
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("a", "", options1, "", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "+bQ?hG},Pt.Ce!rkzm");
      Options options2 = options1.addOption(option0);
      option0.setLongOpt("arg");
      Options options3 = options2.addOption("", true, "<");
      int int0 = (-932);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "+bQ?hG},Pt.Ce!rkzm", options3, (-932), (-1), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The option '");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 234, 234, "The option '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 234, "~v9!;.");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      helpFormatter0.optionComparator = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2268), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2127), "<", "<", options0, 1, 82, "d p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1235), "dA_iw AxX-r6+#QQ", "n[I+d$Jp{N", (Options) null, (-1235), 0, "n[I+d$Jp{N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(244, "", "m[MzR75IF},6\"", (Options) null, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(">!*VE");
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, ";P!K1yKVELJ5]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-321), "", ">!*VE", options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("i\"K", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, " | ", options0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "LBy3,", "ON) >*zTw>:#j:s+5I", options0, 14, (-3673), "o#eBqXY`nH! I", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "--");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "5FrDNS21JK");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "|QK!s", "", options1, 1266, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("e}+;i58a)6y");
      helpFormatter0.setNewLine("e}+;i58a)6y");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("e}+;i58a)6y", "e}+;i58a)6y", options0, "e}+;i58a)6y");
      helpFormatter0.rtrim("e}+;i58a)6y");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 4260, 4260, "e}+;i58a)6y");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1848, "]");
      helpFormatter0.defaultLongOptPrefix = "]";
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.findWrapPos("[", 1306, 1306);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("[", "\"", options0, "\n", true);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1949);
      helpFormatter0.setWidth(0);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", "-", (Options) null, " yc6WKz7", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 14, "eg1st!jr!xo$CR][l", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 507, "eg1st!jr!xo$CR][l", "eg1st!jr!xo$CR][l", options0, (-1), 507, "eg1st!jr!xo$CR][l", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.CHINA;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "dRKDrt,e", false, "dRKDrt,e");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(printWriter0, 59, "dRKDrt,e", " ", options1, 91, 59, "--", true);
      helpFormatter1.setSyntaxPrefix("dRKDrt,e");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      PrintWriter printWriter0 = null;
      int int0 = (-2031);
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "NO_ARGS_ALLOWED";
      Option option0 = new Option("NO_ARGS_ALLOWED", "\n", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2031), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", true, "+bQ?hG},Pt.Ce!rkzm");
      Options options2 = options1.addOption(option0);
      option0.setLongOpt("arg");
      Options options3 = options2.addOption("", true, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "arg", "+bQ?hG},Pt.Ce!rkzm", options3, (-932), (-1), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "--");
      helpFormatter0.printHelp("a", "arg", options1, "--", true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", string0);
      
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 15, "", "9]8af'", options0, 105, 105, " ] [ long ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "o1Ui%", "o1Ui%", (Options) null, 44, 44, "V^Qo$B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(3);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "usage: ", options0, 1, 1, "b+V~ cj<n/iL^}Ke ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "5FrDNS21JK");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options1, 0, 0, "(#!f", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      String string0 = "";
      String string1 = "Yf6";
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("Yf6");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "has already been selected: '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2113;
      helpFormatter0.createPadding(2113);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", "usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1430);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "--");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.defaultLeftPad = 10;
      helpFormatter0.setLeftPadding(44);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("^Xobb>F(");
      String string0 = "";
      Options options0 = null;
      String string1 = "\"e#k<`*Ii/ ";
      String string2 = "~BW;;";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("~BW;;", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "org.apache.commons.cli.HelpFormatter");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("${Jt&<'Kl");
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(">!*VE");
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.defaultLeftPad = 44;
      stringWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println(3);
      String string0 = "A CloneNotSupportedException was thrown: ";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "A CloneNotSupportedException was thrown: ");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getOptPrefix();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 1853;
      Options options0 = new Options();
      Option option0 = new Option("", true, "N%n~l.'pJB");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("-", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1142), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, ", ");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1), " sF[3");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setArgName("arg");
      int int0 = 1804;
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("--", (String) null, options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = (-667);
      StringBuffer stringBuffer0 = null;
      int int1 = (-1101);
      Options options0 = new Options();
      helpFormatter0.printHelp(">", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions((String) null);
      helpFormatter0.setLongOptSeparator(">");
      options0.getOptions();
      Option option0 = null;
      try {
        option0 = new Option("--", "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("' was specified but an option from this group ", "' was specified but an option from this group ", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("--");
      MockFile mockFile0 = new MockFile("--");
      String string0 = null;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("d9");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg", 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("\n");
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 6, " ");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, options0, 74, (-1485));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      String string1 = "[qo]:B4GW%h";
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options1 = new Options();
      String string2 = ", ";
      Option option0 = new Option("arg", true, ", ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption("", "-", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options4, 0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, (String) null);
      helpFormatter0.printHelp("-}T]Wa<6#j+{", "-}T]Wa<6#j+{", options1, "-}T]Wa<6#j+{");
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "--", false, "-");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options2, "NO_ARGS_ALLOWED", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("9p", (String) null, (Options) null, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("N%o>c}&;ILwLUNZ");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("h:kRg=");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("e}+;i58a)6y");
      helpFormatter0.setNewLine("e}+;i58a)6y");
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.printHelp("e}+;i58a)6y", "e}+;i58a)6y", options0, "e}+;i58a)6y");
      helpFormatter0.rtrim("e}+;i58a)6y");
      String string0 = ".j9>3{RQST;:S$I\\C<";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(".j9>3{RQST;:S$IC<", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", true, "\n");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "", options1, 1360, 1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      int int0 = 3;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 64, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.setLongOptSeparator("ci[");
      Options options1 = new Options();
      helpFormatter0.setLongOptSeparator("A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "\"";
      options0.addOption("", ",T~eq+R[,mS", true, "");
      Option option0 = null;
      try {
        option0 = new Option("--", "wg(ryN!/_g^X 5Rnz={", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", (-2549), 0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      String string1 = "<";
      helpFormatter0.setArgName("<");
      helpFormatter0.setArgName("]");
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1848, "]");
      String string2 = "[";
      helpFormatter0.defaultLongOptPrefix = "]";
      helpFormatter0.findWrapPos("[", 1306, 1306);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultLeftPad = 2611;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "E]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.read(byteArray0);
      pipedInputStream0.read(byteArray0);
      try { 
        pipedOutputStream0.connect(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "--");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 0, (String) null, "", (Options) null, 0, 0, "dA_iw AxX-r6+#QQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(127);
      assertEquals(127, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 74, "--");
      assertEquals("----", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("=+>0.7aWTFMVP*kE");
      helpFormatter0.getOptionComparator();
      assertEquals("=+>0.7aWTFMVP*kE", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "\n", options0, "\n", true);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.rtrim("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
