/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:24:56 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption((String) null, "--", true, "5O");
      helpFormatter0.printHelp("5O", (String) null, options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      options0.addOption("", true, "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, ">", "sxu_*|ZFC?!ld`Zl-<", options0, 44, 1468, (String) null, false);
      helpFormatter0.rtrim(":fH)}lN,");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "/W}z?", true, "v,Zb>4HZyAJ;H/@r");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.addOption("", "", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-21), "/W}z?", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = options0.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "Illegal option name '", (String) null, options1, 1, 3, "", true);
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, ')', options0, 74, 3);
      helpFormatter0.setWidth(1);
      String string0 = "";
      helpFormatter0.printHelp(" ", "", options0, "}vGy");
      String string1 = "_>fFz;rgHFoDo";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0, string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      String string0 = "[";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, int0, string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1175), "|$6%5<*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      options0.addOption((String) null, "o6!uiq'kgrK:_-E", true, (String) null);
      helpFormatter0.printHelp("l1", "arg", options0, (String) null);
      helpFormatter0.rtrim("n8TBx;'lA");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 703, 1420);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, ')', options0, 74, 3);
      StringBuffer stringBuffer2 = stringBuffer1.append(')');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 3, "\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(" ", "H Wt\"7#-b(\"h#h", options0, "R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.rtrim("usage: ");
      helpFormatter2.printOptions(mockPrintWriter0, 3, options0, 989, 13);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultOptPrefix;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-214), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "usage: ", options1, "1");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(2);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, " :: ");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      helpFormatter0.printHelp("--", "^,T", options0, "--");
      helpFormatter0.getWidth();
      option0.clearValues();
      helpFormatter0.defaultDescPad = 3445;
      Options options1 = options0.addOption("arg", "", true, "--");
      helpFormatter0.printHelp("^,T", "o6!uiq'kgrK:_-E", options0, "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.rtrim("^,T");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options1.hasShortOption("--");
      optionGroup1.setRequired(true);
      helpFormatter0.printHelp("[ option: ", "[ option: ", options2, "line.separator", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 32, 32, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "}Ry\"Xl(;-sC\"nCrPmaK", "}Ry\"Xl(;-sC\"nCrPmaK", options0, "}Ry\"Xl(;-sC\"nCrPmaK", false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(31, " ", " ", options0, "}Ry\"Xl(;-sC\"nCrPmaK", true);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, " ", options0);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 32, options2, 824, 675);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2430), (-1), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      helpFormatter0.printHelp("--", "^,T", options0, "--");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getWidth();
      helpFormatter0.defaultDescPad = 3445;
      options0.addOption("arg", "", true, "--");
      helpFormatter0.printHelp("^,T", "o6!uiq'kgrK:_-E", options0, "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.rtrim("^,T");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "L", "--", options0, 3445, (-2356), "nw3icy=6");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "usage: ", options1, "1");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(4, "Y?;f!![umC", "1", options1, "", false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "", (Options) null, 74, 4, "/A3wLWI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = options0.addOption((String) null, (String) null, true, "");
      options1.getMatchingOptions("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, ')', options0, 74, 3);
      stringBuffer1.append(')');
      int int0 = (-637);
      String string0 = "!z(]Z@0a!<L";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-637), "qeE=G2sG;Ytg", "qeE=G2sG;Ytg", options0, "!z(]Z@0a!<L", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      Object[] objectArray0 = new Object[2];
      stringBuffer0.codePoints();
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) stringBuffer0;
      mockPrintWriter0.printf((Locale) null, "\"NS~]6S<kL!&9V_", objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('2');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("$BTH");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 3, "arg", "", options0, 74, 74, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1841), 1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("F]by_`r", "", options0, "F]by_`r", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      helpFormatter0.printHelp("--", "^,T", options0, "--");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.getWidth();
      helpFormatter0.defaultDescPad = 3445;
      Options options1 = options0.addOption("arg", "", true, "--");
      helpFormatter0.printHelp("^,T", "o6!uiq'kgrK:_-E", options0, "line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.rtrim("^,T");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ option: ", "[ option: ", options2, "line.separator", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 3, options1, 4645, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "", false);
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((-1), "R&<B&>Af7@ps", "R&<B&>Af7@ps", options0, "R&<B&>Af7@ps");
      Locale locale0 = new Locale(" ", "usage: ", "R&<B&>Af7@ps");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, ')', options0, 74, 3);
      StringBuffer stringBuffer2 = stringBuffer1.append(')');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 3, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2049, "usage: ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, 1, 46, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) null);
      Options options1 = options0.addOption("arg", true, "Illegal option name '");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, ">", options1);
      helpFormatter0.rtrim("e/uC&Cme|.D'");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", ";J.A");
      options0.addOption(option0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2463), "org.apache.commons.cli.Options", ";J.A", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "usage: ", options1, "1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 74, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 387, "arg", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      options0.addOption((String) null, "o6!uiq'kgrK:_-E", true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("l1", (String) null, options1, (String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      options0.addOption((String) null, ">", true, (String) null);
      helpFormatter0.printHelp("l1", (String) null, options0, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1715, (String) null, "`qUtI(]~5G1&+sNn9/o", options0, (-2), (-2), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, ";J.A");
      options0.addOption(option0);
      helpFormatter0.printHelp((-1), ";J.A", ";J.A", options0, ";J.A", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "'VEi+";
      objectArray0[2] = (Object) pipedOutputStream0;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter0.rtrim(" | ");
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, ')', options0, 74, 3);
      StringBuffer stringBuffer2 = stringBuffer1.append(')');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 74, 3, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1), "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "";
      options0.addOption("", " ", true, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3255, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      options0.addOption((String) null, "o6!uiq'kgrK:_-E", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter0.printf(locale0, "", (Object[]) null);
      Options options1 = options0.addOption("arg", true, "Illegal option name '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2899), ">", "l!Tg#fPl|eLS", options1, (-2899), (-2899), ":fH)}lN,", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) null, 1, " ", options1);
      helpFormatter0.rtrim(helpFormatter0.DEFAULT_SYNTAX_PREFIX);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      helpFormatter0.printHelp("--", "^,T", options0, "--");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "^,T", "usage: ", options0, "", false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("X/D^Ck%", "cmdLineSyntax not provided", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "H", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1416, ">", "0hG/e/\"Yj&X$K!5,", options0, 32, (-85), "j0|A", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) "'VEi+";
      mockPrintWriter0.printf(locale0, "", objectArray0);
      Locale locale1 = new Locale("-", "IzqS<IPzkLlIqF9aj{", "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("ax4.wc^J");
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(63, "", (String) null, (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "'VEi+";
      objectArray0[2] = (Object) pipedOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1042, "@Slyg&", "", options0, 1042, 44, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 2139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      String string0 = "X.I&[2$b#W r";
      options0.addOption("", "X.I&[2$b#W r", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("0B#Ks:D_jg6@", "0B#Ks:D_jg6@", options1, "0B#Ks:D_jg6@");
      helpFormatter0.setOptPrefix("QY*C1");
      helpFormatter0.getWidth();
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 2274, (-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("\n", "^,T", options1, "\n");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(4, "Y?;!!0![umC", "--", options1, "", false);
      String string0 = "\\@;g^#wdKlUIh.j+H";
      MockFile mockFile0 = new MockFile("@;g^#wdKlUIh.j+H");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "usage: ", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2786, 2786, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer1, 74, 1851, "usage: ");
      helpFormatter1.setOptPrefix("usage: ");
      helpFormatter1.getNewLine();
      helpFormatter0.setLongOptPrefix("LRbYmv$iN4T");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      String string0 = "";
      String string1 = "X.I&[2|$b#W r";
      options0.addOption("", "X.I&[2|$b#W r", true, "-");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("0B#Ks:D_jg6@", "0B#Ks:D_jg6@", options1, "0B#Ks:D_jg6@");
      String string2 = "";
      helpFormatter0.setOptPrefix("QY*C1");
      helpFormatter0.getWidth();
      String string3 = "";
      Option option1 = null;
      try {
        option1 = new Option("org.apache.commons.cli.HelpFormatter$OptionComparator", "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(4, "\n", "--", options1, "-", false);
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 59, " :: ", ":5H~4D:)l*#r8%V(/", options0, 6, (-795), " :: ", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "'VEi+";
      objectArray0[2] = (Object) pipedOutputStream0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "'VEi+";
      objectArray0[8] = (Object) options0;
      mockPrintWriter0.printf(locale0, "--", objectArray0);
      String string0 = "J=g<rq,U";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 443, "Illegal option name '", "", options0, (-1215), (-1215), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter0.printf(locale0, "", (Object[]) null);
      Options options1 = options0.addOption("arg", true, "Illegal option name '");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ">", "l!Tg#fPl|eLS", options1, 3, 3, ":fH)}lN,", true);
      int int0 = helpFormatter0.defaultDescPad;
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption("1", "0B#Ks:D_jg6@", true, "arg");
      options1.addOption(option0);
      helpFormatter0.printHelp("~>ce?ps`z", "^,T", options1, " ] [ long ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      String string0 = "";
      Option option1 = null;
      try {
        option1 = new Option("--", "L8-e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options1 = options0.addOption("", "--", false, "arg");
      helpFormatter0.printHelp("l1", "+./pWM=5c", options1, "4F9BtU{S|f");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "'", "arg", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.getWidth();
      Options options2 = options1.addOption((String) null, "-", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      Option option1 = new Option("1", "");
      Options options2 = options0.addOption(option1);
      helpFormatter0.printHelp("1", (String) null, options2, "");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-1), "#%f0*vC9Y':n5");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      String string0 = "";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      helpFormatter0.findWrapPos("[", (-2250), (-2250));
      Options options1 = new Options();
      helpFormatter0.printHelp("?Z{QeIHX\"8o[I>d>1", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('!');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage(printWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 4;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int1 = 13;
      StringBuffer stringBuffer0 = new StringBuffer(13);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options0, 4, (-631));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2), 1, "t^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp(32, " ", "EbZ5:7Sb6,y", options0, "*Dnm");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "EbZ5:7Sb6,y", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2215, "[ARG...]", "[ARG...]", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", " ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      File file0 = MockFile.createTempFile("usage: ", "\n", (File) mockFile1);
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.print(true);
      mockPrintWriter0.flush();
      helpFormatter0.setOptPrefix("DG1");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1182, "--");
      helpFormatter0.setOptPrefix("");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "DG1";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "1_q^un8iMc2";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockFile1;
      objectArray0[6] = (Object) "1_q^un8iMc2";
      objectArray0[7] = (Object) "--";
      PrintWriter printWriter0 = mockPrintWriter0.printf("1_q^un8iMc2", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 1, "--");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 43, (Options) null, 3, 2433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "^,T", "1", options1, "", false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("X/D^Ck%", "cmdLineSyntax not provided", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('!');
      StringWriter stringWriter1 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), " [ARG]");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("D_`Z9]T<=");
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getDescPadding();
      String string0 = "FD%j#*$?(RzjrE^Hg2";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FD%j#*$?(RzjrE^Hg2");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1307, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 1, 10);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "^,T", "1", options1, "", false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("X/D^Ck%", "X/D^Ck%", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "arg", "|`mgTj}IW# 8xDa", options0, "", false);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "usage: ", options1, "1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      options0.hasShortOption("");
      MockFile mockFile0 = new MockFile("|C_A683-@nj.wBD~Qn");
      File file0 = MockFile.createTempFile("|C_A683-@nj.wBD~Qn", "org.apache.commons.cli.HelpFormatter$1", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = null;
      Locale locale0 = Locale.CANADA;
      mockPrintWriter0.printf(locale0, "|C_A683-@nj.wBD~Qn", (Object[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "[", " | ", options1, (-2), 6041, " ] [ long ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter0.printf(locale0, "", (Object[]) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('!');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "", "", options0, 0, 2482, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      boolean boolean0 = false;
      helpFormatter0.printHelp(74, "^,T", "1", options1, "", false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("X/D^Ck%", "cmdLineSyntax not provided", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string1 = "";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "'", "", options2, (-2911), 14, " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'VEi+";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = 1231;
      String string2 = "?Z@)[ZxS";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1231, "", "?Z@)[ZxS", options0, (-2250), 74, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setOptPrefix(" ] [ long ");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "N$#!4A/'m}v4=WR5T");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // N$#!4A/'m}v4=WR5T
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 4068;
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultOptPrefix = "cq";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.ensureCapacity(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "");
      Options options1 = options0.addOption("", "usage: ", false, "");
      // Undeclared exception!
      try { 
        options1.addOption("x! \"gVKgg(HP|`mO5", false, "_/&Oq-\"Tb5!a,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'x! \"gVKgg(HP|`mO5' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Locale locale0 = Locale.FRANCE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter0.printf(locale0, "zYrH'WqH:T", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2899), "a3s>", "J=g<rq,U", options0, (-2899), (-1009), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("F]by_`r", "line.separator", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("pjFyDSYN*6");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("C?co~~TC=8ZluD", 10, 10);
      MockFile mockFile0 = new MockFile("pjFyDSYN*6", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) "pjFyDSYN*6";
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("C?co~~TC=8ZluD", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1143, (-1), "' contains an illegal character : '");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "^,T", "1", options1, "", false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("X/D^Ck%", "cmdLineSyntax not provided", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      String string0 = null;
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(file0, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.ParseException
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      helpFormatter0.defaultWidth = 74;
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "'";
      String string1 = "T=IHSMi]'BE_$";
      Option option0 = null;
      try {
        option0 = new Option("'", "T=IHSMi]'BE_$", false, "vC/X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.setLongOptPrefix(" FTYR}5xPaX68k>kkiq");
      helpFormatter0.setDescPadding(1750);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setArgName("-");
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" FTYR}5xPaX68k>kkiq", options0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-590));
      helpFormatter0.findWrapPos("1F;ZFX9P7GEW", 83, 83);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 874;
      helpFormatter0.setLeftPadding(874);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-187);
      Options options0 = new Options();
      options0.hasOption("arg");
      options0.hasOption("");
      options0.hasShortOption("#");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("1B|}cQoDz", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 22, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      int int0 = 1359;
      String string1 = "t4=";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("t4=", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("5O", (String) null, options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("~8\"yxzThg h", options0, false);
      helpFormatter0.defaultDescPad = (-187);
      Options options1 = new Options();
      options1.hasOption("arg");
      options1.hasOption("");
      options1.hasShortOption("#");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("7", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("I)G=p&q>gp6K5KV<MJ");
      String string0 = "dB4 $Ww";
      helpFormatter0.setOptPrefix("dB4 $Ww");
      int int0 = (-51);
      String string1 = "";
      String string2 = "N8@_^A_\\N";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string3 = "27Cgrb5/V7";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("\u0004Kd6a(4#", "27Cgrb5/V7", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '\u0004Kd6a(4#' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption((String) null, "-", false, "arg");
      options1.addOption(option0);
      helpFormatter0.printHelp("ITN`Y^5+_-kqn:", "ITN`Y^5+_-kqn:", options0, "ITN`Y^5+_-kqn:");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "^,T";
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      String string1 = ", ";
      // Undeclared exception!
      try { 
        options0.addOption("--", true, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "usage: ", options1, "1");
      helpFormatter0.getWidth();
      helpFormatter0.findWrapPos("1", (-1), (-2));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3652, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.setDescPadding(32);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&3|M");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding(1);
      String string0 = "mq";
      helpFormatter0.setArgName("mq");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("'xibz");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("mq", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "arg", options0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      helpFormatter0.printHelp("--", "--", options0, "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("   ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "HJ:\\`P";
      Options options0 = new Options();
      options0.hasLongOption("HJ:`P");
      helpFormatter0.printHelp("HJ:`P", "HJ:`P", options0, "");
      String string1 = "P1[H&*\\vGALY";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "P1[H&*vGALY");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // P1[H&*vGALY
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2496));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      int int1 = 0;
      String string0 = "}kh3icw:\"/";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      options0.addOption((String) null, "[", true, (String) null);
      helpFormatter0.printHelp("l 1", "arg", options0, (String) null);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1), 115);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "^,T");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "^,T", options1, "1");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(74, "^,T", "1", options1, "usage: ", false);
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("X/D^Ck%", "1", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      String string0 = "";
      mockPrintWriter0.printf((Locale) null, "", (Object[]) null);
      String string1 = null;
      String string2 = "org.apache.commons.cli.ParseException";
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(file0, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.ParseException
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2786;
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 2786, 1, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("1", "usage: ", options1, "1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getWidth();
      String string0 = "Y?;f!![umC";
      helpFormatter0.printHelp(4, "Y?;f!![umC", "1", options1, "", false);
      MockFile mockFile0 = new MockFile("@;g^#wdKlUIh.j+H");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" [ARG]");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "usage: ", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "t{4FI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Locale locale0 = new Locale("-", "", "   ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      String string1 = "";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) pipedOutputStream0;
      objectArray0[2] = (Object) "'VEi+";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = (-1215);
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1215), "J=g<rq,U", (String) null, options0, (-1215), (-2250), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 64, "R\"Q&5\"6l[RIe(x8rv-");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", " ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      File file0 = MockFile.createTempFile("usage: ", "\n", (File) mockFile1);
      mockFile0.deleteOnExit();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.setOptPrefix("");
      mockPrintWriter0.print(true);
      mockPrintWriter0.flush();
      helpFormatter0.setOptPrefix("DG1");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1182, "--");
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "VMW).r+.D_");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-616), (String) null, (String) null, options2, 74, 74, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("--", "usage: ", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1729), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim((String) null);
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "5", options0, "]G&|:Q>>#9KHD*W0", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (String) null, (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'VEi+";
      Options options0 = new Options();
      options0.addOption("arg", false, "`zNq|[V");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "'VEi+", options0, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("B'");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 64, (Options) null, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{oR\"@G Z?0PLX2)sb";
      helpFormatter0.setNewLine("{oR\"@G Z?0PLX2)sb");
      helpFormatter0.getLongOptPrefix();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "ajv[dhX9";
      helpFormatter0.setSyntaxPrefix("tUIqSFTvz/");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      int int0 = 1;
      mockPrintWriter0.append((CharSequence) "usage: ", 1, 1);
      String string0 = "[";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("\n", "-", true, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 10, "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("arg");
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", 1, 1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 64, "hVxYUx,C");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 10, (-203));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(48);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("                                                ", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.rtrim("");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "rf6UfRXBJaMD9T";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 0;
      stringBuffer0.ensureCapacity(0);
      int int1 = 1;
      helpFormatter0.renderWrappedText(stringBuffer0, int0, int1, string0);
      Options options1 = options0.addOption(string0, helpFormatter0.DEFAULT_SYNTAX_PREFIX, boolean0, string1);
      String string2 = "x! \"gVKgg(HP|`mO5";
      String string3 = "_/&Oq-\"Tb5!a,";
      Options options2 = options1.addOption(string2, boolean0, string3);
      String string4 = "V$@yK";
      helpFormatter0.printHelp(string0, string0, options2, string4);
      String string5 = "";
      int int2 = 0;
      int int3 = (-1);
      helpFormatter0.findWrapPos(string5, int2, int3);
      String string6 = "IQ_0*bc$\"Z[/Dc";
      helpFormatter0.printHelp(string6, options2, boolean0);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '!';
      StringWriter stringWriter1 = stringWriter0.append(char0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int4 = 424;
      String string7 = null;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, int4, string7);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      assertEquals("\n ", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 2089;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " :: ";
      Options options0 = new Options();
      options0.toString();
      options0.hasShortOption("+GwB/vn16Zs9myCLC");
      String string1 = null;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("arg", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", string0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
  }
}
