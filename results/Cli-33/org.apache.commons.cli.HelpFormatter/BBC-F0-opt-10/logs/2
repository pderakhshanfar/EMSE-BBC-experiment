* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-10
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 16220
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 3618367993
* Starting evolution
bbc usage percentage is: 10%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 17:46:29.061 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 603s and 156 generations, 68240 statements, best individual has fitness: 131.0
* Minimizing test suite
[MASTER] 17:57:48.991 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 201
* Number of covered goals: 200
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 149
* Number of covered goals: 134
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 53
* Number of covered goals: 53
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 478
* Number of covered goals: 443
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 70%
* Total number of goals: 46
* Number of covered goals: 32
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 149
* Number of covered goals: 132
* Generated 121 tests with total length 1740
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:58:34.859 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7084666666666667% of time used, but only 16/121 tests minimized), falling back to using all assertions
[MASTER] 17:58:53.091 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 17:59:17.798 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:17.891 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:19.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_147_tmp__ESTest.test0(HelpFormatter_147_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:59:19.778 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertNotNull(helpFormatter0);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

mockPrintWriter0.println(5438L);
assertFalse(fileDescriptor0.valid());

Options options0 = new Options();
assertNotNull(options0);

OptionGroup optionGroup0 = new OptionGroup();
assertNotNull(optionGroup0);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());

Options options1 = options0.addOptionGroup(optionGroup0);
assertSame(options0, options1);
assertSame(options1, options0);
assertNotNull(options1);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());

Options options2 = options1.addOption("", "", false, ")|'&+=@[wuu.Py");
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options1, options2);
assertSame(options1, options0);
assertSame(options2, options0);
assertSame(options2, options1);
assertNotNull(options2);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());

String string0 = "\\Zgr#+YUbuCm%*AP7";
Options options3 = options1.addOption((String) null, (String) null, true, "Zgr#+YUbuCm%*AP7");
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options1, options2);
assertSame(options1, options3);
assertSame(options1, options0);
assertSame(options3, options1);
assertSame(options3, options2);
assertSame(options3, options0);
assertNotNull(options3);
assertFalse(optionGroup0.isRequired());
assertNull(optionGroup0.getSelected());

helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4638, " ", (String) null, options3, (-1612), 4638, (String) null);

[MASTER] 17:59:23.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_162_tmp__ESTest.test0(HelpFormatter_162_tmp__ESTest.java:49)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:59:23.630 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertNotNull(helpFormatter0);
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
assertNotNull(mockPrintWriter0);

mockPrintWriter0.println(5438L);
assertFalse(fileDescriptor0.valid());

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.setArgName("-BhE1;?2h<Cdh 7");
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals("-BhE1;?2h<Cdh 7", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());

OptionGroup optionGroup0 = new OptionGroup();
assertNotNull(optionGroup0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());

Options options1 = options0.addOptionGroup(optionGroup0);
assertSame(options0, options1);
assertSame(options1, options0);
assertNotNull(options1);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());

Options options2 = options1.addOption("", "", false, ")|'&+=@[wuu.Py");
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options1, options0);
assertSame(options1, options2);
assertSame(options2, options0);
assertSame(options2, options1);
assertNotNull(options2);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());

String string0 = "\\Zgr#+YUbuCm%*AP7";
int int0 = helpFormatter0.findWrapPos(")|'&+=@[wuu.Py", 1, 3497);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals((-1), int0);
assertEquals("-BhE1;?2h<Cdh 7", helpFormatter0.getArgName());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());

Options options3 = options1.addOption((String) null, (String) null, true, "Zgr#+YUbuCm%*AP7");
assertSame(options0, options3);
assertSame(options0, options1);
assertSame(options0, options2);
assertSame(options1, options0);
assertSame(options1, options2);
assertSame(options1, options3);
assertSame(options3, options2);
assertSame(options3, options0);
assertSame(options3, options1);
assertNotNull(options3);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());

helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4638, " ", (String) null, options3, (-1612), 4638, (String) null);

[MASTER] 17:59:32.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_193_tmp__ESTest.test0(HelpFormatter_193_tmp__ESTest.java:34)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 17:59:32.768 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
assertNotNull(mockPrintWriter0);

HelpFormatter helpFormatter0 = new HelpFormatter();
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertNotNull(helpFormatter0);
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());

Object[] objectArray0 = new Object[5];
objectArray0[0] = (Object) mockFileOutputStream0;
objectArray0[1] = (Object) fileDescriptor0;
objectArray0[2] = (Object) helpFormatter0;
objectArray0[3] = (Object) comparator0;
objectArray0[4] = (Object) comparator0;
PrintWriter printWriter0 = mockPrintWriter0.format("-", objectArray0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);
assertNotNull(printWriter0);
assertEquals(5, objectArray0.length);
assertFalse(fileDescriptor0.valid());

Options options0 = new Options();
assertNotNull(options0);

helpFormatter0.printHelp(printWriter0, 1325, (String) null, "n~[_twXeaIf=wa", options0, 1325, 2701, "ccA8MA", false);

[MASTER] 17:59:50.687 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-10/tests/2
* Done!

* Computation finished
