* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-10
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 6329
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 4124206278
* Starting evolution
bbc usage percentage is: 10%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 17:47:13.465 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 174 generations, 73462 statements, best individual has fitness: 134.0
* Minimizing test suite
[MASTER] 17:58:32.905 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 201
* Number of covered goals: 200
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 149
* Number of covered goals: 135
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 52
* Number of covered goals: 52
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 478
* Number of covered goals: 440
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 61%
* Total number of goals: 46
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 149
* Number of covered goals: 135
* Generated 117 tests with total length 1759
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 17:59:18.371 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7142666666666667% of time used, but only 18/117 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 17:59:58.291 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 17:59:58.423 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:00:03.337 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_176_tmp__ESTest.test0(HelpFormatter_176_tmp__ESTest.java:162)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:00:03.339 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("arg", "U.I+en7 U)7A#mY", true, "D,S|dF'`TGt<Vq?J:t");
assertNotNull(options1);
assertSame(options0, options1);
assertSame(options1, options0);

Option option0 = new Option("arg", " ", false, "usage: ");
assertNotNull(option0);
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertFalse(option0.hasOptionalArg());
assertFalse(option0.isRequired());
assertNull(option0.getValue());
assertEquals(97, option0.getId());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasValueSeparator());
assertFalse(option0.hasArgName());
assertTrue(option0.hasLongOpt());
assertFalse(option0.hasArgs());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("usage: ", option0.getDescription());
assertEquals(" ", option0.getLongOpt());
assertFalse(option0.hasArg());
assertNull(option0.getArgName());

option0.setValueSeparator('q');
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertFalse(option0.hasOptionalArg());
assertEquals('q', option0.getValueSeparator());
assertFalse(option0.isRequired());
assertTrue(option0.hasValueSeparator());
assertNull(option0.getValue());
assertEquals(97, option0.getId());
assertEquals("arg", option0.getOpt());
assertEquals((-1), option0.getArgs());
assertFalse(option0.hasArgName());
assertTrue(option0.hasLongOpt());
assertFalse(option0.hasArgs());
assertEquals("usage: ", option0.getDescription());
assertEquals(" ", option0.getLongOpt());
assertFalse(option0.hasArg());
assertNull(option0.getArgName());

StringBuffer stringBuffer0 = new StringBuffer();
assertNotNull(stringBuffer0);
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer0.length());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertNotNull(helpFormatter1);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter1.defaultWidth);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals(74, helpFormatter1.getWidth());

HelpFormatter helpFormatter2 = new HelpFormatter();
assertNotNull(helpFormatter2);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter2.defaultWidth);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(1, helpFormatter2.getLeftPadding());

HelpFormatter helpFormatter3 = new HelpFormatter();
assertNotNull(helpFormatter3);
assertEquals(3, helpFormatter3.defaultDescPad);
assertEquals(74, helpFormatter3.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter3.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(helpFormatter3.equals((Object)helpFormatter1));
assertFalse(helpFormatter3.equals((Object)helpFormatter0));
assertFalse(helpFormatter3.equals((Object)helpFormatter2));
assertEquals("-", helpFormatter3.getOptPrefix());
assertEquals("--", helpFormatter3.getLongOptPrefix());
assertEquals(74, helpFormatter3.getWidth());
assertEquals(1, helpFormatter3.getLeftPadding());
assertEquals("\n", helpFormatter3.getNewLine());
assertEquals(3, helpFormatter3.getDescPadding());
assertEquals("arg", helpFormatter3.getArgName());
assertEquals(" ", helpFormatter3.getLongOptSeparator());
assertEquals("usage: ", helpFormatter3.getSyntaxPrefix());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
assertNotNull(mockPrintWriter0);

helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1805), "\n", "jCKg,a;L>5,", options1, (-916), 74, " ", false);

[MASTER] 18:00:06.571 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_179_tmp__ESTest.test0(HelpFormatter_179_tmp__ESTest.java:96)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 18:00:06.572 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());

Options options0 = new Options();
assertNotNull(options0);

Options options1 = options0.addOption("arg", "U.I+en7 U)7A#mY", true, "D,S|dF'`TGt<Vq?J:t");
assertNotNull(options1);
assertSame(options0, options1);
assertSame(options1, options0);

Option option0 = new Option("arg", " ", false, "usage: ");
assertNotNull(option0);
assertEquals((-1), Option.UNINITIALIZED);
assertEquals((-2), Option.UNLIMITED_VALUES);
assertFalse(option0.hasOptionalArg());
assertNull(option0.getValue());
assertFalse(option0.isRequired());
assertFalse(option0.hasArgs());
assertNull(option0.getArgName());
assertEquals(" ", option0.getLongOpt());
assertFalse(option0.hasArg());
assertEquals("usage: ", option0.getDescription());
assertFalse(option0.hasArgName());
assertEquals((-1), option0.getArgs());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals(97, option0.getId());
assertFalse(option0.hasValueSeparator());
assertTrue(option0.hasLongOpt());
assertEquals("arg", option0.getOpt());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertNotNull(helpFormatter1);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(3, helpFormatter1.getDescPadding());

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
assertNotNull(mockPrintStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
assertNotNull(mockPrintWriter0);

helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "jCKg,a;L>5,", "arg", options0, 1365, 74, "\n", false);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, helpFormatter0.defaultDescPad);
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertNotSame(helpFormatter0, helpFormatter1);
assertSame(options0, options1);
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(74, helpFormatter0.getWidth());
assertFalse(fileDescriptor0.valid());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-opt-10/tests/3
* Done!

* Computation finished
