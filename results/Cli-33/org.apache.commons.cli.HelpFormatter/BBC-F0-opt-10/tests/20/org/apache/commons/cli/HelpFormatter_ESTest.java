/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:23:34 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultLongOptPrefix = "NO_ARGS_ALLOWED";
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 44, ";Z{U[]eq(#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "usage: ");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("", " ");
      mockFile0.toURI();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2283, "", options0);
      helpFormatter0.printOptions(mockPrintWriter0, 2283, options2, 2283, 2283);
      helpFormatter0.renderOptions((StringBuffer) null, 2283, options2, 248, 2283);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "n1<vjrx~;A";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "n1<vjrx~;A");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "wde&[ITIU");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append('8');
      mockPrintWriter1.println("org.apache.commons.cli.AlreadySelectedException");
      mockPrintWriter1.append('8');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Option option0 = new Option("", "e/Z_z~x)(|K", true, "");
      option0.setArgName("");
      options0.addOption(option0);
      helpFormatter0.printHelp("*,XzP*R4I[", "org.apache.commons.cli.AlreadySelectedException", options0, "", true);
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "-");
      option0.setArgName("--");
      options0.addOption(option0);
      helpFormatter0.printHelp(">J%4,%}df(N", ">J%4,%}df(N", options0, ">J%4,%}df(N", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("pyZM", false, "pyZM");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      option1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2581);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("lKy.='>TKh=`x", "", (Options) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-375);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "' contains an illegal character : '", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("");
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-375), "' contains an illegal character : '", "", options2, "' contains an illegal character : '");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", "~\u0004y3L>W\rF", (Options) null, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 3183, 63);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append(0.0);
      int int0 = (-5241);
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-5241), (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, ":t^68QxNsL*8, fhVL");
      Options options2 = options1.addOption("wXhwB", "\n", true, "arg");
      helpFormatter0.printHelp("m!EqUM", "", options2, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 271, ":t^68QxNsL*8, fhVL", options2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setNewLine("");
      helpFormatter0.getArgName();
      helpFormatter0.defaultSyntaxPrefix = "5k";
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 634, (-2));
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      mockPrintWriter0.append('8');
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2829, 2829, "~B?qt[]vG:oE.n");
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "<");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("~B?qt[]vG:oE.n", options2, false);
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "org.apache.commons.cli.AlreadySelectedException");
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, (-3010), options2, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 655;
      helpFormatter0.defaultLeftPad = 655;
      helpFormatter0.defaultLeftPad = (-1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append(3288);
      helpFormatter0.renderWrappedText(stringBuffer0, 934, 14, "org.apache.commons.cli.Option");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "usage: ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ky~xMM,P2-P{q", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options1);
      mockPrintWriter0.println();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "]", "", options1, 113, (-1177), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 827, (-1798));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getArgName();
      String string0 = " ] [ long ";
      int int0 = 1;
      helpFormatter0.findWrapPos(" ] [ long ", 1, 1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile((String) null, "e");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockFileOutputStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) locale0;
      objectArray0[7] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "8tU_\"7f=7gP~lfFWu", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "_l<Py8hbQ YL", (String) null, options0, 0, (-1), "=[", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "", options1);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "vf>", (Options) null, "vf>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1753, "-", "-", options0, (-3053), (-3053), "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      option0.clearValues();
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2914, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding((-457));
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("usage: ", "usage: ", options0, " ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1929);
      helpFormatter0.getLongOptPrefix();
      String string0 = "KDqWh.*.: t[iLu$";
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.rtrim("KDqWh.*.: t[iLu$");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      stringWriter1.write("a");
      stringWriter1.append('A');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1929), (-1929), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "m!wEqUM*");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.OptionGroup", options0, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.createPadding(74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-");
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.setDescPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, (Options) null, 1848, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.createPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 55, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "m!wEqUM*");
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Option option0 = new Option((String) null, "The option '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "XCp!EX/-fF3h]u");
      options1.addOptionGroup(optionGroup1);
      optionGroup0.setSelected(option0);
      optionGroup1.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Qh-");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      mockPrintWriter0.print(':');
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 464, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      stringBuffer0.ensureCapacity((-124));
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 85, 74, " ");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.findWrapPos("ffBu+`jRb?R^iq", 85, 58);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "--";
      objectArray0[1] = (Object) "ffBu+`jRb?R^iq";
      objectArray0[2] = (Object) stringBuffer1;
      objectArray0[3] = (Object) "ffBu+`jRb?R^iq";
      objectArray0[4] = (Object) " ";
      objectArray0[5] = (Object) "--";
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(" ", objectArray0);
      stringBuffer1.append((StringBuffer) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 85, "K", " ", (Options) null, 32, 13, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("9");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2662), "9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.close();
      options0.addOption("arg", "-", false, "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-3063), (String) null, "' was specified but an option from this group ", options0, (-3063), 5279, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.close();
      int int0 = (-2572);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-2572), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "m!wEqUM*");
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options1 = new Options();
      Options options2 = options1.addOption("", "fsWQV4z]&vuN/", false, "*9~2fPLzatEk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "m!wEqUM*", "-", options2, 32, 532, "-", false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, 3, "7]Na//wBv");
      helpFormatter0.createPadding(2);
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "  ");
      helpFormatter0.createPadding(1);
      Options options1 = new Options();
      options1.addOption((String) null, "arg", true, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "", options0, 44, 3, (String) null, true);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("sX", "*9~2fPLzatEk", true, "usage: ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "-", options0, "", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter2.renderWrappedText(stringBuffer0, 3044, (-4924), " ");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(", ");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4924), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      Options options1 = options0.addOption("sX", "*9~2fLzatEk", false, "usage: ");
      options1.getOption(", ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "-", options1, 1, 1, "arg", false);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(filterOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter2.append('X');
      // Undeclared exception!
      helpFormatter0.printOptions(printWriter0, 1, options1, 3, 635);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      mockPrintWriter0.append('h');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4924), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      Options options1 = options0.addOption("sX", "*9~2fPLzatEk", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "-", options0, "", false);
      options1.addOption((String) null, "arg", false, ".T:},rrge55");
      helpFormatter1.printHelp("7.F~Qi", "--", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "m!wEqUM*");
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      helpFormatter0.rtrim("--");
      helpFormatter0.rtrim("m!wEqUM*");
      helpFormatter0.printOptions(mockPrintWriter0, 16, options0, 16, 16);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      helpFormatter0.getLongOptSeparator();
      boolean boolean0 = true;
      helpFormatter1.printHelp(74, "--", "usage: ", options0, "", true);
      helpFormatter0.printHelp(" ", options0, false);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.printHelp("tdmrV2K@0", options0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.toString();
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-790), options1, (-3604), 9);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "Qvts(Nb2.-/K", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      mockPrintWriter0.append('h');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4924), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      Options options1 = options0.addOption("sX", "*9~2fPLzatEk", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "sX", "", options1, 2841, (-3845), "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      mockPrintWriter0.append('h');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4924), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      Options options1 = options0.addOption("sX", "*9~2fPLzatEk", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "-", options0, "", false);
      Options options2 = options1.addOption("Vr8uTEP", "--", true, "usage: ");
      helpFormatter0.printHelp("-", "' contains an illegal character : '", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption((String) null, "", false, "s@dLO~");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = new Locale("arg", "h", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("+", objectArray0);
      helpFormatter1.printUsage(printWriter1, (-1), "[ Options: [ short ", options2);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-494), "org.apache.commons.cli.OptionValidator", "org.apache.commons.cli.OptionValidator", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1637);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "^Ttag5Da[%P(qi<@+";
      options0.addOption("", (String) null, false, "^Ttag5Da[%P(qi<@+");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      int int0 = 2794;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 2794, "G,;xRw&n,D5");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      Object object0 = new Object();
      printWriter0.print(object0);
      helpFormatter0.printWrapped(printWriter0, 1024, 3, "\n");
      String string0 = helpFormatter0.createPadding(1024);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(".S", string0, true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.S' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3862), "bR6s0Rn", "bR6s0Rn", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, (String) null);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySeletedExcepion", string0, options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "wde&[ITIU");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      printWriter0.println("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "", options0, string0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1517, " 6\"Xz,5", options1);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "", " 6\"Xz,5", options0, 1, 1024, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      Options options1 = options0.addOption("Rgx", "Y}ajC'Q}", false, "usage: ");
      options1.addOption("", "Rgx", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ] [ long ", "<", options2, "org.apache.commons.cli.AlreadySelectedException", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", "org.apache.commons.cli.AlreadySelectedException", true, "(I");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "                                  ", "&9s[};iNA0Yb", options2, 27, 74, "--", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      int int0 = 1024;
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, false, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.printHelp(string0, string0, options1, "org.apache.commons.cli.AlreadySelectedException", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 1676, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      mockPrintWriter0.append('h');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4961), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", "usage: ", true, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1506, "usage: ", "\n", options1, 107, 1, "usage: ", true);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int0 = 26;
      helpFormatter0.setLeftPadding(2829);
      Options options0 = new Options();
      mockPrintWriter0.println((float) 2829);
      int int1 = 35;
      helpFormatter0.setArgName("@ao? wl");
      options0.toString();
      boolean boolean0 = false;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 26, "@ao? wl", "@ao? wl", options0, 26, 35, "   ", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1710), "   ", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|>/D[(YK0]9J,kZ";
      Options options0 = new Options();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-4063), "|vEG*f.!N`H,Gd", "|>/D[(YK0]9J,kZ", options0, 114, 114, "|vEG*f.!N`H,Gd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "arg", false, "");
      StringBuffer stringBuffer0 = new StringBuffer("txf`=x&:q");
      helpFormatter0.renderWrappedText(stringBuffer0, 2829, 2829, "Y1J1Zhr#e?KiMpIU");
      Options options1 = new Options();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      mockPrintWriter0.append('8');
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 2829, 2829, "~|Boqvt[](G:oE.n");
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option((String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", true, "<");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp("~|Boqvt[](G:oE.n", options2, false);
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "org.apache.commons.cli.AlreadySelectedException");
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "~p");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      String string0 = "";
      helpFormatter1.printHelp(74, "--", "usage: ", options0, "", true);
      helpFormatter0.printHelp(" ", options0, false);
      // Undeclared exception!
      helpFormatter1.printHelp("-", options0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      Options options1 = options0.addOption("Rgx", "Y}ajC'Q}", true, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(", ", "'2>-oR3Sw9f", options1, " ", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      options0.addOption("", (String) null, false, "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultOptPrefix = "";
      String string1 = "(Q";
      String string2 = "";
      Options options0 = null;
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("(Q", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      int int0 = 1024;
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      String string0 = "hH{%0{jkU u}";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1024, "", "hH{%0{jkU u}", options0, "iaz\"h0fT", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "9'l7");
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      Options options4 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ Options: [ short ", options4);
      int int0 = helpFormatter0.defaultLeftPad;
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      options3.addOption("arg", "", false, "-");
      helpFormatter0.printHelp("usage: ", "--", options1, " ", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      mockPrintWriter0.append('h');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4961), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      Options options1 = options0.addOption("sD", "*9~2fPLzatEk", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "-", options1, 1, 1, "arg", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "9'l7");
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      Options options4 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ Options: [ short ", options4);
      helpFormatter0.getLeftPadding();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      options3.addOptionGroup(optionGroup0);
      int int0 = 4444;
      helpFormatter0.printHelp(74, "D:.i", "--", options3, "arg", true);
      helpFormatter0.printHelp("--", options3, true);
      int int1 = (-671);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (-2), options3, 1122, 107);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D'$";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = new Locale("yMwq6+1PT,52");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "D'$";
      objectArray0[1] = (Object) "D'$";
      objectArray0[2] = (Object) (byte)64;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) (byte)3;
      objectArray0[5] = (Object) "yMwq6+1PT,52";
      objectArray0[6] = (Object) (byte)64;
      objectArray0[7] = (Object) "D'$";
      Object object0 = new Object();
      objectArray0[8] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "#+eXRCbu(", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2615), "#+eXRCbu(", "MENS >&L9", (Options) null, 2024, 2, "MENS >&L9", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "line.separator", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, (String) null, "arg", options1, 1, 1, "ydieuJ*JK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      helpFormatter0.createPadding(34);
      Options options0 = new Options();
      options0.addOption("Rgx", "Y}ajC'Q}", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "-", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-277));
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(68);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "4P@(w(o])";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "4P@(w(o])", "4P@(w(o])", options0, "?8Ei&+!cO,1wH$");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2536), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "9'l7");
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ Options: [ short ", options3);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('$');
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1), 392, "[ Options: [ short ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "", options0, string0, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      options0.addOption("", (String) null, true, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", (String) null, options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      helpFormatter0.printHelp(20, "4P@(w(o])", "4P@(w(o])", options0, "?8Ei&+!cO,1wH$");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "}_?],k");
      Options options1 = new Options();
      helpFormatter0.printHelp("4}/", "org.apache.commons.cli.HelpFormatter", options1, "7|HH/sb3Z4aa=w+", true);
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 4, ".G=4OC].@");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ", ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-213);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-213), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName(string0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3001), "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      printWriter0.println("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "A CloneNotSupportedException was thrown: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "", options0, string0, false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1517, " 6\"Xz,5", options1);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('>');
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      stringWriter0.flush();
      Options options0 = new Options();
      stringWriter1.write(0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "--", "--", options0, 1, 1597, "--");
      options0.hasOption("Ak}DG)");
      options0.helpOptions();
      helpFormatter0.printHelp(" msXNm", "--", options0, "-");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine(" ");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "arg");
      helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      helpFormatter2.setOptPrefix("r_/2!lR;i|`#@");
      helpFormatter2.getSyntaxPrefix();
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      mockPrintWriter0.append('h');
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte) (-1), ", ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-1), (-4961), ", ");
      helpFormatter0.createPadding((byte)92);
      Options options0 = new Options();
      options0.addOption("sD", "*9~2fPLzatEk", false, "usage: ");
      helpFormatter0.printHelp("                                                                                            ", "fA8${=", options0, "fA8${=", false);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4961));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "} ";
      int int0 = (-2147);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2147), (Options) null, 1288, 1288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "9'l7");
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      Options options4 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ Options: [ short ", options4);
      helpFormatter0.getLeftPadding();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.printHelp(74, "D:.i", "--", options3, "arg", true);
      helpFormatter0.printHelp("--", options3, true);
      // Undeclared exception!
      try { 
        stringBuffer0.delete(4444, (-671));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options1 = options0.addOption(option0);
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "9'l7");
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      optionGroup1.setSelected(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ Options: [ short ", options3);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options2, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.setOptionComparator(comparator0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      options0.getOption("@|x.6AwP");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "ZOb;c!L", "--", options0, 31, 31, "ZOb;c!L");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 1676;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3365, 74, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1759), "");
      String string0 = "|>/D[(YK0]9J,kZ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-52), (-52), "s_?],k");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 53, 53, "dEOQUD?C`X!Ug>#w}>");
      helpFormatter0.rtrim("6J)FI<o\"*");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.findWrapPos("", (-2), 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      int int1 = 487;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "#iI}@?";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("#iI}@?", "arg", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#iI}@?' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 333, options0, 0, 0);
      helpFormatter0.setDescPadding((-2317));
      options0.helpOptions();
      helpFormatter0.getLongOptSeparator();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      String string1 = ";|\\u~Da')eVCIyk=2}";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2317), (String) null, "S@w]wU^DC", options0, string1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1821, 1615);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      mockPrintWriter0.print((-1744L));
      objectArray0[1] = (Object) locale0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Locale locale1 = Locale.KOREA;
      locale1.getExtension('d');
      locale1.stripExtensions();
      locale0.getDisplayLanguage(locale1);
      int int0 = (-2410);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2410), (Options) null, (-2410), (-2410));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 661;
      helpFormatter0.setLeftPadding(661);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      String string0 = "";
      stringBuffer0.appendCodePoint(31);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 661, 661, "");
      // Undeclared exception!
      try { 
        stringBuffer1.insert(661, (CharSequence) "usage: ", 74, (-1056));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 661
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4617);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-4617), "IGB]", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.createPadding(0);
      String string0 = "6%f*}FM'";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("m\u0003i,OF2oQ)`-WkP", "", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'm\u0003i,OF2oQ)`-WkP' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("]JX:_e'H\"Lu?O!/)");
      helpFormatter0.setLongOptPrefix("]JX:_e'H\"Lu?O!/)");
      helpFormatter0.getDescPadding();
      String string0 = "";
      File file0 = MockFile.createTempFile("A&D@M|q<mmewl5g@", "");
      MockFile mockFile0 = new MockFile(file0, "-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setLongOptSeparator(" :: ");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, 3, "}_?],k");
      helpFormatter0.setNewLine((String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-167), 0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "usage: ");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 9, "--", "--", options2, (-1036), 3984, "fICdQlP%PH=.V3>'WC");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      int int0 = (-1);
      helpFormatter0.defaultWidth = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "arg", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('>');
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      stringWriter0.flush();
      Options options0 = new Options();
      int int0 = 0;
      stringWriter1.write(0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "--", options0, 1, 1304, "--");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "O$ViM";
      MockPrintStream mockPrintStream0 = new MockPrintStream("O$ViM");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.print('\\');
      mockPrintStream0.println(false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      int int0 = 1543;
      Options options0 = new Options();
      mockPrintStream0.print((long) 3);
      int int1 = (-2606);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1543, "O$ViM", "O$ViM", options0, (-2606), (-2606), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      String string0 = "CTSB8\"Q";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "CTSB8\"Q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CTSB8\"Q
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("`,|WR\"o1Gvyt");
      Comparator<Object> comparator0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("--", "Aebvo-SG>0", true, "1'V1+lv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "-";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "nXn";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "]";
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      stringBuffer0.reverse();
      int int1 = 2846;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 2846, "0dqXM3AWyv_4f+#");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      PrintWriter printWriter0 = mockPrintWriter0.append('8');
      helpFormatter0.printWrapped(printWriter0, 1024, 1676, "org.apache.commons.cli.AlreadySelectedException");
      String string0 = helpFormatter0.createPadding(1676);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "A CloneNotSupportedException was thrown: ");
      helpFormatter0.printHelp(string0, string0, options1, "org.apache.commons.cli.AlreadySelectedException", false);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(", ");
      helpFormatter0.getLongOptSeparator();
      assertEquals(", ", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      Options options1 = options0.addOption(option0);
      String string0 = "9'l7";
      option0.setValueSeparator('w');
      Options options2 = options1.addOption("", "", false, "9'l7");
      helpFormatter0.setSyntaxPrefix("");
      options0.hasOption("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOption((String) null);
      options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(false);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("[ Options: [ short ", options3);
      helpFormatter0.getLeftPadding();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 74, options2, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[ Options: [ short ");
      int int0 = 2929;
      helpFormatter0.setLeftPadding(2929);
      String string0 = "";
      try { 
        MockURI.URI(" ", "", "qH[", 74, "[ARG...]", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI:  ://@qH[:74%5BARG...%5D?#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = "'";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "'";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter1.format("'", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 397, "'");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("\n", "y_}^S9zi][Ch", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      String string0 = "xSy{>&#.#4UF";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option(",2o*^e](U0nQh3:Fj", false, "xSy{>&#.#4UF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ',2o*^e](U0nQh3:Fj' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }
}
