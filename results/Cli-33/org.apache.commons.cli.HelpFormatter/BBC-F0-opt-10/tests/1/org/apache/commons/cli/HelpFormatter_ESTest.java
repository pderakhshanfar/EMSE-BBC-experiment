/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 17:58:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URL;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "f`,nrl4T(H},ju", true, "-");
      option0.setArgName("\n");
      option0.setArgName("");
      Options options0 = new Options();
      options0.addOption(option0);
      helpFormatter0.printHelp(16, "f`,nrl4T(H},ju", "", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("JNhA)Lw &", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.createPadding(0);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", true, "usage: ");
      option0.setArgName("usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "arg", options1, "--", true);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.rtrim("' contains an illegal character : '");
      helpFormatter0.renderOptions((StringBuffer) null, 24, options0, 77, 3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("--", "J4D?Sw^gwT>5G[z=C.", options1, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, (-2040), "J4D?Sw^gwT>5G[z=C.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("6}Gr7avgy");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("K9^");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) helpFormatter0.optionComparator;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "5QP=\"T\"vO@Ru7@", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("J:2i3", "J:2i3", (Options) null, "J:2i3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-4965));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("0f", " ", true, "-");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 13, (-784), "6e7/Z*W");
      helpFormatter0.printHelp("0f", "CiGYmfbs", options1, "org.apache.commons.cli.OptionGroup", true);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(103);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-197), "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-197), options0, (-2), (-916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "arg", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 123, ":>rg_2-FZ%|%5\"5hIQ", ":>rg_2-FZ%|%5\"5hIQ", options1, 9, 3328, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "@!JB^t@8M";
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "usage: ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-484), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasLongOption(" ");
      helpFormatter0.printHelp(3, "S2dL&rlOl3<G", "usage: ", options0, "S2dL&rlOl3<G");
      helpFormatter0.findWrapPos("S2dL&rlOl3<G", 3, 3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderOptions(stringBuffer0, 2020, options0, 460, 3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      option0.setType(optionGroup0);
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("'?~oYLQ", "-", options1, "o=x6'4a\"", false);
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("arg", 3, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 19, options0, (-2977), (-3047));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "--";
      MockFile mockFile0 = new MockFile((File) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = ":M>1yaBk-|C,@8$Jle";
      MockFile mockFile1 = new MockFile("usage: ", ":M>1yaBk-|C,@8$Jle");
      mockFile0.renameTo(mockFile1);
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      String string2 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      int int0 = 13;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("U^<i$U`lf'I\"_K>J;M", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'U^<i$U`lf'I\"_K>J;M' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("A");
      Options options1 = options0.addOption("arg", true, "A");
      helpFormatter0.printHelp("arg", options1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("--", "", options1, " ", true);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "y0J8", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cNS7W^v@Jj}j", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup1.setRequired(true);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "--", options0, "\n", true);
      helpFormatter1.getOptPrefix();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultDescPad = 45;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "-", options0, 1, 45, (String) null, true);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultWidth = (-1560);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      optionGroup0.addOption(option0);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", "C\"ECfd}B\"N%MC%C^/U", options0, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("-");
      StringWriter stringWriter1 = stringWriter0.append('d');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1630), "", "", options0, (-787), (-1630), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "--";
      String string1 = ".BW";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-117), options0, 63, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 3, options0, 74, 44);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 168, 74, "arg");
      helpFormatter0.renderOptions(stringBuffer2, 1, options0, 3, 168);
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2127, " [ARG]", ">z?~Z\"19B", options1, 13, 13, ", ", false);
      options1.toString();
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(3);
      helpFormatter0.getNewLine();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp("}(q7*EP", "C\"ECfd}B\"N%MC%C^/U", options0, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-2), "usage: ", "", options0, "})J6J/fN~", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", false, "usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      optionGroup0.addOption(option1);
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("y", "[ Options: [ short ", options0, "", true);
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-6068), "Mz\"k70>iu", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1, "Mz\"k70>iu", options0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockFile0.toURL();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter0.printf(" ", objectArray0);
      int int0 = 1206;
      Options options0 = new Options();
      mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 7, "org.apache.commons.cli.Option", "", options0, 46, (-3142), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-299);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "arg", "", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "y", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "w7)", "cNS7W^v@Jj}j", (Options) null, ":9n-hG-R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)76;
      byte byte0 = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-2);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding((byte)76);
      helpFormatter0.getNewLine();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b0A|", "]", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.getOptionGroups();
      options0.hasShortOption("-");
      options0.addOption((String) null, "org.apache.commons.cli.HelpFormatter", false, "");
      helpFormatter0.printHelp(3, "v~[ z;jI9%=", ">v", options0, "org.apache.commons.cli.HelpFormatter$1");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultDescPad = 45;
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      options1.addOption((String) null, "DRFp", true, "\n");
      helpFormatter1.printHelp("lHzd_hq&PBA7$'", "HV9sd!QL[#2u", options1, "]", true);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("org.apache.commons.cli.ParseException");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-507);
      MockFile mockFile0 = new MockFile("T");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "p", options0);
      helpFormatter0.setWidth(44);
      helpFormatter0.setArgName("]");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "yDU|e`Ao\"qku_xvlv");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      Options options2 = options0.addOption(option0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options3 = options1.addOption("y", (String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("-", "{", options2, (String) null, false);
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "DRFp");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "]");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(1605);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options2.getOption("org.apache.commons.cli.OptionGroup");
      boolean boolean0 = false;
      options1.hasShortOption(" [ARG]");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLeftPadding((-115));
      String string0 = "$2";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" [ARG]", " [ARG]", options2, "$2", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 47, 47, "\n");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\"", "-", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      String string0 = null;
      options0.addOption("arg", "GT9dvvg[LC", false, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "org.apache.commons.cli.HelpFormatter", options0, "Vn@sFzpWV~dvf?^0{E", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Mz\"k70>iu", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("arg", "arg", true, "YddJ");
      helpFormatter0.setNewLine("ps\"y5Yok(E`{>;z?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionValidator");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.HelpFormatter", "lJacp ", options0, 1, 48, "ps\"y5Yok(E`{>;z?", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.setArgName("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9!<m4xDmG<KotU}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append('Y');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 47, 2147, "]yIjH");
      helpFormatter0.printOptions(mockPrintWriter0, 2147, options0, 47, 47);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      String string0 = null;
      Options options1 = options0.addOption((String) null, "G+g+aL-Y:)4JO)G}8", true, "--");
      helpFormatter0.printHelp("l>iJ", (String) null, options1, "-", false);
      StringBuffer stringBuffer0 = new StringBuffer("y~RJ#I;");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "org.apache.commons.cli.Option");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options2.addOption((String) null, "", false, " [ARG]");
      helpFormatter0.printHelp((-1), "t1hi", "org.apache.commons.cli.Util", options0, " [ARG]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("K1q%~Q@~}iWdU^");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockFile0.toURL();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "gv,j'", (String) null, options0, 1206, 1206, "gv,j'", false);
      options0.toString();
      helpFormatter0.printHelp("<", options0);
      PrintWriter printWriter1 = mockPrintWriter0.format("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", objectArray0);
      helpFormatter0.printHelp(printWriter1, 1206, "eLKC5XG", "g%wc 7~w;trQ#=oPB ", options0, 2, 13, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultDescPad = 45;
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "DRFp", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2), "--", "arg", options1, 32, 43, "9oE\"f|ff~K~McKIjh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      options0.addOption(option0);
      options0.hasShortOption(" [ARG]");
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.setLeftPadding((-115));
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-115));
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append('V');
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 83, (-4756), "-");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      optionGroup0.addOption(option0);
      options2.addOption("arg", "", false, (String) null);
      helpFormatter0.printHelp("G+g+aL-Y:)4JO)G}8", " [ARG]", options0, "   ", false);
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("XlnJaHj");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.rtrim("~*;n``^X*+~srT1K9j");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultDescPad = 45;
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "DRFp", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("usage: ", "-;ii@\"m7+Z~l3&p", options3, "-", true);
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, 3151, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3151, "-");
      helpFormatter2.getLongOptPrefix();
      helpFormatter0.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 59, "laIVe~K^m__");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      helpFormatter0.rtrim("--");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("HNv");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      Options options3 = options2.addOption("HNv", "-", false, "]");
      helpFormatter0.printHelp(" [ARG]", "]z5i", options3, "]z5i", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setLeftPadding(2815);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#BcX/H,P?4=DWQvdlB", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "8R ]i+,[", " [ARG]", options3, 577, 2815, "\n", true);
      helpFormatter0.findWrapPos("]z5i", 577, (-1));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      int int0 = 1217;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "MA/g!x?+{(N&%/G");
      Option option0 = null;
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.rtrim((String) null);
      int int0 = (-1078);
      helpFormatter0.findWrapPos("-", (-1078), 74);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        options0.addOption("\n", "arg", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = (-543);
      helpFormatter0.findWrapPos("dZM;fL <~\"", (-3508), (-3508));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("dZM;fL <~\"");
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "|=t@!Tx7V<OiykAy", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      mockFile0.toURL();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "cmdLineSyntax not provided";
      mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      file0.getCanonicalPath();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "??J.y)Jtm*";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 321, "", "??J.y)Jtm*", options0, 321, 2200, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.setLeftPadding((-115));
      helpFormatter0.getNewLine();
      String string0 = "";
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      int int0 = (-2174);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2174), "\n", "JCtnidxhc>:f/", options1, 34, 91, "|v?.o8Hnoz07", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = (-543);
      helpFormatter0.findWrapPos("dZM;fL <~\"", (-3508), (-3508));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("dZM;fL <~\"");
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "|=t@!Tx7V<OiykAy", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0.optionComparator;
      objectArray0[1] = (Object) "cmdLineSyntax not provided";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.format("dZM;fL <~\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-179), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      URL uRL0 = mockFile0.toURL();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "k0jC.}5[@d'^WN?M#";
      objectArray0[2] = (Object) uRL0;
      objectArray0[3] = (Object) uRL0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) uRL0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) "k0jC.}5[@d'^WN?M#";
      objectArray0[8] = (Object) uRL0;
      mockPrintWriter0.printf("k0jC.}5[@d'^WN?M#", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1206, (String) null, "", options0, 1206, 7, "B%Aj6blI", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      helpFormatter0.printHelp(printWriter0, 1176, "  ", "", options0, 1176, 51, "V~6`q#-HuSDU^", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("", 37, 9);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 137, "-i2eIwOR35S~}_", "'PCE", options0, (-4968), 60, "'PCE", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      optionGroup0.addOption(option0);
      String string0 = null;
      options0.hasOption((String) null);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.printHelp(" [ARG]", "", options3, "", false);
      helpFormatter0.defaultDescPad = (-1);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("NO_RG_ALOWED", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("   ", options0, true);
      helpFormatter1.setOptPrefix("--");
      helpFormatter1.setOptPrefix("org.apache.commons.cli.Option");
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1910));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      options2.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.setLongOptPrefix("]z5i");
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.printHelp("g$u.CnAk.1Pp4su)p3/", options3, true);
      helpFormatter0.setOptPrefix("t_/,~Tm.");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.createPadding(74);
      helpFormatter0.setLeftPadding(137);
      helpFormatter0.printHelp(137, "]", " [ARG]", options1, "]z5i", false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      options2.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.setLongOptPrefix("]z5i");
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.printHelp("g$u.CnAk.1Pp4su)p3/", options3, false);
      helpFormatter0.setOptPrefix("t_/,~Tm.");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.createPadding(74);
      helpFormatter0.setLeftPadding((-2638));
      StringBuffer stringBuffer0 = new StringBuffer("]z5i");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 2323, "--");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2638), ";pJs)O}$96T", "]", (Options) null, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      options1.addOption((String) null, (String) null, true, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 3, 3151, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3151, "-");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 3, ">3s ");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.printHelp(" [ARG]", "]z5i", options3, "]z5i", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setLeftPadding(2815);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#BcX/H,P?4=DWQvdlB", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.append('');
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "8R ]i+,[", " [ARG]", options3, 577, 2815, "\n", true);
      helpFormatter0.findWrapPos("]z5i", 577, (-1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      File file0 = MockFile.createTempFile("nP;", "b&Msox=wDl|G/`%D8", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "$I\"UDh}scALHILmkFi ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[4] = (Object) "nP;";
      objectArray0[5] = (Object) "nP;";
      mockFile0.toURL();
      mockPrintWriter0.printf("--", objectArray0);
      helpFormatter0.setLongOptSeparator("~)/}'50B|bW^V_\"M");
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "nP;", true, "$I\"UDh}scALHILmkFi ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "$I\"UDh}scALHILmkFi ";
      Object object0 = new Object();
      objectArray0[3] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[4] = (Object) "nP;";
      objectArray0[5] = (Object) "nP;";
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      String string0 = " ";
      String string1 = "";
      options0.addOption("arg", "", true, " ");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "usage: ", " ", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.printHelp(" [ARG]", "]z5i", options3, "]z5i", false);
      helpFormatter0.defaultDescPad = (-1);
      option0.setType(options2);
      helpFormatter0.findWrapPos("[ Options: [ short ", 577, 577);
      helpFormatter0.setLeftPadding(2815);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), (String) null, "t@o!)\"u(RfL)ZT", options2, "e2;mV", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "line.separator");
      options2.addOption(option0);
      options2.hasShortOption("]");
      optionGroup0.addOption(option0);
      options1.hasOption("l>iJ");
      Options options3 = options2.addOption((String) null, "G+g+aL-Y:)4JO)G}8", true, "");
      helpFormatter0.printHelp("l>iJ", (String) null, options3, "-", false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.printHelp(" [ARG]", "]z5i", options3, "]z5i", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setLeftPadding(2815);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#BcX/H,P?4=DWQvdlB", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('');
      helpFormatter0.printHelp(printWriter0, 577, "7r$Qd{PY", "l&#kQM", options0, 10, 2815, "l&#kQM", false);
      helpFormatter0.findWrapPos("l&#kQM", 77, 577);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 34, "cs");
      Options options0 = new Options();
      helpFormatter0.printHelp("--", "--", options0, "f=]&k2f=X`1i");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("C)R]\rv&;vQ4o$Je+", "", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object object0 = new Object();
      mockFile0.toURL();
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-36), "C)R]\rv&;vQ4o$Je+", "J(rXs>fQE^havYj;s", options0, (-866), (-866), "X2)@`D&N_|y'=x>_", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, (-4968), " | ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockFile0.toURL();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.Option";
      objectArray0[1] = (Object) "org.apache.commons.cli.Option";
      objectArray0[2] = (Object) mockFile0;
      mockPrintWriter0.printf(" ", objectArray0);
      Options options0 = new Options();
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 13, "$v,j'", (String) null, options0, 1206, 1206, "$v,j'", false);
      options0.toString();
      helpFormatter0.printHelp("<", options0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3), (-1), " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1560, "-", "-", (Options) null, "t3flNwrkP*|o~?B7", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 324;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string0 = " :: ";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(324, " :: ", " :: ", (Options) null, " :: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(">I%xz=i}<iZa1", options0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, (-3111));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-2602), 111, "J'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      File file0 = MockFile.createTempFile("nP;", "b&Msox=wDl|G/`%D8", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "$I\"UDh}scALHILmkFi ";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[4] = (Object) "nP;";
      objectArray0[5] = (Object) "nP;";
      mockFile0.toURL();
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1206, "]", "szi4E\"B-", options0, (-575), (-36), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = (-2400);
      String string0 = "g/?g(Bj/=,q";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2400), "g/?g(Bj/=,q", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      options2.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.setLongOptPrefix("]z5i");
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.printHelp("g$u.CnAk.1Pp4su)p3/", options3, true);
      helpFormatter0.setOptPrefix("t_/,~Tm.");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("]");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.createPadding(74);
      helpFormatter1.setLeftPadding(137);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2857;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2857, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-4965), " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-14);
      byteArrayOutputStream0.write(byteArray0, 1, 0);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 44, (-2), "");
      helpFormatter0.setNewLine("zAEAw-");
      helpFormatter0.setSyntaxPrefix("[ option: ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptSeparator((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      int int0 = 0;
      String string1 = " ";
      String string2 = "";
      boolean boolean0 = true;
      options0.addOption("arg", "", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", " ", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.setArgName("");
      String string1 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 3546;
      helpFormatter0.defaultWidth = 3546;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 965, 965, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1150;
      Options options0 = new Options();
      options0.hasLongOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      String string1 = ">";
      Option option0 = null;
      try {
        option0 = new Option("i)QTd(h)/Ch[tq)D", (String) null, true, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'i)QTd(h)/Ch[tq)D' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setWidth(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1168, (double) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1168
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(true);
      Locale locale0 = new Locale("#nB}#9?frk", "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "#nB}#9?frk";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "";
      helpFormatter0.defaultWidth = 0;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) "l>iJ";
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) "G+g+aL-Y:)4JO)G}8";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1410, 1959, "DE=o85Jlv");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(696);
      Options options1 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      mockPrintWriter0.print('t');
      mockPrintWriter0.print(true);
      mockPrintWriter0.println((long) 3);
      String string0 = "   ";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1460), "   ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("Mz\"k70>iu", options1);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.append('');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 47, 47, "\n");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1848, 536, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "--");
      Options options2 = options1.addOption(option0);
      options1.hasShortOption(" [ARG]");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.hasOption((String) null);
      options2.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "-", false, "]");
      helpFormatter0.printHelp(" [ARG]", "]z5i", options3, "]z5i", false);
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.findWrapPos("[ Options: [ short ", 577, 577);
      helpFormatter0.setLeftPadding(2815);
      helpFormatter0.getNewLine();
      helpFormatter0.setArgName("\n");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "~58izLxI");
      Options options2 = options1.addOption("", false, "--");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 0, 0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.setLongOptSeparator("");
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, (CharSequence) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = (-543);
      helpFormatter0.findWrapPos("dZM;fL <~\"", (-3508), (-3508));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("dZM;fL <~\"");
      helpFormatter0.getLongOptSeparator();
      MockFile mockFile0 = new MockFile("=ys{];hwR(r");
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "|=t@!Tx7V<OiykAy", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0.optionComparator;
      objectArray0[1] = (Object) "cmdLineSyntax not provided";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "cmdLineSyntax not provided";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.format("dZM;fL <~\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-179), "=ys{];hwR(r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "[ Options: [ short ";
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      options1.addOption("", false, "-");
      String string2 = "2eIcfX>k*T04v,";
      String string3 = null;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      MockFile mockFile0 = new MockFile("Z\"SZJuL-DV)", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "06k";
      MockFile mockFile1 = new MockFile(mockFile0, "06k");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      String string2 = "RQ\\\"9";
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        options0.addOption(" ", "org.apache.commons.cli.HelpFormatter", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("$I\"UDh}scALHILmkFi ");
      assertEquals("$I\"UDh}scALHILmkFi ", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      int int0 = (-2400);
      String string0 = "g/?g(Bj/=,q";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2400), "g/?g(Bj/=,q", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = ")fI9l\"ritmyUygi8Oc";
      String string0 = "@WbJl+9I&";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("@WbJl+9I&");
      int int0 = 968;
      helpFormatter0.defaultDescPad = 968;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
