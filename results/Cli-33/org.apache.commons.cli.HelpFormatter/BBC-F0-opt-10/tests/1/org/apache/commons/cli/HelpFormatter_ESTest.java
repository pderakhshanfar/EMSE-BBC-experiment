/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:43:50 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", "-", options1, "--", true);
      helpFormatter0.findWrapPos("4a", (-2), (-1));
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2));
      Option option0 = new Option("arg", "", false, "--");
      option0.getValues();
      option0.setArgName("");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options0, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "usage: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "-", options0, 1, 1, "");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(37, "org.apache.commons.cli.HelpFormatter$1", "org.apache.commons.cli.HelpFormatter$1", options0, "", false);
      helpFormatter0.defaultLeftPad = 8;
      helpFormatter0.defaultDescPad = (-545);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-545));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim("");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.ParseException");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string1 = ":!/iaUstUQ Y6?A8";
      helpFormatter0.findWrapPos(":!/iaUstUQ Y6?A8", 0, 0);
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 2283, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("%v", 349, (-1549));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "\n", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("\n", "-", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method insdead. ", true);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3081, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method insdead. ", (String) null, options1, (-2), (-2), "]^vAR6DPJk", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(41);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1630), 334, "Ol:T");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("e", "", false, "--");
      option0.setArgName("");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption((String) null, "aE#[}|d(I3xs9MBA0l", true, (String) null);
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", "", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, "");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth((-2));
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("5RA4q/pgVU1@", "", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "e=V", "e=V", (Options) null, "e=V", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 63, "g9O_KWU0i7P|d", "arg", options0, 63, 63, "g9O_KWU0i7P|d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, "TK!");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.getNewLine();
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 59, "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setNewLine("--");
      String string1 = "";
      helpFormatter0.defaultArgName = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "&", true, "cmdLineSyntax not provided");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v*s>dL", "cmdLineSyntax not provided", (Options) null, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Hi Xo:");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Jf=s8p^fS?", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 3116, options0, 3116, 3116);
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 6, "\n");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Zxj?kg2\"");
      helpFormatter0.setNewLine((String) null);
      PrintWriter printWriter0 = mockPrintWriter0.format("--", (Object[]) null);
      String string0 = "sr,3uW'N2L Qg@%";
      Options options0 = new Options();
      mockPrintWriter0.print(74);
      helpFormatter0.printHelp(printWriter0, 74, "sr,3uW'N2L Qg@%", (String) null, options0, 9, 9, "V`U_If1),l!NKO");
      mockFileOutputStream0.release();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.getNewLine();
      mockPrintWriter1.append((CharSequence) null);
      mockPrintWriter1.print((double) 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "cmdLineSyntax not provided");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", "--", options1, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "j;YJQw4;hMc[^", "B.mT)", options1, 5, (-1), "j;YJQw4;hMc[^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      option0.setArgName("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) option0;
      objectArray0[4] = (Object) options0;
      objectArray0[2] = (Object) option0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) helpFormatter1;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 64, " | ", "", options0, 299, 1, "", false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options0, 3, 1);
      helpFormatter1.renderWrappedText(stringBuffer1, 10, 3, "");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "usage: ", false, "usage: ");
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "The option '");
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options1, 41, 46);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 2390, (Options) null, 2, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = null;
      String string0 = "";
      int int0 = 1014;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 18, (Options) null, 105, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method nstead. ");
      mockPrintWriter0.append((CharSequence) "--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      String string0 = "Ny)%UW9h+6";
      String string1 = "A&* =%2y9";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-5009), "Ny)%UW9h+6");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "cmdLineSyntax not provided");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 5380, "UQ'6Vb@!$\"Qw4", (String) null, options1, 299, 36, "\n", true);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "W", true, "cmdLineSyntax not provided");
      option0.setArgName("W");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption("h4", false, "CgvEqNUN6Z~'ploLBS");
      helpFormatter1.printHelp(690, "usage: ", "?Y@j/~9t*qDgE)b", options2, "iJ.I");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Option option0 = new Option((String) null, "\"");
      options0.addOption(option0);
      int int0 = helpFormatter0.defaultLeftPad;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", "),`^4R$T&X", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HlpFormaterOptionComparator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp(" ] [ long ", "),`^4R$T&X", options1, "", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ] [ long ");
      options1.hasShortOption("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2), options1, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "cmdLineSyntax not provided");
      option0.setArgName("");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption(option0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 11, "q", "", options1, 509, 2045, "X", false);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", true, "cmdLineSyntax not provided");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "UQ'6Vb@!$\"Qw4", " | ", options1, (-2203), 299, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "--", "--", options0, 74, 33, "");
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 32, 0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "&", true, "cmdLineSyntax not provided");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), (String) null, "", options0, 596, 1059, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "", options0, 33, 3, "W8uyf%w!X", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.println();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-2434), (-2434));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "&iZfek'n8Q", "-d&~#=Y%X", options0, 3382, 1, (String) null, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, (String) null, options1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "&", true, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), "&", "", options2, 3382, (-4868), "&iZfek'n8Q", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-2434), (-2434));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasOption((String) null);
      Option option0 = new Option("arg", true, "--");
      options1.addOption(option0);
      Options options2 = new Options();
      options2.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("j#oR!.h^", "", options2, (String) null, true);
      helpFormatter0.getWidth();
      String string0 = "q/faclNV{=g2";
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 1347, options1, (-1), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-2434), (-2434));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "--");
      options1.addOption(option0);
      String string0 = "";
      Options options2 = new Options();
      String string1 = null;
      options2.getMatchingOptions("usage: ");
      options0.addOption("", false, "-");
      helpFormatter0.printHelp("\n", "usage: ", options2, "org.apache.commons.cli.AlreadySelectedException", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 294, "\n", "", options0, 13, (-4868), "GyC_eR, G:ynj/q<");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding((-332));
      helpFormatter0.defaultDescPad = 3433;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(98, "NO_ARGS_ALLOWED", "$/~N^;w~S", (Options) null, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-2434), (-2434));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", false, "ka:9g(r,AC~b0_a");
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "&iZfek'n8Q", "-d&~#=Y%X", options0, 3382, 54, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "`o!h;W_'NI4pWlG\"", true, "cmdLineSyntax not provided");
      option0.setArgName("`o!h;W_'NI4pWlG\"");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H,", "cmdLineSyntax not provided", options1, (String) null, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(60, ">", ">", (Options) null, "#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("At*0.LNqcey*!N4) ", (-2434), 2);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", false, "\n");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), "arg", "msOoXwz0=Rb;", (Options) null, (-2434), 2, "\n", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\"", true, "cmdLineSyntax not provided");
      option0.setArgName("\"");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "<P-}EeFM", "cmdLineSyntax not provided", options0, 1834, 1, "msOoXwz0=Rb;", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-2434), (-2434));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "--");
      Options options2 = options1.addOption(option0);
      Options options3 = new Options();
      options3.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("j#oR!.h^", "", options3, (String) null, true);
      helpFormatter0.getWidth();
      String string0 = "q/faclNV{=g2";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2434), "", "q/faclNV{=g2", options2, 26, (-2), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("26c/Qg_l[]lz<VMk", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(50);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 50, options0, 74, 1);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("26c/Qg_l[]lz<VMk", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      helpFormatter0.printHelp(" ] [ long ", options0, false);
      helpFormatter0.findWrapPos(" ] [ long ", 3, (-1));
      helpFormatter0.setNewLine(" ] [ long ");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("\n", (-2434), (-2434));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "-d&~#=Y%X", "'", options2, (-1), (-1548), "msOoXwz0=Rb;", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      String string0 = "hS@-E1";
      StringBuffer stringBuffer0 = new StringBuffer("hS@-E1");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 74, 3736);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("", "%{-2x@&WB|~4-<\"X!@");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("%{-2x@&WB|~4-<\"X!@", options2, false);
      helpFormatter0.getWidth();
      Options options3 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp(" ] [ long ", "org.apache.commons.cli.HelpFormatter", options3, "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1605), "", "", options0, 63, 63, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "3iKdY;0p3+n:&\"h?", "", options0, "org.apache.commons.cli.HelpFormatter$1");
      options0.hasShortOption("--");
      String string0 = "ey=h2*@f{9#F^";
      Option option0 = null;
      try {
        option0 = new Option("ey=h2*@f{9#F^", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'ey=h2*@f{9#F^' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(" ");
      mockPrintWriter2.append((CharSequence) "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 74, "@;W^I`b0^'qndtIP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "),`^4R$T&X";
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options1 = null;
      helpFormatter0.printHelp("s@Rv", (String) null, options0, "s@Rv");
      Options options2 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("s@Rv", "arg", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 's@Rv' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\"", true, "cmdLineSyntax not provided");
      option0.setArgName("\"");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "cmdLineSyntax not provided", "\"", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-5), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\"", true, "cmdLineSyntax not provided");
      option0.setArgName("\"");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H&b`&$HW.Sb'fz*-!E;", "", options1, "4?9g;eaK5E6#1\"Ym0", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      option0.clearValues();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.printHelp(99, "+ixZ~w99%:kns@!", "+ixZ~w99%:kns@!", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\"", true, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      helpFormatter0.printHelp("H&b`&$HW.Sb'fz*-!E;", "", options1, "4?9g;eaK5E6#1\"Ym0", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-789), "arg", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-2), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 3, "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      printWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "2sy*4hS}?z)A");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "\n";
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter1 = printWriter0.format(locale0, "arg", objectArray0);
      helpFormatter0.printWrapped(printWriter1, 58, 58, "\n");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = "H&b`&$HW.Sb'fz*-!E;";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "H,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "eyweS&r", "2h[", options0, " 9F}?P8[u82D'As");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("-");
      options0.addOption(option0);
      option0.setArgs(1);
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("^k5&5vbH");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      option0.clone();
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("^k5&5vbH");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('r');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "),`^4R$T&X", options1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(466);
      helpFormatter1.defaultSyntaxPrefix = "n+NjHEJdgb^;u";
      helpFormatter1.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 466, 466, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = 253;
      Option option0 = new Option("", "", true, "Y>P|QHUQ7");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption("arg", "-", true, "arg");
      options1.toString();
      Options options2 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 253, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("9", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.getNewLine();
      String string0 = helpFormatter0.defaultNewLine;
      mockPrintWriter0.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 3, "^a=Gngc(tR;V?|hW");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter1.setWidth(3);
      helpFormatter1.rtrim("j!;");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("arg", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P|w";
      Options options0 = new Options();
      int int0 = 0;
      String string1 = "";
      options0.hasShortOption("eyweS&r");
      options0.hasLongOption("-");
      helpFormatter0.printHelp("P|w", "", options0, "", true);
      helpFormatter0.printHelp("bbf~LNK(#.vP`y-/b(", options0);
      helpFormatter0.setLeftPadding(43);
      String string2 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("cmdLineSyntax not provided", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("arg", options1, true);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer(2507);
      helpFormatter0.renderWrappedText(stringBuffer0, 2507, 74, "Jv)bdii6[W~D7:q[");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = 253;
      String string0 = "Y>P|QHUQ7";
      Option option0 = new Option("", "", true, "Y>P|QHUQ7");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      option0.setDescription("arg");
      options0.addOption("", true, "TiUWJah`m$Q|)_&H");
      helpFormatter0.getSyntaxPrefix();
      options1.hasShortOption("arg");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 253, "VWw?", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "usage: ", (Options) null, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "-", true, "P W`S*);A2lK$r-I");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "-");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      mockPrintWriter0.println((float) 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("J", "J", true, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.hasOption("arg");
      helpFormatter0.printHelp("MLVkoPt15-QG", "NO_ARGS_ALLOWED", options0, "NO_ARGS_ALLOWED", true);
      helpFormatter0.printHelp("J", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding(1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 253;
      Option option0 = new Option("", "", true, "Y>P|QHUQ7");
      helpFormatter0.defaultArgName = "NO_ARGS_ALLOWED";
      options0.addOption("", true, "TiUWJah`m$Q|)_&H");
      helpFormatter0.setLeftPadding(1480);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setOptPrefix("Y>P|QHUQ7");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("eyweS&r");
      options0.hasLongOption("-");
      MockFile mockFile0 = new MockFile("P|w", "--");
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockFile1.createNewFile();
      mockFile1.setExecutable(true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3254), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "\"", true, "cmdLineSyntax not provided");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("H&b`&$HW.Sb'fz*-!E;", "", options1, "4?9g;eaK5E6#1\"Ym0", true);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "{\"";
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)119;
      mockFileOutputStream0.write(byteArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) "<";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) " ";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "{\"";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) " ";
      objectArray0[8] = (Object) "{\"";
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "<", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 99, "");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      helpFormatter0.printHelp("MZfr5zAE' XJlj'", options0, false);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("MZfr5zAE' XJlj'");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", true, "-");
      optionGroup0.addOption(option0);
      options0.hasOption("\r7#v\"DjB");
      helpFormatter0.printHelp("arg", (String) null, options0, "i6*Cs~RTx'Th:}t", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = 253;
      Option option0 = new Option("", "", true, "Y>P|QHUQ7");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", options1, false);
      helpFormatter1.getWidth();
      helpFormatter0.setLongOptPrefix("[ Options: [ short java.util.HashMap@0000000006 ] [ long {=[ option:    [ARG] :: Y>P|QHUQ7 ]} ]");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "{\"";
      helpFormatter0.defaultLongOptPrefix = "{\"";
      helpFormatter0.getLongOptSeparator();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = 253;
      Option option0 = new Option("", "", true, "Y>P|QHUQ7");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 3, "\n");
      Options options0 = new Options();
      String string0 = "#EM;O%v%DF";
      String string1 = "org.apache.commons.cli.OptionGroup";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("#EM;O%v%DF", "org.apache.commons.cli.OptionGroup", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#EM;O%v%DF' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("^k5&5vbH");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "\n");
      helpFormatter0.printUsage(printWriter0, 3, "\n");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(31);
      helpFormatter0.rtrim("!ZY$Qwj.");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.getNewLine();
      mockPrintWriter1.append((CharSequence) "\n");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1271, "\n");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option("arg", "", false, "cmdLineSyntax not provided");
      option0.setArgName("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      char[] charArray0 = new char[0];
      mockPrintWriter0.print(charArray0);
      helpFormatter0.rtrim((String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "UQ'6Vb@!$\"Qw4", " | ", options0, (-2203), 299, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.append((CharSequence) " ");
      int int0 = 1;
      Options options0 = new Options();
      String string0 = ".W4BW";
      String string1 = "";
      // Undeclared exception!
      try { 
        options0.addOption("lYU*KZeq*h@/}", ".W4BW", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'lYU*KZeq*h@/}' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-229);
      helpFormatter0.findWrapPos("rp-(zmG_*-#hq", (-229), 0);
      String string0 = "nTXTmT<|";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("nTXTmT<|", options0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("arg", 1, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "P|w";
      Options options0 = new Options();
      String string1 = "eyweS&r";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("),`^4R$T&X", options1, false);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("^k5&5vbH");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setDescPadding(43);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 43, 44, "m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.setDescPadding(10);
      helpFormatter0.defaultNewLine = "B%>-*`Am7o\"l3";
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":~Jg8 4G");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false, ":~Jg8 4G");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :~Jg8 4G
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "line.separator", true, "line.separator");
      Option option0 = new Option("", "usage: ", false, "-");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption((String) null, false, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-512), (String) null, options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 1856;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setWidth(31);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultOptPrefix = "X?tw.f";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int0 = 3;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "nr}uF/!RaP", true, "The option '");
      // Undeclared exception!
      try { 
        options1.addOption("The option '", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(9);
      Options options0 = new Options();
      String string0 = "C";
      boolean boolean0 = true;
      String string1 = "sHs\\4`Z`";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 2457, "sHs\u0004`Z`");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = 253;
      String string0 = "Y>P|QHUQ7";
      Option option0 = new Option("", "", true, "Y>P|QHUQ7");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.toString();
      options0.addOption("", true, "TiUWJah`m$Q|)_&H");
      options1.hasShortOption("arg");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 253, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";Oh5W8Prt0");
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) ";Oh5W8Prt0";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      int int0 = (-840);
      String string0 = "g;*3%";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", "-", false, "tm.H/S-n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("4M!]%`r;Fe");
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "Khde0\" mvEiS", true, "usage: ");
      char char0 = 'p';
      option0.setValueSeparator('p');
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      options1.helpOptions();
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "4M!]%`r;Fe", options1, "Khde0\" mvEiS", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 207;
      helpFormatter0.setWidth(207);
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(207);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "\n", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1847), options1, (-2), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "'");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile("");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("Hg~N`}Z8&~^");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1104));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("[");
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      MockFile mockFile0 = new MockFile(".i{M<|?rYif#}RRZ");
      MockFile mockFile1 = new MockFile(mockFile0, ">fQnppTO?>)W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = (-663);
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", (String) null, false, "--");
      // Undeclared exception!
      try { 
        options2.addOption("><", false, "'k[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '><' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getWidth();
      String string0 = "(Rb'@ub`#CE}SoK~~2";
      String string1 = " ]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("Cannot add value, list full.", true, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Cannot add value, list full.' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "{\"";
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{\"", "{\"", (Options) null, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOptionGroups();
      Option option0 = new Option("arg", "5?%sN");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, "--", false, " ");
      optionGroup0.toString();
      options1.hasOption(" ");
      helpFormatter0.defaultArgName = "s:0fJn`#fK\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1189), "Qn!", "]", options2, "@%%(b/a|K-|Ym,", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = " ] [ long ";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "-");
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "6d{C?t\"vd,@{Pk0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("?AH6F%+IGgr<Xl][w");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("FZ>/+CrKaff>}J4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "FZ>/+CrKaff>}J4");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) printWriter0;
      // Undeclared exception!
      try { 
        mockPrintWriter1.printf(locale0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uG{N<fU+";
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      int int0 = 0;
      Options options0 = new Options();
      String string1 = "I;%tTe";
      // Undeclared exception!
      try { 
        options0.addOption("I;%tTe", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'I;%tTe' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
