/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 14:48:21 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      options0.addOption("", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, 34, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", true, "--");
      Option option0 = new Option((String) null, "", true, "-");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";F`j*");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3085, "usage: ", options4);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp((-1), "BM(^%^jg!wI)", "BM(^%^jg!wI)", options1, "BM(^%^jg!wI)", true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(3);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      int int0 = 20;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "   ", 20, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, "\n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "tkuVX)9", "<", (Options) null, "tkuVX)9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-1898));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$9_/Jb\"R?4", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = null;
      int int0 = (-5);
      helpFormatter0.defaultDescPad = (-5);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8Gbdl^L|", "~.+4\"", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultDescPad = 1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setWidth((-600));
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(1471);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("", "usage: ", true, "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = null;
      int int0 = 1;
      helpFormatter0.getOptionComparator();
      String string1 = "[ Options: [ short ";
      int int1 = 1;
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.findWrapPos("[ Options: [ short ", 0, 0);
      int int2 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding((-1978));
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("4Kcx&XsOj[H; E", "usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      String string0 = helpFormatter0.defaultArgName;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-2848), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      options0.addOption((String) null, true, "-");
      // Undeclared exception!
      helpFormatter0.printHelp("[ option: ", options0, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("zi}G");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "arg", options0, 1, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", (String) null, true, "-");
      Options options2 = options1.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(17, " ", "-", options3, "k3I$ #%", true);
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(32);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOption("", false, (String) null);
      helpFormatter1.printHelp("[ option: ", options0, true);
      helpFormatter0.findWrapPos("arg", 1, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 230, ">", (String) null, options0, 44, 2598, "WWh`.", false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("line.separator");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "rw_cqF", "d{=*8g", (Options) null, 10, 0, "d{=*8g", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-4579), "--", "--", options0, 2036, 9, "3!YL5nLa+~32Z#", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("\n", objectArray0);
      int int0 = 1595;
      String string0 = "~Omyy [AtfN\"~WFm";
      Options options0 = new Options();
      String string1 = "N$^T{GTImh-! -";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("J9j}V_4", "N$^T{GTImh-! -", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'J9j}V_4' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Option option0 = new Option("", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=");
      options0.getMatchingOptions("");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1931, "", options0);
      helpFormatter1.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 1;
      mockPrintWriter0.write(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "<", "<", options1, (-972), 1, "<", true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = null;
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      helpFormatter0.printHelp("-", (Options) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 492, "e\"#VX6\"", "", options0, 63, 3, "--", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("y.prP%M&VQ:GQ@=MTd");
      mockPrintWriter0.println((Object) helpFormatter0);
      Options options0 = new Options();
      Option option0 = new Option("", "]9'DrmEV^l**$x.", true, "j|Y0|6#no>ET?^C0Ex");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 629, 1134);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintStream mockPrintStream1 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      mockPrintWriter0.append((CharSequence) "-");
      mockPrintWriter0.println(false);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "Z", "\n", options0, 2635, (-546), "ck#w94a-_*sF3h", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((Object) helpFormatter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      mockPrintWriter0.println(true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "--", true, ":BnMx3HqOF~}P");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp(printWriter0, 3, "usage: ", "usage: ", options1, 1, 74, "usage: ", true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = " ]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ]");
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-124), "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, (String) null, "", options0, 2036, 1, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      printWriter0.println(true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 50, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "", options0, 43, 492, "WMI-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iut|~ND");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1442, 74, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 63, "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "*$UL;Dr", true, "Hj$gsS0o");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "--", options2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      String string0 = helpFormatter0.defaultArgName;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "--");
      helpFormatter1.printHelp("arg", options1, true);
      helpFormatter0.findWrapPos("", (-1731), (-1417));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter1.println(true);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2007, "");
      helpFormatter0.printHelp(printWriter0, 2007, "-", "", options0, 492, 2217, "", true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "' contains an illegal character : '";
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("--");
      MockPrintStream mockPrintStream1 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream1, false);
      mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter3.printHelp(1, "-", "[ Options: [ short ", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 544;
      String string0 = ";";
      helpFormatter0.defaultDescPad = (-1053);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(544, "O{@HvK0/js[l]", ";", (Options) null, ")ZVjW-t=", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.write(1);
      Options options0 = new Options();
      helpFormatter1.renderOptions((StringBuffer) null, 1, options0, 74, 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("\n");
      StringBuffer stringBuffer0 = new StringBuffer("y.prP%M&VQ:GQ@=MTd");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "}o~qZt7+qGwhLcJJ");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      mockPrintWriter0.write(2);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2702), (String) null, "arg", options0, 74, (-1032), "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('l');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 0, (-850), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      String string0 = helpFormatter0.defaultArgName;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string1 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("<", "]$ ui+", options0, "]$ ui+");
      Option option0 = new Option("arg", "arg");
      options1.addOption(option0);
      Option option1 = new Option("", "-", false, "G");
      Options options2 = options1.addOption(option1);
      options2.addOption(option1);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options3 = options2.addOption("G", (String) null, false, "arg");
      helpFormatter0.printHelp("]$ ui+", options3);
      helpFormatter0.setArgName("G");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("w9}!Yv*h4&K}Z:^R");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("", true, "\n");
      helpFormatter1.printHelp(5349, "E&#qu15U^z", "arg", options0, ">{6^`-?v;I", true);
      helpFormatter0.printHelp("_$R?{Zy*", options1, false);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOption("arg", "--", false, "-");
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", options0, true);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-2040);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, (-2040), "]");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, " ", "sI:z@@x`", (Options) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      Options options1 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(0, "", "X$vt`M6ODM=bO`5 e1", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]08%!OX|[v[{t3!<*$+");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = helpFormatter1.defaultArgName;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultSyntaxPrefix = "arg";
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter2.printOptions(printWriter0, 1, options0, 819, 3445);
      mockPrintWriter0.write(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      Options options1 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "-", options1, 3, 2, "");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte byte0 = (byte) (-27);
      mockPrintWriter0.close();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 4, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOption("arg", true, "--");
      helpFormatter1.printHelp("org.apache.commons.cli.OptionGroup", options0, true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.close();
      int int1 = 2976;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println(1562L);
      helpFormatter0.setArgName("yj25X!");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (int) (byte) (-79), "yj25X!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringBuffer stringBuffer0 = new StringBuffer(10);
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 74, "");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]08%!OX|[v[{t3!<*$+");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = helpFormatter1.defaultArgName;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      mockPrintWriter0.write(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter2.renderOptions(stringBuffer0, 74, options0, 101, 3);
      helpFormatter0.printHelp("--", options0, false);
      helpFormatter0.getDescPadding();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 494, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 7, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('9');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      options0.addOption("", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options0, 88, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("arg", false, "arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.renderOptions(stringBuffer1, 1, options1, 3, 3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-27);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte) (-43);
      mockPrintStream0.write(byteArray0);
      mockPrintWriter0.close();
      helpFormatter0.getArgName();
      mockPrintWriter0.println((long) 2976);
      helpFormatter0.setArgName(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2976, "--");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(2976, "-", "", options0, "-");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, "", options0);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "!?DZ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 64, "O}{eHPQ-CJevZB~d", "K%UVX9e+ik3_5", options1, (-414), (-95), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = helpFormatter1.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter1.setArgName("i;xEh(PIf");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      String string1 = "m.a3?*gX3{} 0Tg)";
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "m.a3?*gX3{} 0Tg)");
      Options options1 = new Options();
      options0.helpOptions();
      int int1 = (-932);
      String string2 = "[";
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      helpFormatter0.setNewLine("OA/%,C^d4;IVY>");
      String string0 = helpFormatter1.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      helpFormatter1.setArgName("i;xEh(PIf");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 3, "m.a3?*gX3{} 0Tg)");
      Options options1 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("' was specified but an option from this group ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.OptionValidator", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      mockFileOutputStream0.flush();
      helpFormatter0.printHelp(printWriter0, 117, "fDbt56AY6?{`b3", "' was specified but an option from this group ", options0, 1322, 1322, " | ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1322, "' was specified but an option from this group", "_u$4r=", options1, 117, 117, "9`7");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append('9');
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 31, (-1389));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "arg", options0, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", "arg", options0, "-", true);
      Options options1 = new Options();
      helpFormatter1.createPadding(2230);
      helpFormatter0.renderOptions(stringBuffer0, (-2048), options1, 1, 3);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "T$RaARY l", (Options) null, (-606), 20, "E7D+T5O4A");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byte byte0 = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-27);
      byteArray0[7] = (byte)74;
      Options options0 = null;
      Locale locale0 = Locale.JAPANESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)74;
      objectArray0[1] = (Object) (byte)74;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte) (-43);
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 38, "", "", (Options) null, 6, (int) (byte) (-43), "+tiAD$c%.*}>k0htG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "[";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "\n", 1, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "[";
      helpFormatter0.setSyntaxPrefix("[");
      String string1 = "g7GyEx}40|jIQaBTcTt";
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.setNewLine("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.defaultSyntaxPrefix = "g7GyEx}40|jIQaBTcTt";
      int int0 = (-1156);
      helpFormatter0.defaultLeftPad = (-1156);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      String string3 = "   ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "   ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //    
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp("arg", (String) null, options0, "--", true);
      options0.addOption("", true, "-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 3, 2);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = "U3ahape%*jZz9";
      helpFormatter0.printHelp("<", "U3ahape%*jZz9", options1, "");
      Option option0 = new Option("arg", "");
      options1.addOption(option0);
      boolean boolean0 = false;
      Option option1 = null;
      try {
        option1 = new Option("-", "CL$@GQ0j/jdmb.1/G\"8", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l+,m", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("arg", objectArray0);
      int int0 = 0;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 74, (Options) null, 2171, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 303, "[", "9Wq", (Options) null, 38, 0, "9Wq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printWrapped(printWriter0, 2, 0, "i");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(" ] [ long ", (-344), (-1045));
      Options options0 = null;
      PrintWriter printWriter1 = mockPrintWriter0.append('9');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 5, (Options) null, (-1), (-1045));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      helpFormatter1.printHelp("usage: ", "OR7x+!;", options0, "-", true);
      // Undeclared exception!
      try { 
        options0.addOption("\n", true, "MDF25o;]u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "<";
      helpFormatter0.printHelp("<", "arg", options0, "arg");
      Option option0 = new Option("arg", "arg");
      options1.addOption(option0);
      String string1 = "";
      Options options2 = options1.addOption(option0);
      options2.addOption(option0);
      optionGroup0.addOption(option0);
      Options options3 = options2.addOption("", (String) null, false, "arg");
      helpFormatter0.printHelp("\n", options3);
      helpFormatter0.setArgName("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "\n", 1375, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l+,m", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1323, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(1971);
      stringBuffer0.append(stringBuffer1);
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '3';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, options1, 1, (-19));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("<", "]$ oi5", options0, "]$ oi5");
      Option option0 = new Option("arg", "arg");
      options1.addOption(option0);
      Option option1 = new Option("", "-", false, "");
      Options options2 = options1.addOption(option1);
      Options options3 = options2.addOption(option1);
      optionGroup0.addOption(option1);
      Options options4 = options2.addOption("", (String) null, false, "arg");
      helpFormatter0.printHelp("]$ oi5", options4);
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptSeparator((String) null);
      Options options5 = new Options();
      options4.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4779), "<", (String) null, options3, "1Vc._");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      options0.addOption((String) null, true, (String) null);
      int int0 = 31;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-20), options0, 0, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)86;
      mockPrintStream0.write(byteArray0);
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2976, "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 63, (int) (byte) (-79), "");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setNewLine("zu.L#R,J,x-?Q]v8I");
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("Oc?", "has already been selected: '");
      File file0 = MockFile.createTempFile("usage: ", ">", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println((long) 0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "zu.L#R,J,x-?Q]v8I");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", false, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-2), 1, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.getChannel();
      helpFormatter0.setLeftPadding(579);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.getWidth();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K,m", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.setSyntaxPrefix("7q% =");
      helpFormatter0.rtrim("");
      helpFormatter0.setLeftPadding((-20));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "iB");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-20), (-715), "d6c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = helpFormatter0.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(74);
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "T$RaARY l", (Options) null, (-606), 20, "E7D+T5O4A");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setDescPadding(1);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.setOptPrefix("JF0mrP<Ci/YW2;^}esw");
      String string0 = "p8J4[Aue\\{";
      String string1 = "[";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = new Option("", true, "JF0mrP<Ci/YW2;^}esw");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", true, "usage: ");
      // Undeclared exception!
      try { 
        options3.addOption("[", " ", true, "z)S=$'5!^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", true, "--");
      Options options2 = options1.addOption("", true, "q!t( w|xjg9");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(96, "#ImFyilX&@4Tsl/X", "arg", options3, "mER#?gz52j:)!<w}~F ", true);
      helpFormatter0.createPadding(923);
      helpFormatter1.createPadding(96);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = helpFormatter1.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 31, 3);
      helpFormatter0.printHelp("tlRS1%7R|favI0TG:5", options1, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      String string0 = helpFormatter0.defaultArgName;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 34, 1, "k");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "{U|{JJ^j2");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "iLso8/JG'Nk");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 64, "\n", options2);
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"@'\\zZ7v m";
      MockFile mockFile0 = new MockFile("\"@'zZ7v m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-4402);
      Options options0 = new Options();
      String string1 = "";
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      Option option0 = new Option("", "mPs$T6pe]w*wl");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4402), "\"@'zZ7v m", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\"@'\\zZ7v m";
      MockFile mockFile0 = new MockFile("\"@'zZ7v m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      String string1 = "";
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      Option option0 = new Option("", "mPs$T6pe]w*wl");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4402), "\"@'zZ7v m", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultLongOptPrefix = "??;6Jkzd,w/";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(17);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "-");
      helpFormatter0.setSyntaxPrefix("G\u0007JF6>u");
      helpFormatter0.setLongOptPrefix((String) null);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '9';
      charArray0[2] = '3';
      charArray0[3] = '|';
      charArray0[4] = ' ';
      charArray0[5] = 'L';
      charArray0[6] = 'o';
      charArray0[7] = '\'';
      charArray0[8] = 'g';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 3, (-5552));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("l+,m", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "iB", "[", (Options) null, 0, (-752), "");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("f C<XSs,XUD=C@@");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4556), "   ", "t.6j^euKw", options0, "   ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      int int0 = (-472);
      helpFormatter0.defaultLongOptPrefix = "[ option: ";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-472));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('?');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.append((float) 1);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1375, 1375, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 1375, (-1), "");
      helpFormatter0.setOptPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|9:sTCE,#";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("|9:sTCE,#", "|9:sTCE,#", (Options) null, "|9:sTCE,#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "|mq";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1595, 0, "|mq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getOptionComparator();
      String string1 = "";
      MockFile mockFile0 = new MockFile((String) null, "");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.setNewLine("");
      String string0 = "K";
      helpFormatter0.renderWrappedText(stringBuffer0, 1080, 1080, "K");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.createPadding(84);
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-25);
      String string1 = "arg";
      Options options0 = new Options();
      String string2 = "";
      boolean boolean0 = false;
      Options options1 = options0.addOption("", "--", false, "-");
      // Undeclared exception!
      try { 
        options1.addOption("-", false, "C3;?G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultArgName;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 31, 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)86;
      mockPrintStream0.write(byteArray0);
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2976, "-");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      mockPrintWriter0.println((long) 2976);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-27), (int) (byte) (-43), "8ENnCdOXZ_iO!]P-`j");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-43);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)74;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)74;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) dataOutputStream0;
      mockPrintWriter1.print(0.0);
      mockPrintWriter1.printf("vOh+6gCz", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, (-882), "\n", "-", (Options) null, (-644), (-1404), "z1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string0 = "";
      helpFormatter0.setArgName("");
      String string1 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter");
      int int1 = (-1);
      helpFormatter0.findWrapPos("", (-1), (-1));
      String string2 = "G\"teyHJu[IA;7";
      MockFile mockFile0 = new MockFile("G\"teyHJu[IA;7", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "hZMBg)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // hZMBg)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-869), 10, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "-");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(443);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = (-1);
      Options options0 = new Options();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) options0;
      mockPrintWriter1.format("", objectArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1190);
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      mockPrintStream0.print((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)86;
      mockPrintStream0.write(byteArray0);
      mockPrintWriter0.close();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2976, "-");
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      mockPrintWriter0.println((long) 2976);
      helpFormatter0.setArgName("]bR");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2976, "]bR");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(2976, ".5(K", "", options0, ".5(K");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$1");
      assertEquals("]bR", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ] [ long ", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
