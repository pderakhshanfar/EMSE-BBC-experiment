/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:24:28 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2009));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getWidth();
      helpFormatter0.defaultOptPrefix = "<";
      helpFormatter0.defaultLeftPad = 63;
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(74);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("                                                                          ", 74, 74);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("arg", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "--");
      Options options2 = options1.addOption(option0);
      helpFormatter0.defaultOptPrefix = "";
      optionGroup0.addOption(option0);
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", options3, true);
      helpFormatter0.setArgName("--");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 44, "z @,\"6>a'[^lg", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SgdPG", "-", true, "--");
      Option option0 = new Option("arg", "arg", true, (String) null);
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options3, false);
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, options2, 3, (-1756));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getDescPadding();
      String string0 = "S[fDWIe=";
      MockFile mockFile0 = new MockFile("S[fDWIe=");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      String string1 = "[";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SgdPG", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "--");
      option0.setOptionalArg(false);
      options1.addOption(option0);
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SgdPG", options2, true);
      helpFormatter0.setArgName("]Qm6 **nZ");
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 2133;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1534), options1, 1234, 2133);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SgdPG", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", true, "--");
      options1.addOption(option0);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SgdPG", options2, true);
      helpFormatter0.setArgName("SgdPG");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = (-1355);
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      options0.addOption(option0);
      options0.helpOptions();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-1), "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2085), options0, 3, 41);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      options0.addOption(option0);
      options0.helpOptions();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, (-1), 116);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format("TP<v>Wy~1ujH7/", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-1), "TP<v>Wy~1ujH7/");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("", "usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.helpOptions();
      Options options2 = options1.addOption("", "oA|", true, "--");
      Options options3 = options2.addOption("arg", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "^~5R,+q-9)m&uzk", (Options) null, 0, (-1), "^~5R,+q-9)m&uzk");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile("usage: ");
      MockFile mockFile2 = new MockFile(mockFile0, "arg");
      MockFile mockFile3 = new MockFile("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 86;
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, helpFormatter0.defaultLeftPad, int0, helpFormatter0.defaultLongOptPrefix);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile("usage: ");
      MockFile mockFile2 = new MockFile(mockFile0, "arg");
      MockFile mockFile3 = new MockFile("arg");
      MockFile mockFile4 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile4);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.defaultSyntaxPrefix = null;
      helpFormatter2.getOptionComparator();
      helpFormatter1.getDescPadding();
      helpFormatter1.findWrapPos("' was specified but an option from this group ", 10, 3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--");
      String string0 = "";
      mockFile0.deleteOnExit();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(70, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "0=u(Tg2", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("SgdPG", "-", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SgdPG", options2, true);
      helpFormatter0.setArgName("SgdPG");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5, "", "", options0, "cmdLineSyntax not provided", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("aoNT-w#pu/Ih5R!n6=J", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 9, "[ Options: [ short ");
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      options0.addOption("", "--", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "(XNR", "\n", options0, 74, 3, "\n");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 15, "Z", options1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", " |X ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", "usage: ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.addOption("", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "j+");
      option0.setType(mockPrintWriter0);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 32, options0, 32, 97);
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter("SB?VP|Hi#Xp.{b", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "   ";
      byte byte0 = (byte) (-2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte) (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.renderOptions((StringBuffer) null, (-676), options0, 1892, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1651, 44, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) file0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) "YoHyU";
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) options0;
      mockPrintWriter0.format("YoHyU", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1651, "9", (String) null, options0, 1651, 34, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter2, 1208, "line.separator");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("=H-pg[)<:$?d>]Wy&");
      MockFile mockFile0 = new MockFile("=H-pg[)<:$?d>]Wy&", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.format("", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "", options0, 97, 36, "8+5=GHFZ|uu|^P", false);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "F");
      MockFile mockFile1 = new MockFile(" | ");
      MockFile mockFile2 = new MockFile(mockFile1, "~z2f3Y7ioe |i)^");
      MockFile mockFile3 = new MockFile("");
      MockFile mockFile4 = new MockFile("", "pLV]A><)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 64, "Cy", (String) null, options0, (-2), 64, "yGdQ01cZ4=", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "Zo");
      Options options2 = options1.addOption((String) null, false, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("^", options2, true);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "a");
      MockFile mockFile1 = new MockFile("usage: ");
      MockFile mockFile2 = new MockFile(mockFile0, "arg");
      MockFile mockFile3 = new MockFile("arg");
      MockFile mockFile4 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile4);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "i!y(R.", ";[bE", options0, 3, 64, "i!y(R.", true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("=H-pg[)<:$?d>]Wy&");
      MockFile mockFile0 = new MockFile("=H-pg[)<:$?d>]Wy&", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      helpFormatter0.rtrim("=H-pg[)<:$?d>]Wy&");
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (int) (byte)123, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "Zo");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Zo";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) mockPrintStream0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "*IX^ ", "4<G~Q", options1, 23, (-1), "I~dP1", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.rtrim(">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.rtrim(" ");
      helpFormatter1.getNewLine();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("=H-pg[)<:$?d>]Wy&");
      MockFile mockFile0 = new MockFile("=H-pg[)<:$?d>]Wy&", "usage: ");
      mockFile0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      helpFormatter0.rtrim("usae: ");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("tk9]");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (int) (byte)123, "`M=p(OlQm M)<u7,RX", "`M=p(OlQm M)<u7,RX", options0, 2409, 1341, "`M=p(OlQm M)<u7,RX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" ", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.cli.Options");
      File file0 = MockFile.createTempFile("e:&?L(IYA4-tgb7s", "--", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 47, ">fG!:V", "=W%b)ST:oh'eY?f~v", options1, 47, 1341, "Zo", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.printHelp("--", "|GorQYfdT1V?", options1, "zpxi rHSSdT", true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", "usage: ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1341, "--", " | ", options0, 47, 47, "--", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 47, "\n");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.createPadding(2989);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1649, (String) null, "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 3065, 17, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-2);
      mockFileOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 9, (byte) (-2), "`@#yeB`)l/[e{w,#:b)");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "line.separator");
      MockFile.createTempFile("line.separator", "!", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, ",,J!o?Dh", ";[bE", options0, 31, 13, (String) null, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption((String) null, true, "Zo");
      OptionGroup optionGroup0 = new OptionGroup();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "!{UC1xh";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) optionGroup0;
      objectArray0[6] = (Object) "Zo";
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("!{UC1xh", objectArray0);
      helpFormatter0.createPadding(34);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 34, "[ option: ", "kWzj0v7]K~,", options0, 34, (-1), "                                  ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      String string0 = helpFormatter0.createPadding(2989);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1651, "f5IPjB8Iy%>", "U366LG-", options0, 2069, 1651, string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 99, 64, "d6oTO_NchVa'");
      Options options0 = new Options();
      Options options1 = options0.addOption("2aM", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 99, options2, 64, 99);
      helpFormatter0.renderOptions(stringBuffer2, 99, options1, 64, 99);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 2890, "+,2-C", "-", options1, 74, 3, "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getWidth();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.createPadding(74);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1, (String) null, " | ", options0, 1, (-194), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, ":\"#QJ");
      MockFile mockFile1 = new MockFile("[ option: ", "usage: ");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      MockFile.createTempFile("   ", "\n", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter1.format("[", objectArray0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2875), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 99, 64, "d6oTO_NchVa'");
      Options options0 = new Options();
      Options options1 = options0.addOption("2aM", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 99, options2, 64, 99);
      helpFormatter0.renderOptions(stringBuffer2, 99, options1, 64, 99);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2444), "2Hl", "Qu{", options3, 2, (-2444), "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setArgName("+?*WFK=RSu\"+");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "r", "t~u~nK4hMOl", options1, "kJ(vc9");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ":\"#QJ", options0, ":\"#QJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "Zo");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Zo";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) options1;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter1.printHelp(printWriter0, 74, "usage: ", "arg", options0, 0, 34, "[", false);
      helpFormatter1.getWidth();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter1.setArgName(" .9YG");
      String string0 = " ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string1 = "1ww%u}4>~'!8'CZMK";
      String string2 = "_\\A2,~ur=V4";
      // Undeclared exception!
      helpFormatter0.printHelp(helpFormatter1.DEFAULT_LEFT_PAD, string1, string2, options0, helpFormatter0.DEFAULT_SYNTAX_PREFIX);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-MGH";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("_J)?", "-MGH", options0, "-MGH");
      helpFormatter0.printHelp(54, "-MGH", "", options0, "-MGH", false);
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 99, 64, "d6oTO_NchVa'");
      Options options0 = new Options();
      Options options1 = options0.addOption("2aM", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 99, options2, 64, 99);
      helpFormatter0.renderOptions(stringBuffer2, 99, options1, 64, 99);
      helpFormatter0.rtrim("<uznK");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-758), "org.apache.commons.cli.OptionGroup", "/Ag", options2, (-758), 44, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-639), 0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Options options1 = options0.addOption((String) null, true, "Zo");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      String string0 = ">";
      Options options1 = options0.addOption("", false, ">");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options2, 9, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("=H-pg[)<:$?d>]Wy&");
      MockFile mockFile0 = new MockFile("=H-pg[)<:$?d>]Wy&", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((float) 74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "=H-pg[)<:$?d>]Wy&");
      helpFormatter0.printOptions(mockPrintWriter0, 2199, options2, 44, 0);
      mockPrintWriter0.println("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (int) (byte)1, (int) (byte)123, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "joZc?DGT5PJw!xw";
      Options options0 = null;
      helpFormatter0.defaultWidth = 13;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator("S;L',s~9[A>rXQi%B");
      String string1 = "50E@EL_4sFq9K2._K^";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("joZc?DGT5PJw!xw", "", (Options) null, "50E@EL_4sFq9K2._K^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Nqqn6G<", options1, false);
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 117;
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 117, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("=H-pg[)<:$?d>]Wy&");
      MockFile mockFile0 = new MockFile("=H-pg[)<:$?d>]Wy&", "usage: ");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      helpFormatter0.rtrim("usae: ");
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("tk9]");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 6, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printHelp(",,J!o?Dh", options0, true);
      helpFormatter0.createPadding(1135);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", ",,J!o?Dh", options0, (-3348), 0, ",,J!o?Dh", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, ":\"#QJ");
      MockFile mockFile1 = new MockFile("[ option: ", "usage: ");
      MockFile mockFile2 = new MockFile(mockFile1, "");
      MockFile.createTempFile("   ", "\n", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, ",,J!o?Dh", "1O", options0, (-1), 0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-2);
      mockFileOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)1, " ]");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1533, "=W%b)ST:oh'eY?f~v", options0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = 2554;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 9, (Options) null, 2554, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 31;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kzY0F8p)m,C:Z,84N_'");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " [ARG]";
      mockPrintWriter0.printf(" [ARG]", objectArray0);
      String string0 = "";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1072, "");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptSeparator();
      String string1 = "aC#^0 [1DRt:^q]fg";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "Tzo'KeE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option((String) null, "arg");
      option0.setType(helpFormatter0);
      stringBuffer0.append((CharSequence) "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, 815, options1, 0, 0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultDescPad = (-2078);
      helpFormatter0.defaultWidth = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".&N^{EpXPdIGj=%hwX+");
      int int0 = (-1460);
      mockPrintWriter0.print(9);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2610), (-1460), "&XLr$5D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "Zo");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SgdPG", options2, true);
      helpFormatter0.setArgName("SgdPG");
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("{e");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.append((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 0, "");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultWidth = 1062;
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptPrefix("");
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int1 = 32;
      char char0 = 'W';
      int int2 = 3750;
      String string0 = "sZubX,";
      Options options0 = new Options();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1062, 13, "");
      String string1 = "T,([F>Ev>au\"[P";
      // Undeclared exception!
      try { 
        options0.addOption("sZubX,", "arg", false, "T,([F>Ev>au\"[P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'sZubX,' contains an illegal character : ','
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = ";=Twz0,34tkLG5n`z?1";
      helpFormatter0.printHelp(";=Twz0,34tkLG5n`z?1", options0);
      // Undeclared exception!
      try { 
        options0.addOption(";=Twz0,34tkLG5n`z?1", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';=Twz0,34tkLG5n`z?1' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2701);
      helpFormatter0.defaultLeftPad = (-2701);
      helpFormatter0.getOptionComparator();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.setLeftPadding(554);
      String string1 = null;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      String string0 = "";
      int int1 = 5195;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 5195, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-956));
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "kJ(vc9";
      Options options0 = new Options();
      helpFormatter0.printHelp("kJ(vc9", "kJ(vc9", options0, " :: ");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-658), options0, (-658), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 9;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 9, options1, 9, 9);
      String string0 = "";
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        options2.addOption(" ]", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9!s";
      helpFormatter0.defaultOptPrefix = "9!s";
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-165));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "/P|@*Nw9+";
      helpFormatter0.rtrim("/P|@*Nw9+");
      helpFormatter0.findWrapPos("/P|@*Nw9+", 0, 1064);
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile((String) null, " | ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("usage: ", ":\"#QJ", (File) mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", ",,J!o?Dh", options0, (-3345), 0, ",,J!o?Dh", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "joZc?DGT5PJw!xw";
      Options options0 = null;
      helpFormatter0.defaultWidth = 13;
      String string1 = "50E@EL_4sFq9K2._K^";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("joZc?DGT5PJw!xw", "", (Options) null, "50E@EL_4sFq9K2._K^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-398));
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("");
      assertEquals((-398), helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("=H-pg[)<:$?d>]Wy&");
      MockFile mockFile0 = new MockFile("=H-pg[)<:$?d>]Wy&", "usage: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-2);
      mockFileOutputStream0.write(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2120), "=H-pg[)<:$?d>]Wy&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "twNW$dR7";
      helpFormatter0.setLongOptPrefix("twNW$dR7");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "Zo");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("SgdPG", options2, true);
      helpFormatter0.setArgName("SgdPG");
      helpFormatter0.getOptPrefix();
      assertEquals("SgdPG", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '2';
      charArray0[2] = 'n';
      charArray0[3] = '`';
      charArray0[4] = '7';
      charArray0[5] = 'k';
      charArray0[6] = ',';
      charArray0[7] = '+';
      charArray0[8] = 'K';
      mockPrintWriter0.print(charArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3517), ")3(e%7w.ydET?axd=|", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
