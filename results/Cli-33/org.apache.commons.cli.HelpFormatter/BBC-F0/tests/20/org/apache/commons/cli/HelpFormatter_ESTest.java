/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:28:20 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "^+T", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 37, "9/3W_@jRfh", (String) null, options1, 7, (-2), "ep\"LdI\"UXm`]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string0 = helpFormatter0.defaultOptPrefix;
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) locale0;
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.defaultSyntaxPrefix = "p.H;ql";
      Options options0 = new Options();
      options0.hasOption("p.H;ql");
      helpFormatter0.printHelp(3, "\n", "--", options0, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1744), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 11, "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      String string0 = "[";
      Options options0 = new Options();
      options0.hasShortOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1;
      String string1 = " ";
      int int1 = (-3224);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, int0, string1, string0, options0, int1, int0, helpFormatter0.DEFAULT_LONG_OPT_SEPARATOR);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byteArrayOutputStream0.write(74);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer1, 3, 3, "Xx5HJ*M*7/Wv");
      Options options0 = new Options();
      StringBuffer stringBuffer2 = new StringBuffer((CharSequence) "usage: ");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t'rTv+0I<@VM=N");
      String string0 = "vX1l";
      helpFormatter0.createPadding(12);
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.findWrapPos("vX1l", 0, 44);
      helpFormatter0.createPadding(0);
      int int0 = 3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("Mx", false, "--");
      String string2 = "([EBhEJpdo]R^6B}Nr";
      // Undeclared exception!
      try { 
        options0.addOption("SZf%", false, "([EBhEJpdo]R^6B}Nr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'SZf%' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", string0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      options0.addOption("", "'T5W/M=.,R6", false, "YDq?`8JV8");
      options0.addOption("arg", true, "\n");
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 2322, 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "   ";
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(string0, options0, boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.write(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "1hpZb!!,";
      String string1 = "zpCGE/fv% xY*b\"";
      // Undeclared exception!
      helpFormatter0.printHelp(helpFormatter1.defaultLeftPad, string0, string1, options0, helpFormatter1.defaultSyntaxPrefix);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.write(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp("arg", options0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 64, "-");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      int int0 = 114;
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "arg");
      int int1 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.write(3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "=52");
      Options options2 = options1.addOption("arg", true, "5v");
      options2.getMatchingOptions("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "5v", options1);
      Options options3 = new Options();
      helpFormatter0.printHelp("F2N:q=*", options3, true);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.write(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp(" ", options0, true);
      String string0 = "Fv;6f$--{cI";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, helpFormatter1.DEFAULT_LEFT_PAD, string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", true, "-");
      options2.addOption("", true, (String) null);
      options2.addOptionGroup(optionGroup0);
      options2.getMatchingOptions(", ");
      helpFormatter0.printHelp("j.R.P~$e", "b:mp", options1, "v'gNa4>6aD", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("v'gNa4>6aD");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("usage: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.getBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 1, "arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2322, "--", "`c'*I*~H/G]do4", options0, 2322, 3, "usage: ");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options2 = new Options();
      options0.hasShortOption("-/[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1148), "-n0", "usage: ", options2, 86, 1, ">Pz'urn4_T;U%?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      byteArrayOutputStream0.write(2599);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 34, options1, 34, 34);
      StringBuffer stringBuffer2 = new StringBuffer(stringBuffer1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 19, (-988), "org.apache.commons.cli.Util");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)3;
      byteArrayOutputStream0.write(byteArray0, (int) (byte)0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.write(3);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 3, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultSyntaxPrefix = "--";
      PrintWriter printWriter0 = null;
      int int0 = 635;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1537, " ] [ long ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.addOption("arg", true, "\n");
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 2322, 32);
      helpFormatter0.printHelp("9;", options0, true);
      File file0 = MockFile.createTempFile("arg", "50<k", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "a(G\u0004(lDzt-cG~", "KO~ppW_6;@", options0, (-1150), (-1), "9;");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2322, "usage: ", "", options1, 2322, 0, "(X|x\"d<V9`", false);
      helpFormatter0.findWrapPos("", (-1), 0);
      helpFormatter0.findWrapPos("", (-390), (-393));
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2224), "*5nD> @");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.addOption("", "'T5W/M=.,R6", false, "YDq?`8JV8");
      options0.addOption("arg", true, "\n");
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 2322, 3);
      helpFormatter0.printHelp("9;", options0, true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      PrintWriter printWriter0 = null;
      int int0 = 635;
      String string0 = "[";
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(1132, "[", "--", options0, "NO_ARGS_ALLOWED", false);
      // Undeclared exception!
      try { 
        options0.addOption("\"", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 635;
      Options options1 = new Options();
      options1.hasShortOption(".U]0Z@L;KV");
      String string0 = "";
      String string1 = "`<A#0]|";
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 635, "", ".U]0Z@L;KV", options1, 635, 72, "`<A#0]|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.addOption("arg", true, "\n");
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 2322, 39);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.hasShortOption("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 635, "[", "", options0, 635, 635, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.addOption("arg", true, "\n");
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 2322, 32);
      helpFormatter0.printHelp("9;", options0, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byteArrayOutputStream0.write(74);
      options0.getOption("arg");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("\n");
      helpFormatter1.getNewLine();
      helpFormatter1.printHelp(" ", options0, false);
      options1.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp("\n", options1);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.printHelp("--", "\"J{] \"", options0, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter1.setNewLine("v'gNa4>6aD");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "|`#=c'M^");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption((String) null);
      options1.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      options1.addOption("arg", true, "xC;u.D&FYU]C");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("&er>P}gnl*o2", options0, false);
      Options options2 = new Options();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 891, 74, "A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 1;
      String string0 = "<";
      String string1 = "arg";
      int int1 = 1010;
      int int2 = 3368;
      String string2 = "?mQ7?rN";
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, int0, string0, string1, options0, int1, int2, string2, boolean0);
      mockPrintWriter0.append((CharSequence) string1);
      String string3 = "";
      options1.addOption(string3, boolean0, helpFormatter1.defaultOptPrefix);
      int int3 = 4701;
      String string4 = "T3\"zk";
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, int3, string4, options0);
      String string5 = "Byns;ETpjWBc^A";
      boolean boolean1 = true;
      helpFormatter0.printHelp(string5, options0, boolean1);
      int int4 = 32;
      helpFormatter1.setLeftPadding(int4);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      options1.getOption((String) null);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("&er>P}gnl*o2", options0, false);
      Options options3 = new Options();
      Options options4 = options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("xC;u.D&FYU]C", options4);
      options1.hasShortOption("-");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("\n", "", options2, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption((String) null);
      Options options2 = options1.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      helpFormatter0.printHelp(44, "A CloneNotSupportedException was thrown: ", "s:7W^\"(B", options2, "&er>P}gnl*o2");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, (-2), 74, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption((String) null);
      options1.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("&er>P}gnl*o2", options0, false);
      Options options2 = new Options();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("xC;u.D&FYU]C", options3);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", (String) null, options0, (-1), (-2), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      options1.getOption((String) null);
      options1.addOptionGroup(optionGroup0);
      String string1 = "&er>P}gnl*o2";
      options0.hasLongOption("-");
      options1.addOption("arg", false, "xC;u.D&FYU]C");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("&er>P}gnl*o2", options0, false);
      Options options2 = new Options();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("xC;u.D&FYU]C", options3);
      String string2 = null;
      File file0 = MockFile.createTempFile("arg", (String) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "-", file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "v'gNa4>6aD";
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "qys,bKC");
      options1.hasShortOption("qys,bKC");
      helpFormatter0.renderOptions(stringBuffer0, 91, options1, 19, 91);
      helpFormatter0.printHelp("-", options0, true);
      helpFormatter0.setLeftPadding(2168);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.setSyntaxPrefix("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      helpFormatter0.findWrapPos("", (-1), 1);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      try { 
        MockFile.createTempFile(">1=8c~-,q5^mmvM", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.write(3);
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 323, 3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("NFD0JZRYGNIDV2", options0, true);
      helpFormatter1.setLeftPadding(3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.write(3);
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      helpFormatter0.printOptions(mockPrintWriter0, 64, options0, 271, 271);
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "RO_mME", " ", options0, 3, 3, "RO_mME", false);
      helpFormatter0.renderOptions((StringBuffer) null, 513, options0, 115, 115);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", true, "qys,bKC");
      helpFormatter0.renderOptions(stringBuffer0, 91, options1, 7, 91);
      helpFormatter0.printHelp("-", options0, true);
      helpFormatter0.setLeftPadding(2168);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(32);
      byteArrayOutputStream0.write(32);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('D');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 74, "f~lHud\"9k", "v'gNa4>6aD", options0, 109, 891, (String) null, true);
      helpFormatter1.printHelp("usage: ", options0, true);
      helpFormatter1.setLeftPadding((-145));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      int int0 = 1;
      byteArrayOutputStream0.write(74);
      int int1 = 1476;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1476);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1006, "\n", "-", options0, 1, 24, "arg", false);
      String string0 = "]";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, int0, helpFormatter1.DEFAULT_ARG_NAME, string0, options0, int1, helpFormatter1.DEFAULT_WIDTH, helpFormatter1.defaultArgName, boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = 1;
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byteArrayOutputStream0.write(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1476);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(byteArrayOutputStream0, 34);
      byteArrayOutputStream0.writeTo(bufferedOutputStream1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "v'gNa4>6aD";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "v'gNa4>6aD";
      PrintWriter printWriter0 = mockPrintWriter0.format("\n", objectArray0);
      Options options1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 74, "q", "-", (Options) null, 77, 1, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("#|[04G< &> 0sY>1_");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      byteArrayOutputStream0.write(9);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 34, "0&W(QnX1^}5", " ", options0, 1006, 9, "", true);
      helpFormatter1.printHelp("v'gNa4>6aD", options0, true);
      helpFormatter0.setLeftPadding(1334);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption((String) null);
      options1.addOptionGroup(optionGroup0);
      options0.hasLongOption("-");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("&er>P}gnl*o2", options0, false);
      Options options2 = new Options();
      Options options3 = options2.addOptionGroup(optionGroup0);
      options2.getMatchingOptions("");
      helpFormatter0.printHelp("xC;u.D&FYU]C", options3);
      String string0 = "FooMqx4j1;;?k(y~l";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "FooMqx4j1;;?k(y~l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      int int0 = 1;
      byteArrayOutputStream0.write(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1476);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 1175, (String) null, "dp`c& cD@^@FPgb[ol\"", options0, (-3150), 3, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("-");
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(9);
      Options options1 = options0.addOption((String) null, "NO_ARGS_ALLOWED", false, "qys,bKC");
      helpFormatter0.renderOptions(stringBuffer0, 91, options1, 7, 91);
      helpFormatter0.printHelp("-", options0, true);
      helpFormatter0.setLeftPadding(2168);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byteArrayOutputStream0.write(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1476);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1006, "\n", "-", options0, 1, 24, "arg", false);
      helpFormatter0.printHelp("i[XW", options0, true);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 1;
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      boolean boolean0 = true;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 86, "v'gNa4>6aD", "-\"]8W'>0W;", options1, 9, 1, "b:mp", true);
      String string0 = "";
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      String string1 = null;
      Options options2 = options1.addOption("arg", true, "-");
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, int0, string1, options2);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 27);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "7P3kL[+6043X@ddM?", options1, 3, (-537), "-\"]8W'>0W;", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byteArrayOutputStream0.write(74);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1476);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 74, "djmEd\"e&D*`", "\n", options0, 3373, (-3422), "=", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("A", false, "");
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = 13;
      helpFormatter0.renderWrappedText(stringBuffer0, 2105, 13, "?.:,x:q2j>[Q=x;");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1225, "usage: ", "", (Options) null, "?.:,x:q2j>[Q=x;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 27);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      mockPrintWriter0.println((long) 9);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 86, "v'gNa4>6aD", "-\"]8W'>0W;", options1, 9, 1, "b:mp", true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options2 = options1.addOption("arg", true, "-");
      helpFormatter0.printUsage(printWriter0, 775, (String) null, options2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      helpFormatter0.renderWrappedText(stringBuffer0, 2105, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getOption((String) null);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-590), 10, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptPrefix("#mv");
      options0.getOptionGroups();
      helpFormatter0.printHelp("usage: ", options0);
      int int0 = 74;
      helpFormatter0.findWrapPos(" | ", 74, 0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "<", options0, "\u0001o)a6@-:I$%", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (long) 1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2105, 0, "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("-");
      stringWriter0.flush();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      StringWriter stringWriter1 = new StringWriter(3);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.getBuffer();
      Options options0 = new Options();
      StringBuffer stringBuffer2 = new StringBuffer("D01bV(HD");
      stringBuffer0.insert(0, (CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-838), (Options) null, 63, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append('m');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("<Y0`T<&nQq|;", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 775, 17, "");
      helpFormatter0.setNewLine("");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter1.flush();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      stringWriter2.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options1 = new Options();
      StringBuffer stringBuffer1 = new StringBuffer("Lp'ZpU}\"LPDVk");
      Options options2 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 775, options2, 63, 63);
      helpFormatter0.rtrim("H");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 891, 891, "?^{KB')/y[Qa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      OptionGroup optionGroup1 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("--");
      options0.getOptionGroups();
      helpFormatter1.printHelp("v'gNa4>6aD", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("'RJ", 1, (-178));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printHelp("<", options0);
      helpFormatter0.findWrapPos("V`#", 31, 31);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.getOptionComparator();
      helpFormatter1.printHelp("-", (String) null, options0, (String) null, true);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.setNewLine("{G<W&'eS");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1, (-610));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("d#g;!VO'>+@7");
      MockFile mockFile0 = new MockFile("has already been selected: '", "HRA");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setWidth((-1215));
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("-", (String) null, true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("\u0001o)a6@-:I$%");
      options1.getOptionGroups();
      helpFormatter0.printHelp("<Aiog6uIAQeFOe", options0);
      helpFormatter0.findWrapPos("usage: ", 31, 0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp(".=C?.pMD-", "3+", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setNewLine("^");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("A", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      helpFormatter0.setLongOptPrefix(".c.'");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byteArrayOutputStream0.write(1);
      Options options1 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 27);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 86, "v'gNa4>6aD", "-\"]8W'>0W;", options1, 9, 1, "b:mp", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("XtTm");
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.setLongOptSeparator("1Z$eH7Lk#_~Q~;,ou8V");
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      String string0 = "-\"]8W'>0W;";
      String string1 = null;
      Options options0 = new Options();
      String string2 = "";
      String string3 = "   ";
      Options options1 = new Options();
      helpFormatter0.printHelp("]", options1, false);
      String string4 = "(-%C(i-:815;XgYP17";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("t]i_o(", "(-%C(i-:815;XgYP17");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // (-%C(i-:815;XgYP17
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("");
      options0.getOptionGroups();
      Options options1 = new Options();
      helpFormatter0.printHelp(" ", options1);
      helpFormatter1.findWrapPos("0w#UCv,h:", 74, 74);
      helpFormatter0.getDescPadding();
      helpFormatter1.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("6TH!(f<F!lnGQ", "pBig{ha0/N6z@", options1, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.write(3);
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "RO_mME", " ", options0, 3, 3, "RO_mME", false);
      helpFormatter0.printHelp("usage: ", options0, false);
      helpFormatter0.setLeftPadding((-4374));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = "x0ed%UX";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("x0ed%UX");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = 516;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "usage: ");
      options1.helpOptions();
      Option option0 = null;
      try {
        option0 = new Option(">9 os|fiU+>", "\n", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>9 os|fiU+>' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m)(/";
      Options options0 = null;
      boolean boolean0 = true;
      String string1 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "   ", (Options) null, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "arg";
      String string1 = "";
      helpFormatter0.setSyntaxPrefix("");
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3125), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2989);
      helpFormatter0.setDescPadding((-2989));
      helpFormatter0.setLongOptSeparator("cmdLineSyntax not provided");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(44);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = '4';
      charArray0[2] = '!';
      charArray0[3] = '.';
      charArray0[4] = 'G';
      charArray0[5] = 'C';
      charArray0[6] = 't';
      charArray0[7] = 'h';
      charArray0[8] = '3';
      stringWriter1.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringWriter1.write(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2684), (-2684), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      String string0 = "G'4>Aiiv1t^";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = null;
      // Undeclared exception!
      try { 
        Locale.forLanguageTag((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("\u0001o)a6@-:I$%");
      options0.getOptionGroups();
      helpFormatter0.printHelp("<", options0);
      helpFormatter0.findWrapPos("v'gNa4>6aD", 0, 0);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("<", ".=C?.pMD-", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      stringBuffer0.insert(0, (long) 1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2105, 0, "");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      stringBuffer0.insert(0, (long) 1);
      helpFormatter0.renderWrappedText(stringBuffer0, 2105, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "v'gNa4>6aD";
      helpFormatter0.defaultLongOptPrefix = "v'gNa4>6aD";
      helpFormatter0.setSyntaxPrefix("-\"]8W'>0W;");
      String string1 = "<";
      Options options0 = new Options();
      options0.getOption("-\"]8W'>0W;");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-692), "v'gNa4>6aD", "", options1, "v'gNa4>6aD");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.write(3);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 13, 3, "org.apache.commons.cli.Util");
      int int0 = (-374);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-374), options0, (-2028), 74);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(13);
      Options options0 = new Options();
      stringBuffer0.append(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1109), options0, (-601), (-1109));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "iy19j#'=r";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) stringWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 0, "", "", options3, 1619, 700, ",n?!\" CCl", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(0);
      String string0 = "8+mCx7";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", "org.apache.commons.cli.HelpFormatter$1", false, "-");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options2.addOption("G);gxnR(ibt-0aC`41", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'G);gxnR(ibt-0aC`41' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      byteArrayOutputStream0.write(3);
      String string0 = "[>vE$?]qY>A]+Q";
      Options options0 = new Options();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      byteArrayOutputStream0.writeTo(bufferedOutputStream0);
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1086), "RO_mME", "[>vE$?]qY>A]+Q", options0, (-1086), (-1086), "RO_mME", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 2311;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = "";
      Options options0 = new Options();
      Option option0 = new Option("arg", "qgI6$R]ex-", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption("qgI6$R]ex-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'qgI6$R]ex-' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("arg", "-", true, "vU_");
      Option option0 = null;
      try {
        option0 = new Option("-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 361, 19, "!O0)X6A5W5MGT4=y+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      helpFormatter0.setOptionComparator((Comparator) null);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 31;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "DFv\"b<`1";
      helpFormatter0.rtrim("DFv\"b<`1");
      Options options0 = new Options();
      String string1 = "v";
      // Undeclared exception!
      try { 
        options0.addOption("Bq9/r#MaoF1Wf9", "", false, "v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Bq9/r#MaoF1Wf9' contains an illegal character : '/'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("!|-`d}", objectArray0);
      int int1 = (-1747);
      String string0 = "7gJP-";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      helpFormatter0.printHelp("!|-`d}", "!|-`d}", options0, "7gJP-");
      optionGroup0.setRequired(false);
      Option option0 = null;
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getNewLine();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) "'";
      Object object0 = new Object();
      objectArray0[7] = object0;
      mockPrintWriter0.format(locale0, "'", objectArray0);
      int int0 = 0;
      String string1 = ",fg}14;TN`FASN-[P|";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.setDescPadding(31);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) " ", 31, (-2803));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.defaultLongOptPrefix = "org.apache.commons.cli.HelpFormatter$1";
      String string0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      mockPrintWriter0.append('(');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) filterOutputStream0;
      filterOutputStream0.write(1353);
      mockPrintWriter0.printf("*6){HiByR-^G9A", objectArray0);
      int int0 = 2471;
      String string1 = "vH(}6@wl4Ccp2*:";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 873;
      String string0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      String string1 = "[ option: ";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "[ option: ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "[ option: ";
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[ option: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.format("--", objectArray0);
      int int1 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("[", "[ARG...]", false, "H40\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
