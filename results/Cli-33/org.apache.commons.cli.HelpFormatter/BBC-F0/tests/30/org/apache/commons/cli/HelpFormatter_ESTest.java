/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:35:16 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = 2282;
      StringWriter stringWriter0 = new StringWriter(2282);
      StringWriter stringWriter1 = new StringWriter();
      Options options1 = options0.addOption("o", true, "-");
      helpFormatter1.printHelp(74, "2r%Q'H13O/&$o67~X=", "", options1, "-");
      helpFormatter0.printHelp(2282, " ", "_rg", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 17, (String) null, options0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("-");
      helpFormatter0.getOptionComparator();
      String string0 = null;
      String string1 = "Illegal option name '";
      boolean boolean0 = true;
      helpFormatter1.printHelp(helpFormatter2.DEFAULT_LEFT_PAD, helpFormatter2.defaultOptPrefix, string0, options1, string1, boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 97, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(44, "[ option: ", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "4qbIo:.QII;#WghB9");
      Option option0 = new Option((String) null, "--", false, (String) null);
      options1.addOption(option0);
      helpFormatter0.printHelp((-1), "[ option: ", (String) null, options1, "4qbIo:.QII;#WghB9");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      int int0 = 5042;
      String string0 = "])sBi4cZ@/Oz2z";
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-103), options1, 1, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(74);
      Options options1 = options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      options1.hasLongOption("arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 693, (-1935), "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 694, "mPJjK)!E", (String) null, options1, 3, 3283, "--", false);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1418, "\n");
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      helpFormatter0.findWrapPos("]", 1418, 1418);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.setArgName("i6&Xt6a<`DmZ#@A;Rb");
      int int0 = 103;
      helpFormatter0.renderOptions((StringBuffer) null, 103, options0, 115, 115);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 115, 115, "\"Ps+dFJ4%x g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.findWrapPos("SOvg", 1569, 1);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("", (-490), 1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Util";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2329, 2329, "org.apache.commons.cli.Util");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 9;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "S", "=(/yqs$q", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "Fb[T<YTa08w_'6";
      String string1 = "";
      helpFormatter0.printHelp(helpFormatter0.defaultLeftPad, helpFormatter1.DEFAULT_ARG_NAME, string0, options0, string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options1 = options0.addOption("", true, "-");
      helpFormatter1.printHelp(74, "2r%Q'H13O/&$o67~X=", "", options1, "org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 1155, 13, "arg");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer1, (-1301), (Options) null, 97, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" ", "]C'%wKUFh4!> ?&v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("&ME9", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      mockPrintWriter1.format("--", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 922, "&ME9", "N}x#>*j/m9Z", options0, 1388, 1388, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options1 = options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "2r%Q'H13O/&$o67~X=", options0);
      helpFormatter0.getNewLine();
      mockPrintWriter0.printf((Locale) null, "]}Ia4", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ">", "E", options0, 74, 44, " ", true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, helpFormatter1.DEFAULT_LEFT_PAD, helpFormatter1.DEFAULT_LONG_OPT_SEPARATOR, options1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("", 3, 3);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("H{H4? nFJQRf", "usage: ", (Options) null, "H{H4? nFJQRf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 32, 42);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.printHelp("^,", options0, true);
      helpFormatter0.setLongOptPrefix("UsT!_>3-l%A");
      helpFormatter0.printHelp(32, "]", "x!RN", options0, "=(/yqs$q");
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 761, 9, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 65, 3344, "");
      MockFile mockFile0 = new MockFile("--");
      String string0 = "Hk$GZ3";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "Hk$GZ3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Hk$GZ3
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-784));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      Options options0 = new Options();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setNewLine("z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "Z_otn!l=");
      helpFormatter0.defaultArgName = "z";
      Options options0 = new Options();
      helpFormatter0.printHelp("z", options0, true);
      helpFormatter0.setLongOptPrefix("z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-336), "--", "arg", options0, 3, (-351), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "2r%Q'H13O/&$o67~X=", options0);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 3, 3);
      stringWriter1.write(65);
      stringWriter1.getBuffer();
      helpFormatter1.printHelp(3, "\n", "a", options0, "");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      StringBuffer stringBuffer0 = new StringBuffer("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 2235, "usage: ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 31;
      Options options0 = null;
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "org.apache.commons.cli.Util", " ", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 53, 53, "");
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 53, options0, 1424, 72);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("");
      MockFile mockFile0 = new MockFile("m");
      File file0 = MockFile.createTempFile("cmdLineSyntax not provided", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.println((double) 1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-925), ",:Fu8N'`j2EZN(3", "", options0, (-925), (-925), ",:Fu8N'`j2EZN(3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ", "--").when(comparator0).toString();
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp(3280, "SH.", "", options1, "J1>qF!?!srZryce8EL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "J1>qF!?!srZryce8EL";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "J1>qF!?!srZryce8EL";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) "org.apache.commons.cli.Option";
      mockPrintWriter0.format("org.apache.commons.cli.Option", objectArray0);
      Options options2 = options1.addOption("", true, "");
      helpFormatter0.printHelp(3280, "org.apache.commons.cli.AlreadySelectedException", "", options2, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = 2282;
      StringWriter stringWriter0 = new StringWriter(2282);
      StringWriter stringWriter1 = new StringWriter(1);
      Options options1 = options0.addOption("", true, "-");
      helpFormatter1.printHelp(74, "2r%Q'H13O/&$o67~X=", "", options1, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Option option0 = new Option("arg", "");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(43, "--", "-", options2, "YpEJF`Y!-s,x");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", true, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "])sBi4cZ@/Oz2z", options1, 3, 1, "\n", true);
      helpFormatter1.printHelp(5042, "--", " ", options0, "--");
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.appendCodePoint(3);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 44, "\n");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter1.findWrapPos("?9nXs-jup", 44, 1);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.write("-");
      stringWriter0.write("a*a!NnTP");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "Cmv", "", options0, (-1), (-925), ",:Fu8N'`j2EZN(3");
      int int1 = 31;
      String string0 = "";
      String string1 = "   ";
      String string2 = "";
      helpFormatter0.printHelp(int1, string0, string1, options0, string2, boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("<!R E+W=8\"ITYNH~U-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 3, 3);
      StringWriter stringWriter2 = stringWriter0.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<!R E+W=8\"ITYNH~U-";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) stringWriter1;
      Locale locale1 = Locale.UK;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "", objectArray0);
      helpFormatter0.printHelp(printWriter0, 74, ">]+~3$:g", " ", options0, 53, 3, "");
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.OptionValidator", true, "<!R E+W=8\"ITYNH~U-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionValidator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.findWrapPos("9N", 0, 0);
      boolean boolean0 = false;
      String string1 = "V=U|g#ol";
      MockFile mockFile0 = new MockFile("", "--");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 533, "--", "Cmv", options0, (-2115), (-1876), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "--";
      helpFormatter0.setDescPadding(848);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Q#8%MM-?cr7i)", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("<!R E+W=8\"ITYNH~U-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 3, 3);
      String string0 = "";
      StringWriter stringWriter2 = stringWriter0.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, true);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "<!R E+W=8\"ITYNH~U-";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) helpFormatter1;
      objectArray0[3] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, "", "", options0, 1, (-503), " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      int int0 = 32;
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Gv1a");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2729, "-", "", options2, (-151), (-1), "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      String string0 = "";
      int int0 = 5042;
      MockFile mockFile0 = new MockFile("31");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string1 = ":4=Vmkpi";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, ":4=Vmkpi", "arg", options0, 1, (-2507), "6E#rt`Fa`YMTRE{", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 74, 74, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" j&X^", 64, (-878));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, "QWvxQ3S@%l", "", options0, "[", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("%+", options1, false);
      helpFormatter0.setLongOptPrefix("){n");
      helpFormatter0.printHelp((-1), "%+", "The option '", options0, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1076, (String) null, "[", options0, 63, (-2014), "QWvxQ3S@%l", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "\n";
      boolean boolean0 = false;
      helpFormatter0.printHelp(533, "--", "J As;[c", options0, "--", false);
      Options options1 = new Options();
      helpFormatter0.setLongOptPrefix("l!jU}I5xuaRW'lA");
      helpFormatter0.printHelp(1076, "[ARG...]", "J As;[c", options0, "l!jU}I5xuaRW'lA");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1076, "J As;[c", (String) null, options1, 1076, 0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("z", options0);
      helpFormatter0.printHelp(13, "OxFi{KKUmZ}$3D", "z", options0, "N*|^MPwC");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("&ME9", "", "", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("3.)E", options1, true);
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.printHelp(9, "=(/yqs$q", "[ARG...]", options0, "S");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "3.)E", "usage: ", options1, (-1), 3, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("VIaq&D\u0004`,_2Z}$HK>", options0);
      helpFormatter0.printHelp(13, "jxFi{KPUmZ}$3D", "VIaq&D\u0004`,_2Z}$HK>", options0, "N*|^MPwC");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 13, options0, 75, (-512));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 3, 3);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 44, "\n");
      helpFormatter0.getWidth();
      helpFormatter1.setLongOptSeparator("usage: ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1830, 1830, "Cannot add value, list full.");
      stringBuffer1.deleteCharAt(1);
      helpFormatter0.renderWrappedText(stringBuffer1, 191, 1830, "/#7Zp4");
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.setLongOptSeparator("/#7Zp4");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(533, "org.apache.commons.cli.HelpFormatter$1", "L^|^W\"XIXgG`]l~2N", options1, "X>Z$5<", false);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      Options options3 = new Options();
      helpFormatter1.printHelp("-", options3);
      helpFormatter1.printHelp(3, "-", "X>Z$5<", options0, "]");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 980, 309, "");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "\n";
      helpFormatter0.printHelp(533, "--", "", options0, "--", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.setLongOptPrefix("l!jU}I5xuaRW'lA");
      helpFormatter0.printHelp(1076, "[ARG...]", "", options0, "l!jU}I5xuaRW'lA");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1076, "", (String) null, options1, 1076, 0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Collection collection0 = new LinkedList<Locale>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options1 = options0.addOption("", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "])sBi4cZ@/Oz2z", options2, 3, 1, "\n", true);
      helpFormatter1.printHelp(5042, "--", " ", options0, "--");
      helpFormatter0.getArgName();
      Options options3 = options1.addOption("arg", true, "arg");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", " ", options3, (-655), 31, "SCW=", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "usage: ", 3, 3);
      Options options1 = options0.addOption("", true, "-");
      helpFormatter1.printHelp(74, "2r%Q'H13O/&$o67~X=", "", options1, "org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale.lookup(linkedList0, list1);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-496), "2r%Q'H13O/&$o67~X=", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      options0.addOption((String) null, false, "arg");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      Locale.lookup(linkedList0, list0);
      linkedList1.add((Locale) null);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf((Locale) null, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2257), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp(3280, "SH.", "", options1, "J1>qF!?!srZryce8EL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "J1>qF!?!srZryce8EL";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "J1>qF!?!srZryce8EL";
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) "org.apache.commons.cli.Option";
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.Option", objectArray0);
      helpFormatter0.printHelp(printWriter0, 922, "N}x#>*j/m9Z", "org.apache.commons.cli.Option", options1, 3280, 2341, "4hm$yi5Q( YV4UHK", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(4791);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-175);
      int int1 = 109;
      int int2 = (-969);
      long long0 = 2377L;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, (String) null);
      Option option0 = new Option("", false, "Z0j6?SeKsS43[\"m:!");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[IY3x+p", "lIe<JtH[Z>cBx<-", options2, "lIe<JtH[Z>cBx<-", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      int int0 = 3280;
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption((String) null, true, "usage: ");
      String string0 = "J1>qF!?!srZryce8EL";
      helpFormatter0.printHelp(3280, "SH.", "", options1, "J1>qF!?!srZryce8EL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      int int1 = 65;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 65, options0, 32, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultArgName = "\n";
      helpFormatter0.printHelp(533, "--", "", options0, "--", false);
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options1, true);
      helpFormatter0.setLongOptPrefix("l!jU}I5xuaRW'lA");
      helpFormatter0.printHelp(533, "org.apache.commons.cli.HelpFormatter", "mt%dZ]hLeS$4w", options1, "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", (-2001), (-2));
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      options1.addOption((String) null, false, "I~Me,KC");
      helpFormatter0.printHelp(309, "J1>qF!?!srZryce8EL", "", options1, "V_U");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("0{]$o %R_:U]W}.").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3280, "\"", "", options0, "\"");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 1;
      int int1 = (-353);
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-353), "Cannot add value, list full.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-287);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-287), (-287), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 3, 3);
      stringWriter1.getBuffer();
      helpFormatter1.printHelp(3, "\n", "a", options0, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp(3280, "SH.", "", options1, "J1>qF!?!srZryce8EL");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printOptions(mockPrintWriter0, 65, options1, 65, 34);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.chars();
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '@';
      stringBuffer0.append(charArray0, 1, 1);
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "e9%c!w|#Q_Bu~");
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.setLongOptSeparator("#R.D-,D]U14lfm");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "Z_otn!l=");
      helpFormatter0.defaultArgName = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.defaultLeftPad = (-351);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(110, "'", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getSyntaxPrefix();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fnI)[x&{I");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "+S3.;_GqtZv5,@J3F";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-1924);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1924), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("0{]$o %R_:U]W}.").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, " ");
      helpFormatter0.printHelp(":F6ElqU", options1, false);
      String string0 = "-";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", ":F6ElqU");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // :F6ElqU
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      Option option0 = new Option("arg", false, "A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(533, "org.apache.commons.cli.HelpFormatter$1", "L^|^W\"XIXgG`]l~2N", options1, "X>Z$5<", false);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "7U),tIupI";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "usage: ";
      objectArray0[7] = (Object) "usage: ";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "usage: ");
      Options options0 = new Options();
      options0.addOption((String) null, false, "+S3.;_GqtZv5,@J3F");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, (String) null, "", options0, "pr_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1061, 1061, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "r*K(7:", true, "");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 309, options2, 309, 309);
      helpFormatter0.renderWrappedText(stringBuffer1, 309, 44, "r*K(7:");
      helpFormatter0.rtrim("r*K(7:");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "usage: ");
      helpFormatter0.printHelp(3280, "SH.", "", options1, "J1>qF!?!srZryce8EL");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(32);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, " ");
      helpFormatter0.printHelp(":F6lqU", options1, false);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.setLongOptSeparator(":F6lqU");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "org.apache.commons.cli.HelpFormatter$1", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.defaultLongOptPrefix = "#R.D-,D]U14lfm";
      stringBuffer0.chars();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#R.D-,D]U14lfm", "#R.D-,D]U14lfm", (Options) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ", 3, 3);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 44, "\n");
      helpFormatter0.getWidth();
      helpFormatter1.setLongOptSeparator("usage: ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "l!jU}I5xuaRW'lA";
      int int0 = 533;
      String string1 = "";
      helpFormatter0.defaultArgName = "\n";
      boolean boolean0 = false;
      helpFormatter0.printHelp(533, "--", "", options0, "--", false);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        options0.addOption("l!jU}I5xuaRW'lA", "nA~tHLw+%", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'l!jU}I5xuaRW'lA' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-977), "3w", "3w", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      String string0 = "6&0#mk)8Jl";
      String string1 = "V1yT\"8b>`MjE&}|1n,";
      String string2 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("E&\"9'", options0, true);
      // Undeclared exception!
      try { 
        options0.addOption("CWGpsw7m=#m6Hv4%8z", true, "6&0#mk)8Jl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'CWGpsw7m=#m6Hv4%8z' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.defaultLongOptPrefix = "#R.D-,D]U14lfm";
      stringBuffer0.chars();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "SH.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-977), "", "", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 309, 309, "[ Options: [ short ");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 309, 309, "usage: ");
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "usage: ", false);
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      int int0 = 32;
      helpFormatter0.setLeftPadding(32);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("usage: ", 32, 3280);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, (-1644.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1842;
      String string0 = helpFormatter0.createPadding(1842);
      helpFormatter0.getNewLine();
      helpFormatter0.setLeftPadding(1842);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) string0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) "\n";
      objectArray0[4] = (Object) string0;
      objectArray0[5] = (Object) string0;
      objectArray0[6] = (Object) "A CloneNotSupportedException was thrown: ";
      mockPrintWriter0.printf("A CloneNotSupportedException was thrown: ", objectArray0);
      int int1 = 0;
      String string1 = "line.separator";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "-", true, "sV<+Q4n@hP!!7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+S3.;_GqtZv5,@J3F";
      helpFormatter0.defaultOptPrefix = "+S3.;_GqtZv5,@J3F";
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "+S3.;_GqtZv5,@J3F";
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "7U),tIupI";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "usage: ";
      objectArray0[7] = (Object) "usage: ";
      objectArray0[8] = (Object) "7U),tIupI";
      PrintWriter printWriter0 = mockPrintWriter1.format("7U),tIupI", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "MVgu^,K.'[//IP";
      int int0 = 1376;
      helpFormatter0.findWrapPos("MVgu^,K.'[//IP", 3, 1376);
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.createPadding(423);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string1 = "r4J";
      boolean boolean0 = true;
      Options options1 = options0.addOption("r4J", "--", true, "\n");
      boolean boolean1 = false;
      String string2 = "Iz{[";
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, "Iz{[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('B');
      int int0 = (-793);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-793), (Options) null, 9, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1704;
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 0, 1, "");
      helpFormatter0.setOptPrefix("");
      String string0 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("--", "g\fwj!@A\"\"JN^1", false, "g\fwj!@A\"\"JN^1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.setNewLine("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 323, "Z_otn!l=");
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultLeftPad = (-351);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-108));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      Option option0 = new Option("", "", false, (String) null);
      Options options1 = options0.addOption(option0);
      options1.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setWidth(3071);
      helpFormatter0.defaultOptPrefix = "";
      String string0 = "fQ|z5X#LqA3<C&o6";
      helpFormatter0.setArgName("fQ|z5X#LqA3<C&o6");
      helpFormatter0.setOptPrefix("Oci,B|?*Z^#n");
      String string1 = "#E]i5F";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 490;
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultDescPad = 490;
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "l!jU}I5xuaRW'lA";
      int int0 = 533;
      String string2 = "";
      helpFormatter0.defaultArgName = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(533, (String) null, "", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      helpFormatter0.printHelp("V1yT\"8b>`MjE&}|1n,", "cmdLineSyntax not provided", options0, "V1yT\"8b>`MjE&}|1n,");
      helpFormatter0.setLongOptSeparator("6&0#mk)8Jl");
      helpFormatter0.setArgName("GO8Ir");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      helpFormatter0.setLeftPadding((-2));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "7 AN/cE";
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "l2V%gq";
      // Undeclared exception!
      try { 
        options1.addOption("--", false, "l2V%gq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.defaultLeftPad = 0;
      options0.addOption("", false, "");
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.setWidth(0);
      options1.hasLongOption("");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "[", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "zk#:3";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.helpOptions();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.HelpFormatter$OptionComparator", "zk#:3", options0, "zk#:3", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
