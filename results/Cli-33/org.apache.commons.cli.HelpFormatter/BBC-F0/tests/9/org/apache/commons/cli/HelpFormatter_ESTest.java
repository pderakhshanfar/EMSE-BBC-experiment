/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:25:58 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 1513;
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1513, " ] [ long ");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = null;
      Options options1 = options0.addOption(helpFormatter0.DEFAULT_OPT_PREFIX, boolean0, string0);
      String string1 = "";
      String string2 = "";
      String string3 = "*36";
      Option option0 = new Option(string1, string2, boolean0, string3);
      Options options2 = options1.addOption(option0);
      String string4 = "line.separator";
      boolean boolean1 = true;
      String string5 = "";
      Options options3 = options2.addOption(helpFormatter0.defaultNewLine, string4, boolean1, string5);
      int int1 = 2793;
      helpFormatter0.renderOptions(stringBuffer1, int0, options3, int0, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      File file0 = MockFile.createTempFile(" | ", "arg", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " | ");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "<Sb+LM", "-", options1, 74, 1, "\n", true);
      helpFormatter0.getWidth();
      helpFormatter0.printOptions(mockPrintWriter0, 74, options0, 74, 74);
      helpFormatter0.printHelp("6", options1, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.println();
      StringBuffer stringBuffer0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 430, (Options) null, 430, 430);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "arg", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " | ");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "<Sb+LM", "-", options1, 74, 1, "\n", true);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      helpFormatter1.setArgName("6");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, (-1), "6");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-95), "--", "<Sb+LM", options0, 1, 3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "arg", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3156, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2306, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options0 = new Options();
      options0.getOption("--");
      helpFormatter0.setWidth((-2));
      helpFormatter0.getWidth();
      helpFormatter1.printHelp(1, "usage: ", "$e", options0, "\n", false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.commons.cli.Option");
      int int0 = 0;
      mockPrintWriter1.write("\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-133), "Cjxy");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "arg", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " | ");
      Options options1 = new Options();
      Options options2 = new Options();
      String string0 = "<Sb+LM";
      int int0 = 1071;
      int int1 = 79;
      String string1 = "_9FP)5LdZZm{%g^!";
      boolean boolean0 = false;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, helpFormatter1.defaultLeftPad, helpFormatter1.DEFAULT_ARG_NAME, string0, options1, int0, int1, string1, boolean0);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setArgName(helpFormatter1.DEFAULT_LONG_OPT_PREFIX);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NX`p^KWSOnBZa-");
      PrintWriter printWriter0 = mockPrintWriter0.append('}');
      helpFormatter0.printHelp(printWriter0, 72, "org.apache.commons.cli.HelpFormatter", "]", options0, 72, 4, "");
      options0.addOption("arg", "]", true, "NX`p^KWSOnBZa-");
      helpFormatter0.setWidth(62);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth(3390);
      helpFormatter0.createPadding(55);
      int int0 = (-2790);
      helpFormatter0.findWrapPos("\n", 55, (-2790));
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 233, 55, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "arg", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " | ");
      Options options1 = new Options();
      mockPrintWriter0.print('8');
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", (String) null, options0, 2, 2, (String) null, false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.setArgName("-");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("L");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("H0s()I");
      mockPrintWriter1.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 2, "n0Yk+8>u63");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "L");
      Options options0 = new Options();
      options0.getOption(helpFormatter1.DEFAULT_SYNTAX_PREFIX);
      String string0 = ">";
      String string1 = "";
      helpFormatter1.printHelp(helpFormatter0.defaultLeftPad, string0, string1, options0, helpFormatter0.defaultNewLine);
      helpFormatter0.setArgName(helpFormatter1.defaultNewLine);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "]", true, "NX`p^KWSOnBZa-");
      options1.addOption("M1x", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp(74, "NX`p^KWSOnBZa-", "", options0, "]");
      helpFormatter0.setArgName("A");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText((StringBuffer) null, 3, 74, "D.\"?S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2306, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options0 = new Options();
      options0.getOption("--");
      String string0 = "^@";
      helpFormatter1.printHelp(1, "^@", "org.apache.commons.cli.HelpFormatter", options0, "");
      helpFormatter0.setArgName(string0);
      boolean boolean0 = true;
      int int0 = 10;
      String string1 = ".lP9)2i5jjP^";
      String string2 = ";J+AmZw$,}ds#aW";
      String string3 = "U%q?5S";
      helpFormatter1.printHelp(int0, string1, string2, options0, string3, boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("usage: ", "   ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.printHelp(32, "org.apache.commons.cli.HelpFormatter$OptionComparator", " ]", options0, "   ", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 11, (-394), "");
      helpFormatter0.printHelp(11, "='0!$S=/YV>V", "org.apache.commons.cli.OptionValidator", options0, "yc>7N<Tz8kg(4\"'e},L");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "J#1YH}^#4.+C}<+MO/`";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3080, 3080, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.rtrim("-");
      Option option0 = new Option("arg", "S}RdkcAU%)E=]N0A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("S}RdkcAU%)E=]N0A", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = options1.addOption("U", "+N])?2", true, "&N");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "'!S&gss=", ", ", options2, "org.apache.commons.cli.AlreadySelectedException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3619, "+-f]gI", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Options options0 = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<Sb+LM", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('>');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 31, (String) null, "-", (Options) null, 14, 14, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", "arg", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " | ");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "<Sb+LM", "-", options1, 74, 14, "\n", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.setArgName(" ");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "NX`p^KWSOnBZa-");
      Options options2 = options1.addOption("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("\n", "", options2, "NX`p^KWSOnBZa-");
      helpFormatter0.setArgName("JZDfV9'm:%b");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2300), "JZDfV9'm:%b", "", options3, ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2306, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      String string0 = "";
      Option option0 = new Option("", "--", true, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption("", true, "");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "h[M7T*p,G_e,!:kv", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1028), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("usage: ", "   ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "\n", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "{7jr{p](31Go!O^7J>", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(printWriter0, 1017, "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.HelpFormatter", options1, 195, 195, "org.apache.commons.cli.HelpFormatter", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("i/(s9dzC0DD", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(1, "-", "org.apache.commons.cli.HelpFormatter$1", options0, "org.apache.commons.cli.HelpFormatter", true);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter2.setLongOptSeparator("arg");
      options0.toString();
      Option option0 = new Option("arg", "arg", false, "");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("/nu!:\" N9H}0v9,pK_[", options1);
      helpFormatter1.getOptPrefix();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.setLongOptSeparator("\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp((-1), ",)Cm|/5n", "?4h,^L i<wmWT k'1M", options2, "i{B]?zkYpILVQ8(", true);
      helpFormatter2.setArgName("-");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        options1.addOption("^@-[a7td;qC!S U_g`", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^@-[a7td;qC!S U_g`' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      options0.toString();
      Option option0 = new Option("arg", "S}RdkcAU%)E=]N0A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("S}RdkcAU%)E=]N0A", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(3, "usage: ", "-", options0, "-", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setArgName(",o^!7");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("A CloneNotSupportedException was thrown: ");
      helpFormatter0.rtrim("AgGD!hk");
      int int0 = 906;
      helpFormatter0.createPadding(906);
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 906, options0, 906, 906);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      String string0 = "";
      String string1 = "NX`p^KWSOnBZa-";
      Options options1 = options0.addOption("", "", true, "NX`p^KWSOnBZa-");
      String string2 = "";
      Options options2 = options1.addOption("", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("J#1YH}^#4.+C}<+MO/`", "", options2, "NX`p^KWSOnBZa-");
      int int0 = (-1424);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "NX`p^KWSOnBZa-");
      Options options2 = options1.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("J#1YH}^#4.+C}<+MO/`", "", options2, "NX`p^KWSOnBZa-");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1406));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 2306, "NY5@ChG_b@");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-9), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      boolean boolean0 = false;
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string1 = "y";
      helpFormatter0.printHelp((-1), "6", "6", options0, "{", true);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 9, (-1), "6");
      // Undeclared exception!
      try { 
        options1.addOption("-", true, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      options0.toString();
      Option option0 = new Option("arg", "-", true, "S}RdkcAU%)E=]N0A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.setSyntaxPrefix("xi{yAu$z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(33, ".c/U<_N7tEB0x|0^87B", "yl}Iqd;ji}", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-214));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.setOptPrefix(" ");
      mockPrintWriter0.println();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 2306, options0, 2306, 2306);
      helpFormatter0.renderOptions(stringBuffer1, 3391, options0, 110, 110);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "NY5@ChG_b@";
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 2306, "NY5@ChG_b@");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options1 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option(" ", " ", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2);
      String string0 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      mockPrintWriter0.println();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "]", (String) null, (Options) null, 3, (-14), "{7jr{p](31Go!O^7J>", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.setDescPadding(1665);
      helpFormatter0.printHelp(1665, "--", "J#1YH}^#4.+C}<+MO/`", options0, "", true);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("hLHd!6nGKFI");
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1855), (CharSequence) "arg", 1587, (-4981));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1855
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      helpFormatter0.findWrapPos("y4}`yVC('", (-2707), 1932);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2707), "usage: ", "U", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("6", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      File file0 = MockFile.createTempFile(" | ", " LJD,{.5@u", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, " | ");
      Options options1 = new Options();
      Option option0 = new Option("", "arg", false, "usage: ");
      options1.addOption(option0);
      Options options2 = options0.addOption("", "", true, "=E}$\"Fv.yI0/U");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.write("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 1250, "");
      helpFormatter0.setWidth(1250);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("line.separator", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "  ";
      helpFormatter0.rtrim("  ");
      helpFormatter0.setDescPadding(32);
      Options options0 = null;
      boolean boolean0 = false;
      String string1 = "y";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", "  ", (Options) null, "y", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.getOptions();
      helpFormatter0.createPadding(2471);
      Option option0 = new Option((String) null, "\n", true, "mL1YqA;^^i6=('K0l");
      helpFormatter0.setDescPadding(32);
      helpFormatter0.findWrapPos("org.apache.commons.cli.HelpFormatter$OptionComparator", (-2), 32);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName((String) null);
      helpFormatter0.findWrapPos("--", 2471, 10);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim("");
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.findWrapPos("", (-2), 38);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      options0.toString();
      Option option0 = new Option("arg", "-", true, "S}RdkcAU%)E=]N0A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("S}RdkcAU%)E=]N0A", options1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("S}RdkcAU%)E=]N0A");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.printHelp(1262, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "hlV_,jNkY1Q~Wt!Bt;]", options0, "S}RdkcAU%)E=]N0A", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(1262);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]", "--");
      Options options0 = new Options();
      helpFormatter0.printHelp(1619, "-JR?\"", "\"", options0, (String) null);
      helpFormatter0.findWrapPos("\"", (-1941), 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.rtrim("--");
      helpFormatter0.setDescPadding(1619);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = new Locale("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "\"", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 63, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      String string0 = "S}RdkcAU%)E=]N0A";
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      options0.toString();
      Option option0 = new Option("arg", "-", true, "S}RdkcAU%)E=]N0A");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 9, "_,>\"$UNj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "NY5@ChG_b@";
      helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 2306, "NY5@ChG_b@");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "usage: ");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("-", "-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.write("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, false);
      String string0 = "~xePhigRd;|+%";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-315), 64, "~xePhigRd;|+%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1780), "]_", "]_", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("--");
      options0.toString();
      Option option0 = new Option("arg", "-", true, "S}RdkcAU%)E=]N0A");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("S}RdkcAU%)E=]N0A", options1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("S}RdkcAU%)E=]N0A");
      helpFormatter0.setLongOptSeparator("arg");
      helpFormatter0.printHelp(1262, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "hlV_,jNkY1Q~Wt!Bt;]", options0, "S}RdkcAU%)E=]N0A", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setDescPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[", 3, (-2707));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2021), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "6";
      helpFormatter0.printHelp("6", options0, true);
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("  ");
      helpFormatter0.setDescPadding(32);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "", (Options) null, "O1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.setDescPadding(3);
      int int1 = 0;
      helpFormatter0.setDescPadding(3);
      helpFormatter0.setArgName("*4y[}X,*~");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 4, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter2.setLongOptSeparator("arg");
      options0.toString();
      Option option0 = new Option("arg", "arg", true, "");
      helpFormatter1.printHelp("/nu!:\" N9H}0v9,pK_[", options0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "", options0, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("]", "--");
      Options options0 = new Options();
      helpFormatter0.printHelp(1619, "-JR?\"", "\"", options0, (String) null);
      helpFormatter0.findWrapPos("\"", (-1941), 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) "]";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "Qb#JeWx_";
      objectArray0[7] = (Object) "%t+Lo\"uT ]iw5r";
      mockPrintWriter0.format(locale0, "Qb#JeWx_", objectArray0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 31, "xHxm\tts.N8");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      Options options0 = null;
      boolean boolean0 = false;
      mockPrintWriter0.println();
      boolean boolean1 = true;
      String string0 = "{7jr{p](31Go!O^7J>";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "]", (String) null, (Options) null, 3, 10, "{7jr{p](31Go!O^7J>", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.findWrapPos("[", (-2), (-2707));
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("@xpSTEIq8v[[g9B?");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = null;
      int int0 = (-2486);
      boolean boolean0 = false;
      int int1 = 928;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, ">W^9", "org.apache.commons.cli.HelpFormatter$1", (Options) null, 928, 3, "3bNKi'", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println((float) 74);
      mockPrintWriter0.println();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 905, "usage: ");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "A CloneNotSupportedException was thrown: ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "S3w}.)G*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2411), (-2411), "gWq~*br`fHEwp");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "6";
      helpFormatter0.printHelp("6", options0, false);
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 0, options0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(2026);
      int int0 = 1011;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      Options options0 = null;
      int int1 = (-2);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "[", (Options) null, "qu$<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" | ");
      helpFormatter0.setDescPadding(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", " |", (Options) null, "O1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      options0.getOptions();
      helpFormatter0.createPadding(2471);
      Option option0 = new Option((String) null, "\n", true, "mL1YqA;^^i6=('K0l");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      options1.hasLongOption("arg");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", options2, "Od*(Cx^zVq8t'}Ji");
      helpFormatter0.setNewLine(" ");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "W]ms+'!a?^{N]ya_";
      helpFormatter0.printHelp("z", "", options0, "W]ms+'!a?^{N]ya_", false);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      int int0 = (-2273);
      String string1 = "";
      Options options1 = new Options();
      options1.getOptions();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '\\';
      charArray0[2] = '|';
      charArray0[3] = '2';
      charArray0[4] = '9';
      charArray0[5] = '7';
      charArray0[6] = '{';
      charArray0[7] = '/';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.rtrim("");
      helpFormatter0.setDescPadding(0);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "-");
      Option option0 = new Option("arg", false, "qg9 rrSu._tIZ");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", "\n", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options4, (-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      MockFile mockFile0 = new MockFile("]", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      int int0 = 13;
      Options options0 = null;
      boolean boolean0 = false;
      int int1 = 10;
      mockPrintWriter0.println();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "org.apache.commons.cli.ParseException", (String) null, (Options) null, 13, 0, "[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "NX`p^KWSOnBZa-");
      String string1 = "";
      Options options2 = options1.addOption("", false, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("J#1YH}^#4.+C}<+MO/`", "", options2, "NX`p^KWSOnBZa-");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-1424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3;
      helpFormatter0.setDescPadding(3);
      Options options0 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("f:8p2DLX-'C=^", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      helpFormatter0.setDescPadding(32);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "");
      Options options2 = options1.addOption("arg", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "arg", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2815, "", "cmdLineSyntax not provided", options3, (-2), 74, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      String string1 = "Hp8b(zFxT*u^";
      helpFormatter0.setLongOptPrefix("Hp8b(zFxT*u^");
      helpFormatter0.setArgName("Hp8b(zFxT*u^");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding((-2));
      helpFormatter0.getArgName();
      int int0 = (-3797);
      helpFormatter0.defaultWidth = (-3797);
      helpFormatter0.setLeftPadding(3);
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      String string0 = "S}RdkcAU%)E=]N0A";
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("");
      options0.toString();
      Option option0 = new Option("arg", "", true, "S}RdkcAU%)E=]N0A");
      Options options1 = options0.addOption(option0);
      options1.helpOptions();
      helpFormatter0.printHelp("S}RdkcAU%)E=]N0A", options1);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("S}RdkcAU%)E=]N0A");
      helpFormatter0.setLongOptSeparator("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1262, "", "hlV_,jNkY1Q~Wt!Bt;]", options0, "92\"]oomi+m^yXS", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(1089);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("sZe7(]@", "", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'sZe7(]@' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getWidth();
      PrintWriter printWriter0 = null;
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "";
      Options options0 = null;
      int int0 = (-2486);
      helpFormatter0.defaultOptPrefix = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "", (String) null, (Options) null, (-2486), 74, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      MockFile mockFile0 = new MockFile("'X{#Y*64Xx!X]+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = null;
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      Options options1 = options0.addOption((String) null, "eQIxfGiXE", false, "(O");
      mockPrintWriter0.print((long) 74);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1754), "'X{#Y*64Xx!X]+", (String) null, options1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
