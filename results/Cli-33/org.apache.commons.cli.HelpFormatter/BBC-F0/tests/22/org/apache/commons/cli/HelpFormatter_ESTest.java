/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 23:32:41 GMT 2020
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 32;
      helpFormatter0.createPadding(32);
      String string0 = "|q_gVJ!VBH\\";
      helpFormatter0.setNewLine("|q_gVJ!VBH");
      String string1 = "Wa?$f2Ti'c\\*";
      helpFormatter0.setLongOptPrefix("Wa?$f2Ti'c*");
      helpFormatter0.defaultWidth = (-2287);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Wa?$f2Ti'c*", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "1zQf4@_<x\\ut?7Lp)+";
      helpFormatter0.printHelp(1, "+8d/l6L|C#(m2^~", ";G)D|;*6X", options0, string0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "&e1s}ZF)a=");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options1, true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "Ftj,8Ibe9m");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-147), "line.separator", "", options1, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding((-1850));
      Options options0 = new Options();
      Options options1 = options0.addOption("Hh", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.defaultOptPrefix = "!Iv\"c>#,+MX:0E4N!";
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp(13, "\n", "\n", options0, "!Iv\"c>#,+MX:0E4N!", true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.findWrapPos("org.apache.commons.cli.ParseException", 13, 13);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 26, 26, "N4 @7 ICFHv");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockFile mockFile0 = new MockFile("))-6gLT1YnCKbpEf");
      MockFile mockFile1 = new MockFile(mockFile0, "IjxDj{st\"Ipmh)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, (String) null);
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 13, "7u\"k<$efhuc", "org.apache.commons.cli.Options", options3, 3, (-3902), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(1);
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp("[*rjA~+B", options1, true);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockFile mockFile0 = new MockFile("))-6gLT1YnCKbpEf");
      MockFile mockFile1 = new MockFile(mockFile0, "IjxDj{st\"Ipmh)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, (String) null);
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", options2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockFile mockFile0 = new MockFile("))-6gLT1YnCKbpEf");
      MockFile mockFile1 = new MockFile(mockFile0, "IjxDj{st\"Ipmh)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, (-1), options1, 3, 3);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 31, 4, "arg");
      helpFormatter0.renderWrappedText(stringBuffer2, 10, 74, "");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2671), "-", "[*rjA~+B", options0, (-683), 101, "2|88AY,S3I;[tU(k5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 653, "usage: ", "lpG", options0, 74, 2, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      options0.toString();
      helpFormatter0.renderOptions(stringBuffer0, 12, options0, 0, 12);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 10, (-3472), "upK0QQz'F7$");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", options0, false);
      Option option0 = new Option("", "m{V]@FRo1:y1G", false, "5L4#Zt;c<wYcN");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3622), "[ option: ", "WA", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", options0, true);
      Option option0 = new Option("", "\n", true, "org.apache.commons.cli.ParseException");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "\n", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.rtrim("org.apache.commons.cli.Option");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", options0, true);
      int int0 = 13;
      String string0 = "";
      Option option0 = new Option("", "\n", true, "org.apache.commons.cli.ParseException");
      String string1 = "}RWa.=O?q[";
      File file0 = MockFile.createTempFile("}RWa.=O?q[", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1459, (-2), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "ef, .l$6 JQ9s/yXQ", "'9n", options0, 13, 2175, "Eq8", false);
      helpFormatter0.renderOptions((StringBuffer) null, 2175, options0, 2175, 13);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2671);
      String string0 = "-";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2671), "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream2);
      Options options0 = new Options();
      options0.addOption((String) null, "]", true, " | ");
      helpFormatter0.printHelp("-", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "gTV.{PXAg'*B!NIU", "--", options0, 1, 3, "GVM?,%lZms<8x+4HV");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.printHelp("-", options0, true);
      Option option0 = new Option("", "\n", true, "org.apache.commons.cli.ParseException");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(13, "\n", "\n", options1, "", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream1);
      Options options0 = new Options();
      helpFormatter0.printHelp("KL6VN*d-vvat*", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "P%*Iw", options0, 2218, 14, ">p]Xj&'@/C");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim("IW%KDjGs");
      helpFormatter0.rtrim("g&}");
      Options options0 = new Options();
      Options options1 = new Options();
      stringWriter1.append((CharSequence) "IW%KDjGs");
      options1.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "IW%KDjGs", "g&}", options2, 2019, 74, "g&}", false);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.Option", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream2);
      Options options0 = new Options();
      options0.addOption("", "-", true, "-");
      boolean boolean0 = true;
      helpFormatter0.printHelp("usage: ", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      String string0 = "[ARG...]";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "UG~gFai)", options0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream2);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "-");
      helpFormatter0.printHelp("KL6VN*d-vvat*", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "p&l}*ft|`>=z'w", "?D*=#Egf$'X>QSbKY@", options1, 2218, 1, "arg");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("{");
      helpFormatter0.printHelp("KL6VN*d-vvat*", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter0.printHelp("usage: ", options0, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "arg", options0, 9, 74, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream2);
      Options options0 = new Options();
      options0.addOption("", "-", true, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "Cannot add value, list full.", "", options0, 63, 9, "");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 26, "IW%KDjGs");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append(';');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "--");
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim((String) null);
      helpFormatter0.rtrim("g&}");
      Options options0 = new Options();
      Options options1 = new Options();
      stringWriter2.append((CharSequence) null);
      options1.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 894, "X|]+pl$Xd{OhPpL:v", "g&}", options2, 31, (-2461), (String) null, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      mockPrintWriter1.print("line.separator");
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.print((float) 1);
      Options options0 = new Options();
      helpFormatter0.printHelp(":aDDlcY&gqlvJ", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      String string0 = " | ";
      String string1 = "[ARG...]";
      int int0 = 1424;
      String string2 = "sFV>@7^^_}8#_";
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, helpFormatter0.defaultLeftPad, string2, options0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      mockPrintWriter1.print("line.separator");
      char[] charArray0 = new char[1];
      mockPrintWriter0.print((float) 1);
      charArray0[0] = 'N';
      mockPrintWriter1.print(charArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 900, "g&}");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer("g&}");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 31, "jRCD,sZ{X");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "usage: ");
      stringWriter2.append((CharSequence) "KL6VN*d-vvat*");
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim("KL6VN*d-vvat*");
      helpFormatter0.rtrim("KL6VN*d-vvat*");
      Options options1 = new Options();
      Options options2 = new Options();
      stringWriter2.append((CharSequence) "arg");
      Options options3 = options2.addOption("", "usage: ", false, "");
      options3.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3489, "KL6VN*d-vvat*", "", options3, 74, (-96), "4X9g:p$h7IeN7P]12", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 26, "IW%KDjGs");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append(';');
      stringWriter1.append((CharSequence) "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("g&}", options0, true);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix(")x6)e");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(900, "", "[", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(4, "[", "[", options0, "[");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-528), (-1), "BXr5");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "cmdLineSyntax not provided", options1, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream2);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "-");
      boolean boolean0 = true;
      options0.addOption("", true, "usage: ");
      helpFormatter0.printHelp("KL6VN*d-vvat*", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("0]~/l3:4}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0]~/l3:4}' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("-", (Object[]) null);
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 63;
      StringWriter stringWriter0 = new StringWriter(63);
      stringWriter0.append((CharSequence) "usage: ");
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(printWriter0, 64, "PegR K[?T6>u8$", (String) null, options1, 894, 894, "", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 64, "-");
      int int1 = (-2742);
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.ParseException", "-", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("MHYoiB11>&oVA_`", (Object[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      helpFormatter0.printHelp(printWriter0, 14, "[ option: ", "", options0, 13, 13, "");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream("-");
      MockFileOutputStream mockFileOutputStream2 = new MockFileOutputStream("z3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream2);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", true, "-");
      helpFormatter0.printHelp("KL6VN*d-vvat*", options1, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "p&l}*ft|`>=z'w", "?D*=#Egf$'X>QFSbY`@", options1, 2218, 1, "arg");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9!&#|n7 t8c(/");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append(';');
      stringWriter1.append((CharSequence) "--");
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim("1*cwu)s");
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      Options options1 = new Options();
      stringWriter1.append((CharSequence) "IW%KDjGs");
      options1.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 894, (String) null, "", options1, 41, 894, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("E");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "\n");
      stringWriter0.append((CharSequence) "usage: ");
      int int0 = helpFormatter1.defaultWidth;
      helpFormatter0.rtrim(" ");
      helpFormatter1.rtrim("-");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter1.printHelp("org.apache.commons.cli.Option", "usage: ", options0, "--", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 791, "\n");
      helpFormatter1.getOptPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-760), "-", "", options0, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.format("-", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("F74`", 122, (-1511));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 26, "IW%KDjGs");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append(';');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "\n");
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim("IW%KDjGs");
      helpFormatter0.rtrim("g&}");
      Options options0 = new Options();
      Options options1 = new Options();
      stringWriter2.append((CharSequence) "arg");
      options1.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "IW%KDjGs", "", options2, (-1), 894, "IW%KDjGs", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("E");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "\n");
      stringWriter0.append((CharSequence) "usage: ");
      int int0 = helpFormatter1.defaultWidth;
      helpFormatter0.rtrim(" ");
      helpFormatter1.rtrim("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("arg", (String) null, options1, "arg");
      URI uRI0 = MockURI.aHttpURI;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      mockPrintWriter1.print("line.separator");
      helpFormatter0.setOptPrefix("                          ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(stringWriter0, false);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) "usage: ";
      objectArray0[4] = (Object) "usage: ";
      objectArray0[5] = (Object) "usage: ";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) helpFormatter1;
      mockPrintWriter2.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter2, (-730), "Mpzw~`g");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      String string0 = "cmdLineSyntax not provided";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-528), (-528), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      String string0 = "@DQ+S";
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-528);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-528);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(2424);
      String string0 = "";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2424, (-528), "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2069), options0, (-528), 2424);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("E");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "\n");
      stringWriter0.append((CharSequence) "usage: ");
      int int0 = helpFormatter1.defaultWidth;
      helpFormatter0.rtrim(" ");
      helpFormatter1.rtrim("-");
      Options options0 = new Options();
      Options options1 = new Options();
      stringWriter0.append((CharSequence) null);
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "", "\n", options0, 1, 1, "E", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "--");
      Option option0 = new Option("", "--", true, "--");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption(option0);
      options2.getOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options2.getMatchingOptions("");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("usage: ", "", options3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setOptPrefix("");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.format("-", (Object[]) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1064, 1064);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      Options options1 = new Options();
      boolean boolean0 = false;
      String string0 = "{BX0#]~{e";
      // Undeclared exception!
      try { 
        options1.addOption("{BX0#]~{e", false, "{BX0#]~{e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{BX0#]~{e' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getOption("\n");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("!q/6K");
      helpFormatter0.printHelp("arg", "}}(5\"'~i4U[.", options1, "arg", false);
      helpFormatter0.findWrapPos("}}(5\"'~i4U[.", 0, 457);
      helpFormatter0.printHelp("}}(5\"'~i4U[.", options1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9!&#|n7 t8c(/");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-1), "A");
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "--");
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.rtrim("1*cwu)s");
      helpFormatter0.rtrim("A");
      Options options0 = new Options();
      Options options1 = new Options();
      stringWriter0.append((CharSequence) "IW%KDjGs");
      options1.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 894, "IW%KDjGs", "A", options2, (-2040), (-296), "1*cwu)s");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      helpFormatter0.printHelp("KL6VN*d-vvat*", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 9, "dk4F?;tB<)G=_QK]", "U[a3^", options0, 3, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-528), "}D,+S");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      StringBuffer stringBuffer0 = new StringBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append('j');
      helpFormatter0.printUsage(printWriter0, 7, "--");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.format("-", (Object[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "[ option: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 14, "[ option: ", "[ option: ", options1, 14, (-554), "\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      int int1 = 1;
      helpFormatter0.defaultWidth = 1;
      String string0 = ">";
      helpFormatter0.rtrim(">");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.defaultLongOptPrefix = ">";
      mockPrintWriter0.print(0L);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "--");
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getDescPadding();
      String string1 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setArgName("");
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("-", (String) null, false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(3890);
      helpFormatter0.findWrapPos("<", 0, 217);
      String string0 = "[ARG...]";
      helpFormatter0.rtrim("[ARG...]");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.createPadding(1);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1, (Options) null, (-1), 217);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getSyntaxPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "-", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-528), "IyR5$F0N", "UTe", options2, 0, 0, "UTe", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setNewLine("rQ[1V!56BoF'O");
      assertEquals("rQ[1V!56BoF'O", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix("&=r-I M.");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = (-1349);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 1344, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1305;
      helpFormatter0.setDescPadding(1305);
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "[@|{sm,r_sxM");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [@|{sm,r_sxM
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding((-1687));
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.createPadding(0);
      String string0 = "-WcY2";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-WcY2");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2963, (-644), "t2y`4Md!nO}Et|&rcu!");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("<");
      helpFormatter0.setDescPadding((-878));
      helpFormatter0.rtrim("_hHS-UA<x~VFFcBVf!");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "F_=w\":el#g][<";
      helpFormatter0.setOptPrefix("F_=w\":el#g][<");
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("_hHS-UA<x~VFFcBVf!");
      helpFormatter0.setDescPadding(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      String string1 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "F_=w\":el#g][<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 513;
      helpFormatter0.setDescPadding(513);
      String string0 = ", ";
      helpFormatter0.defaultOptPrefix = ", ";
      helpFormatter0.defaultArgName = ", ";
      helpFormatter0.setWidth(1003);
      helpFormatter0.getArgName();
      String string1 = "=+N%>\\2";
      String string2 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", ", ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1267);
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1267), options0, (-1267), (-1267));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Ge.G.SR");
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option(" ", "", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, (String) null);
      Option option0 = new Option((String) null, "", true, "--");
      Options options2 = options1.addOption(option0);
      options2.getOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.getMatchingOptions("");
      Options options3 = options2.addOptionGroup(optionGroup1);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Tg", options3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 397, (Options) null, 397, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "g&}";
      helpFormatter0.createPadding(26);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g&}");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 26, "IW%KDjGs");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "IW%KDjGs";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter1;
      mockPrintWriter0.format("jy4+fx>Fo<m8L-}x", objectArray0);
      helpFormatter0.setOptionComparator((Comparator) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("[ option: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = helpFormatter0.getArgName();
      assertEquals("arg", string0);
      
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("!q/6K");
      helpFormatter0.printHelp("arg", "}}(5\"'~i4U[.", options1, "arg", false);
      helpFormatter0.findWrapPos("}}(5\"'~i4U[.", 0, 457);
      assertEquals(74, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(1, (CharSequence) "arg", 3, (-2581));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 3, end -2581, s.length() 3
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 2467, 18, "}D,+S");
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", ";O,|R()AUcCY", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
