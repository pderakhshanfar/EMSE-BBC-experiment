/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:04 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, "--", "-", (Options) null, "W*oGL*qn:x`u<MJtV%G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "xZgz~0on";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("\n", "arg", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      StringBuffer stringBuffer0 = new StringBuffer("-");
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultOptPrefix = "9.rtBQ'q";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 1, 1, "9.rtBQ'q");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      boolean boolean0 = true;
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "--";
      objectArray0[3] = (Object) mockPrintStream1;
      PrintStream printStream0 = mockPrintStream1.printf("--", objectArray0);
      mockPrintStream1.println('z');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1060));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultWidth = 30;
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "org.apache.commons.cli.OptionGroup");
      Option option0 = new Option((String) null, "_4%O3;");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(30, "_4%O3;", "", options3, "_4%O3;", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.getOptPrefix();
      String string0 = "u$_+_";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u$_+_");
      int int0 = 3501;
      Options options0 = new Options();
      String string1 = "";
      options0.addOption("", false, "arg");
      String string2 = "*]-g`O{eCb1";
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", false, "*]-g`O{eCb1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, " [ARG]", true, (String) null);
      Option option0 = new Option("arg", "N(?h40DN*G^");
      Options options2 = new Options();
      options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = " ]";
      helpFormatter0.printHelp((-1), "e-mVa30U", "`@oIAQHd\"", options1, " ]");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 4919, options1, (-3754), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.print(1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", true, "arg");
      String string0 = null;
      helpFormatter0.printHelp(31, "=(x.:f|jn)0/HVs[Uoj", "", options2, "=(x.:f|jn)0/HVs[Uoj");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-3754), options1, 31, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3124, (-1698), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2241));
      String string0 = "YI>5mLND17m%";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("YI>5mLND17m%");
      Options options0 = new Options();
      Option option0 = new Option("_saBL", "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "usage: ", false, "*hfY2T \"nlF()f.^XR ");
      options2.getMatchingOptions("Z");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">", options2, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      int int0 = 21;
      mockPrintWriter0.print(1L);
      Options options0 = null;
      int int1 = 3153;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 21, (Options) null, 21, 3153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("RB:8=AZt;\"~jz|");
      Options options0 = new Options();
      helpFormatter0.printHelp("<F/:@eC4o!\"\t ", options0);
      helpFormatter0.findWrapPos("RB:8=AZt;\"~jz|", 7, 7);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "", "arg", options0, 3, 74, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 523, 523, "[ Options: [ short ");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")31ADiHD(c</'imcd5");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1221, "h']T.x", (String) null, options0, 1221, (-2232), ")31ADiHD(c</'imcd5", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 741;
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "u}nT:i]~OEb*d~";
      Options options1 = options0.addOption((String) null, "u}nT:i]~OEb*d~", true, "");
      String string0 = "<gJ{E{E\\]eV4mX1p";
      options1.getOptionGroups();
      String string1 = "s&}0)}FG|ssv\"";
      Option option0 = new Option("", "--", true, "s&}0)}FG|ssv\"");
      options0.addOption(option0);
      options1.hasLongOption("<gJ{E{E]eV4mX1p");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 741, options1, 741, 741);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
      helpFormatter0.printHelp("line.separator", options1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "3", true, "E#R<F7");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.defaultOptPrefix;
      helpFormatter0.setWidth(40);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("d", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 523, 523, " ");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "-");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4, "Xt[yv+}[^~%4wr", "i{dZoDBO-+)xH", options1, 74, 117, "i{dZoDBO-+)xH", true);
      helpFormatter0.rtrim("i{dZoDBO-+)xH");
      helpFormatter0.printHelp("i{dZoDBO-+)xH", options0, true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.createPadding(0);
      int int0 = 3;
      String string0 = "0*} 5^|/BN@.r";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "0*} 5^|/BN@.r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, (-1), 3, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("@@");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 18, "--", "--", options0, 1, (-396), "\n", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.defaultDescPad = 3;
          helpFormatter0.setWidth(3);
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
          Options options0 = new Options();
          StringBuffer stringBuffer0 = new StringBuffer("riU");
          Options options1 = options0.addOption("arg", false, "xse;xs5");
          Options options2 = options1.addOption("arg", "E/", false, "arg");
          int int0 = 2;
          // Undeclared exception!
          helpFormatter0.renderOptions(stringBuffer0, 1, options2, 2, 1);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "0*} 5^|/BN@.r", "\n", options0, 34, 74, "");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp("Zp%27I", options1, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2831;
      helpFormatter0.findWrapPos("", (-1770), 2831);
      int int1 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("?4?#z(.~JLgFA", 13, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("", "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((String) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", (Object[]) null);
      helpFormatter0.printUsage(printWriter0, 2, "", options2);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("", "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 91, options1, 906, 524);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      helpFormatter0.printUsage(printWriter0, 3, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-2355), "usage: ", "org.apache.commons.cli.Option", options0, 190, 3, "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      options0.getMatchingOptions("-");
      helpFormatter1.setDescPadding(150);
      helpFormatter0.printHelp(13, "Cannot add value, list full.", "arg", options0, "");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, " ", "H~wQ.5WEs", options0, 150, 1567, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4099, "cT(B.!o+c(eL/", "' contains an illegal character : '", (Options) null, 753, 2659, "' contains an illegal character : '", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 803;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 803, 803, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("", "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      optionGroup0.setRequired(true);
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("--", options3, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter1.setDescPadding(74);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("arg", false, "-");
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, (String) null, (String) null, options3, (-85), 2, "rG\"2Z`[|4W/6M2'8", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.setWidth(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "2nTMI6", (String) null, options1, 74, 86, "]", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("arg", false, "-");
      helpFormatter0.setWidth((-1062));
      Options options3 = new Options();
      options0.addOption("arg", true, "#Qfe)CH`w^)Jc\"itqd");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "#Qfe)CH`w^)Jc\"itqd", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o.y7f{:-pSnsC :8oW", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("qa", false);
      options0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('f');
      helpFormatter0.printHelp(printWriter0, 111, "qa", "", options0, 111, 111, "qa", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, (-2066), options0, 3, 3);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "m4_hb@iG; O", "@3Nu84T||e+=uc", options0, 3, 3, (String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      int int0 = 31;
      String string0 = "=(x.:f|jn)0/HVs[Uoj";
      helpFormatter0.printHelp(31, "=(x.:f|jn)0/HVs[Uoj", "", options2, "=(x.:f|jn)0/HVs[Uoj");
      Option option0 = new Option("arg", true, ">");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      boolean boolean0 = false;
      option0.setArgName(">");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Mg|e0", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", true, "\n");
      mockPrintWriter0.append((CharSequence) "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 3, "@%@$Czu", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOption((String) null, false, "tUaSL$k");
      helpFormatter0.printHelp(2638, " ]", "", options1, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 523, 523, " ");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "i{dZoDBO-+)xH", options0, 523, 74, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth((-1));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2069, "z", "0*} 5^|/BN@.r", options0, (-1584), 3, "z");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("6Iu`0Lk", 0, 0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(445);
      StringBuffer stringBuffer0 = new StringBuffer(108);
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 445, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("yortL", "0*} 5^|/BN@.r", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "\n", false, "--");
      Options options3 = options2.addOption(option0);
      Options options4 = options3.addOption("", false, "g'mj!s9]/HlNyN-");
      helpFormatter0.printHelp("' contains an illegal character : '", options4, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      helpFormatter0.printHelp(31, "=(x.:f|jn)0/HVs[Uoj", "", options2, "=(x.:f|jn)0/HVs[Uoj");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", true, "usage: ");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-957), " ", "usage: ", options1, 103, 3, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 118, "0*} 5^|/BN@.r", "", options0, 445, 1865, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "", options0, 2400, 111, "", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 44;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("' was specified but an option from this group ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "qm\"wqw@J:(`3d8|";
      objectArray0[3] = (Object) "' was specified but an option from this group ";
      objectArray0[4] = (Object) "qm\"wqw@J:(`3d8|";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("qm\"wqw@J:(`3d8|", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 529, "", (String) null, options0, (-1723), (-170), "' was specified but an option from this group ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.print(1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      options1.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1961, (String) null, (String) null, options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "-");
      options2.getOptionGroups();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "org.apache.commons.cli.AlreadySelectedException", options2);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options2, false);
      helpFormatter0.rtrim((String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options3 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1), options3, 44, 44);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption("", "", false, "arg");
      options2.addOptionGroup(optionGroup0);
      String string0 = "#Qfe)CH`w^)Jc\"itqd";
      options0.addOption("arg", true, "#Qfe)CH`w^)Jc\"itqd");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "#Qfe)CH`w^)Jc\"itqd", options0);
      // Undeclared exception!
      try { 
        optionGroup0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.OptionGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, "usage: ");
      Options options0 = new Options();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("[ARG...]");
      helpFormatter0.setWidth(1);
      helpFormatter1.setDescPadding(150);
      helpFormatter0.printHelp(13, "Cannot add value, list full.", "arg", options0, "uuT%9Rqu(E.2");
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 150, 1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", "-", options0, 10, 10, "sM#(t5 anZZa^JJUPg");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(74);
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "org.apache.commons.cli.AlreadySelectedException", true);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.AlreadySelectedException";
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", "K%I|8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-15), "[ option: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "jQv;bf");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.print(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-894), "zJ[kf!@w+N", "", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-3379);
      String string0 = "`)a(zj-'@zl&Q>ISd";
      Options options0 = new Options();
      int int1 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3379), "`)a(zj-'@zl&Q>ISd", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2084;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(2084);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("org.apache.commons.cli.Util");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "-");
      helpFormatter0.printOptions(mockPrintWriter0, 2084, options1, 2084, 44);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("[ARG...]");
      helpFormatter0.setWidth(1);
      options0.getMatchingOptions("-");
      helpFormatter1.setDescPadding(150);
      helpFormatter0.printHelp(13, "Cannot add value, list full.", "arg", options0, "");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, " ", "H~wQ.5WEs", options0, 150, 1567, "");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.print(1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      helpFormatter0.printHelp(31, "=(x.:f|jn)0/HVs[Uoj", "", options2, "=(x.:f|jn)0/HVs[Uoj");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("[ARG...]");
      helpFormatter1.setDescPadding(150);
      helpFormatter0.printHelp(13, "Cannot add value, list full.", "arg", options0, "");
      helpFormatter1.getLeftPadding();
      helpFormatter1.printHelp("arg", " ", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2404, "\n", "0*} 5^|/BN@.r", options0, 2404, 2404, "@3Nu84T||e+=uc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2379;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2379, "m4_hb@iG; O", "@3Nu84T||e+=uc", options0, 3, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 74;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("arg", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 61, "org.apache.commons.cli.AlreadySelectedException", options2);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options2, false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "0*} 5^|/BN@.r", options0, 3, 3, "@3Nu84T||e+=uc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.print(1);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, " ", options2);
      helpFormatter0.printHelp(31, "f<", "line.separator", options1, "");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(174);
      helpFormatter0.setDescPadding(150);
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", "b!sB3B", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("[ARG...]");
      helpFormatter0.setWidth(1);
      helpFormatter1.setDescPadding(150);
      helpFormatter0.printHelp(13, "Cannot add value, list full.", "arg", options0, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      helpFormatter0.rtrim(" ");
      helpFormatter0.setWidth((-1082));
      helpFormatter0.setDescPadding(150);
      helpFormatter0.printHelp(174, "b!sB3B", "W.cK<1XRi", options0, "W.cK<1XRi");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options1 = options0.addOption("", "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("--", options3, true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 29, options1, (-1), 29);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(174);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 836, 1);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 31, 174, "");
      helpFormatter0.renderOptions(stringBuffer2, 1, options0, 31, 174);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(174);
      helpFormatter0.setDescPadding(150);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2084;
      helpFormatter0.defaultDescPad = 2084;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(2084);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 2084, options0, 2132, (-958));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.defaultOptPrefix = " ";
      helpFormatter0.setLongOptPrefix(" ");
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      Options options0 = new Options();
      options0.getOptionGroups();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 174);
      helpFormatter0.rtrim("");
      helpFormatter0.setWidth(174);
      helpFormatter0.setDescPadding(150);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("J!Fs$STy");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter1.print((Object) "");
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(1);
      mockFile0.deleteOnExit();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 74, "org.apache.commons.cli.HelpFormatter$OptionComparator");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", true, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String string0 = "6qyh_r7n";
      Options options3 = options2.addOption("6qyh_r7n", "usage: ", true, " :: ");
      optionGroup0.setRequired(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2084;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(2084);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(2084);
      int int0 = 1;
      String string0 = "2gCI3p#Y4d.QUa%";
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "org.apache.commons.cli.AlreadySelectedException", "2gCI3p#Y4d.QUa%", options0, "org.apache.commons.cli.AlreadySelectedException", true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 13;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("--");
      String string0 = "4w";
      Options options0 = new Options();
      MockURI.create("--");
      boolean boolean0 = false;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "4w", "r~EuY$|d$", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2084;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(2084);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("arg", false, "-");
      helpFormatter0.printOptions(mockPrintWriter0, 2084, options1, 2084, 44);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("b!sB3B");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(" [ARG]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      Options options0 = new Options();
      options0.getOptionGroups();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setWidth(3958);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(16, (String) null, (String) null, options0, "--", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      MockFile mockFile0 = new MockFile("b!sB3B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2873, "v?=Wwnh7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      mockPrintWriter0.print(true);
      mockFile0.setExecutable(true);
      mockFile0.setLastModified(0L);
      mockFile0.deleteOnExit();
      Options options0 = new Options();
      options0.getOptionGroups();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      mockPrintWriter0.append((CharSequence) "--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2270, (-5532), "cmdLineSyntax not provided");
      helpFormatter0.setWidth(22);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-540), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printWrapped(printWriter0, 1542, 0, "cmdLineSyntax not provided");
      helpFormatter0.setWidth((-1153));
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      int int0 = 1774;
      helpFormatter0.defaultNewLine = "";
      PrintWriter printWriter0 = null;
      String string0 = ")BgP";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, ")BgP");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("J!Fs$STy");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3135), "J!Fs$STy");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(">", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 44, 44, "");
      helpFormatter0.getDescPadding();
      helpFormatter0.renderWrappedText(stringBuffer1, 1, (-540), "");
      int int0 = (-1793);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 2084;
      helpFormatter0.getDescPadding();
      helpFormatter0.setWidth(2084);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", false, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "org.apache.commons.cli.AlreadySelectedException", options2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "9Rh+h\"";
      helpFormatter0.defaultArgName = "9Rh+h\"";
      String string1 = "[";
      helpFormatter0.defaultOptPrefix = "[";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      String string2 = "usage: ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "XcX)P.Ay[9G\",0d}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos(" ", 1620, 1620);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.ParseException");
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.ParseException");
      String string0 = "qO";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 13;
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("--");
      Options options0 = new Options();
      MockURI.create("--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "4w", "r~EuY$|d$", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.defaultDescPad = 13;
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("--");
      int int1 = (-2);
      String string0 = "4w";
      String string1 = "r~EuY$|d$";
      Options options0 = new Options();
      URI uRI0 = MockURI.create("--");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("{)");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale1, "b61NCPRqeFq#8lY", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), 31, "+@S*+dxv/?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "--";
      helpFormatter0.setLongOptPrefix("--");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      String string1 = "j.hH3Jx4px";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "j.hH3Jx4px");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "n%Ewm,-=";
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(":5\"");
      helpFormatter0.getLongOptPrefix();
      String string0 = "grKpo/I/";
      String string1 = "]";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("grKpo/I/", "]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.setWidth(3958);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getNewLine();
      String string1 = " ";
      helpFormatter0.setLeftPadding(31);
      helpFormatter0.setSyntaxPrefix("H$%Ym");
      Options options0 = new Options();
      options0.helpOptions();
      options0.getOption((String) null);
      helpFormatter0.defaultNewLine = null;
      options0.getMatchingOptions((String) null);
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1, "v?=Wwnh7");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultArgName = "-";
      assertEquals(74, helpFormatter0.getWidth());
      
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.findWrapPos("-", 1, 0);
      String string0 = helpFormatter0.getNewLine();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(13);
      int int0 = 31;
      String string0 = null;
      Options options0 = new Options();
      String string1 = "(8";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "(8", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(2236);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 0;
      Options options0 = new Options();
      Object object0 = new Object();
      mockPrintWriter0.print(object0);
      // Undeclared exception!
      try { 
        options0.addOption("-", "", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-260);
      File file0 = MockFile.createTempFile("has already been selected: '", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "has already been selected: '";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "has already been selected: '";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "--", objectArray0);
      helpFormatter0.printUsage(printWriter0, 74, "has already been selected: '");
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }
}
