/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:23:53 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "Ni{H({?", "   ", options0, 64, 64, "2f1L;RT$[^s(i`UI");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("NO_ARGS_ALLOWED", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-601));
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(6, " :: ", " :: ", options1, " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.createPadding(320);
      helpFormatter1.printHelp(74, "line.separator", "--", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(117, "usage: ", "--", (Options) null, "line.separator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.setLongOptPrefix(" ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 114, "arg", " ", options0, 3, 74, "0#9pg\"T'Pe@poIaR");
      helpFormatter1.getLeftPadding();
      helpFormatter1.renderWrappedText(stringBuffer0, 2130, 3, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, (-221), "arg");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "--", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "usage: ", options0, "arg", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options0, 2, 74);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions((StringBuffer) null, 7, options1, 7, 7);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 7, 7, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "zM}CF");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", "usage: ", true, "usage: ");
      helpFormatter0.setLongOptPrefix("zM}CF");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-320), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1118);
      String string0 = null;
      String string1 = "V#3e3>ed3:3/Z\\Qp\\+";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1118), "H~ ", (String) null, options0, "V#3e3>ed3:3/ZQp+", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      File file0 = MockFile.createTempFile("arg", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "org.apache.commons.cli.ParseException", (String) null, options0, 2, 2, " ", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("8bJlmz_/MP%$");
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("Y", false, "8bJlmz_/MP%$");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      int int0 = 32;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-455), options3, 64, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", "NR}'S\"dD*$c9~a5q", false, (String) null);
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      options2.hasShortOption("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 362, " ", "", options0, 3708, 104, (String) null, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "NR}'S\"dD*$c9~a5q", options2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2;
      String string0 = "zM}CF";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "zM}CF");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, "zM}CF", "zM}CF", options2, 2, (-1), "zM}CF", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Locale locale0 = new Locale("-", "org.apache.commons.cli.Option");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) "org.apache.commons.cli.Option";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 12, (Options) null, 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("A CloneNotSupportedException was thrown: ", (-2), 2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.setLongOptSeparator("(`2!,D");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultLongOptPrefix = "G}_p(! OE";
      helpFormatter0.setArgName("G}_p(! OE");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasLongOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.printHelp("--", "--", options0, " ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('_');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1009), "K=8lri]{", ")", options0, 8, (-225), "@E}ADM#;;KNpU");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(">");
      stringBuffer0.replace(1, 1, "line.separator");
      StringBuffer stringBuffer1 = new StringBuffer(1);
      stringBuffer0.append((CharSequence) stringBuffer1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 95, options0, 0, 2294);
      helpFormatter0.renderWrappedText(stringBuffer2, 110, 95, "\"");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "5R]\"&8w^ f!h;b$9$P;", true, "]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Option option0 = new Option("arg", "&3 #R!q^nU./;");
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 296, "]", "5R]\"&8w^ f!h;b$9$P;", options2, 1507, 110, "]", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("?nsMk4");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 110, "rbB%`Wg/MURr/", options1);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.findWrapPos("#-gst:Ur#LE 0", 1, 1);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "#-gst:Ur#LE 0", (Options) null, "ZA&!][v6hPOr3lnwi4T", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      helpFormatter0.printHelp("<P,ly", "org.apache.commons.cli.OptionGroup", (Options) null, "[0F(&PnJ$tO/]PF(W,_");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.createPadding(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "-");
      helpFormatter1.printHelp("' contains an illegal character : '", " ", options1, "' contains an illegal character : '", true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer("x,Y}Q>;.TUb");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      charArray0[2] = 'i';
      charArray0[3] = '3';
      charArray0[4] = '^';
      charArray0[5] = ':';
      mockPrintWriter0.write(charArray0);
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 3, (Options) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1056;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null, false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, " | ", "'b\"Y;}\",tAHDRM_x", options1, 9, 9, "U,O", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      StringBuffer stringBuffer0 = new StringBuffer("x,Y}Q>;.TUb");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "G9!^^", true, "-");
      helpFormatter0.createPadding(3);
      Options options2 = new Options();
      options0.hasShortOption("\n");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      options1.getMatchingOptions("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printUsage(printWriter0, 74, "", options1);
      helpFormatter1.getNewLine();
      // Undeclared exception!
      helpFormatter1.printOptions(printWriter0, 1, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(" ", "", options0, "arg", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 3);
      helpFormatter0.renderWrappedText(stringBuffer0, 2103, 5, "\n");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "\n");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      options0.hasOption("fm-]\"X|n<NL");
      Option option0 = new Option("arg", "-");
      options0.addOption("ar", "", true, "--");
      helpFormatter0.printHelp("8%#URldL?XKZ;H@&3", "", options0, "", true);
      helpFormatter0.getOptPrefix();
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3;
      String string1 = "'b\"Y;}\",tAHDRM_x";
      int int1 = 1056;
      FileSystemHandling.shouldAllThrowIOExceptions();
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      options0.hasOption("fm-]\"X|n<NL");
      Option option0 = new Option("arg", "-");
      options0.addOption("ar", "", true, "--");
      helpFormatter0.printHelp("8%#URldL?XKZ;H@&3", "", options0, "", true);
      helpFormatter0.getOptPrefix();
      Options options1 = new Options();
      options0.hasShortOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.hasShortOption("36!.OUjJs~~c");
      Options options3 = options0.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 6, "VU^T+", "[", options3, (-1), (-2), "VU^T+", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("   ");
      stringBuffer0.append((CharSequence) "arg");
      Options options0 = new Options();
      options0.addOption((String) null, "n4Z6@KpO", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos(" ", 3, 0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("--", "0%.", options0, "-", false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println("/#^hIeL@)Fal|");
      String string0 = "\"D-fl-RB-=pV";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-3144), (-3144), "}>WF%PMt?&gHP^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", " ", true, "-");
      helpFormatter1.createPadding(74);
      helpFormatter0.setLeftPadding((-5925));
      Options options1 = new Options();
      options1.hasShortOption("TLC(Z`");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("w-W!42x\n", "usage: ", options0, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(")jH)k!CXZ{vDU.iI");
      stringBuffer0.append((CharSequence) "\n");
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      helpFormatter0.setOptPrefix(")jH)k!CXZ{vDU.iI");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-883), "g", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]M=";
      helpFormatter0.setLongOptPrefix("]M=");
      int int0 = 0;
      boolean boolean0 = false;
      PrintWriter printWriter0 = null;
      String string1 = ">hJVE9D_~nl";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("mlrh|NJJ,L`", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 21, "arg", " ", options0, (-255), (-4241), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "-");
      helpFormatter1.createPadding(74);
      Options options2 = new Options();
      options2.hasShortOption("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "[", " ", options1, 3, 64, "org.apache.commons.cli.AlreadySelectedException", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      options0.addOption((String) null, "Q#;`CB1", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.toString();
      helpFormatter1.findWrapPos("iM", 108, 1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(" ", "org.apache.commons.cli.Util", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer(74);
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 114, "arg", "--", options0, 3, 74, "0#9pg\"T'Pe@poIaR");
      helpFormatter1.getLeftPadding();
      helpFormatter1.renderWrappedText(stringBuffer0, 2130, 3, "-");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "pXUCC";
      PrintWriter printWriter0 = mockPrintWriter0.format("   ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, "pXUCC", options0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultWidth = 1;
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "[`?";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-2166), "[`?");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 74, (-514), "D-Bb+y08XHK^<R'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "Y\\";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("-");
      String string1 = " :: ";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 327, " :: ", "Cannot add value, list full.", options0, 1, (-3596), " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultWidth = 1;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLongOptPrefix = null;
      helpFormatter1.getLongOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("Y");
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options0, 36, 1);
      helpFormatter0.renderWrappedText(stringBuffer1, 114, 109, "Y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1+b7{f&");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "1+b7{f&";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-3087), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = null;
      int int0 = 693;
      Options options0 = new Options();
      options0.hasOption("fm-]\"X|n<NL");
      Option option0 = new Option("", false, "");
      options0.addOption(option0);
      Option option1 = new Option("arg", "-");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 693, "C2Au;mFEN5\">", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("Y");
      int int0 = 114;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "", options0, 114, (-1448), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "-");
      helpFormatter0.printHelp("' contains an illegal character : '", " ", options1, "' contains an illegal character : '", true);
      helpFormatter0.createPadding(41);
      Options options2 = new Options();
      options0.hasShortOption("-");
      int int0 = 2513;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2513, " ] [ long ", "Cannot add value, list full.", options2, 41, (-4888), "The option '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append((CharSequence) " ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = null;
      String string0 = "";
      String string1 = "";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-290), ".(mJY^p7f1K4P?", "", options1, "u)PzC3<q^)qh4+ZAm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}j[6w)7$)q", "}j[6w)7$)q", options0, "");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptSeparator("]");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.rtrim("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultWidth = (-4);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "", (Options) null, "[0F(&PnJ$tO/]PF(W,_", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-791));
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-791), (-42));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1502, "$phCq1T!", "$phCq1T!", options0, "$phCq1T!");
      helpFormatter0.setOptPrefix("VFQ%5[^Jz:5}o6;o<");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.getArgName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getWidth();
      helpFormatter0.defaultSyntaxPrefix = "arg";
      helpFormatter0.getDescPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "-");
      helpFormatter1.printHelp("' contains an illegal character : '", " ", options1, "' contains an illegal character : '", true);
      helpFormatter0.createPadding(34);
      Options options2 = new Options();
      options0.hasShortOption("-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 2678, "sd!G3;!l/z;", "-", options0, 1109, 3, "", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options0);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        options1.addOption(";ck7sXD$$(q8k", "[", true, "46%8em#[}MH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ';ck7sXD$$(q8k' contains an illegal character : ';'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-71);
      helpFormatter0.setWidth((-71));
      String string0 = "-[V.83WXf9";
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "(\")U1eC6s6+";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-[V.83WXf9", ";Cw{F", options0, "(\")U1eC6s6+");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.findWrapPos("", (-42), 3);
      // Undeclared exception!
      helpFormatter0.printHelp("\n", "", (Options) null, "[0F(&PnJ$tO/]PF(W,_", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " ", true, "-");
      helpFormatter1.printHelp("' contains an illegal character : '", " ", options1, "' contains an illegal character : '", true);
      helpFormatter1.createPadding(74);
      Options options2 = new Options();
      options2.hasShortOption("N8[y9MM&U{yFP<");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "0PS", options2, 1, 0, "org.apache.commons.cli.Options", true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2459;
      String string0 = "T`h[u<";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "";
      Options options1 = options0.addOption("arg", true, "");
      options1.helpOptions();
      helpFormatter0.printHelp(2459, "T`h[u<", "T`h[u<", options0, "T`h[u<");
      // Undeclared exception!
      try { 
        options1.addOption("*Cu<l!yOQ^", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '*Cu<l!yOQ^' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      String string0 = "fm-]\"X|n<NL";
      options0.hasOption("fm-]\"X|n<NL");
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3, 693, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      stringBuffer0.append((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer("--");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer1, (-1726), 1, ".");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.findWrapPos("", (-42), 3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-42));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter2;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      helpFormatter1.printWrapped(printWriter0, 1, " ");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-3560), (Options) null, 108, (-1225));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("\n");
      options0.addOption("arg", "fFUkk", false, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("fFUkk", options0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = new Options();
      String string0 = null;
      Option option0 = null;
      try {
        option0 = new Option("--", (String) null, true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printWrapped(printWriter0, 12, 34, "]_;cf&;Y{!s");
      PrintWriter printWriter1 = mockPrintWriter0.append('r');
      helpFormatter0.printWrapped(printWriter1, 9, "\"D-fl-RB-=pV");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getDescPadding();
      optionGroup0.setRequired(false);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("pw@^h6wN=", 1, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setWidth(74);
      helpFormatter0.findWrapPos("", (-42), 3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "'", "\n", options0, "usage: ", false);
      // Undeclared exception!
      try { 
        options0.addOption("   ", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append((CharSequence) " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "arg", "", options1, (-1), 0, "[ARG...]", false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("R", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setWidth(438);
      option0.setOptionalArg(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 899, "I:}.,$bNhhFSH4;Z|-", "org.apache.commons.cli.Option", options1, (-1), (-3976), "5M+.@", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 2702;
      String string0 = "Us-,W}T'm_H7AB #o";
      String string1 = "--";
      Options options0 = new Options();
      String string2 = "fFUkk";
      boolean boolean0 = false;
      options0.hasShortOption("\n");
      Options options1 = options0.addOption("arg", "fFUkk", false, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("1/g?:sZ");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setDescPadding((-1));
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2011), "A<4`\"", "A<4`\"", options1, (-857), (-2011), "A<4`\"", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      helpFormatter0.findWrapPos("", (-42), 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "", (Options) null, "[0F(&PnJ$tO/]PF(W,_", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("8#y2J`m");
      helpFormatter0.setLongOptPrefix("8#y2J`m");
      int int0 = 0;
      boolean boolean0 = false;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("R", "--");
      options0.addOption(option0);
      option0.setArgName("--");
      Option option1 = new Option("", " | ", false, " ");
      Options options1 = new Options();
      Options options2 = options0.addOption(option1);
      helpFormatter0.printHelp("Wg6zxm/'s19@#", "( &b.92)=,{{b%u)", options2, "R", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.rtrim("org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = 1222;
      helpFormatter0.setNewLine("1M_&W!97zw,");
      helpFormatter0.createPadding(1222);
      PrintWriter printWriter0 = null;
      String string1 = "RNl?PGqhLeH{SU=U";
      String string2 = ">Z*je%gX`~Dmvjt";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", "WB.?+S@W:d~%}WX[4d!", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(34);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      int int0 = 1;
      String string0 = "\"D-fl-RB-=pV";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, 34, "\"D-fl-RB-=pV");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("}D1<\"_z");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 841, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append((CharSequence) " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "5R]\"&8w^ f!h;b$9$P;", true, "]");
      helpFormatter0.printHelp(5481, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "");
      helpFormatter0.findWrapPos("", 5481, 1647);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((String) null);
      Options options1 = new Options();
      helpFormatter0.printHelp("8`$z-Uk9]", "A CloneNotSupportedException was thrown: ", options1, "8`$z-Uk9]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("8`$z-Uk9]");
      helpFormatter1.setWidth(392);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "cmdLineSyntax not provided", "y859", options1, 74, 1, "8o", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(64);
      Options options0 = new Options();
      options0.addOption("", "5R]\"&8w^ f!h;b$9$P;", true, "]");
      helpFormatter0.printHelp(5481, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "");
      helpFormatter0.findWrapPos("", 5481, 1647);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((String) null);
      StringBuffer stringBuffer2 = stringBuffer1.append(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer1, 279, 1526, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      helpFormatter0.findWrapPos("5R]\"&8w^ f!h;b$9$P;", 1526, 279);
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      EvoSuiteFile evoSuiteFile0 = null;
      int int0 = 29;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "org.apache.commons.cli.ParseException";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.ParseException", true, "[bHws");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.ParseException' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "36RBG+Ep0";
      Options options0 = new Options();
      helpFormatter0.printHelp("36RBG+Ep0", options0, true);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLeftPadding(3);
      Options options0 = new Options();
      options0.hasOption("fm-]\"X|n<NL");
      Option option0 = new Option("arg", "-");
      options0.toString();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultDescPad = 1024;
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      options0.toString();
      helpFormatter0.printHelp("A CloneNotSupportedException was thrown: ", "", options0, "", false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("  05Y{4a8aJ]e?7,n^");
      Option option0 = new Option("R", "org.apache.commons.cli.Option");
      option0.setArgName("-");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("O", "", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = new Options();
      Options options2 = options1.addOption(option1);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "( &b.92)=,{{b%u)", options2, "", false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setLeftPadding(3);
      int int0 = 693;
      Options options0 = new Options();
      options0.hasOption("fm-]\"X|n<NL");
      String string1 = "";
      Option option0 = new Option("arg", "-");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 693, "C2Au;mFEN5\">", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      options0.getOption("");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(?");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 122, "");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("R", "--");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.findWrapPos("org.apache.commons.cli.Option", (-2687), 5);
      helpFormatter0.printHelp("SWZF", " ", options0, "-~");
      helpFormatter0.setOptPrefix("R");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1271, 1271, "-");
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      Option option0 = new Option("arg", "usage: ", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", "", false, " ");
      String string1 = "<";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "-", options1, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1148);
      helpFormatter0.setWidth((-1148));
      String string0 = "%~tO!\\n6d";
      helpFormatter0.findWrapPos("%~tO!\n6d", 330, (-1148));
      Options options0 = null;
      String string1 = "";
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(string0, string1, options0, string2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      int int0 = (-42);
      helpFormatter0.findWrapPos("", (-42), 330);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer1 = stringBuffer0.append("bPEwFJ~mOe1Yd");
      stringBuffer1.append((long) 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-468), (Options) null, 0, (-916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 7, (-762), " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 16, 16, "-");
      Options options0 = new Options();
      String string0 = "V@0.-*`W!?q";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("V@0.-*`W!?q", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'V@0.-*`W!?q' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("arg", "", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup1);
      options1.addOption("ni$", "ni$", true, "R");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "<", "", options1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("R", "org.apache.commons.cli.Option");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("O", "", true, "\n");
      optionGroup0.addOption(option1);
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", "", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "5R]\"&8w^ f!h;b$9$P;", true, "]");
      helpFormatter0.printHelp(5481, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "", options0, "");
      helpFormatter0.findWrapPos("", 5481, 1647);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = stringBuffer0.append((String) null);
      StringBuffer stringBuffer2 = stringBuffer1.append(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.renderWrappedText(stringBuffer1, 279, 1526, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator("--");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) stringBuffer0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      helpFormatter0.printUsage(printWriter0, 1475, "--");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1115), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = '7';
      charArray0[2] = '1';
      charArray0[3] = 'y';
      charArray0[4] = 'u';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.createFolder(evoSuiteFile0);
      charArray0[5] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      mockPrintWriter0.append((CharSequence) charBuffer0, 0, 0);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(">", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      mockFile0.delete();
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "WKs&P(%88s<ndIcq4ip";
      objectArray0[4] = (Object) mockPrintWriter1;
      objectArray0[5] = (Object) "WKs&P(%88s<ndIcq4ip";
      objectArray0[6] = (Object) mockFile0;
      objectArray0[7] = (Object) "WKs&P(%88s<ndIcq4ip";
      objectArray0[8] = (Object) ">";
      PrintWriter printWriter0 = mockPrintWriter1.printf("WKs&P(%88s<ndIcq4ip", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      PrintWriter printWriter1 = mockPrintWriter2.append('3');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter1, (-3179), "org.apache.commons.cli.ParseException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("8#y2J`m");
      String string0 = "4UG\"MPC~8St)x\\80b9";
      helpFormatter0.setLongOptPrefix("4UG\"MPC~8St)x80b9");
      int int0 = 0;
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "8#y2J`m", "8#y2J`m", (Options) null, "4UG\"MPC~8St)x80b9", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format("--", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = '7';
      charArray0[2] = '1';
      charArray0[3] = 'y';
      charArray0[4] = 'u';
      charArray0[5] = 'P';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0, 0, 0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "82Cu)");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setLeftPadding(3);
      int int0 = 693;
      Options options0 = new Options();
      String string1 = "fm-]\"X|n<NL";
      options0.hasOption("fm-]\"X|n<NL");
      String string2 = "";
      options0.getOption("");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 693, "C2Au;mFEN5\">", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLongOptPrefix(">");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setSyntaxPrefix("");
      int int1 = 2782;
      helpFormatter0.setLeftPadding(2782);
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append((CharSequence) " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " ", (Options) null, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultNewLine = null;
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1162));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "arg";
      Option option0 = new Option("arg", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "amuU";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("amuU", "amuU", (Options) null, "amuU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("R", "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option1 = new Option("O", "", true, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", "usage: ", true, "");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[ARG...]", "", options3, "<");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      stringBuffer0.append((CharSequence) " ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, " ");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getNewLine();
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.defaultArgName = " ";
      int int0 = 4917;
      String string1 = helpFormatter0.createPadding(4917);
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.ParseException";
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.toString();
      String string2 = "";
      options0.hasShortOption("");
      Options options1 = options0.addOption("", false, "org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        options1.addOption(string1, false, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The optioncontains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 1271, 1271, "-");
      String string0 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("NO_ARGS_ALLOWED", false, "@x");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("<", " ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 1475;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1475, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getArgName();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals("arg", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setWidth(0);
      helpFormatter0.findWrapPos("", (-42), 330);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = null;
      String string1 = "";
      Options options0 = new Options();
      String string2 = "vpHixAW0@#Nyw.;IL'";
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("vpHixAW0@#Nyw.;IL'", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'vpHixAW0@#Nyw.;IL'' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "$/|3,!-.Ko8 ?}@,n[U";
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.setArgName("$/|3,!-.Ko8 ?}@,n[U");
      int int0 = 1397;
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("+:t", "+:t", options0, (String) null, true);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultNewLine = "xK0 `_'";
      helpFormatter0.setDescPadding(120);
      helpFormatter0.setWidth(120);
      String string0 = "GU=X";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "GU=X");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // GU=X
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.optionComparator = comparator0;
      int int1 = 1033;
      String string1 = null;
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("9pTO)oQIA}4o", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '9pTO)oQIA}4o' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "XtSM~#;ggwd^7!+GNc`";
      helpFormatter0.setArgName("_SOjE?oh%");
      assertEquals("_SOjE?oh%", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("&\"p`K\rJ");
      assertEquals("&\"p`K\rJ", helpFormatter0.getNewLine());
  }
}
