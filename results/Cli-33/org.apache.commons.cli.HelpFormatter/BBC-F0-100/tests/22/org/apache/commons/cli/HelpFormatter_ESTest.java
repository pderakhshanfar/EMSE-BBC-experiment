/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:23:27 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", true, "P");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(44, "NO_ARGS_ALLOWED", "UwO$H\".^Sksc,iX", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      option0.toString();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 381, "tF`/%5AhqAq#}", "P", options1, 487, (-1), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.defaultLongOptPrefix = null;
      helpFormatter0.printHelp(3, "!@\"Yj}fEj&.1MAa", "", options0, (String) null);
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "--");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("dd5p9", "");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("mv}`$_G");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(32, "#9p)GYm", " ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mv}`$_G");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printUsage(printWriter0, 3, "@~B?", options0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.printHelp(74, "arg", "arg", options0, "arg");
      helpFormatter0.getArgName();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "\n", "usage: ", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&NEkfqSah");
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, (-1320), 74, "sfzOx_?o`2naYadJK(x");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, " ");
      optionGroup0.setRequired(true);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("--", "usage: ", options0, "\n", true);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      String string0 = "5~&";
      try { 
        MockURI.URI("\n", "t:aCu{", "has already been selected: '", 74, "/[p*%M0Ii7y18_f;qC", "org.apache.commons.cli.HelpFormatter", "W.Z3~YO/C+");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: 
         // ://t:aCu%7B@[has already been selected: ']:74/%5Bp*%25M0Ii7y18_f;qC?org.apache.commons.cli.HelpFormatter#W.Z3%7F~YO/C+
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "7#ynDN[A";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      Options options3 = options1.addOption("", false, " ");
      helpFormatter1.printHelp("--", "usage: ", options0, "\n", true);
      Options options4 = new Options();
      helpFormatter1.printHelp(1574, " ", "", options3, "-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      int int0 = (-2);
      mockPrintWriter0.flush();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "", options2, 74, (-2386), "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      helpFormatter0.printHelp(printWriter0, 3, "org.apache.commons.cli.HelpFormatter$1", (String) null, options0, 74, 1367, "--", true);
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 40, "--");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 44, "--");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$1");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage(printWriter0, 3524, "FId_WlVhEWZT]]I");
      Options options0 = new Options();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) options0;
      PrintWriter printWriter1 = printWriter0.printf("arg", objectArray0);
      helpFormatter1.printHelp(printWriter1, 105, " [ARG]", "r`Fz)", options0, 1954, 0, "--", true);
      helpFormatter0.getLongOptPrefix();
      Options options1 = new Options();
      helpFormatter1.printUsage(printWriter0, 2435, "usage: ");
      helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter$1", 1, 3);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".p@PLAs%@SUqd:o");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 3524;
      helpFormatter0.printUsage(printWriter0, 3524, "FId_WlVhEWZT]]I");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      Options options2 = options1.addOption((String) null, " ", false, "?=9<B#7O:_");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 115, "HO8]X<*-", "Y/+D4}I7\u0005", options2, 32, 115, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "--";
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", false, " ");
      boolean boolean0 = true;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter1.getDescPadding();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 844, "q:Mxkp", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "-", "[ option:   ::   ]", options2, (-1642), (-1179), "_&:-v\"eF@@");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      String string0 = " ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d6SN");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", false, "i");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "i", "", options1, (-2), (-2), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      optionGroup0.addOption(option0);
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.forLanguageTag("<");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "DZ.4";
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "DZ.4", objectArray0);
      helpFormatter1.printHelp(printWriter0, 372, " [ARG]", "-", options2, 74, 1, (String) null, false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      helpFormatter1.getNewLine();
      Options options3 = new Options();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "wWt,wdII+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 32, "GWZKg<T!^_Wr");
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getDescPadding();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1228, "\n", "arg", options1, 6550, 32, "", true);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "usage: ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasOption("arg");
      options0.addOption((String) null, "", true, "");
      helpFormatter0.printHelp("arg", options0, true);
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, (-1005), ",OYwe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-1054));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 172;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, ";$:Z4");
      String string0 = "\"";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$", "\"", options1, "$", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options1.addOption("", false, " ");
      helpFormatter0.printHelp(3, "!@\"dYj}fE.#1MAa", "", options0, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2020, options0, 3, 2258);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "line.separator");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", options1, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setSyntaxPrefix((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.hasOption("-");
      options0.addOption("", "usage: ", true, ",OYwe");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", options0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ option: ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[ option: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockFileOutputStream0.release();
      Options options0 = new Options();
      mockPrintWriter0.print((float) 15);
      options0.toString();
      options0.addOption((String) null, true, "");
      helpFormatter0.printOptions(mockPrintWriter0, 15, options0, 15, 15);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, "", " | ", options0, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "line.separator");
      helpFormatter1.setOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "wWt,wdII+");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, " ", "-", options0, 110, 32, " ]", false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("arg", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "line.separator");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "wWt,wdII+");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 290, "<2", "wWt,wdII+", options1, 1, 117, "--", false);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, 64, "\n");
      helpFormatter3.printWrapped((PrintWriter) mockPrintWriter0, 74, 3, "%ZEKQUj");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "wWt,wdII+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "line.separator");
      helpFormatter1.setOptPrefix("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      mockPrintWriter0.append('C');
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("-");
      Options options1 = options0.addOption("arg", true, "-");
      Options options2 = options1.addOption("", true, "-");
      helpFormatter0.printHelp("arg", "Z#jgS,Q8l", options0, "arg", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XFj2~:OI#?^6!", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 969, "", "", options2, 969, 969, "[", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 7;
      String string0 = "*oRg}#)xF-AI'Ql<";
      helpFormatter0.printWrapped(printWriter0, 7, "*oRg}#)xF-AI'Ql<");
      String string1 = null;
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      int int1 = (-578);
      // Undeclared exception!
      try { 
        bufferedOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      options0.addOption("arg", true, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "wWt,wdII+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "line.separator");
      helpFormatter1.setOptPrefix("\n");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "wWt,wdII+");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "-", options0, 2023, 1, "MT:D0\"[`sgL5 o", false);
      helpFormatter2.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cRXkBs&Cf");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1);
      int int1 = 4285;
      helpFormatter0.setDescPadding(4285);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), (Options) null, 44, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(702, "SV=<*%9If(", "NO_ARGS_ALLOWED", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", false, " ");
      helpFormatter1.printHelp("--", "usage: ", options0, "\n", true);
      Options options3 = new Options();
      helpFormatter1.printHelp(1574, " ", "", options2, "-");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      mockPrintWriter0.flush();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, (-2), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      stringWriter1.flush();
      mockPrintWriter0.append((CharSequence) "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      PrintWriter printWriter0 = mockPrintWriter0.format("", (Object[]) null);
      stringWriter1.flush();
      Options options0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 1796;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 1, (Options) null, 1, 1796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, (byte)9, 1496, "UvhE_,p");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 509, (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultArgName = "w[W{";
      helpFormatter0.getArgName();
      String string0 = "usage: ";
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.setLeftPadding((-1673));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.setArgName("w[W{");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("w[W{");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("*]S+!\"/'S 8'TxF", "*]S+!\"/'S 8'TxF", options0, "*]S+!\"/'S 8'TxF", true);
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.printHelp(44, "5pgc-WtW=ff<VDX7~", "", options0, "`?KB)!|R3{p");
      Option option0 = new Option("arg", "!T{H<6l]nec", true, "4g3;5S58PS5}");
      options0.addOption(option0);
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, "*]S+!\"/'S 8'TxF", options0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = 7;
      String string0 = "*oRg}#)xF-AI'Ql<";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 7, "*oRg}#)xF-AI'Ql<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator("--");
      helpFormatter0.setOptPrefix("*X1%{:>uF\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "--", "--", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 7156, "");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter2.printHelp(3, "--", " ", options3, "<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      mockPrintWriter0.append('4');
      StringWriter stringWriter0 = new StringWriter(31);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options2, 74, 1268);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      helpFormatter0.printHelp("efLTga|&9+D|Aq%MR", "", options0, "+UOljG]P", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option((String) null, true, (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp(4, "m#wbMD|0;;*(Kd@", "", options1, "--");
      helpFormatter1.getNewLine();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      helpFormatter2.printHelp(3, "--", " ", options2, "<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('4');
      // Undeclared exception!
      try { 
        helpFormatter2.printUsage(printWriter0, (-1722), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("devq9Z'AIv%D");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "arg";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("", "H}:CC", false, "?nS[6wXO5yM0");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "]", "]", options4, (-1), 32, "' contains an illegal character : '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.createPadding(31);
      helpFormatter0.getLeftPadding();
      helpFormatter0.renderOptions((StringBuffer) null, (-830), options0, 1, 1538);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      int int0 = (-168);
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("--", " ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append(' ');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.ROOT;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-168), "--", "", options0, (-1519), (-1519), "NO_ARGS_ALLOWED", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(32, "#9p)GYm", " ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mv}`$_G");
      mockPrintWriter0.append('9');
      Options options2 = options0.addOption((String) null, "\n", true, "A CloneNotSupportedException was thrown: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 118, "", "rBc%(vSC", options2, (-419), (-168), "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options1.hasShortOption("\n");
      helpFormatter0.printHelp(32, "#9p)GYm", " ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mv}`$_G");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printUsage(printWriter0, 3, "@~B?", options0);
      // Undeclared exception!
      helpFormatter1.printOptions(mockPrintWriter0, 1, options0, 1, 679);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      optionGroup0.addOption(option0);
      helpFormatter1.setDescPadding((-2757));
      Options options2 = new Options();
      helpFormatter0.printHelp(1944, "c015EGt{e[Zs\u0007#", "", options0, "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options2;
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) option0;
      objectArray0[6] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.OptionValidator", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 1, 2009, "usage: ");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) pipedOutputStream0;
      objectArray0[5] = (Object) mockPrintWriter1;
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 379, (String) null, (String) null, options0, 3618, 379, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      option0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", false, " ");
      helpFormatter0.printHelp(3, "!@\"dYj}fE.#1MAa", "", options0, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_]q~{LIA6Q~XOy'%Vl");
      mockPrintWriter0.append('m');
      Options options3 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "--", options3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-25), "usage: ", "tv", options2, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", options0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " [ARG]", "--", options0, 74, 74, "--");
      helpFormatter0.getNewLine();
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("-");
      mockPrintWriter1.append('9');
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "KZ}|ddTs0`VyiSrBY:", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", options0, true);
      int int0 = 712;
      int int1 = 37;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", objectArray0);
      String string1 = "$n^Z&d{aG<i!_ ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-914), "$n^Z&d{aG<i!_ ", "arg", options0, 44, 41, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "#9p)GYm", " ", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('N');
      stringWriter1.append((CharSequence) "arg");
      Options options0 = new Options();
      options0.hasShortOption("eO2PqfsqW03U(A");
      helpFormatter0.printHelp("]]<n,o]M>d*+f", "]", options0, "n#", true);
      helpFormatter0.rtrim("has already been selected: '");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(63);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      helpFormatter1.printHelp("\n", options0);
      helpFormatter1.printHelp(3, "n#", "\n", options0, "--");
      helpFormatter1.printHelp(3, "^iPoQ", "arg", options0, " ", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('N');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2, false);
      stringWriter0.close();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 467, "(({f^e#Ef4Ts^Z7*7");
      int int0 = 2;
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-758);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "", "(({f^e#Ef4Ts^Z7*7", options0, 712, 37, "z+qWIB>x@hf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("");
      String string0 = "";
      helpFormatter0.printHelp("[", "n#", options0, "", false);
      helpFormatter0.setOptPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "O9Ums5:-", "\n", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      Options options1 = options0.addOption("arg", true, "-");
      options1.addOption("", true, "-");
      helpFormatter0.printHelp("' was specified but an option from this group ", "Z#jgS,Q8l", options0, "' was specified but an option from this group ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getLeftPadding();
      helpFormatter1.printHelp("BdM ao6t^Q", options1);
      helpFormatter1.getWidth();
      helpFormatter1.findWrapPos("-", 3, 32);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer.wrap((CharSequence) "-");
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "-", options0, "-", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("devq9Z'AIv%D");
      Options options0 = new Options();
      options0.hasShortOption("\n");
      helpFormatter0.rtrim(".KWQ'YK};<bI@wOa");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getMatchingOptions("");
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = " | ";
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      int int0 = (-168);
      helpFormatter0.defaultLeftPad = (-168);
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-168), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", "[").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.getOption("+y)8sMp$!");
      String string0 = " ";
      options0.hasOption(" ");
      String string1 = ",OYwe";
      options0.addOption("", "usage: ", true, ",OYwe");
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getNewLine();
      Options options1 = new Options();
      int int0 = (-215);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) " ";
      objectArray0[2] = (Object) " ";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockFile1;
      objectArray0[5] = (Object) ",OYwe";
      objectArray0[6] = (Object) " ";
      objectArray0[7] = (Object) " ";
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-2), "cCYy");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      Options options1 = options0.addOption("arg", true, "-");
      options1.addOption("", true, "-");
      helpFormatter0.printHelp("' was specified but an option from this group ", "Z#jgS,Q8l", options0, "' was specified but an option from this group ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("^g]Y!AzOS#e&");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1765, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer.wrap((CharSequence) "-");
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("-");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(9, "<uV'v*<KToQ6|", (String) null, options0, "G/p'N,bX");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasShortOption("[");
      helpFormatter0.printHelp("m#wbMD|0;;*(Kd@", "", options0, "line.separator", false);
      helpFormatter0.rtrim(".-u)Vb^Hg/z:RTH");
      helpFormatter0.createPadding(31);
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options1 = new Options();
      int int0 = 10;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3, options1, 10, 1108);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-755), 2452, "m#wbMD|0;;*(Kd@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasShortOption("[");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("m#wbMD|0;;*(Kd@", (String) null, (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("n#", "F)[xKCf6=isS", options0, "n#", true);
      helpFormatter0.rtrim("n#");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.printHelp("n#", options0);
      MockFile mockFile0 = new MockFile("--", "+");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append('V');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.Option");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "", options0, 74, 1, "n#");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("5X", 0, (-1853));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.addOption("", "usage: ", false, ",OYwe");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("arg");
      helpFormatter0.rtrim(" ");
      helpFormatter0.rtrim("\"");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 10, 117, "\n");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasShortOption("org.apache.commons.cli.HelpFormatter$OptionComparator");
      options0.addOption("", false, "\n");
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "\"y`PaG2?NT4", options0, "' was specified but an option from this group ", true);
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(32);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 32, 32, ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "\"", options0, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "1");
      helpFormatter0.getLeftPadding();
      helpFormatter0.setNewLine("1");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      helpFormatter0.rtrim("5ocA(0^Nz`Ez(+");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(10);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1280), "f=ErxC vo]m`r");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasOption(" ");
      Options options1 = options0.addOption("", "usage: ", true, ",OYwe");
      StringWriter stringWriter0 = new StringWriter(494);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 17, options1, 17, 163);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 24, 17, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 17, 494, "-");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      int int0 = (-168);
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = new StringWriter(516);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "a\rZ", false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2098), options1, 163, 516);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptSeparator("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("\n");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setLongOptPrefix("-");
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        options1.addOption("-", "Z,D5XBUrAr@y2", true, "]#KSN(2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      Options options0 = new Options();
      helpFormatter0.printHelp("' was specified but an option from this group ", options0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      options0.hasOption("");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, (-1), "][OzI-;Qr6]EkKu");
      helpFormatter0.printHelp(":a>f5pGGQ\"", "", options0, ",P@5 =");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.cli.HelpFormatter$OptionComparator", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.addOption("", "usage: ", false, ",OYwe");
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getNewLine();
      helpFormatter0.setDescPadding(3704);
      Options options1 = new Options();
      helpFormatter0.printHelp(3704, " ", ",OYwe", options0, ")Nb");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "5ocA(0^Nz`Ez(+");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("");
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      helpFormatter0.rtrim("5ocA(0^Nz`Ez(+");
      helpFormatter0.createPadding(31);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 32, options0, (-42), (-42));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("+KI_l*b]hv}>N-^bEc", "+KI_l*b]hv}>N-^bEc", options0, " ", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("WL0:p>o>'4,Jb", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      helpFormatter0.renderWrappedText(stringBuffer0, 951, 17, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-620), (-1724), "f=ErxC vo]m`r");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-538));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-168), "' was specified but an option from this group ", "' was specified but an option from this group ", options0, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("devq9Z'AIv%D");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "devq9Z'AIv%D";
      objectArray0[8] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "");
      Option option0 = new Option("", "H}:CC", false, "?nS[6wXO5yM0");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options4 = options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "]", "]", options4, (-1), 32, "' contains an illegal character : '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options1.hasOption("");
      Options options2 = options1.addOption("NO_ARGS_ALLOWED", "arg", true, "--");
      helpFormatter0.printHelp("hr1,\u0000HE.'uU", options2, false);
      helpFormatter0.getNewLine();
      Options options3 = new Options();
      helpFormatter1.rtrim("\n");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderWrappedText((StringBuffer) null, (-1008), (-1008), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(32, "#9p)GYm", " ", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("mv}`$_G");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      helpFormatter0.printUsage(printWriter0, 3, "@~B?", options0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("\n", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.addOption("", "usage: ", true, ",OYwe");
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getNewLine();
      int int0 = (-538);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-538), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      options0.hasShortOption("[");
      helpFormatter0.printHelp("m#wbMD|0;;*(Kd@", "", options0, "line.separator", false);
      helpFormatter0.rtrim(".-u)Vb^Hg/z:RTH");
      helpFormatter0.createPadding(31);
      helpFormatter0.getLeftPadding();
      helpFormatter0.renderOptions((StringBuffer) null, 44, options0, 3, 1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 117, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile(", ");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 609, "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "E379nWQyDMI+PLA(Z";
      Options options0 = new Options();
      options0.helpOptions();
      options0.helpOptions();
      helpFormatter0.setLongOptSeparator("E379nWQyDMI+PLA(Z");
      helpFormatter0.setSyntaxPrefix(".f dnY@F");
      Options options1 = new Options();
      int int0 = 53;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(53, "", "", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      helpFormatter0.rtrim("5ocA(0^Nz`Ez(+");
      helpFormatter0.createPadding(31);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 64, "                               ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      helpFormatter0.rtrim("5ocA(0^Nz`Ez(+");
      helpFormatter0.createPadding(31);
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1561, (String) null, "]", options0, "|TfQd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      Options options2 = options1.addOption("9g", "--", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "usage: ", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      options0.helpOptions();
      helpFormatter0.printHelp("E3796QyDMI+PLA(Z", (String) null, options0, "E3796QyDMI+PLA(Z", false);
      int int0 = (-505);
      helpFormatter0.defaultLeftPad = (-505);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = ".Dn";
      helpFormatter0.setArgName(".Dn");
      String string1 = "p^9w~}S'&!mEyLI";
      helpFormatter0.setLongOptPrefix("p^9w~}S'&!mEyLI");
      helpFormatter0.setLeftPadding(74);
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string2 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        options0.addOption("p^9w~}S'&!mEyLI", "usage: ", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'p^9w~}S'&!mEyLI' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = "OGj*,jFuA{^[E";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "OGj*,jFuA{^[E");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      assertEquals("arg", helpFormatter0.getArgName());
      
      helpFormatter0.setArgName((String) null);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 116;
      String string0 = "D!UwPYT3S>GuK'KT}\\";
      helpFormatter0.defaultSyntaxPrefix = "D!UwPYT3S>GuK'KT}";
      helpFormatter0.setWidth(116);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.setArgName(" ");
      helpFormatter0.getArgName();
      int int1 = (-2723);
      String string1 = "";
      Options options0 = new Options();
      String string2 = "yG%Q&[~";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("yG%Q&[~", true, "D!UwPYT3S>GuK'KT}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'yG%Q&[~' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultDescPad = 708;
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("");
      helpFormatter0.setWidth(0);
      helpFormatter0.getOptPrefix();
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" | ");
      Options options0 = new Options();
      options0.getOption(" | ");
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("\n");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-538), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("usage: ");
      helpFormatter0.setOptPrefix("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      helpFormatter0.setDescPadding(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", false, "\n");
      option0.toString();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption("", "--", true, "");
      helpFormatter0.printHelp(74, "-", (String) null, options1, "\n");
      helpFormatter0.getArgName();
      assertEquals(74, helpFormatter0.getWidth());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("devq9Z'AIv%D");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      Options options0 = new Options();
      Option option0 = new Option("", true, "--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("line.separator", "mQ?nHS!T", options1, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.rtrim("");
      assertEquals("", string0);
      
      String string1 = helpFormatter1.createPadding(105);
      assertEquals("                                                                                                         ", string1);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      helpFormatter1.printHelp("usage: ", options0);
      assertEquals("arg", helpFormatter1.getArgName());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.getNewLine();
      helpFormatter0.printHelp("-", "\n", options0, "arg", true);
      helpFormatter1.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "org.apache.commons.cli.ParseException";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      assertEquals("", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      String string0 = helpFormatter0.defaultOptPrefix;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", options0, true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getNewLine();
      helpFormatter1.setOptPrefix("-");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("usage: ");
      options0.addOption("", "", false, "arg");
      helpFormatter0.printHelp("f#", options0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.setOptPrefix("QY?dY@f:XDDx%ENXN8");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.setDescPadding(23);
      Options options1 = new Options();
      helpFormatter0.printHelp(36, "1", "HvLYw", options0, "s(4\"");
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      options0.hasOption(" ");
      options0.addOption("", "usage: ", false, ",OYwe");
      helpFormatter0.defaultNewLine = " ";
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.getNewLine();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getNewLine();
      int int0 = (-538);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-538), "@@@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setLongOptSeparator(" | ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setDescPadding((-168));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-168), "", " | ", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 861;
      helpFormatter0.findWrapPos("", 861, 861);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) locale1;
      mockPrintWriter0.printf(locale1, "-", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("a");
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.setOptPrefix((String) null);
      assertEquals("a", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-1877), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setArgName("Cannot add value, list full.");
      String string1 = ":o(v]w";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", ":o(v]w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-431));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setOptPrefix("line.separator");
      helpFormatter0.defaultSyntaxPrefix = "line.separator";
      String string1 = "";
      helpFormatter0.setOptPrefix("");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?z8I^(wIQ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      helpFormatter0.printHelp("1", "1", options0, (String) null, true);
      String string0 = helpFormatter0.rtrim("5ocA(0^Nz`Ez(+");
      assertEquals("5ocA(0^Nz`Ez(+", string0);
      
      String string1 = helpFormatter0.createPadding(31);
      assertEquals("                               ", string1);
      
      int int0 = helpFormatter0.getLeftPadding();
      assertEquals(1, int0);
      
      helpFormatter0.renderOptions((StringBuffer) null, (-830), options0, 1, 1561);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-112);
      helpFormatter0.defaultWidth = (-112);
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("-");
      Options options0 = new Options();
      String string0 = null;
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", (String) null, false, "-");
      // Undeclared exception!
      try { 
        options1.addOption("-", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2262;
      helpFormatter0.setLeftPadding(2262);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      String string0 = "//.qB";
      Options options0 = new Options();
      String string1 = "NO_ARGS_ALLOWED";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "McDM'0crIk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
