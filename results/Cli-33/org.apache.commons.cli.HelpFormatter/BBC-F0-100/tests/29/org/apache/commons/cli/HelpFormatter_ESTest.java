/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:07:42 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1071);
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "");
      Options options2 = options1.addOption("", "", false, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "Iq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("%pX&F");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      mockPrintWriter1.format(locale0, "--", objectArray0);
      int int0 = (-1244);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1244), "%pX&F", "%pX&F", (Options) null, "%pX&F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "g}Y| H", "g}Y| H", (Options) null, "g}Y| H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("|+ij.N");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.findWrapPos("|+ij.N", 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", " ", true, "-");
      Options options2 = options1.addOption("arg", true, "-");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options2, 1, 1728);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.JAPANESE;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "arg", (Object[]) null);
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 1, 3, "org.apache.commons.cli.Util");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (-1), "H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-530);
      helpFormatter0.setWidth((-530));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options0, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "A#{i2)PE45s|m+*";
          int int0 = 7;
          helpFormatter0.findWrapPos("A#{i2)PE45s|m+*", 7, 7);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor73.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", " ", options0, " ");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("U", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.println("-");
      options0.addOption("", "[", true, "-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null, options0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "W%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultNewLine = null;
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      file0.getAbsoluteFile();
      Option option0 = new Option((String) null, "W%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(451);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "arg", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions("=ycq");
      Options options1 = new Options();
      Option option0 = new Option("", (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("Rr8", "Y~],8Z8LOYTQ^6", options2, "Y~],8Z8LOYTQ^6");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getMatchingOptions("usage: ");
      helpFormatter0.printHelp("E=eI_R^5VQ,o@f=T", "", options0, "E=eI_R^5VQ,o@f=T");
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3054), "{[`Q^(hajZ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null, options0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setLeftPadding((-1236));
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1236), 6, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, "org.apache.commons.cli.HelpFormatter", "}9=*!N", options0, 485, 2866, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp(1, "GWz &u>unw2~g7.", "--", options0, "-");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", true, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("line.separator", "usage: ", options0, "usage: ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v");
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "\n", options1, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-3969), options1, 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1888);
      Options options0 = new Options();
      options0.getMatchingOptions("-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "42:1(C`/RkW*(:M.]il", options0, "42:1(C`/RkW*(:M.]il");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1162);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      helpFormatter0.printHelp("-614-", " ", options0, " ", true);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 41, 41, "");
      helpFormatter0.renderOptions(stringBuffer1, 32, options1, 41, 409);
      helpFormatter0.rtrim("-");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cmdLineSyntax not provided");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 115, "\"X^1<elwi<;");
      String string0 = "";
      Options options0 = new Options();
      int int0 = (-1864);
      String string1 = "org.apache.commons.cli.HelpFormatter";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "{~F7L^}5~ i+V", "", options0, (-1864), 2405, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 9, (Options) null, 9, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "W%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, (-1), 3, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "W%", "\n", options1, (-2), (-1328), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i}kG_&", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1665, "", "", (Options) null, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "5(1 9yL|rN,Et", true, "]T:<T");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, ">R", ">R", options1, 17, 17, "Z3ii", true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasOption("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ut8gKyU6yOo-C\"");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2405, "G@", "", options0, 2, 2, "G@", true);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 10, 2, "");
      helpFormatter0.renderWrappedText(stringBuffer1, 2, 6, "");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("0", "0", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, " ", true);
      helpFormatter0.getNewLine();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockPrintWriter0.println((float) 3);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 863, 863, "?[qwugIupgX3/Y$S");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 74, options1, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("wp+>c`4L]1wXJ?AU", options0, true);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "wp+>c`4L]1wXJ?AU";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      helpFormatter0.printOptions(printWriter0, 36, options0, 36, 61);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, ">");
      Option option0 = new Option("arg", false, "s]H%zxl");
      options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      options2.toString();
      helpFormatter0.printHelp("org.apache.commons.cli.Util", "", options3, ">wWB@", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", "r8`gMUf5&", (Options) null, "8jn<v4C3t#XDM}i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 5, 5, "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 5, (-1393), "/xzCHY:c,W|f$'J");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PrintWriter printWriter0 = null;
      int int0 = 1451;
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      options0.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1451, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      options0.hasOption(">R");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "jSN9c^~]IG!6", "N&Hlh7'BhV|`", options0, 3, 1634, "#}OV-%/G", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2897, "N&Hlh7'BhV|`", "", options0, 2, 3445, (String) null);
      helpFormatter0.findWrapPos("usage: ", (-1), 58);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockPrintWriter0.println(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      Options options1 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (int) (byte)27, "9Ll", options1);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((byte)74);
      helpFormatter0.renderOptions(stringBuffer0, (byte)44, options1, (byte)74, 841);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte byte0 = (byte)11;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-635), "/((XzU", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)51;
      helpFormatter0.defaultDescPad = 841;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)44;
      byte byte0 = (byte) (-2);
      byteArray0[8] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "I__R", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.defaultLeftPad = (-1784);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      Options options2 = options1.addOption("0", "0", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      options3.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", " ", options3, "pi$%aHU4!6L+WtXV6+v", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("0");
      helpFormatter0.getDescPadding();
      Options options2 = new Options();
      Options options3 = new Options();
      int int0 = 1023;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Object object0 = new Object();
      Object object1 = new Object();
      optionGroup0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 21, "'G:(l", "", options1, 5757, 5757, "]", true);
      Options options4 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2863, "", "-", options0, 5757, 10, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1777, "/xzCHY:c,W|f$'J", "W.OWU'*WQ tw-=S", options0, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 110, "/xzCHY:c,W|f$'J", "/xzCHY:c,W|f$'J", options0, 110, 1777, "/xzCHY:c,W|f$'J", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("0");
      helpFormatter0.getDescPadding();
      Options options1 = new Options();
      Options options2 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 1309, 5757);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("0");
      helpFormatter0.getDescPadding();
      Options options1 = new Options();
      Options options2 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      helpFormatter0.createPadding(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      byteArrayOutputStream0.write(5757);
      Object object1 = new Object();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 21, "' was specified but an option from this group ", "]", options2, 10, 3, "arg", false);
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-424), "0", "0", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption(" ]");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "usage: ", (String) null, options0, 74, 41, " ]", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions((StringBuffer) null, 934, options1, (-2587), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.ITALY;
      mockPrintWriter0.printf(locale0, "usage: ", (Object[]) null);
      Options options0 = new Options();
      options0.hasOption("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "n4ts:%(PdBbaE3", options0, "arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('f');
      helpFormatter1.printHelp(printWriter0, 115, ">R", "*cDQ72", options0, 3, 517, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("arg");
      helpFormatter1.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("usage: ", 0, (-19));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("0");
      helpFormatter0.getDescPadding();
      Options options2 = new Options();
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      helpFormatter1.createPadding(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      helpFormatter1.printHelp("\n", "arg", options3, "arg", true);
      helpFormatter1.printHelp("usage: ", "", options1, "l]*Ksp{`zrn", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
      String string0 = " ";
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(" ", "jo{g9)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // jo{g9)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      options0.hasOption("");
      Options options1 = options0.addOption((String) null, false, "arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 6377, "48Zw%j2pHT]y", "*cDQ72", options1, 33, 31, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.hasOption(">R");
      helpFormatter0.renderOptions((StringBuffer) null, (-1756), options0, 257, 115);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "yd_?", options1, "yd_?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("0");
      helpFormatter0.getDescPadding();
      Options options1 = new Options();
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      helpFormatter1.createPadding(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      byteArrayOutputStream0.write(5757);
      Object object1 = new Object();
      int int0 = 21;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 21, "' was specified but an option from this group ", "]", options2, 10, 3, "arg", false);
      Options options3 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "kVJ3U*Lvfv.&X-tL", " ", options3, 3, 1023, "_vmP1,8PF!,V");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) null, 1, "-", "/xzCHY:c,W|f$'J", options0, (-1393), (-1393), "", true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("}7/1@!l(w UG219u^");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      Options options1 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "XCN5@bvo5#L]_", "[", options0, 1, 285, "XCN5@bvo5#L]_", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("0");
      helpFormatter0.getDescPadding();
      Options options2 = new Options();
      Options options3 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1023);
      helpFormatter1.createPadding(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = locale0.stripExtensions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      byteArrayOutputStream0.write(5757);
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) options1;
      objectArray0[4] = (Object) options3;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) "0";
      objectArray0[7] = (Object) "0";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale1, "", objectArray0);
      helpFormatter1.printHelp(printWriter0, 3, "3@", "usage: ", options3, 1, 74, ".i?W0*B=)M4O#", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      Options options0 = new Options();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, ">wWB@");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.printHelp(">wWB@", options1);
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, "pi$%aHU4!6L+WtXV6+v", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2), ">wWB@", "", options2, 119, (-3551), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      Options options0 = new Options();
      String string0 = "eQrFj*Pu :F4a";
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getDescPadding();
      Options options1 = new Options();
      boolean boolean0 = true;
      String string1 = "EW|5MI?COozm6n";
      Option option0 = null;
      try {
        option0 = new Option("EW|5MI?COozm6n", true, " w^<+$%1to=l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'EW|5MI?COozm6n' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      options2.hasOption("Ggd5hj+m");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "__R|hrRR^g^AfHi", "", options2, 3, 682, "*cDQ72", false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      options1.addOption("0", "0", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "?Zb~mtCz[SYS:f", "KN^", options0, 3, 3, "", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      option0.setDescription("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), ">wWB@");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-2), 2, "w:9S`VF>X?fK] 9#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.getOption((String) null);
      Options options2 = options1.addOption("", "", true, ">wWB@");
      helpFormatter0.printHelp(">wWB@", options1);
      Option option0 = new Option("", true, " ");
      options2.addOption(option0);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6e+G8bgAGguSMJ%K^");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 535, "");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "5ZW.AGd");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("0", "0", false, ">wWB@");
      Option option0 = new Option("", false, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, "pi$%aHU4!=6L+WtXV6+v", false);
      helpFormatter0.printHelp("{7_z+)", "g@=F-jhfqw* 4^Vos", options1, "", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(62, "\"v{Gwd3GebBT?n", "qHbHMzM`Nnx@R8C", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("j.]\"i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('U');
      int int0 = (-344);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-344), "{s^p");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("0", "0", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, " ", true);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), 13, ">wWB@");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!_";
      helpFormatter0.setLongOptSeparator("!_");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator("!_");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-16), (-16), "RHFgaZ@EsjMANm");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "?Zb~mtCz[SYS:f", "KN^", options0, (-1), (-1), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("0", "0", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, "pi$%aHU4!6L+WtXV6+v", true);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, " ");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 1204, (Options) null, 3, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "");
      options0.addOption(option0);
      String string0 = "pi$%aHU4!6L+WtXV6+v";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "/xzCHY:c,W|f$'J", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          String string0 = "";
          String string1 = "8\"E+haC[s>q'!";
          options0.addOption("", "8\"E+haC[s>q'!", false, "z^KoW[7j3& v0%7*5");
          options0.hasLongOption("arg");
          options0.getOptionGroups();
          PrintWriter printWriter0 = null;
          int int0 = 1791;
          int int1 = 0;
          options0.getOptionGroups();
          String string2 = "";
          boolean boolean0 = true;
          // Undeclared exception!
          helpFormatter0.printHelp(0, "-", "-", options0, (String) null, true);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-300));
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getWidth();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'Y';
      charArray0[3] = 'D';
      charArray0[4] = 'z';
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, 74, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "?Zb~mtCz[SYS:f", "KN^", options0, (-1), (-1), "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(34, "5X>\"JRk8", "   ", (Options) null, "arg", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "";
      Options options0 = new Options();
      int int1 = 11;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 11, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, ">wWB@");
      helpFormatter0.printHelp(">wWB@", options1);
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, "pi$%aHU4!6L+WtXV6+v", true);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setDescPadding((-1278));
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", "-", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg", true, "\"W@~UAxjJJ-R#yr1?\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8=+m0vLB\"^nIP%fqz", " :: ", (Options) null, " ] [ long ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      helpFormatter0.setNewLine("QbH^Ay");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      Locale locale0 = Locale.US;
      String string0 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) stringWriter1;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      int int0 = 0;
      helpFormatter0.printWrapped(printWriter0, 0, "");
      Options options0 = null;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("i0rU4_A", (String) null, (Options) null, "has already been selected: '", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setSyntaxPrefix("OjcG`x]FLyU");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setNewLine("OjcG`x]FLyU");
      helpFormatter0.getNewLine();
      int int0 = (-1179);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1179));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      PrintWriter printWriter0 = null;
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      String string1 = "";
      Options options0 = new Options();
      options0.helpOptions();
      Options options1 = options0.addOption("", true, "");
      helpFormatter0.printHelp("-", options1, true);
      Option option0 = new Option("", "arg", true, "\"W@~UAxjJJ-R#yr1?\"");
      Options options2 = options1.addOption(option0);
      options1.getMatchingOptions(" :: ");
      options2.addOption("", true, "arg");
      // Undeclared exception!
      try { 
        options2.addOption("--", "usage: ", true, "\"W@~UAxjJJ-R#yr1?\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, "", "/xzCHY:c,W|f$'J", options0, (-1393), (-1393), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "b'z";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("b'z", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("o(d*=PqEK.%ivPRYHrW", 2438, (-1756));
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = (-1874);
      Options options0 = new Options();
      String string0 = " ";
      Option option0 = null;
      try {
        option0 = new Option(" ", "org.apache.commons.cli.HelpFormatter", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, (String) null, (String) null, (Options) null, (-1139), 1372, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      String string1 = "--";
      helpFormatter0.setArgName("--");
      String string2 = "H_p";
      String string3 = "kD}9IIz_";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setWidth(1);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, " ");
      Option option0 = null;
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1458), "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "SPGb)2G";
      helpFormatter0.setLongOptPrefix("SPGb)2G");
      String string1 = ":qga";
      Options options0 = new Options();
      String string2 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "0";
      helpFormatter0.printHelp("0", options0, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix("arg");
      int int0 = 44;
      helpFormatter0.setWidth(44);
      helpFormatter0.getLongOptSeparator();
      String string0 = "1(mQ&.cHF  G[*svB;";
      String string1 = "D-`Dph@d@w";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("NWKK1gne_@c__(q8mH", (String) null, true, "e*r,q,&3#:i`^>5N!Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'NWKK1gne_@c__(q8mH' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("48Zw%j2pHT]y");
      File file0 = MockFile.createTempFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "W%");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, "\n", "line.separator", options0, (-1), 3, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      String string0 = "";
      helpFormatter0.findWrapPos("", (-844), 1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", "", true, "|au");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      MockFile mockFile0 = new MockFile("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "__R|hrRR^g^AfHi", "", options2, 3, 682, "]", false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1112), "\n", "org.apache.commons.cli.Util", options0, 338, 4152, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "iE{p|Wod";
      helpFormatter0.defaultLongOptPrefix = "iE{p|Wod";
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.rtrim("iE{p|Wod");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.setOptionComparator((Comparator) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" [ARG]");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        mockPrintWriter0.write(charArray0, (-1), 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "+T/D>rzs9j?1)OEn\\M";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "+T/D>rzs9j?1)OEnM");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "", true, ">wWB@");
      Option option0 = new Option("", true, " ");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp(" ", " ", options3, "pi$%aHU4!6L+WtXV6+v", true);
      helpFormatter0.getLeftPadding();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      String string0 = "_+";
      String string1 = "%";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("_+", "%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!_";
      helpFormatter0.setLongOptSeparator("!_");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptSeparator("!_");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "RHFgaZ@EsjMANm");
  }
}
