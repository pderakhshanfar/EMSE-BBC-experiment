/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:23:10 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("-", "\n", options0, "\n");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      String string0 = "";
      Option option0 = new Option("", "usage: ", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options1.hasLongOption((String) null);
      helpFormatter0.printHelp(74, " ", " ", options1, "--", true);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "\n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!75~&[7DYb#";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!75~&[7DYb#", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1745, options0, 3063, 1745);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2709));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "\n", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-14));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(105, "$.3W7vobT7Z$T@EO", (String) null, options0, "<32%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("1W!Nm3{ oxhT,9i}r", "G", (Options) null, "G", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setSyntaxPrefix("lXj_G37 :Vf8n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("UL9R%*<anuV'");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "'");
      Options options2 = options1.addOption("wqSE8E", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("wqSE8E", "", true, "A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.hasOption("Q9b");
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("Q9b", false, "-");
      helpFormatter0.printHelp("O`nP}MEB6 heSL@.}J", "", options4, "line.separator");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth((-2));
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "", "A CloneNotSupportedException was thrown: ", options2, "o$$|hl#yf(:F.w*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 63, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator(" :99@4D5\"Sai3aRY.5");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(0);
      String string1 = " [ARG]";
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("n '");
      helpFormatter0.defaultSyntaxPrefix = "~)P";
      helpFormatter0.defaultLongOptPrefix = "X|Y*2GxK]NZI";
      helpFormatter0.rtrim(";py1)UwRjF3*43t|YBp");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 224, 224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp("-", "", options0, "");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-5962), "d,cU^#i(Z)q3z_<X", "", options0, "d,cU^#i(Z)q3z_<X");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 1, options0, (-2349), 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "fs2*V}6JwXTb^ev\";,b");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3, "line.separator", "", options0, "", true);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1534), options1, 57, 293);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(121);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.Option", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(3461);
      helpFormatter0.defaultSyntaxPrefix = null;
      Options options0 = new Options();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3461, options0, 3461, 3461);
      options0.hasShortOption("\n");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1, 3461, "");
      helpFormatter0.renderWrappedText(stringBuffer2, 3461, 99, "");
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("arg", (-2021), 2139);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("p;#5MI_m%rC*5Mx23", "", options0, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(416);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "arg");
      mockPrintWriter1.println(0L);
      helpFormatter0.printHelp(printWriter0, 416, "--", (String) null, options0, 909, 1, "--", true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile(" [ARG]", "v2'&E");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 629, "t@N?O>[mNN*yE$V5/V", "", options0, (-591), (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.append((CharSequence) "-");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8S0DZu(C");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1948, "line.separator");
      helpFormatter0.printHelp(" ", "line.separator", options0, "LM0N|");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 43, "", options1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("Tag^O*>GN+,v`=I%`");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter0.append((CharSequence) " ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 19, "usage: ", "AB2XoJy+", options1, 3, 2234, (String) null, false);
      // Undeclared exception!
      helpFormatter2.printHelp(1, "usage: ", "arg", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "qyP";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1898), "qyP");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      String string0 = " ";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      helpFormatter0.printHelp("pg/l'KD#[d~#*", " ", options1, "/a6f@F\"C>qq!K");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 114, options0, 5362, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      helpFormatter0.printHelp(printWriter0, 19, "Cannot add value, list full.", "AB2XoJy+", options1, 10, 5, " ", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(15, "arg", "n- GU5KW~H2:P!", options0, "kuuR0 nyk");
      helpFormatter1.defaultNewLine = " ";
      helpFormatter1.printHelp(1202, "kuuR0 nyk", "[", options1, "n- GU5KW~H2:P!", false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "arg");
      Option option0 = new Option("", "usage: ", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("e8xk,N]GDz", "[ option: ", options0, "");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "]", options1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("uNHe*Ph4%/");
      helpFormatter0.printOptions(mockPrintWriter0, 64, options0, 3667, 7);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "rL! ts";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rL! ts");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer1, 1, 7, "^n@Xoae6iz0.Z<+P=");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter0.append((CharSequence) "-");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 19, "-", "AB2XoJy+", options1, 3, 56, "usage: ", true);
      // Undeclared exception!
      helpFormatter1.printHelp(1, " ", "-", options1, "-");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup1.setRequired(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 38, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Option option0 = new Option("H", false, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) " ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "\n");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      Option option0 = new Option("H", false, "arg");
      options0.addOption(option0);
      helpFormatter0.printHelp("-", "", options0, "");
      helpFormatter0.getSyntaxPrefix();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 469, 99, "");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      helpFormatter0.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "fq", "fq", options0, "fq");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "arg");
      Option option0 = new Option("", "usage: ", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "]", options1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "[`;?`F");
      Options options2 = new Options();
      helpFormatter0.printHelp("E", "[`;?`F", options1, (String) null);
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      options1.hasLongOption("");
      helpFormatter0.printHelp(105, "E", "I", options2, (String) null, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("q?F.:kJk#gy:iLm3j");
      mockPrintWriter0.print(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 721, "[");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = options0.addOption("h", "h", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("E", "\"(,3U6 3hk", options2, (String) null);
      helpFormatter0.rtrim("\"(,3U6 3hk");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3179, "]", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      helpFormatter0.rtrim("zn'(m<Z%.R");
      helpFormatter0.setDescPadding(34);
      String string0 = "Gsh{zcz!_";
      String string1 = "$DP\"d2VXPn+nQx!";
      String string2 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      int int0 = 90;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(90);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      mockPrintWriter1.append((CharSequence) " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = mockPrintWriter1.append('?');
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-165), ")#HgRh<A5>xLs", "$DP\"d2VXPn+nQx!", options0, 90, (-770), "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("\"n^{");
      helpFormatter0.setLongOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("&]&");
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.rtrim("Gsh{zcz!_");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = " ] [ long ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 816, " ", "@KLltoH/uL+R2GXai(", options1, 1, (-5595), " ] [ long ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.append((CharSequence) " ");
      int int0 = 1;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "\n", " ", options1, (-1831), 1, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLeftPadding();
      Options options1 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) " ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 1, "\n");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 3, " ", "arg", options1, 1917, (-737), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      Option option0 = new Option("", "usage: ", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options2.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(".ofQ%>rOlH>FfzenKut", "", options2, "org.apache.commons.cli.OptionGroup");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&]&";
      helpFormatter0.setLongOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("&]&");
      int int0 = (-2526);
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.rtrim("Gsh{zcz!_");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "&]&");
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "", options0, 1, 1, "w7BHN+0\r}#'%", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("-");
      Options options1 = new Options();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-958), "\n", "{)gHqBLTXo](hOn,?", options1, (-2), (-958), "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(13);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 67, 973, "]/QG/7[qZC)o1_BNPYs");
      int int0 = 2528;
      String string0 = "OQAwpKWPC_RlS";
      helpFormatter0.defaultArgName = "OQAwpKWPC_RlS";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2528, "g$>?r=.ii+_oTZ", "g$>?r=.ii+_oTZ", (Options) null, "u|^Ra8ZBo]] ;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "arg");
      Option option0 = new Option("", "usage: ", true, "");
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(33, "^}", "", (Options) null, "k", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("b^GWy]/i+ul");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "b^GWy]/i+ul", true, "b^GWy]/i+ul");
      helpFormatter0.printHelp("b^GWy]/i+ul", "", options1, "/a6f@F\"C>qq!K");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1081);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1132), (String) null, "", options0, 1081, (-1132), "/a6f@F\"C>qq!K", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("UL9R%*<anuV'");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", false, "'");
      Options options2 = options1.addOption("wqSE8E", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("wqSE8E", "", true, "A CloneNotSupportedException was thrown: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      helpFormatter0.printHelp("O`nP}MEB6 heSL@.}J", "", options4, "line.separator");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("pg/l'KD#[d~#*");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("pg/l'KD#[d~#*");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setDescPadding(3307);
      helpFormatter1.rtrim("x@\"c|bIc`yhEnK");
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "B2DtM;mDF");
      helpFormatter0.printHelp(74, "arg", "arg", options1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      Options options2 = new Options();
      helpFormatter0.printHelp("pg/l'KD#[d~#*", " ", options1, "/a6f@F\"C>qq!K");
      options1.addOption("", false, "-");
      int int0 = (-3150);
      String string0 = "[ Options: [ short ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-3150), "[ Options: [ short ", "-", options1, "/a6f@F\"C>qq!K", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)37;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("&]&");
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.rtrim("Gsh{zcz!_");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "&]&", "' contains an illegal character : '", options0, "&]&", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, "arg", "-", options0, 22, 0, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'%elr>:|QQ7eOcXLcgd");
      helpFormatter0.setArgName("'%elr>:|QQ7eOcXLcgd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-2476), "'%elr>:|QQ7eOcXLcgd", "", options0, 74, 1, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      String string0 = "zN";
      Options options1 = options0.addOption((String) null, "usage: ", true, "zN");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1430, "!`", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      Options options2 = new Options();
      helpFormatter0.printHelp("pg/l'KD#[d~#*", " ", options1, "/a6f@F\"C>qq!K");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "?^^E|\"356-7", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'%elr>:|QQ7eOcXLcgd");
      helpFormatter0.setArgName("'%elr>:|QQ7eOcXLcgd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1460, "org.apache.commons.cli.AlreadySelectedException", "`fC", options0, 2212, 480, "`fC");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      PrintWriter printWriter0 = null;
      String string0 = " ";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      Option option0 = new Option("", "usage: ", true, "");
      options1.addOption(option0);
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, true, "[`;?`F");
      Options options2 = new Options();
      helpFormatter0.printHelp("E", "[`;?`F", options1, (String) null);
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      int int0 = 469;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 469, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      String string0 = "";
      Option option0 = new Option("", "usage: ", true, "");
      options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "&NxP");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      options0.addOption("", "=COu,.", false, "-");
      Options options1 = new Options();
      String string0 = "/a6f@F\"C>qq!K";
      String string1 = "Nv$N0KD;e{KB6";
      helpFormatter0.printHelp("/a6f@F\"C>qq!K", "=COu,.", options0, "Nv$N0KD;e{KB6");
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("-", options0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-812), "d9kLn");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.addOption("", "=COu,.", false, "-");
      Options options1 = new Options();
      helpFormatter0.printHelp("/a6f@F\"C>qq!K", "=COu,.", options0, "");
      helpFormatter0.rtrim("/a6f@F\"C>qq!K");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("|:aeCdKEA", "A CloneNotSupportedException was thrown: ", options0, "3B%+zY", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 22, "pg/l'KD#[d~#*", "pg/l'KD#[d~#*", options0, 22, 104, "pg/l'KD#[d~#*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      Options options2 = new Options();
      helpFormatter0.printHelp("pg/l'KD#[d~#*", " ", options1, "/a6f@F\"C>qq!K");
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.renderOptions((StringBuffer) null, 114, options2, 5362, 114);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = null;
      char[] charArray0 = new char[0];
      helpFormatter0.setDescPadding((-1544));
      helpFormatter0.setWidth((-7));
      helpFormatter0.getNewLine();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("#snY$Id.n~2[m->dsX", "#snY$Id.n~2[m->dsX", options0, (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'%elr>:|QQ7eOcXLcgd");
      helpFormatter0.setArgName("'%elr>:|QQ7eOcXLcgd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("org.apache.commons.cli.AlreadySelectedException", 0, 34);
      helpFormatter0.printHelp(34, "org.apache.commons.cli.AlreadySelectedException", "", options0, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", "org.apache.commons.cli.AlreadySelectedException", options0, "3g");
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("usage: ");
      helpFormatter0.rtrim((String) null);
      helpFormatter1.setDescPadding(9);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option("", "", true, "usage: ");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "-", options1, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      options0.addOption("", "pg/l'KD#[d~#*", true, ":%rius0TnMX%a'X/");
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = (-2036);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2036), (-2036), "pg/l'KD#[d~#*");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.addOption("", "=COu,.", false, "-");
      Options options1 = new Options();
      helpFormatter0.printHelp("/a6f@F\"C>qq!K", "=COu,.", options0, "Nv$N0KD;e{KB6");
      helpFormatter0.rtrim("/a6f@F\"C>qq!K");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
      helpFormatter0.printHelp("|:aeCdKEA", "A CloneNotSupportedException was thrown: ", options0, "3B%+zY", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setOptPrefix("");
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("&]&");
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.rtrim("Gsh{zcz!_");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "Gsh{zcz!_");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "i%tIP|c.Z", "w7BHN+0\r}#'%", options1, "Gsh{zcz!_", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4333);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(16);
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'Z';
      charArray0[2] = 'F';
      charArray0[3] = 'e';
      helpFormatter0.defaultDescPad = 16;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1351), 1005, "1D");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.rtrim("`]&N,Bt");
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("pg/l'KD#[d~#*");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Illegal option name '", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.setArgName((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, (String) null, "-", options0, (-931), (-735), "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 3, "C,lD8N#RnkK-&&iZb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("1D");
      helpFormatter0.setWidth((-342));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1D");
      mockPrintWriter0.println();
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '0';
      charArray0[2] = 'F';
      charArray0[3] = '0';
      mockPrintWriter0.print(charArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 16, 1005, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setDescPadding((-948));
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", "e{_", options1, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("1D");
      helpFormatter0.setWidth(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1D");
      mockPrintWriter0.println();
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'Z';
      charArray0[2] = 'F';
      charArray0[3] = 'e';
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "1D", "", (Options) null, (-4333), 1, "[");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('B');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      stringWriter1.flush();
      stringWriter1.write("\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped(printWriter0, 39, 1, "");
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      String string0 = "A CloneNotSupportedException was thrown: ";
      String string1 = "e)W4n(dI";
      // Undeclared exception!
      try { 
        options0.addOption("fz|!}9;hZhc/BDs:", "", false, "e)W4n(dI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'fz|!}9;hZhc/BDs:' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ,8_";
      String string1 = "6CH'";
      helpFormatter0.defaultArgName = "6CH'";
      Options options0 = null;
      boolean boolean0 = false;
      String string2 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("6CH'", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "SWZM";
      helpFormatter0.defaultOptPrefix = "SWZM";
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLeftPadding((-2045));
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("95E>5)`I:'D|4*3W", "actm.B][9]`(a](|N", true, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '95E>5)`I:'D|4*3W' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.rtrim("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      int int0 = 958;
      int int1 = 0;
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("Z3?k,5qzX\"@f#u'|y~J", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Z3?k,5qzX\"@f#u'|y~J' contains an illegal character : '?'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1044);
      Options options0 = new Options();
      int int1 = (-1754);
      int int2 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1044), options0, (-1754), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "usage: ", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1430, "!`", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("'%elr>:|QQ7eOcXLcgd");
      helpFormatter0.setArgName("'%elr>:|QQ7eOcXLcgd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "-", "'%elr>:|QQ7eOcXLcgd", options0, 480, 0, "'%elr>:|QQ7eOcXLcgd");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Cy\";a";
      helpFormatter0.findWrapPos("Cy\";a", (-1), 1);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      int int0 = 507;
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1616;
      String string0 = "<u-!v3&]5X5y\\,";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 32, "<u-!v3&]5X5y,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      int int0 = 3721;
      MockFile mockFile0 = new MockFile("");
      String string0 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.apache.commons.cli.Option");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.Option
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "1D";
      helpFormatter0.setLongOptPrefix("1D");
      int int0 = 16;
      helpFormatter0.setWidth(16);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("1D");
      mockPrintWriter0.println();
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'Z';
      charArray0[2] = 'F';
      charArray0[3] = 'e';
      charArray0[4] = '0';
      mockPrintWriter0.print(charArray0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "1D");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setSyntaxPrefix(" [ARG]");
      String string0 = "";
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.findWrapPos("", (-6756), (-6756));
      helpFormatter0.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("--");
      File file0 = MockFile.createTempFile("usage: ", "arg", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "t9Suvmqcu");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, " [ARG]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  [ARG]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setNewLine("");
      String string0 = "f(&INj<cpr";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("f(&INj<cpr", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3007), "");
      // Undeclared exception!
      try { 
        options1.addOption("--", "", false, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setArgName(">");
      String string0 = "=RTGc_";
      helpFormatter0.setOptPrefix("=RTGc_");
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptSeparator("NPh!Xb^\"+2t[[/Tk");
      int int0 = 1001;
      int int1 = (-4333);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 1001, (-4333));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('B');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\n");
      stringWriter1.flush();
      stringWriter1.write("\n");
      helpFormatter0.printUsage(printWriter0, 108, "BN*@*{JS *d'v+e6");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("--");
      helpFormatter0.getArgName();
      helpFormatter0.printWrapped(printWriter0, 108, "--");
      helpFormatter0.setSyntaxPrefix("--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 108, "--");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("pg/l'KD#[d~#*");
      PrintWriter printWriter0 = null;
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "pg/l'KD#[d~#*", true, "pg/l'KD#[d~#*");
      String string0 = "";
      Option option0 = new Option("", "usage: ", true, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options3.hasLongOption((String) null);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", " ", options3, "--", true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 5106;
      helpFormatter0.defaultWidth = 5106;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(5106, (String) null, " ", (Options) null, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.getWidth();
      assertEquals(74, int0);
      
      helpFormatter0.setArgName("");
      assertEquals(3, helpFormatter0.defaultDescPad);
      
      Options options1 = new Options();
      helpFormatter0.printHelp(" | ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = helpFormatter1.getLongOptSeparator();
      assertEquals("--", helpFormatter1.getLongOptPrefix());
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.rtrim("&]&");
      helpFormatter0.setDescPadding((-2526));
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-3112);
      helpFormatter0.setWidth((-3112));
      String string0 = null;
      Options options0 = new Options();
      String string1 = "U1dd@7Za";
      options0.hasLongOption("U1dd@7Za");
      options0.hasLongOption("sQ(uk5TaLPEy;wJ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.findWrapPos("", 13, 13);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      filterOutputStream0.close();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-283), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultWidth = 0;
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptSeparator(" :99@4D5\"Sai3aRY.5");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.createPadding(0);
      String string1 = " [ARG]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "cmdLineSyntax not provided";
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.rtrim("cmdLineSyntax not provided");
      helpFormatter0.getOptionComparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " | ";
      helpFormatter0.setOptPrefix(" | ");
      String string1 = "Y";
      helpFormatter0.defaultSyntaxPrefix = "cmdLineSyntax not provided";
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-544), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
