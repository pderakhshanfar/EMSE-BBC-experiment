/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:55 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("A3W", "org.apache.commons.cli.HelpFormatter$1", true, "A3W");
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.setArgName("");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) " ", (-1198), (-1818));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "y";
      Options options0 = new Options();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      helpFormatter0.printHelp("y", "[ARG...]", options0, "[ARG...]", false);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "Ro:j8CZrKcI8ePR";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Ro:j8CZrKcI8ePR", "Ro:j8CZrKcI8ePR", (Options) null, "Ro:j8CZrKcI8ePR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      option0.setArgName("' contains an illegal character : '");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("usage: ", options0, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "arg", true, "--");
      helpFormatter0.defaultWidth = 1;
      // Undeclared exception!
      helpFormatter0.printHelp("id92Fd$%j", options0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Option option0 = new Option("", "", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option1 = new Option("4WxzHnnYMn9ER7t", true, "4WxzHnnYMn9ER7t");
      OptionGroup optionGroup1 = optionGroup0.addOption(option1);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("line.separator", options0, true);
      helpFormatter0.printHelp("4WxzHnnYMn9ER7t", options1, false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2066);
      helpFormatter0.defaultWidth = (-2066);
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.rtrim("usage: ");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultDescPad = (-1270);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G|<cQt:I", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      StringBuffer stringBuffer0 = new StringBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) stringBuffer0;
      objectArray0[2] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, "", "')xQd+$B0S7z03iw", options0, 3, 3, "`J[juJPC;EeM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(" | ");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "\n", "arg", options0, "\n", true);
      helpFormatter0.printHelp("line.separator", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 44, "Lad_]vvB~x[Dp", "Cannot add value, list full.", options0, 74, 74, "%J~", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "GKaRQ7>*R^";
      helpFormatter0.setNewLine("GKaRQ7>*R^");
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(498, "GKaRQ7>*R^", "GKaRQ7>*R^", (Options) null, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth((-246));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(",*`", options0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%J\"gTPODf&<][5}R8", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.defaultLeftPad = 957;
      helpFormatter0.defaultDescPad = 31;
      helpFormatter0.defaultDescPad = 957;
      Options options0 = new Options();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) " ]";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) " ]";
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ]", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 10, "");
      Option option0 = new Option("", "usage: ");
      options0.addOption(option0);
      options0.getOptions();
      options0.hasOption("lN");
      helpFormatter0.setArgName("P3c>aS<1Xb");
      helpFormatter0.printHelp("2~TfV0iN%'oz_3E", options0, false);
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("m5p");
      Locale locale0 = Locale.KOREA;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 550, "x6yW4wT>EDK-iW <R", (String) null, options0, 62, 62, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "R";
      helpFormatter0.defaultLeftPad = (-710);
      Option option0 = new Option("R", "\n", true, "-");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "usage: ", " ", options0, "usage: ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(4434);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 4495, options0, (-290), (-1333));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter0.renderWrappedText(stringBuffer0, 13, (-2), "-~Bi\u0000cf?`cLW{");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "\n");
      MockFile mockFile0 = new MockFile(file0, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "K", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2, "[", (String) null, (Options) null, 631, 631, "yARvhBDu2|!|q", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) filterOutputStream0;
      objectArray0[1] = (Object) helpFormatter1;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) filterOutputStream0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter1;
      objectArray0[8] = (Object) helpFormatter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.append((CharSequence) "arg");
      PrintWriter printWriter1 = mockPrintWriter0.append('P');
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter1, 1, "-", "usage: ", options0, 74, 3, "z?7t:", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.defaultOptPrefix = "\n";
      options0.addOption("arg", "[", false, "--");
      Options options1 = options0.addOption("", "\n", true, "GmaJSX!|(qKEnRG;");
      helpFormatter0.printHelp("[", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultOptPrefix = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "\n";
      Options options1 = options0.addOption("", "\n", true, "GmaJSX!|(qKEnRG;");
      Locale locale0 = Locale.FRENCH;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.apache.commons.cli.AlreadySelectedException";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      mockPrintWriter0.printf(locale0, "\n", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "]", objectArray0);
      helpFormatter0.printHelp(printWriter0, 63, "   ", "j!I@4Y,;<gv", options1, 97, 97, "7$jhxNKX4* $C", true);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(69, "usage: ", "", options1, "usage: ", true);
      MockFile mockFile0 = new MockFile("arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-119), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "\n";
      String string0 = "";
      String string1 = "GmaJSX!|(qKEnRG;";
      Options options1 = options0.addOption("", "\n", true, "GmaJSX!|(qKEnRG;");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 2, 2273);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.printHelp("/2s01;T||", options0, false);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "", options0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(69, "usage: ", "", options1, "usage: ", true);
      MockFile mockFile0 = new MockFile((File) null, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "";
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 109, "?8`V4e?1 cOe$$", "", options2, 104, 63, "", true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultDescPad = 101;
      helpFormatter0.defaultArgName = null;
      helpFormatter0.findWrapPos("Cannot add value, list full.", 1, 1);
      String string0 = " ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "usage: ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(69, "usage: ", "", options1, "usage: ", false);
      MockFile mockFile0 = new MockFile((File) null, "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 69, "=Bl'!Y(tCZ;f", "--", options2, (-1), 69, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", "arg", true, "[");
      options1.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption((String) null, "arg", true, "\n");
      optionGroup1.setRequired(true);
      helpFormatter1.printHelp("[ option: ", options2, true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOption("arg", "arg", true, "[");
      options1.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options1.addOption((String) null, "arg", true, "\n");
      helpFormatter1.printHelp("[ option: ", options2, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 31;
      Options options1 = options0.addOption("arg", false, "3R?c-@Z");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(31, "}+g(LR", "arg", options1, "3R?c-@Z", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions((StringBuffer) null, 3, options1, 74, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Option option0 = new Option("", "3r", false, "org.apache.commons.cli.Option");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, " ] [ long ", false, (String) null);
      helpFormatter0.printHelp("usage: ", options2, true);
      helpFormatter0.findWrapPos("", (-1), (-2));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("");
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "7+5";
      StringBuffer stringBuffer0 = null;
      int int0 = 66;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "[ARG...]", false, "/R");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, "7+5", "<", options2, 66, 66, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "-";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-54);
      byte byte0 = (byte)10;
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, (byte) (-54), options0, 122, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3011), "W/U_Twz*lqzqOTe6", "!", options0, (-3011), (-1060), "!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("NO_ARGS_ALLOWED", "tcI", false, "-");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption((String) null, "arg", false, "-");
      String string0 = "";
      StringBuffer stringBuffer0 = null;
      int int0 = 3899;
      int int1 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "tcI", options1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-295));
      helpFormatter0.setDescPadding((-295));
      helpFormatter0.setNewLine("");
      helpFormatter0.defaultArgName = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = '$';
      charArray0[2] = 'W';
      charArray0[3] = '`';
      charArray0[4] = 'p';
      charArray0[5] = 'b';
      charArray0[6] = '2';
      charArray0[7] = ',';
      // Undeclared exception!
      try { 
        stringBuffer0.append(charArray0, (-1), 218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 4267, options1, 4267, 5);
      options1.helpOptions();
      int int0 = 2886;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 4267, options0, (-1099), 2886);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '%';
      charArray0[2] = '6';
      charArray0[3] = '\\';
      charArray0[4] = 'O';
      charArray0[5] = 'N';
      charArray0[6] = 'Q';
      charArray0[7] = ',';
      charArray0[8] = 'V';
      mockPrintWriter0.print(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, (-2228), "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "-");
      helpFormatter0.printHelp(31, "WAgP", "usage: ", options1, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 63, 37, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("kCzv2e:9'<CA)", 34, (-1204));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringBuffer stringBuffer0 = new StringBuffer("InWK-J#SI-  M");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "-");
      options1.addOption("", "--", false, "InWK-J#SI-  M");
      options1.hasShortOption("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.renderOptions(stringBuffer0, 78, options1, 78, 1);
      StringBuffer stringBuffer1 = new StringBuffer(3);
      int int0 = 83;
      helpFormatter0.renderOptions(stringBuffer1, 83, options0, 1, 1);
      int int1 = (-206);
      stringBuffer1.append((double) 1);
      // Undeclared exception!
      try { 
        stringBuffer1.insert(1211, (long) 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1211
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", false, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      String string0 = "";
      options2.addOption("", false, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-580), "   ", (String) null, options0, ">", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 32, "[");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-10), (-10), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("");
      Option option0 = new Option("", true, "-");
      option0.clearValues();
      option0.toString();
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, true, "   ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), ">`}+AJBL", "", options2, "R", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "-", " -Kvsnzb9n", options0, "'k1~d&jp(");
      helpFormatter0.getNewLine();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 3, 16);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.hasOption("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("muD!.*W@nY$FC&'Q^t");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1098), "cmdLineSyntax not provided", "[ Options: [ short ", options0, (-1098), (-1098), "cmdLineSyntax not provided", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "-", " -Kvsnzb9n", options0, "'k1~d&jp(");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 63, 8, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1432, "6rDzgp\"9i(&~3Yo", "'", options0, "-");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = options0.addOption((String) null, "'R)Y>_aBGjk`\"j", false, " -Kvsnzb9n");
      options1.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("'R)Y>_aBGjk`\"j", options1, false);
      helpFormatter1.getLeftPadding();
      helpFormatter1.printHelp("\n", options1, false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("arg", true, "J<$Ah,mJ}DIOv1pP:W8");
      helpFormatter1.printHelp("org.apache.commons.cli.AlreadySelectedException", options1, true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = null;
      int int0 = 2015;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ";u";
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2015, 2015);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", true, "usage: ");
      options1.getOptionGroups();
      options1.addOption("", true, "/1 `v-z_)q");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-925), "org.apache.commons.cli.HelpFormatter$OptionComparator", "-", options1, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.println((long) 3);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, (-259), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      option0.toString();
      options0.addOption(option0);
      options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter1.getArgName();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      int int0 = helpFormatter2.defaultWidth;
      helpFormatter1.getLeftPadding();
      helpFormatter3.rtrim("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      option0.setOptionalArg(false);
      option0.toString();
      options0.addOption(option0);
      Options options1 = options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      options1.hasShortOption((String) null);
      helpFormatter0.printHelp("maJSX!|(qKEnRG;", options0, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp("maJSX!|(qKEnRG;", "p!H[FTvv,h%Kr", options0, "maJSX!|(qKEnRG;");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setOptPrefix("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1334), "nGd?[\"?{T", ", ", options0, 10, (-1334), "org.apache.commons.cli.AlreadySelectedException", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3588), 4486, "Qr}0~,8>=?iTD&");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0);
      helpFormatter0.setLeftPadding(312);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "][&1>_c=j7a", options0, "][&1>_c=j7a");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      PrintStream printStream0 = mockPrintStream0.printf("--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.createPadding(4);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "    ");
      helpFormatter0.printUsage(printWriter0, 4, "6w.IOrI`_jG");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getNewLine();
      Option option0 = null;
      try {
        option0 = new Option("\n", "1SE]!S/,4/-%HW2K$K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}?jN:v1aGam");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 37, 37, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "-", false);
      options0.getOption("[");
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "", "' contains an illegal character : '", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      option0.toString();
      options0.addOption(option0);
      Options options1 = options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnCRG;");
      options0.getOptions();
      options1.hasShortOption((String) null);
      helpFormatter0.printHelp("maJSX!|(qKEnCRG;", options0, true);
      helpFormatter0.getOptionComparator();
      String string0 = helpFormatter0.defaultLongOptPrefix;
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string0 = "GjI/4mP";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1334), (String) null, "GjI/4mP", options0, (-172), 108, "B", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-208), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, true);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter2.printOptions(mockPrintWriter0, 3, options1, 3, 2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      option0.toString();
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      options2.hasShortOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 106, "", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "'k1~d&jp(";
      helpFormatter0.printHelp(3, "-", " -Kvsnzb9n", options0, "'k1~d&jp(");
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options1 = options0.addOption("", false, "kHusi\"`7A>>9xRsi");
      options1.getOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-567), "", "rz($h", options1, (-567), 10, "'k1~d&jp(", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      Options options1 = options0.addOption(option0);
      options1.getOptions();
      helpFormatter0.printHelp((-1), " :: ", "GhBK(y", options0, "(2yd64-MaN", true);
      options1.getOption("\"");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.Option", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      String string1 = "";
      boolean boolean0 = true;
      options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = (-5687);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-5687), options0, (-5687), (-5687));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 115, (-3202), "");
      helpFormatter0.renderWrappedText(stringBuffer1, 26, 115, "qlOTgB,y?");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 9;
      helpFormatter1.createPadding(9);
      helpFormatter1.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 10, options0, (-634), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 631, "UGjI/4mP", (String) null, options0, (-2830), (-172), "]|o,q=$_D&N");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.createPadding(59);
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "                                                           ", "g_SJpY;q_]", options0, 59, 59, "g_SJpY;q_]");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      int int0 = 31;
      int int1 = 0;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "[", "", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      option0.clearValues();
      option0.toString();
      options0.addOption(option0);
      Options options1 = options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options1.getOption("usage: ");
      options0.getOptions();
      options1.hasShortOption((String) null);
      helpFormatter0.printHelp("maJSX!|(qKEnRG;", options0, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1204), "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("x$ga|gL6KumN", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 631, "GjI/4mP", "line.separator", options0, (-172), (-1334), "usage: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Options options0 = new Options();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 59, "NHO^13#3", options0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 17, "");
      helpFormatter0.createPadding(17);
      helpFormatter0.findWrapPos("#8'ix/82G#=63|!>%I", (-1), (-1));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comparator0;
      objectArray0[1] = (Object) comparator0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) ")]1]VK6*";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) ")]1]VK6*";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, ")]1]VK6*", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('x');
      helpFormatter0.printWrapped(printWriter1, 34, 34, ")]1]VK6*");
      helpFormatter0.defaultWidth = 34;
      helpFormatter0.createPadding(58);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setWidth(31);
      helpFormatter0.printHelp("y", "[ARG...]", options0, "[ARG...]", false);
      helpFormatter0.printHelp("y", options0, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      boolean boolean0 = true;
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "{6", true, "]");
      options1.getOptions();
      options1.hasShortOption("-");
      options1.getOptionGroups();
      helpFormatter0.createPadding(9);
      Options options2 = options1.addOption("arg", true, "   ");
      option0.setOptionalArg(true);
      Options options3 = options2.addOption("", true, "cmdLineSyntax not provided");
      String string0 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "", "org.apache.commons.cli.HelpFormatter$OptionComparator", options3, "' was specified but an option from this group ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 108;
      int int1 = 17;
      PrintWriter printWriter0 = null;
      String string0 = "-";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 34, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.PRC;
      helpFormatter0.setLongOptSeparator("+`l");
      locale0.clone();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " ", objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1050), 2797, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      int int0 = 4486;
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      options0.getOptions();
      options0.getOption("[");
      helpFormatter0.setLeftPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2797, "usage: ", "usage: ", options0, "|");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "{6", true, "]");
      options1.getOptions();
      options1.hasShortOption("-");
      helpFormatter0.printHelp("GhBK(y", options1, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      stringBuffer0.setLength(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "line.separator");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      Options options0 = new Options();
      String string1 = "'k1~d&jp(";
      helpFormatter0.printHelp(3, "-", " -Kvsnzb9n", options0, "'k1~d&jp(");
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.hasLongOption("");
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt(0, 'b');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      option0.toString();
      options0.addOption(option0);
      Options options1 = options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      options1.hasShortOption((String) null);
      helpFormatter0.printHelp("maJSX!|(qKEnRG;", options0, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setWidth(31);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ARG...]", options0, "[ARG...]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("zYX", true, "3,>(fm'B/");
      String string0 = "l=kYq^hA";
      options0.hasShortOption("l=kYq^hA");
      helpFormatter0.defaultArgName = "l=kYq^hA";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1177), "org.apache.commons.cli.AlreadySelectedException", "SSbGd$F", options0, "SSbGd$F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.AlreadySelectedException";
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      String string1 = "{6";
      String string2 = "]";
      Options options1 = options0.addOption("", "{6", false, "]");
      options1.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-92), options0, 44, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("\"a)-9LNyP%@-/%");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1521));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "='z";
      Option option0 = null;
      try {
        option0 = new Option("-", "='z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0MF";
      helpFormatter0.defaultArgName = "0MF";
      helpFormatter0.defaultLongOptPrefix = "0MF";
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "lPY";
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "lPY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      int int0 = (-1807);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      String string1 = "\\";
      Options options2 = options1.addOption("", true, "");
      String string2 = "%r/h5&hcV*Xid,TDz";
      String string3 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Option option0 = new Option("arg", "6nN6J#y", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.toString();
      String string4 = "";
      String string5 = "$.";
      // Undeclared exception!
      try { 
        options2.addOption("$.", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$.' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2263);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string0 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "%SNXh(VPe3T5#/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      options0.getOptions();
      Options options1 = options0.addOption("arg", "',U;wFGuZ3", true, "arg");
      options0.getOption("j4Ga\"/");
      options1.getOptions();
      options1.hasShortOption("has already been selected: '");
      helpFormatter0.printHelp("\n", options0, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1179, "',U;wFGuZ3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(32);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(10);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 2620, 2620);
      helpFormatter0.setWidth(2620);
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "\n", true, " | ");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", true, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(2772);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2772, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.AlreadySelectedException");
      String string0 = ";R|OAp]xfqhtS";
      int int0 = 3157;
      helpFormatter0.findWrapPos(";R|OAp]xfqhtS", 3157, 3157);
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string1 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.findWrapPos(">", 0, 0);
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("?VdKZE");
      String string0 = "{";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "I\\o)g\"0X";
      Options options1 = options0.addOption("U", "arg", false, "Io)g\"0X");
      // Undeclared exception!
      try { 
        options1.addOption("bJB<+wiv/[", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bJB<+wiv/[' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "\n";
      options0.addOption("", "\n", true, "GmaJSX!|(qKEnRG;");
      LinkedList<Option> linkedList0 = new LinkedList<Option>();
      helpFormatter0.printHelp(37, "org.apache.commons.cli.AlreadySelectedException", "org.apache.commons.cli.AlreadySelectedException", options0, "GmaJSX!|(qKEnRG;", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "{6", false, "]");
      options1.getOptions();
      options1.hasShortOption("-");
      helpFormatter0.printHelp("GhBK(y", options1, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      String string0 = "[";
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      options0.getOption("[");
      helpFormatter0.setLeftPadding(2684);
      helpFormatter0.printHelp(2797, "usage: ", "usage: ", options0, "|");
      String string1 = helpFormatter0.createPadding(4486);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 1123;
      int int1 = 0;
      Option option0 = null;
      try {
        option0 = new Option(string1, "E-Rc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      String string0 = "-";
      Options options0 = new Options();
      options0.toString();
      String string1 = "'k1~d&jp(";
      helpFormatter0.printHelp((-1), "-", " -Kvsnzb9n", options0, "'k1~d&jp(");
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.hasLongOption("");
      int int1 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt(0, 'b');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      helpFormatter0.printHelp(" ^p", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 631, "GjI/4mP", "line.separator", options0, (-172), (-1334), " ^p", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2559));
      String string0 = "9Bvmv:K#";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "arg", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D\\";
      String string1 = "0m=Q1xw&J/ePe";
      helpFormatter0.defaultOptPrefix = "D";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-524), "D", "0m=Q1xw&J/ePe", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "a6AIMB{ui0mQU}=";
      helpFormatter0.setLongOptPrefix("a6AIMB{ui0mQU}=");
      int int0 = 0;
      String string1 = "NH,&C<z{~_8&F_";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-HS", "-HS", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '-HS' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = ">";
      String string2 = "[ option: ";
      String string3 = null;
      try { 
        MockURI.URI("--", ">", "usage: ", 3, "[ option: ", (String) null, "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: --://%3E@[usage: ]:3%5B%20option:%20#usage:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.setLength(74);
      String string0 = "line.separator";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 54, "line.separator");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--", "[ option: ");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "[ option: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [ option: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-195);
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals("-", string0);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      options0.getOption("[");
      helpFormatter0.setLeftPadding(2684);
      helpFormatter0.printHelp(2797, "usage: ", "usage: ", options0, "[");
      helpFormatter0.createPadding(4486);
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      
      String string1 = helpFormatter0.getOptPrefix();
      assertEquals("-", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      options0.helpOptions();
      Options options1 = options0.addOption("", "gx:5Ot7<^0f3.<'j", true, "maJSX!|(qKEnRG;");
      options0.getOptions();
      options1.hasShortOption((String) null);
      helpFormatter0.printHelp("maJSX!|(qKEnRG;", options0, true);
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals("org.apache.commons.cli.AlreadySelectedException", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.Options");
      helpFormatter0.setArgName("aQ");
      assertEquals("aQ", helpFormatter0.getArgName());
  }
}
