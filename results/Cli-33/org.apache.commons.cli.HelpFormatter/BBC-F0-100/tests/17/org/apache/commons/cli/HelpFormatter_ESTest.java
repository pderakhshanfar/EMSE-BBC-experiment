/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:23:18 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("=l");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = Locale.KOREAN;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, " [ARG]", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 1, 1, "I\"PX@KyrN@AtUR ");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "Pm,$(Og}";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "]", "]", options0, "");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "usage: ", true, "usage: ");
      optionGroup0.addOption(option0);
      Option option1 = new Option("", "");
      optionGroup0.addOption(option1);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "--", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = new OptionGroup();
      options0.addOptionGroup(optionGroup1);
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2, (-3053), "3den{S/vOR:e*|%n8tJ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Options options1 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      helpFormatter0.printHelp("usage: ", options1, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "\n");
      helpFormatter0.printOptions(mockPrintWriter0, 3974, options1, 3974, 31);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.optionComparator = null;
      helpFormatter0.optionComparator = null;
      helpFormatter0.findWrapPos("", 101, 101);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "[", " ", options0, 636, 101, ">;Y#rFoL", false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      int int0 = (-766);
      helpFormatter0.defaultWidth = (-766);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", options0, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getArgName();
      Options options0 = new Options();
      int int0 = 64;
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "$v.i}o7PL'n#JC+", (Options) null, "$}CE4HmzLkP", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getDescPadding();
      String string1 = "\"";
      StringBuffer stringBuffer0 = new StringBuffer("\"");
      int int0 = (-1802);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.getMatchingOptions("-");
      Option option0 = null;
      try {
        option0 = new Option(" ", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, "5vb", false, "");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", false, "S3&o(uad");
      Options options2 = options1.addOption("", false, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption(option0);
      Options options5 = options4.addOption("", false, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.addOption(option0);
      options5.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("S3&o(uad", options4, true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("usage: ", options0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 64, options0, 457, 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("@U+uWgQ5", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      int int0 = 1906;
      helpFormatter0.renderOptions((StringBuffer) null, 64, options1, 64, 1906);
      helpFormatter0.renderOptions((StringBuffer) null, 34, options1, 64, 2);
      helpFormatter0.findWrapPos("", 65, 0);
      MockFile mockFile0 = new MockFile(",0V?s]8^{`2");
      String string1 = "95Rzh3:(4'<m*";
      try { 
        MockFile.createTempFile("", "arg");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "CX#";
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      String string1 = "org.apache.commons.cli.HelpFormatter";
      Options options0 = new Options();
      String string2 = "OGG";
      options0.addOption("", false, "-");
      boolean boolean0 = true;
      int int1 = (-2309);
      helpFormatter0.defaultDescPad = (-2309);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", ", ", options0, "OGG", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(3);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(31, "usage: ", "\n", options1, "", true);
      String string0 = "(=TpVDl!;P6:";
      helpFormatter0.printHelp("(=TpVDl!;P6:", options1, false);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1254), "[076~[0*xe#i");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.defaultDescPad = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$OptionComparator", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 137, 15, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      helpFormatter0.printOptions(mockPrintWriter0, 63, options0, 2730, 2039);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Illegal option name '");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-3422), 21, "iZT)_r-s[s#_{[\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getSyntaxPrefix();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 74, "");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, (String) null, "'Yn#XC", (Options) null, "k)uI_~,K#TDa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "JxS!7P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-32);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "2qD", false, "arg");
      options0.helpOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "USaKgr&?";
      optionGroup0.toString();
      Option option0 = new Option("arg", "--", true, "USaKgr&?");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-32), "cmdLineSyntax not provided", "USaKgr&?", options2, 31, 31, "[]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "JxS!7P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = (-32);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "2qD", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("arg", "--", true, "USaKgr&?");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-32), "USaKgr&?", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", true, "--");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption("", false, "[");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      options3.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("<.Qd'/R", options3, true);
      String string0 = helpFormatter0.createPadding(4486);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('~');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1), "Z9o.wmW9W~[G}S", "Z9o.wmW9W~[G}S", options1, (-1), 1397, string0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.setLeftPadding((-865));
      helpFormatter0.createPadding(2);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format(locale0, "arg", objectArray0);
      String string0 = ")jAmJ[,Fg";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.OptionValidator", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "org.apache.commons.cli.OptionValidator";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 748, "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) null, 1, "usage: ", (String) null, options0, (-3020), 118, "]");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-2178);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      options0.addOption((String) null, false, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      stringBuffer0.setLength(74);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      optionGroup1.toString();
      optionGroup0.setSelected(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "--", true, "");
      options2.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("MJY", options0, true);
      helpFormatter0.createPadding(34);
      helpFormatter0.getArgName();
      File file0 = MockFile.createTempFile("4(\bWu2yr$.<`J[%", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-757), options1, 74, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer0, 34, 1, "org.apache.commons.cli.HelpFormatter");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter2.findWrapPos("usage: ", 3, 1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int0 = 31;
      stringBuffer0.setLength(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      String string0 = ", ";
      Options options2 = options1.addOption("arg", "X4D_c2N3zX1#vhG5", false, ", ");
      int int1 = 45;
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options2, 31, 45);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(435);
      stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter1 = new StringWriter(34);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      helpFormatter0.getDescPadding();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 64, "\n");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 19, options0, 19, 19);
      stringBuffer0.ensureCapacity(3442);
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), (-1), "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ig");
      PrintWriter printWriter0 = null;
      String string0 = "]";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3711), "]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      optionGroup0.toString();
      Option option2 = new Option("", false, (String) null);
      OptionGroup optionGroup3 = optionGroup2.addOption(option2);
      options0.addOptionGroup(optionGroup3);
      helpFormatter0.printHelp("`o]V9k,]mo", options0, true);
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 54, 54, "");
      stringBuffer1.setLength(66);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2), 3501, "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      String string0 = "-";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, (String) null, "-", options0, (-1), (-1), "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-", "-");
      MockFile mockFile1 = new MockFile("usage: ", "\n");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('<');
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 0, "D7l", options0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Option option0 = new Option((String) null, "usage: ", false, "--");
      options0.addOption(option0);
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      Options options2 = new Options();
      Options options3 = new Options();
      helpFormatter0.getArgName();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.getDescPadding();
      Options options4 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1), options4, 21, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 533, "#3?XA20", (String) null, options0, 2, 10, "-Ac", true);
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "#";
      Option option0 = null;
      try {
        option0 = new Option("#", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile.createTempFile("usage: ", "\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("P6rno1", "P6rno1", false, "\n");
      options1.getMatchingOptions("fWrT&GK");
      Options options2 = new Options();
      helpFormatter0.printHelp("P6rno1", options1, true);
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('M');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter0.append('M');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 74, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ", "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "\n", options0, 3, 1, "9", false);
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 44, "}eC/@I@u7<xGFu76+@", "[", options0, 4486, 861, "", false);
      OptionGroup optionGroup1 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("L=wnqH4?H", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'L=wnqH4?H' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.setLength(3);
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "--");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-862), "--", (String) null, options0, "O,*X-T", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.setLength(74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1189), "line.separator");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "arg");
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "L]qj", options1, (-1), 74, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "--", "--", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockFile.createTempFile("2UKTn[d", "FcAU");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "9", "9", options0, 74, 114, "l{6", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("[ option: ", options1, true);
      helpFormatter0.printHelp("[ Options: [ short ", "", options1, "9[oIpq|'c", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.getArgName();
      StringWriter stringWriter1 = new StringWriter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 83, ">", options0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      String string0 = ":72";
      PrintWriter printWriter0 = mockPrintWriter0.format(":72", (Object[]) null);
      String string1 = "K";
      Options options0 = new Options();
      String string2 = "";
      String string3 = "";
      Options options1 = options0.addOption("", "", false, "usage: ");
      options1.toString();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, 317, options0, 19, (-1447));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringBuffer0.append((float) 3);
      helpFormatter0.renderOptions(stringBuffer0, 1564, options0, 35, 1564);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "j-YOQ|F]Br$", false, (String) null);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 27, "vmnGpE*/C?1TX5/", "", options1, 27, 27, "org.apache.commons.cli.Options", false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1606, "j-YOQ|F]Br$", "Illegal option name '", options0, 1606, 8, (String) null, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("u~|Jx=*'P}q", options1, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 99, 1, ".PY.Ru^y");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "";
      boolean boolean0 = true;
      options0.addOption("arg", "-", true, "arg");
      int int0 = (-1);
      StringWriter stringWriter0 = new StringWriter(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('K');
      int int1 = 19;
      int int2 = (-6);
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 19, "~cUaY~6c%u-I49", "", options0, (-6), 19, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "JxS!7P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "2qD", false, "TyJ4D");
      Options options2 = options1.addOption("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, "USaKgr&?");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-32), "", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "JxS!7P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "2qD", false, "TyJ4D");
      Options options2 = options1.addOption("", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "", true, "USaKgr&?");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options3);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      mockPrintWriter0.format(":72", (Object[]) null);
      Options options0 = new Options();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 214, "nVXEHDn", "K", options0, 214, 214, ":x#8");
      helpFormatter0.getOptionComparator();
      options0.getOptionGroups();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0, false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      String string0 = "' contains an illegal character : '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, "", "' contains an illegal character : '", options0, (-1), 31, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockFile.createTempFile("2UKTn[d", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 286, "9", "9", options0, 286, 114, "l{6", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("<.Qd'/R", options0, true);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 54;
      int int1 = 1313;
      stringBuffer0.setLength(1313);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "-);Kz5tuK0Exd[Xmyl");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(2757);
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" | ", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2389), (-2389), "BA?EA9#mW-Zxzbr");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 26;
      String string0 = "@o|u";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2491), 26, "@o|u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(1);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      Option option0 = new Option("", true, "XNSM]YaqD'o~.k");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      options3.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp("Jk", "", options2, "7)~YNlyfI1i{");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      Options options2 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp("S<856*23(=*ZJ h_", options0, false);
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-2701), options1, 3, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.rtrim(" ");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "cv1Dk)*6`D:9", false, "uPlfLQ8(IiSoM");
      Options options2 = new Options();
      options1.getOptionGroups();
      helpFormatter0.printHelp("--", options2, true);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(".]L_P3mTtPa/Q*?s", 2, (-741));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      Option option0 = new Option("", true, "XNSM]YaqD'o~.k");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      StringWriter stringWriter0 = new StringWriter(956);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 956, options3, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getOptionGroups();
      String string1 = ", ";
      Option option0 = new Option("", ", ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", " ", false, "--");
      String string2 = "aX}Hx4GOj\"";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[0];
      options0.toString();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "aX}Hx4GOj\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 286, "", "9", options0, 286, 286, "EG)", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 54;
      StringBuffer stringBuffer0 = new StringBuffer("-");
      helpFormatter0.renderWrappedText(stringBuffer0, 64, 7, "zwXHm");
      int int1 = 1313;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      String string0 = "";
      mockPrintWriter0.format("", (Object[]) null);
      Options options0 = new Options();
      String string1 = "";
      options0.addOption("", "kRn%6cKHE^A|Fxk9k", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "kRn%6cKHE^A|Fxk9k", "", options0, (-2449), (-2449), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultNewLine;
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      helpFormatter0.printHelp(3, "\n", "usage: ", options1, ".", true);
      Options options2 = new Options();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format(":72", (Object[]) null);
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 3, ":72", "K", options1, (-1), 3, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "\n", false, "usage: ");
      options1.getOptions();
      options1.hasShortOption("-");
      helpFormatter0.printHelp("GhBK(y", options1, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "arg", "nVXEHDn", options1, 3, (-1), "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "-");
      boolean boolean0 = true;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(118, "", "", options0, "org.apache.commons.cli.OptionGroup", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      options0.getOption("[");
      helpFormatter0.setLeftPadding(2662);
      helpFormatter0.printHelp(2797, "usage: ", "usage: ", options0, "|");
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptionComparator((Comparator) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      Options options2 = new Options();
      Options options3 = new Options();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "usage: ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, (Options) null, "@;$Za*Jf~AQW:{", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("usage: ", "\n");
      MockFile.createTempFile("2UKTn[d", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 286, "9", "9", options0, 286, 114, "l{6", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", " ");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      Option option0 = new Option("", true, "XNSM]YaqD'o~.k");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options1.addOption(option0);
      options2.addOptionGroup(optionGroup0);
      Options options3 = new Options();
      options3.addOptionGroup(optionGroup0);
      options0.addOption(option0);
      helpFormatter0.printHelp("Jk", "", options2, "7)~YNlyfI1i{");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("[");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "[");
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      int int0 = (-447);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1171), "usage: ", "", options1, 3359, (-447), "[", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format(":72", (Object[]) null);
      int int0 = 0;
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-120), ":72", "K", options1, (-1), (-120), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "\n", true, "usage: ");
      options1.getOptions();
      options1.hasShortOption("-");
      helpFormatter0.printHelp("GhBK(y", options1, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "arg", "nVXEHDn", options1, 3, (-1), "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 97, (Options) null, 97, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("\"a)-9LNyP%@-/%");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1521));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setArgName("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getNewLine();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "='z";
      Option option0 = null;
      try {
        option0 = new Option("-", "='z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "0MF";
      helpFormatter0.defaultArgName = "0MF";
      helpFormatter0.defaultLongOptPrefix = "0MF";
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "lPY";
      Option option0 = null;
      try {
        option0 = new Option("\n", false, "lPY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      int int0 = (-1807);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      String string1 = "\\";
      Options options2 = options1.addOption("", true, "");
      String string2 = "%r/h5&hcV*Xid,TDz";
      String string3 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      Option option0 = new Option("arg", "6nN6J#y", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.toString();
      String string4 = "";
      String string5 = "$.";
      // Undeclared exception!
      try { 
        options2.addOption("$.", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '$.' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-2263);
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string0 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "%SNXh(VPe3T5#/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      options0.getOption("-");
      options0.hasOption("-");
      helpFormatter0.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 4703, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(32);
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(10);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 2620, 2620);
      helpFormatter0.setWidth(2620);
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "\n", true, " | ");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        options2.addOption("usage: ", true, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setLeftPadding(2772);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 2772, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      String string1 = null;
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.findWrapPos(">", 0, 0);
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("?VdKZE");
      String string0 = "{";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "I\\o)g\"0X";
      Options options1 = options0.addOption("U", "arg", false, "Io)g\"0X");
      // Undeclared exception!
      try { 
        options1.addOption("bJB<+wiv/[", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bJB<+wiv/[' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      helpFormatter1.rtrim(" ");
      String string0 = "{";
      Options options0 = new Options();
      String string1 = "I\\o)g\"0X";
      // Undeclared exception!
      try { 
        options0.addOption("\n", "--", false, "{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.AlreadySelectedException");
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "";
      Option option0 = new Option("", true, "-");
      options0.addOption(option0);
      Options options1 = options0.addOption("", "{6", false, "]");
      options1.getOptions();
      options1.hasShortOption("-");
      helpFormatter0.printHelp("GhBK(y", options1, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setWidth(4486);
      Options options0 = new Options();
      String string0 = "[";
      Options options1 = options0.addOption("", false, "[");
      helpFormatter0.printHelp(31, "usage: ", "", options1, "", false);
      options0.getOption("[");
      helpFormatter0.setLeftPadding(2684);
      helpFormatter0.printHelp(2797, "usage: ", "usage: ", options0, "|");
      String string1 = helpFormatter0.createPadding(4486);
      helpFormatter0.getSyntaxPrefix();
      StringBuffer stringBuffer0 = null;
      int int0 = 1123;
      int int1 = 0;
      Option option0 = null;
      try {
        option0 = new Option(string1, "E-Rc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The optioncontains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1);
      String string0 = "-";
      Options options0 = new Options();
      options0.toString();
      String string1 = "'k1~d&jp(";
      helpFormatter0.printHelp((-1), "-", " -Kvsnzb9n", options0, "'k1~d&jp(");
      StringBuffer stringBuffer0 = new StringBuffer();
      options0.hasLongOption("");
      int int1 = 0;
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt(0, 'b');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      Options options0 = new Options();
      helpFormatter0.printHelp(" ^p", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 631, "GjI/4mP", "line.separator", options0, (-172), (-1334), " ^p", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-2559));
      String string0 = "9Bvmv:K#";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("org.apache.commons.cli.HelpFormatter$OptionComparator", "arg", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.HelpFormatter$OptionComparator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "D\\";
      String string1 = "0m=Q1xw&J/ePe";
      helpFormatter0.defaultOptPrefix = "D";
      Options options0 = null;
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-524), "D", "0m=Q1xw&J/ePe", (Options) null, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "a6AIMB{ui0mQU}=";
      helpFormatter0.setLongOptPrefix("a6AIMB{ui0mQU}=");
      int int0 = 0;
      String string1 = "NH,&C<z{~_8&F_";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-HS", "-HS", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '-HS' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("--", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = ">";
      String string2 = "[ option: ";
      String string3 = null;
      try { 
        MockURI.URI("--", ">", "usage: ", 3, "[ option: ", (String) null, "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: --://%3E@[usage: ]:3%5B%20option:%20#usage:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.setLength(74);
      String string0 = "line.separator";
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 54, "line.separator");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLeftPadding();
      MockFile mockFile0 = new MockFile("--", "[ option: ");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "[ option: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // [ option: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.getLongOptSeparator();
      assertEquals(" ", string0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "D";
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setWidth(0);
      helpFormatter0.setArgName("");
      helpFormatter0.setSyntaxPrefix("D");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(2996);
      helpFormatter0.setLeftPadding((-2298));
      helpFormatter0.getOptPrefix();
      assertEquals("D", helpFormatter0.getSyntaxPrefix());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getOptPrefix();
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("-", string0);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("arg", helpFormatter0.getArgName());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "org.apache.commons.cli.Options");
      helpFormatter0.setArgName("aQ");
      assertEquals("aQ", helpFormatter0.getArgName());
  }
}
