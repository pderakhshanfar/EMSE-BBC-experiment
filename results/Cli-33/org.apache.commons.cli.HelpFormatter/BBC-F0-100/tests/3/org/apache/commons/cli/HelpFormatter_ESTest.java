/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:04:44 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "usage: ";
      stringBuffer0.append((CharSequence) "-");
      Options options1 = options0.addOption("", false, "7RbMUN8T]~");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options1, 2242, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix("x&k");
      helpFormatter0.setDescPadding((-1));
      helpFormatter0.getDescPadding();
      String string0 = helpFormatter0.defaultOptPrefix;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-639), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("\n");
      option0.setRequired(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "", options0);
      helpFormatter0.rtrim("si|S^C%x51@*dj");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 7, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter1, 0, (-5284), "Illegal option name '");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, "-", true, "--");
      helpFormatter0.printHelp(927, "--", (String) null, options0, (String) null, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2514), options1, 1, 2004);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1065));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1), options0, (-1065), 11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("--");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 1, options0, 1, 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-4052), (-1535), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      PrintWriter printWriter0 = null;
      int int0 = 1;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 1, options0, 2, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 3709;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "xQ", "-", options0, 0, 31, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.getNewLine();
      optionGroup0.toString();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-2), "\n");
      int int0 = (-253);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2), options1, (-253), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 64, (Options) null, 74, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("arg", "-", true, "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "b0ejL&7G0w>rf_=-", "-", options1, 3, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.setDescPadding(1197);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "C`+eG$phpz;1rwEY";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "C`+eG$phpz;1rwEY", "C`+eG$phpz;1rwEY", (Options) null, "C`+eG$phpz;1rwEY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "\n");
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2113, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "w0|l,~", options0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-758));
      Options options0 = new Options();
      int int0 = 57;
      String string0 = "x5p]9~?|6>[BV*";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(57, "x5p]9~?|6>[BV*", "", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      helpFormatter0.printHelp("jt0rR*dx8!EL&cyJRHj", options0, false);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderOptions(stringBuffer0, 3176, options0, 3176, 3176);
      stringBuffer0.setLength(1960);
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("jt0rR*dx8!EL&cyJRHj", 740, 32);
      helpFormatter0.rtrim("jt0rR*dx8!EL&cyJRHj");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.renderWrappedText(stringBuffer0, 32, 158, "");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 1, (-2890));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      byteArrayOutputStream0.write(0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      int int0 = helpFormatter0.defaultWidth;
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1108, "", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "usage: ", "\n", options0, "2z/wEf]]", true);
      StringBuffer stringBuffer0 = new StringBuffer("'");
      helpFormatter1.renderOptions(stringBuffer0, 48, options1, 17, 48);
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      byteArrayOutputStream0.write(0);
      options0.getOptionGroups();
      Options options1 = options0.addOption("", "L:", true, "2z/wEf]]");
      Option option0 = new Option("MUVcuZ", "?;");
      options1.addOption(option0);
      helpFormatter0.printHelp("M!%hDW", "Pj9*M^", options1, "M!%hDW");
      helpFormatter0.setOptPrefix("M!%hDW");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-666), "6%TEI");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 34;
      helpFormatter0.defaultWidth = 34;
      helpFormatter0.getWidth();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", "arg");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "-", "usage: ", (Options) null, "@7)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      int int1 = (-1);
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      String string0 = " ";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "usage: ");
      Option option0 = new Option("", "5/&BrS}\"");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("MBP[!/R/$&", "", options3, "usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2235, "\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1831, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      String string0 = "";
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}b4Y!h<.6FJbHCk");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "MBP[!/R/$&";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1883, "<sg<B.u4I70fG", (String) null, options1, 1883, (-2), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Option option0 = new Option("", "n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "k,T@V%^jyn)`?3");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("arg", "k,T@V%^jyn)`?3", false, (String) null);
      options4.getMatchingOptions("-");
      options4.addOption("", "A4vETN1nL", false, ":9~(Xb[~Wp^");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1804, "[ Options: [ short ", "s;Zv_y6", options3, 1, 9, "", false);
      helpFormatter1.getLeftPadding();
      helpFormatter1.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, " ");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object object0 = new Object();
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.printf("", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1466), "\"", "CNsp*7]4hh\"%xde;", options0, (-1466), 2387, "org.apache.commons.cli.HelpFormatter", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.rtrim("+?]");
      String string0 = "";
      String string1 = "?^3fh/5%HD#";
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 777, "?^3fh/5%HD#");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "usage: ");
      Option option0 = new Option("", "5/&BrS}\"");
      option0.clone();
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("MBP[!/R/$&", "", options3, "usage: ");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) options0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.write("\n");
      Options options1 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-3066), (String) null, options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      byteArrayOutputStream0.write(24);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}b4Y!h<.6FJbHCk");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      Option option1 = new Option("", "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options2 = options1.addOption(option1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("org.apache.commons.cli.HelpFormatter", "", options2, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "[ARG...]");
      int int0 = (-2465);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-2465), options0, (-3138), 1184);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(103);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 34, "8{R!^f]Ail<*8V``Pbe");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}b4Y!h<.6FJbHCk");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "MBP[!/R/$&";
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(printWriter0, (-1), "<sg<B.u4I70fG", " ", options1, 2641, 2182, "CNsp*7]4hh\"%xde;", false);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "]");
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 10, options0, 10, 10);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = 248;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 44, 248, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      String string1 = "H4S/]fQAi4UP";
      Options options2 = options1.addOption("", false, "H4S/]fQAi4UP");
      String string2 = "5/&BrS}\"";
      Option option0 = new Option("", "5/&BrS}\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("eUsVS4sz");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 38, "", "xc%Chqyh7C7", options2, (-915), 74, "MBP[!/R/$&", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1827, "\n");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      Options options0 = new Options();
      byteArrayOutputStream0.write(0);
      options0.addOption("", "-", true, "2z/wEf,]");
      helpFormatter0.defaultLongOptPrefix = "Y#gW ybD`qaG";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, (String) null, "d[?r%m", options0, 5349, 9, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      mockPrintWriter0.println((long) 74);
      mockPrintWriter0.print((double) 3);
      helpFormatter0.printHelp(6, "\n", "\n", options0, "HT(*Jc!j`~9~rWlH#H");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      byteArrayOutputStream0.write(0);
      Options options1 = options0.addOption("", "L:", true, "2z/wEf]]");
      helpFormatter0.defaultLongOptPrefix = "Y#gW ybD`qaG";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      String string0 = helpFormatter0.createPadding(3341);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(2, " ]", " ", options1, "org.apache.commons.cli.HelpFormatter", true);
      helpFormatter0.rtrim(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(5349, "Q", "", options0, "%/", false);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "a4W+,g-JvTk'0YY_T";
      options0.hasOption("a4W+,g-JvTk'0YY_T");
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "-", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "a4W+,g-JvTk'0YY_T", options1, "l[*c%#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "MBP[!/R/$&";
      objectArray0[1] = (Object) options1;
      objectArray0[2] = (Object) options0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("\n", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 38, "xc%Chqyh7C7", "-", options1, 756, (-767), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "4wS/]f6QAi4UXP");
      Option option0 = new Option("", "5/&BrS}\"");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("MBP[!/R/$&", "", options3, "4wS/]f6QAi4UXP");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", false, "4wS/]f6QAi4UXP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "--");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "Illegal option name '", "%/", options0, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      Option option0 = new Option("", false, "--");
      Options options2 = options1.addOption(option0);
      option0.setRequired(false);
      option0.setRequired(true);
      helpFormatter0.printHelp("rpG!;.])-", options2, false);
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\n";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) option0;
      objectArray0[4] = (Object) options2;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) options2;
      objectArray0[7] = (Object) "rpG!;.])-";
      PrintStream printStream0 = mockPrintStream0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      helpFormatter0.printOptions(mockPrintWriter0, 2194, options2, 2194, 3108);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      String string0 = " ";
      helpFormatter0.rtrim(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-1), "");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", false, "[ Options: [ short ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "s", "a0a^c9$", options0, "\n", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 18, "*IJe31P`wzQ@VE^");
      helpFormatter0.printHelp(18, "*IJe31P`wzQ@VE^", "K@[P{", options0, "*IJe31P`wzQ@VE^");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      int int1 = (-1);
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", options0, false);
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "usage: ");
      optionGroup0.addOption(option0);
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-2), "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter1.append(',');
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "", "(^gy=s[q", options0, 788, 0, "(^gy=s[q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-234), "line.separator", "line.separator", (Options) null, " [ARG]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLeftPadding(40);
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 837, 837);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "4wS/]f6QAi4UXP");
      Option option0 = new Option("", "5/&BrS}\"");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("MBP[!/R/$&", "", options3, "4wS/]f6QAi4UXP");
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "", "", options0, "5/&BrS}\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-213), "", "M#", options0, "M#", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("+]&", options0);
      StringWriter stringWriter0 = new StringWriter(2511);
      CharBuffer charBuffer0 = CharBuffer.allocate(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('W');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "+]&");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 30, "my3Hq", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "a0a^c9$");
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("#iU", 5941, 712);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringWriter0;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) stringWriter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "#iU";
      objectArray0[6] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("#iU", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2, "[");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      byteArrayOutputStream0.write(0);
      Options options1 = options0.addOption("", "L:", true, "2z/wEf]]");
      helpFormatter0.defaultLongOptPrefix = "Y#gW ybD`qaG";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-432), "arg", "", options1, "a0a^c9$", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      mockPrintWriter0.write("\n");
      Options options0 = new Options();
      byteArrayOutputStream0.write(0);
      Options options1 = options0.addOption("", "L:", true, "2z/wEf]]");
      helpFormatter0.defaultLongOptPrefix = "Y#gW ybD`qaG";
      options0.addOption((String) null, "k,T@V%^jyn)`?3", true, "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "a0a^c9$", "", options1, 0, 1804, "2z/wEf]]", true);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      int int1 = (-1);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      int int0 = 32;
      helpFormatter0.setDescPadding(32);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("-", "--", true, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.defaultLeftPad = 0;
      int int1 = (-1);
      PrintWriter printWriter0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
      helpFormatter0.rtrim(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      helpFormatter0.printHelp(57, "15T!", "15T!", options0, "", false);
      StringBuffer stringBuffer0 = new StringBuffer(57);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-707), (-707), "Cp5'ZjOM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yN|_j";
      helpFormatter0.setArgName("yN|_j");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = 0;
      String string1 = "lZ~YO'y!\"l$:w\"";
      Options options0 = new Options();
      options0.hasOption(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int1 = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-117), (-1), "lZ~YO'y!\"l$:w\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1576);
      helpFormatter0.getNewLine();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = "c6:j";
      helpFormatter0.setNewLine("c6:j");
      helpFormatter0.getOptionComparator();
      String string1 = null;
      String string2 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "--");
      String string3 = null;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", (String) null, true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(",2f@+K1x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) ",2f@+K1x";
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "NO_ARGS_ALLOWED", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "", options1, 0, 4, "NO_ARGS_ALLOWED");
      helpFormatter0.getArgName();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.createPadding(10);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-517));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 1700;
      String string0 = "hV!4yuhzH>1VIX";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-943), (-943), "hV!4yuhzH>1VIX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 245;
      helpFormatter0.createPadding(245);
      Options options0 = new Options();
      options0.getOptions();
      options0.getOptionGroups();
      helpFormatter0.printHelp("                                                                                                                                                                                                                                                     ", "-", options0, "                                                                                                                                                                                                                                                     ", true);
      helpFormatter0.getSyntaxPrefix();
      options0.getMatchingOptions("arg");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("usage: ");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("#iU", 5941, 712);
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("n", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 712, "Cannot add value, list full.", "Cannot add value, list full.", (Options) null, (-1), 9, "2fg^[`h", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1947));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("QexW:B1RQiZ\"16xJ");
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.OptionGroup");
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "QexW:B1RQiZ\"16xJ";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "org.apache.commons.cli.OptionGroup";
      objectArray0[3] = (Object) "QexW:B1RQiZ\"16xJ";
      objectArray0[4] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "QexW:B1RQiZ\"16xJ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 74, "arg");
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      helpFormatter0.setLongOptSeparator("                                                                          ");
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "4wS/]f6QAi4UXP");
      Option option0 = new Option("", "5/&BrS}\"");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printHelp("MBP[!/R/$&", "", options3, "4wS/]f6QAi4UXP");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix(" ");
      helpFormatter0.setArgName("--");
      helpFormatter0.rtrim("!GtOmyR#3ygO");
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "a", false, "org.apache.commons.cli.OptionGroup");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "line.separator", "VAm`46Htqkf4KS+33", options1, "@U-");
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasOption("a4W+,g-JvTk'0YY_T");
      boolean boolean0 = true;
      Option option0 = new Option("", true, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", "-", options1, "");
      int int0 = (-390);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-390));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.setArgName("");
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "M#";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "M#", options0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(833);
      helpFormatter0.setOptionComparator((Comparator) null);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-3528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
