/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      helpFormatter0.setWidth((-1126));
      helpFormatter0.getWidth();
      MockFile mockFile0 = new MockFile("usage: ", "/ub");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.AlreadySelectedException
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "";
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp((-1), "arg", " ", options1, "\n", true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter3.renderOptions(stringBuffer0, (-2303), options0, 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("'");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, (Options) null, 9, 408);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-17));
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2, "--", "usage: ", options0, "\n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.createPadding(0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "3Rd}X4Q3s!9");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter0.renderWrappedText(stringBuffer0, 10, 10, "3Rd}X4Q3s!9");
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "The option '", options0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "x9{\">", "x9{\">", options0, 15, 15, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", "--", true, (String) null);
      helpFormatter0.printHelp("2C<[FWpOm^|^/e1}", "--", options2, "org.apache.commons.cli.OptionGroup", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter1.printHelp(3, "c9bsvjT`w", "org.apache.commons.cli.OptionGroup", options1, " j$-5U");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          StringBuffer stringBuffer0 = new StringBuffer();
          HelpFormatter helpFormatter1 = new HelpFormatter();
          // Undeclared exception!
          helpFormatter1.renderWrappedText(stringBuffer0, 0, 4196, "\n");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("arg", "usage: ", options1, "d%Z'lAj\"", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("(bom", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 3, "-", "h!rC", options0, 1, 117, "-", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" :: ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "!CYopJr\r\"Zt`fsqI\",");
      helpFormatter0.printHelp("   ", "   ", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.findWrapPos("]", (-1104), (-1104));
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      File file0 = MockFile.createTempFile("arg", "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("has already been selected: '");
      PrintWriter printWriter0 = null;
      int int0 = 25;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1442), 25, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 32, options0, 32, 32);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options0, "^MMwS7k", false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(9, "\n", ")|WO0C)2s!pGv", options1, "usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printHelp("--", "usage: ", options0, "--", true);
      helpFormatter2.setLongOptSeparator("-");
      helpFormatter2.createPadding(35);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, (String) null, "-", options1, 74, 1, "YjpOt%U)<,", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      Option option0 = new Option("arg", "\n");
      Option option1 = new Option("", "--");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "CfC=_^t|r83S", options1, 31, 1, "--", false);
      options0.getMatchingOptions("m:rNC]q6Z=}OS5");
      MockFile mockFile0 = new MockFile("U:?!G`");
      mockFile0.getCanonicalPath();
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockFile mockFile2 = new MockFile("U:?!G`");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 37, "xN", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "U:?!G`", "U:?!G`", options0, "CfC=_^t|r83S");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "--", "", options1, 116, 74, "   ", false);
      MockFile mockFile0 = new MockFile("arg");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile mockFile2 = new MockFile("m)HfS=Lt");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile2);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter2, (-1), "arg", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options1, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", "NO_ARGS_ALLOWED", options0, " ", false);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "NO_ARGS_ALLOWED", "[", options0, "V0F$[K)?fcx#x", false);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Option option0 = new Option("arg", true, "\n");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "--", options1, "2|n\";;oPBC1h9o9D", true);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Py1", true, "~l{gPE=Ih$)Ke4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      option0.toString();
      helpFormatter1.printHelp("K![Mm$w", "--", options2, "sQypZ8: $(", true);
      MockFile mockFile0 = new MockFile("", "QHk}0(gW8HhYuYN)");
      MockFile mockFile1 = new MockFile(mockFile0, "&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "line.separator", options0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(4127, "\n", "-", options0, " ", true);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("]", "", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-812), " ", " ", (Options) null, 3, 4027, "twFa[0)8]::O/J", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z5h.");
      Options options1 = new Options();
      String string0 = "A\"u8_N5";
      options0.addOption("", "A\"u8_N5", true, "^9S");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 206, "Z5h.", "", options0, (-996), 1, "YGf}ljq", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultLeftPad = 1;
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "arg", true, "S,R");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 74, " ", options2);
      helpFormatter1.printHelp("[", "usage: ", options2, "Cannot add value, list full.", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = null;
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "E{I2P}JMQ-bJA", (Options) null, "!hI(X6Um 'a 1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "8`yc0{LwH{cB");
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "usage: ", "'", options0, 1, 3, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "3}EIY2F");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.defaultNewLine = "arg";
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "3Rd}X4Q3s!9");
      helpFormatter0.printOptions(mockPrintWriter0, 685, options0, 1, 685);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "\n");
      Option option0 = new Option("arg", "\n");
      Option option1 = new Option("", "--");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, " ", "CfC=_^t|r83S", options1, 31, 1, "--", false);
      MockFile mockFile0 = new MockFile("U:?B!Gh`m");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockFile mockFile2 = new MockFile("", "xN");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 37, "xN", options0);
      helpFormatter1.printHelp(37, "r9% `0$*2]%", (String) null, options0, "line.separator");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter1.printHelp("-", "]", options0, "q`QuEK^g\"nSlP");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 10, "=z;]Df9?");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-36), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printHelp("]", "", options0, "usage: ", true);
      helpFormatter0.rtrim("XO:s7Olc");
      helpFormatter0.createPadding(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-17));
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("n(r:", "KMl$N+$V", options1, "--", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", false, "\n");
      Option option0 = new Option("arg", "\n");
      Option option1 = new Option("", "--");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      StringBuffer stringBuffer2 = stringBuffer0.append("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderWrappedText(stringBuffer2, 1, 0, "2q-~MR[l#U!+h,?wvL(");
      helpFormatter1.setDescPadding(31);
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "bH;b`604 WyzLBNF_DM", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("arg", false, "arg");
      helpFormatter0.printHelp(printWriter0, 74, "x", "", options1, 74, 1, "bH;b`604 WyzLBNF_DM");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      char char0 = 'I';
      helpFormatter0.setArgName("");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 708, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      charArray0[2] = '$';
      charArray0[3] = 'Y';
      charArray0[4] = 'u';
      charArray0[5] = 'I';
      stringBuffer0.append(charArray0);
      Options options1 = options0.addOption("arg", false, "\n");
      Option option0 = new Option("arg", "\n");
      Option option1 = new Option("", "--");
      StringBuffer stringBuffer1 = new StringBuffer(3);
      stringBuffer0.append("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", (String) null, options1, "", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-570), "-", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("f&<`'}3+(x");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 3, options1, 34, (-1097));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.PRC;
      locale1.getDisplayScript();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile0);
      String string0 = ">wL+]bK,8[\\9kD";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintStream1;
      objectArray0[5] = (Object) mockPrintStream1;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream1.printf(locale1, ">wL+]bK,8[9kD", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append('s');
      String string1 = ")mXOxaq~_q}Jk2NHBa";
      Options options0 = null;
      int int0 = 2275;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2, "", ">wL+]bK,8[9kD", (Options) null, 2275, 3, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      options0.getOption("arg");
      Option option0 = new Option("", "--");
      options1.addOption(option0);
      helpFormatter0.renderWrappedText(stringBuffer0, 32, (-6389), " ");
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-6389));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "line.separator");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter2.renderOptions(stringBuffer0, 74, options2, 74, 74);
      int int0 = 74;
      // Undeclared exception!
      try { 
        options1.addOption("rgH2}re=3IrHA{p", "usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'rgH2}re=3IrHA{p' contains an illegal character : '}'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "-Q\"/'=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2404), "-", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "arg");
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZM}U]L,M7x<Cm");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 63, "arg", options0);
      helpFormatter1.rtrim("w, tp,dia|;q");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      mockFile0.deleteOnExit();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "-");
      options1.addOption("", false, "usage: ");
      Option option0 = new Option("arg", "evCASB");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "org.apache.commons.cli.HelpFormatter$1", " ", options0, 4, 2071, "line.separator", false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintStream0;
      locale0.getDisplayScript();
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('d');
      int int0 = 1402;
      String string0 = ")mXOxaq~_q}Jk2NHBa";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1402, ")mXOxaq~_q}Jk2NHBa", ")mXOxaq~_q}Jk2NHBa", (Options) null, 3, 9, ")mXOxaq~_q}Jk2NHBa", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.addOption("arg", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int1 = (-1576);
      String string0 = "\\";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1576), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 103, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[j-X~>avUCx`)l3'[");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "org.apache.commons.cli.Option";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 13, "[j-X~>avUCx`)l3'[", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(74, " ", "arg", (Options) null, "]", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) " ");
      int int0 = 13;
      String string0 = "8u}TGv)cj";
      int int1 = (-1282);
      int int2 = (-2375);
      helpFormatter1.defaultDescPad = 10;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(4, "", "}2n^~lFAY%xD..Zr6$", (Options) null, "Bqe/@[GT,G#P", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) " ");
      int int0 = (-2375);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2375), (Options) null, 74, 523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Locale locale0 = new Locale("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) "c[CMzU;`8W%xd`va2\"i";
      helpFormatter0.rtrim("");
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter1.setOptionComparator((Comparator) null);
      MockFile mockFile0 = new MockFile("--", "W*#u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setReadable(true, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 74, "arg", options1);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-249), "lS", "j:')bD|", options0, "j:')bD|", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "org.apache.commons.cli.Options";
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "org.apache.commons.cli.Options";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) file0;
      objectArray0[7] = (Object) helpFormatter0;
      mockPrintWriter0.format("-", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "", true, "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2071, "", "[", options3, (-1), (-2), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "bH;b`604 WyzLBNF_DM", false, "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(printWriter0, 74, "x", "", options2, 74, 1, "bH;b`604 WyzLBNF_DM");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "pPH", true, "KX*DM`;*va");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "-");
      Options options3 = options2.addOption("", "{LW(6P;),aE%", false, "|}?$@B");
      helpFormatter0.printHelp("   ", options3, false);
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options4 = new Options();
      helpFormatter0.printHelp("--", "--", options4, "--", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.setNewLine("k+&I['");
      helpFormatter0.printHelp("0n}=dd", "lS", options0, "", false);
      helpFormatter0.getDescPadding();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 1635);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultArgName = "arg";
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      stringBuffer0.append((double) 3);
      stringBuffer0.append("-");
      int int0 = 1889;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1889, "--");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      String string0 = "8u}TGv)cj";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 13, "8u}TGv)cj", "--", (Options) null, 12, (-2375), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3757, "-", "q}n.Sx]", (Options) null, 116, (-298), "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.printHelp("0n}=dd", "lS", options0, "", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(file0);
      Locale locale0 = new Locale("arg");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options0;
      file0.mkdir();
      objectArray0[5] = (Object) mockPrintStream0;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter0.append('O');
      file0.setReadOnly();
      helpFormatter0.printWrapped(printWriter0, 31, (-2620), "org.apache.commons.cli.Options");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, (String) null, (String) null, options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1222);
      stringBuffer0.ensureCapacity((-4490));
      helpFormatter0.setDescPadding(0);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2412, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Illegal option name '");
      mockFile0.deleteOnExit();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "-");
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1057, "");
      helpFormatter0.printHelp((-1), "org.apache.commons.cli.HelpFormatter$OptionComparator", "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      PrintWriter printWriter0 = null;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-298), "q}n.Sx]", " | ", (Options) null, 3, (-1883), "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      options2.getOptionGroups();
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("--", (String) null, options2, "tvsaHm$", true);
      MockFile mockFile0 = new MockFile((File) null, "\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Locale locale0 = new Locale("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "c[CMzU;`8W%xd`va2\"i";
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 44, (-298), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      helpFormatter1.getDescPadding();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "Z7|5Z9Y~g");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) file0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "org.apache.commons.cli.Options";
      objectArray0[6] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("arg", objectArray0);
      mockFile0.deleteOnExit();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "-");
      helpFormatter0.getOptPrefix();
      options1.addOption((String) null, false, "arg");
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2071, "!O", (String) null, options2, (-1), 1, "Cnp{.jP+tMiAN7,7M", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      String string1 = null;
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      options1.hasOption("");
      Options options2 = options1.addOption((String) null, false, "arg");
      Option option0 = new Option("", (String) null);
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.getOptionGroups();
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2071, "XO", (String) null, options4, (-1), 301, "Cnp{.jP+tMiAN7,7M", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      String string1 = null;
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      int int0 = 2071;
      mockFile0.deleteOnExit();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", false, "-");
      options1.addOption((String) null, false, "arg");
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2071, "XO", (String) null, options2, (-1), 301, "Cnp{.jP+tMiAN7,7M", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptSeparator();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Locale locale0 = new Locale("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("   ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "   ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.append('O');
      helpFormatter0.printWrapped(printWriter0, 0, (-334), "");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      String string0 = "arg";
      Options options2 = options1.addOption((String) null, false, "arg");
      helpFormatter0.setNewLine("Oe4M11[/");
      helpFormatter0.setDescPadding(2071);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(31, "Illegal option name '", "XO", options2, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "line.separator");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      URI uRI0 = MockURI.aFTPURI;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      option0.setDescription("");
      stringBuffer1.codePoints();
      optionGroup1.toString();
      helpFormatter0.defaultWidth = 3;
      helpFormatter0.renderOptions(stringBuffer1, 44, options1, 1047, 0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setWidth(74);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      String string1 = null;
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      helpFormatter0.printHelp("8}iV~", options0);
      Options options2 = options1.addOption((String) null, true, "arg");
      Option option0 = new Option("", (String) null);
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2071, "9DXO", (String) null, options4, (-1), 301, "Cnp{.jP+tMiAN7,7M", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(">");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string0 = null;
      options0.getOption((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ">", options0, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">3^kXxyDs7h>1M;KG>";
      String string1 = "\\2ka~\\tT5x~rP/)K/-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "org.apache.commons.cli.HelpFormatter$1", (Options) null, "\u0002ka~\tT5x~rP/)K/-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 11, (-1), "mjKHu676$UZ~ JY");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth(1210);
      helpFormatter0.getWidth();
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("u&F");
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1210, (-1), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "\n");
      Option option0 = new Option("", "--");
      Options options2 = options1.addOption(option0);
      options2.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options0, "-", false);
      int int0 = 5142;
      helpFormatter0.findWrapPos("The option '", 5142, (-2224));
      helpFormatter1.createPadding(1);
      helpFormatter1.setNewLine(" ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "tvlp#rsH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // tvlp#rsH
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      Options options2 = options1.addOption((String) null, false, "arg");
      Option option0 = new Option("", (String) null);
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-4850), "arg", "", options1, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("usage: ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("");
      int int0 = 2465;
      helpFormatter0.findWrapPos("-", 74, 212);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      options0.getOptionGroups();
      helpFormatter2.printHelp(" | ", ")xD{|`<B/", options0, "usage: ", false);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter4.findWrapPos("arg", 74, (-872));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1074);
      helpFormatter0.defaultSyntaxPrefix = "cmdLineSyntax not provided";
      helpFormatter0.setArgName("");
      helpFormatter0.setDescPadding(10);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-743), 31, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string0 = "mPSs\\{cPY(<;}+gHk";
      String string1 = "]";
      Options options0 = new Options();
      int int1 = 816;
      helpFormatter0.setDescPadding(1074);
      helpFormatter0.defaultSyntaxPrefix = "cmdLineSyntax not provided";
      options0.hasShortOption("arg");
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 3;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 5142, "$NY:Ns*2tG<<q;f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim(":t)[ZTJ;Wg~Y_");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "\\2ka~\\tT5x~rP/)K/-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">3^kXxyDs7h>1M;KG>", "\u0002ka~\tT5x~rP/)K/-", (Options) null, "\u0002ka~\tT5x~rP/)K/-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintWriter0.append((CharSequence) "-");
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = ' ';
      charArray0[2] = ']';
      charArray0[3] = '9';
      charArray0[4] = '=';
      mockPrintWriter0.write(charArray0, 3, 1);
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("/ub", objectArray0);
      mockPrintWriter0.flush();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(">");
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      options0.getOption("--");
      helpFormatter0.printHelp(" [ARG]", "usage: ", options0, " [ARG]");
      options0.toString();
      int int0 = (-1);
      helpFormatter0.setDescPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("B3pP%?=", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.findWrapPos("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", 2465, 2465);
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options0);
      options0.getOptionGroups();
      helpFormatter0.printHelp("g`d4Q#F,aBO<6Z/", "g`d4Q#F,aBO<6Z/", options0, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 3, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "_Sm<@Uj5itF<";
      helpFormatter0.setArgName("_Sm<@Uj5itF<");
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("", false, " ");
      options0.addOption(option0);
      option0.setOptionalArg(false);
      String string2 = "K|?ymDe}0R(4_PNO";
      helpFormatter0.setNewLine("zWW9aC");
      String string3 = "usage: ";
      String string4 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        options0.addOption("0SF{HMC", false, "zWW9aC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '0SF{HMC' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setLeftPadding(1);
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-584);
      String string1 = "TY";
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption("[", "--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(34);
      String string0 = "~P}i[\"gybH";
      stringBuffer0.append(3);
      stringBuffer0.insert(1, (-1300L));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~P}i[\"gybH");
      stringBuffer0.append(false);
      String string1 = "cmdLineSyntax not provided";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "cmdLineSyntax not provided");
      char[] charArray0 = new char[3];
      Object object0 = new Object();
      stringBuffer0.append(object0);
      charArray0[0] = 'f';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      charArray0[1] = 'A';
      charArray0[2] = 'O';
      stringBuffer1.append(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      helpFormatter0.renderWrappedText(stringBuffer1, 34, 9, "cmdLineSyntax not provided");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      int int0 = 540;
      String string2 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("v5p>Y4DoX;Ic9P`*`G");
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("d`C2");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      helpFormatter1.setOptPrefix(" ");
      String string0 = "8u}TGv)cj";
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 13, "8u}TGv)cj", "--", (Options) null, (-1282), (-2375), "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getWidth();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLeftPadding();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("usage: ", "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      options0.hasShortOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, (-3154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("-");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1102));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Options";
      String string1 = null;
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Options", (String) null, (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "-");
      Options options2 = options1.addOption((String) null, false, "arg");
      Option option0 = new Option("", (String) null);
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2071, "9DXO", (String) null, options4, (-1), 301, "Cnp{.jP+tMiAN7,7M", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1222);
      stringBuffer0.ensureCapacity((-4490));
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1222, 928, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1940));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1210;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setWidth(1210);
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int1 = (-1);
      helpFormatter0.defaultWidth = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2328), 1210, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) helpFormatter0;
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("2:TXw*V`D", 0, 0);
      String string0 = "";
      MockFile mockFile0 = new MockFile("--", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", (String) null, (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      options0.addOption("", "usage: ", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("[ARG...]", "&SYboece;-zus0}W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ARG...]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-188), (-188), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultArgName = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.getLongOptSeparator();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.reverse();
      stringBuffer0.append((double) 3);
      stringBuffer0.append("-");
      int int1 = 1889;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1889, " ");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      helpFormatter1.renderWrappedText(stringBuffer0, 3, 74, " ");
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "je.<Q)F?kScQ_$";
      helpFormatter0.getOptionComparator();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 31, "je.<Q)F?kScQ_$");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 31, options0, (-259), (-259));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
