/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:22:18 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = 658;
      // Undeclared exception!
      helpFormatter1.renderOptions(stringBuffer0, 1, options2, 3, 658);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "oA/]hWJ^f1&Q)>:$t");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 2, (-1468), "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
      Options options0 = new Options();
      helpFormatter0.setLongOptSeparator("ZcO#-V\u0007:");
      Options options1 = new Options();
      helpFormatter0.printHelp((-1), "Y", "Y", options1, "+7uL=s5x(A");
      MockFile mockFile0 = new MockFile("4`p7{#F", " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      helpFormatter0.printUsage(printWriter0, (-1), "+7uL=s5x(A", options1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "*5AW,;2J";
      PrintWriter printWriter0 = null;
      int int0 = 1359;
      String string1 = "sQ= _Z8pUC}wx^BNFE";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 1359, "sQ= _Z8pUC}wx^BNFE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(101);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1174, (Options) null, 1174, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("s}r~xy2GZj");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("s}r~xy2GZj", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "5@b3yplqvxAP)y#}`";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.format("5@b3yplqvxAP)y#}`", objectArray0);
      Options options0 = new Options();
      options0.hasShortOption("x$sAJoL*uP4s");
      Options options1 = options0.addOption("", "/%", true, "(:}[[`c");
      Option option0 = new Option("", "");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1209), "5@b3yplqvxAP)y#}`", "5@b3yplqvxAP)y#}`", options2, (-1209), (-1209), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.getNewLine();
      String string1 = "The option '";
      int int0 = 63;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ option: ", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      Option option0 = new Option("arg", "arg", false, "");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(11, " ", "XO'U28vR~'U[", options3, "");
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('z');
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-2802), options2, 94, 94);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      Options options0 = new Options();
      options0.hasShortOption(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      options0.toString();
      helpFormatter0.printHelp(3, "A CloneNotSupportedException was thrown: ", "1D^<-T5gwed&k67", options0, "g)L35=SJ7S>5", true);
      helpFormatter0.setLongOptPrefix("1D^<-T5gwed&k67");
      helpFormatter0.getWidth();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", options0, false);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter1.getOptPrefix();
      MockFile mockFile0 = new MockFile("Cannot add value, list full.", "Paj'eQ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, 74, "arg");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 3, "A CloneNotSupportedException was thrown: ", "$alsdi7r$8", options1, (-22), 74, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "EB";
      String string1 = "line.separator";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 10, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("T\"H FchnGfJ0");
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 270, "T\"H FchnGfJ0", (String) null, options0, 3711, (-1045), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      Options options0 = new Options();
      options0.addOption((String) null, true, "arg");
      MockFile mockFile0 = new MockFile("-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println((double) 3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 44, (String) null, options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      int int0 = 137;
      String string1 = "a";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("a", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2030, (String) null, (String) null, options0, 1152, (-1), (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1785);
      helpFormatter0.renderWrappedText(stringBuffer0, 62, (-1458), "");
      helpFormatter0.printHelp(62, "?d(CqJtGu}x)t_=", "?d(CqJtGu}x)t_=", options0, "");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-143));
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "7j;]Tl";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      String string1 = "";
      Options options1 = options0.addOption("arg", "c2}T`SJ94>KXenT@^H", true, "");
      Options options2 = options1.addOption("arg", true, "vqNc0i@A4VKjm");
      int int0 = 1220;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1516), options2, 1220, 1220);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9jbMSPv0s|/w!>n;_/*");
      mockPrintWriter0.print((Object) helpFormatter0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "XjL}(#;rNShZ(JT");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.setOptPrefix("R\"l/Z*Rh5!tcY:sqTc");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter1.printHelp(15, "usage: ", " ", options0, "R\"l/Z*Rh5!tcY:sqTc");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(9, "arg", "arg", options0, " ");
      helpFormatter1.findWrapPos("XjL}(#;rNShZ(JT", (-1), 9);
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      helpFormatter0.setLongOptSeparator("<Ol");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.rtrim("-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, (-1717), "-", "arg", options1, (-1), 100, "-", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 5683;
      helpFormatter0.defaultLeftPad = 5683;
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", "arg", true, "");
      options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp((-1), "X2s.24n", "3m. Q/euO9gn", options0, "NS@g74YGI_zSLIDU");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      String string0 = "'";
      StringBuffer stringBuffer0 = new StringBuffer("'");
      Options options0 = new Options();
      int int0 = 32;
      helpFormatter0.renderOptions(stringBuffer0, 63, options0, 34, 32);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "5Y~uI2}W=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 5Y~uI2}W=
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("7j;]Tl");
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.printHelp(3889, "Rm=", "Ax.", options0, "qb");
      helpFormatter0.rtrim(" ] [ long ");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 3889, options0, 3889, 3889);
      helpFormatter0.renderWrappedText(stringBuffer1, 3889, 3889, "The option '");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("?ri^yro");
      mockPrintWriter0.append((CharSequence) "\n");
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 108, "NO_ARGS_ALLOWED", "", options0, 10, 10, "[{O", true);
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      Options options1 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 326, options1, 10, 3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "YvsQ:2r6X\\XoR";
      int int0 = 592;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.setOptPrefix("The option '");
      helpFormatter0.getDescPadding();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("jd]jue.", "   ", (Options) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      int int0 = 9;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = ':';
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      options1.addOption("", "\n", false, "7j;]Tl");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "aL0x}.2Ix";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-867), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(1);
      helpFormatter0.defaultOptPrefix = "_rV+oEyJ#T#e.";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "xywNad#)lHJ%'Lu)>V", true, "devR|3*0ysU #");
      Option option0 = new Option("", "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.setLongOptSeparator("devR|3*0ysU #");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      options0.toString();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 1, "", "]", options0, 74, 681, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9jbMSPv0s|/w!>n;_/*");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "XjL}(#;rNShZ(JT");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter1.setOptPrefix("R\"l/Z*Rh5!tcY:sqTc");
      Options options0 = new Options();
      Option option0 = new Option("zLy", "usage: ", false, "!(^Fb8=4vXsmXY5tY");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      Options options2 = options1.addOption("arg", "", true, "~F0`nE^{` A6U=U");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "", options2);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-1454), "-", "Aqq[-Q(f#t]{}zFAf", options0, "LZ|Ek!G#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption((String) null, false, "*`^tO");
      helpFormatter0.printHelp(28, "`yGAcJlSA-{", "JR?1n.]", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("]");
      mockPrintWriter0.append((CharSequence) " ");
      mockPrintWriter0.println((-1274.9));
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1792), "--", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J3");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Options options0 = new Options();
      Option option0 = new Option("J3", false, "2R2%Lu8");
      Option option1 = new Option("", "-");
      Options options1 = options0.addOption(option1);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option2 = new Option("", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option2);
      OptionGroup optionGroup2 = optionGroup1.addOption(option2);
      Options options2 = options0.addOptionGroup(optionGroup2);
      options2.addOption("arg", false, " [ARG]");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.printHelp("--", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter1.printHelp((-1), "`", " | ", options1, " ");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Option option0 = new Option("", false, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("", false, "--");
      helpFormatter0.printHelp("R6xdI=;_'", options3);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) optionGroup1;
      objectArray0[3] = (Object) options3;
      PrintWriter printWriter0 = mockPrintWriter0.format("Illegal option name '", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-434), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", "arg", true, "");
      options1.addOption(option0);
      helpFormatter0.printHelp((-1), "X2s.24n", "3m. Q/euO9gn", options0, "NS@g74YGI_zSLIDU");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      helpFormatter0.printHelp(103, "YvsQ:2r6XXoR", "", options0, (String) null);
      helpFormatter0.createPadding(103);
      helpFormatter0.printHelp("YvsQ:2r6XXoR", "", options0, "", true);
      helpFormatter0.rtrim("~F}ZuRfP2}Q?y$D-Gf");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      helpFormatter0.setLongOptSeparator("<Ol");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup1);
      Options options3 = new Options();
      options0.hasShortOption("usage: ");
      options0.toString();
      helpFormatter0.printHelp("<Ol", "[ Options: [ short java.util.HashMap@0000000008 ] [ long {arg=[ option:  arg  [ARG] :: arg ]} ]", options1, " 5<0>;1LADH[C7.rw");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ac\"9Ekn>l8?ISM9");
      mockPrintWriter0.append('1');
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2755, "[ Options: [ short ", options3);
      helpFormatter0.printUsage(printWriter0, 2755, "", options0);
      Options options4 = options2.addOptionGroup(optionGroup1);
      String string0 = "&q}XORgO";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1308), " 5<0>;1LADH[C7.rw", (String) null, options4, "&q}XORgO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      String string0 = "`yGAcJlSA-{";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-2440), options0, 3, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 317;
      Options options0 = new Options();
      String string0 = "";
      String string1 = "org.apache.commons.cli.ParseException";
      Option option0 = new Option("", "org.apache.commons.cli.ParseException", true, "");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.toString();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string2 = "";
      options2.getOptions();
      Options options3 = options2.addOption("arg", true, "");
      int int1 = 570;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 317, "-", "-", options3, 570, (-1), "org.apache.commons.cli.ParseException", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      option0.setValueSeparator('f');
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options0.addOption(option0);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      helpFormatter0.printHelp("<Ol", options2);
      Options options3 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp((-1), "<Ol", "<Ol", options3, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 49, (-93));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      helpFormatter0.setLongOptSeparator("<Ol");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options2 = new Options();
      options0.hasShortOption("usage: ");
      options0.toString();
      helpFormatter0.printHelp("<Ol", "[ Options: [ short java.util.HashMap@0000000008 ] [ long {arg=[ option:  arg  [ARG] :: arg ]} ]", options1, " 5<0>;1LADH[C7.rw");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ac\"9Ekn>l8?ISM9");
      PrintWriter printWriter0 = mockPrintWriter0.append('1');
      mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2755, "[ Options: [ short ", options2);
      helpFormatter0.printHelp(printWriter0, (-1), " | ", "'A]yz", options1, 593, 2755, "0WX}4<u_j~,45+", true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      helpFormatter0.defaultWidth = 2114;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasLongOption((String) null);
      optionGroup0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 2114, ">", ">", options1, 2114, (-133), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "J3", "`yGAcJlSA-{", options1, "J3");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "[", options1, "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      printWriter0.append((CharSequence) "arg");
      helpFormatter1.printUsage(printWriter0, 33, "s@", options1);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "\n", "J3", options1, 3, 3, "", false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "O_*mEV'Ipjo{lt(i+i");
      option0.setValueSeparator('f');
      Options options1 = new Options();
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options1.addOption(option0);
      options2.toString();
      helpFormatter0.printHelp("O_*mEV'Ipjo{lt(i+i", options1);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      options3.toString();
      Options options4 = new Options();
      helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueFo=Processing method instead. ", "{7*^B.", options3, "\"mnq.}d!#q2m(>}");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options1, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", true, "usage: ");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(3, "J3", "J3", options2, "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "", options1, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.append('i');
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "J3", options1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4QXmE:M:";
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "O|2{[Jrm", options0, "4QXmE:M:", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 66, "l{'C$@g]6R");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter2.getDescPadding();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "x4}529h\"3", "org.apache.commons.cli.AlreadySelectedException", options0, "0.S}dA ");
      Options options1 = options0.addOption("", true, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "XjL}(#;rNShZ(JT", options1, (-3632), 19, " [ARG]", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      option0.setValueSeparator('f');
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption(option0);
      options1.toString();
      helpFormatter0.printHelp("<Ol", options1);
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      Options options2 = new Options();
      helpFormatter0.printHelp("c1+D'mh:.", "arg", options2, "");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9jbMSPv0s|/w!>n;_/*");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.getDescPadding();
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1c1:LaJLp$n3sq");
      helpFormatter1.printHelp(59, "PAmI38X", (String) null, options0, "PAmI38X");
      helpFormatter0.printHelp(3, "--", "9jbMSPv0s|/w!>n;_/*", options0, "Illegal option name '");
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "J3", "`yGAcJlSA-{", options1, "J3");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "[", options1, "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      printWriter0.append((CharSequence) "arg");
      helpFormatter1.printUsage(printWriter0, (-1), "", options1);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "[", "&ZQ2?q.>V", options1, 3, 1, " ", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9jbMSPv0s|/w!>n;_/*");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "XjL}(#;rNShZ(JT");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      String string0 = "R\"l/Z*Rh5!tcY:sqTc";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1461), "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iCC");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 518, 2546, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9jbMSPv0s|/w!>n;_/*");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("");
      helpFormatter1.getDescPadding();
      Options options0 = new Options();
      helpFormatter1.printHelp(59, "PAmI38X", (String) null, options0, "PAmI38X");
      mockPrintWriter0.write("org.apache.commons.cli.OptionGroup");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, ".o9u%@m", "", options0, 3, 3, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<Ol";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      helpFormatter0.setLongOptSeparator("<Ol");
      String string1 = "i,)io{bb";
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options2 = new Options();
      options0.hasShortOption("usage: ");
      options0.toString();
      Options options3 = new Options();
      options3.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-286), "has already been selected: '", "[ Options: [ short java.util.HashMap@0000000008 ] [ long {arg=[ option:  arg  [ARG] :: arg ]} ]", options1, "Ac\"9Ekn>l8?ISM9", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      int int0 = 9;
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = '=';
      charArray0[6] = 'i';
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "XjL}(#;rNShZ(JT", "l{'C$@g]6R", options0, "\"Gw1Y");
      helpFormatter0.printHelp("!", "\"Gw1Y", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      Option option1 = new Option("", "9zX");
      option1.setRequired(false);
      option0.setValueSeparator('f');
      options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<Ol";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      helpFormatter0.setLongOptSeparator("<Ol");
      String string1 = "i,)io{bb";
      Options options2 = new Options();
      options0.hasShortOption("usage: ");
      options0.toString();
      Options options3 = new Options();
      options3.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-286), "has already been selected: '", "[ Options: [ short java.util.HashMap@0000000007 ] [ long {arg=[ option:  arg  [ARG] :: arg ]} ]", options1, "Ac\"9Ekn>l8?ISM9", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(3, "J3", "`yGAcJlSA-{", options1, "J3");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "[", options1, "[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append('i');
      helpFormatter1.printUsage(printWriter0, (-1), "", options1);
      helpFormatter1.printOptions(printWriter0, 3, options1, 25, 64);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "HOm#T&2zDw84rkS-\"";
      objectArray0[1] = (Object) "HOm#T&2zDw84rkS-\"";
      Object object0 = new Object();
      objectArray0[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "udMO+?9bJ{?$/2", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 117, "HOm#T&2zDw84rkS-\"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 7, "udMO+?9bJ{?$/2");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.hasShortOption(" ");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1512, "", "Ac\"9Ekn>l8?ISM9", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = '=';
      charArray0[6] = 'i';
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "XjL}(#;rNShZ(JT", "l{'C$@g]6R", options0, "\"Gw1Y");
      helpFormatter0.printHelp("!", "\"Gw1Y", options0, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "-", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 9, options0, 9, (-391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = '=';
      charArray0[6] = 'i';
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "XjL}(#;rNShZ(JT", "\"Gw1Y", options0, "e0<|3n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-433), "7j;]Tl", "l{'C$@g]6R", options0, (-433), 636, "-`zz.{", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "X";
      helpFormatter0.setDescPadding((-2066));
      helpFormatter0.setArgName("X");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding((-2066));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "6kPaPH0*LHQ)Lew8Fy>", "[ARG...]", options0, "-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      option0.setValueSeparator('f');
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      helpFormatter0.printHelp("<Ol", options2);
      helpFormatter0.setLongOptSeparator("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options3 = new Options();
      helpFormatter0.printHelp("c1+D'mh:.", "arg", options3, "");
      helpFormatter1.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "^Quojqa|Fm$Cz", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f_ziv,D/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(1, "--", "WY-gzyh)9>", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "HOm#T&2zDw84rkS-\"";
      String string1 = "udMO+?9bJ{?$/2";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(862, "HOm#T&2zDw84rkS-\"", "udMO+?9bJ{?$/2", (Options) null, "c;ky");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setDescPadding((-2066));
      helpFormatter0.setArgName("X");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding((-2066));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X");
      Options options0 = new Options();
      File file0 = MockFile.createTempFile("zcYoa", "usage: ");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter0.printf("^le.4&?LP=Isedo0", (Object[]) null);
      String string0 = "";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 33, "");
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "']-\"NRe#=Vd");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "4QXmE:M:";
      Options options1 = new Options();
      int int0 = 1164;
      helpFormatter0.printHelp(1164, "']-\"NRe#=Vd", "4QXmE:M:", options1, "");
      MockFile mockFile0 = new MockFile("\"Gw1Y");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "e0<|3n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // e0<|3n
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultNewLine = "^Quojqa|Fm$Cz";
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "ep=Dt-5_6pJ>", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1453);
      String string0 = "nFL";
      helpFormatter0.defaultSyntaxPrefix = "nFL";
      helpFormatter0.setArgName("nFL");
      helpFormatter0.getArgName();
      String string1 = "-";
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("nFL", "arg", (Options) null, "NLCnt6q4yHJu5v0");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(false);
      option0.setValueSeparator('f');
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      helpFormatter0.printHelp("<Ol", options2);
      helpFormatter0.setLongOptSeparator("");
      Options options3 = new Options();
      options3.hasShortOption(" ");
      options3.toString();
      helpFormatter0.printHelp(1512, "i,)io{bb", "Ac\"9Ekn>l8?ISM9", options3, "i,)io{bb", false);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getWidth();
      Options options4 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Paj'eQ", options4, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("");
      helpFormatter0.getLongOptPrefix();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.getNewLine();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "']-\"NRe#=Vd");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "4QXmE:M:", "\n", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'y';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = '=';
      charArray0[6] = 'i';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.setOptPrefix("i");
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "XjL}(#;rNShZ(JT", "\"Gw1Y", options0, "e0<|3n");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-433), options0, (-3808), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f_ziv,D/");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp(3, "usage: ", "-", options0, "E>U&7jC&ED ;i");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(33);
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(3);
      helpFormatter0.renderWrappedText(stringBuffer0, 33, 33, "~O_:'D$uR#");
      helpFormatter0.getLeftPadding();
      helpFormatter0.rtrim("");
      helpFormatter0.createPadding(33);
      helpFormatter0.setArgName("~O_:'D$uR#");
      int int0 = (-373);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("#;WJzp", "", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '#;WJzp' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      option0.setValueSeparator('f');
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options1.addOptionGroup(optionGroup0);
      options3.toString();
      helpFormatter0.printHelp("<Ol", options3);
      helpFormatter0.setLongOptSeparator("");
      Options options4 = new Options();
      options4.hasShortOption(" ");
      options4.toString();
      helpFormatter0.printHelp(1512, "i,)io{bb", "Ac\"9Ekn>l8?ISM9", options4, "i,)io{bb", true);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getWidth();
      Options options5 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Paj'eQ", options5, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(2106, "Paj'eQ", "Y@c4Qh#!gX", options2, "[", true);
      helpFormatter0.setLongOptPrefix("[ Options: [ short java.util.HashMap@0000000010 ] [ long {} ]");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Blsz[>&{!E%");
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = '^';
      mockPrintWriter0.write(charArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("Blsz[>&{!E%");
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1458), (-1458), "Blsz[>&{!E%");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "']-\"NRe#=Vd");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(32, "']-\"NRe#=Vd", "s", options0, "']-\"NRe#=Vd");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1252), "'", "'", options1, "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1453);
      String string0 = "nFL";
      helpFormatter0.setArgName("nFL");
      helpFormatter0.getArgName();
      Options options0 = null;
      boolean boolean0 = false;
      helpFormatter0.getDescPadding();
      String string1 = "kZ`";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "nFL", "kZ`", (Options) null, "kZ`", false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "X";
      helpFormatter0.setDescPadding((-2066));
      helpFormatter0.setArgName("X");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setDescPadding((-2066));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X");
      Options options0 = new Options();
      Options options1 = options0.addOption("X", " ", true, "");
      Option option0 = new Option("", "X", true, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", true, "{kaRV");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1569, (String) null, "-", options4, (-3844), 723, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("{`>|48Kf\"H,#T19svH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.setDescPadding(0);
      int int0 = 2105;
      helpFormatter0.findWrapPos("XjL}(#;rNShZ(JT", 2105, 1);
      helpFormatter0.rtrim("l{'C$@g6R");
      String string0 = "& <Za[$fc";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("& <Za[$fc");
      mockPrintWriter0.print('D');
      mockPrintWriter1.append((CharSequence) "& <Za[$fc");
      int int1 = 0;
      String string1 = "-";
      String string2 = null;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("{`>|48Kf\"H,#T19svH", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '{`>|48Kf\"H,#T19svH' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      option0.setValueSeparator('f');
      helpFormatter0.setArgName(")?|'C&diF6a_C");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")?|'C&diF6a_C", "=dF", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("{`>|48Kf\"H,#T19svH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      Options options0 = new Options();
      options0.hasShortOption(" ");
      options0.toString();
      String string0 = "A CloneNotSupportedException was thrown: ";
      String string1 = "1D^<-T5gwed&k67";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "A CloneNotSupportedException was thrown: ", "1D^<-T5gwed&k67", options0, "g)L35=SJ7S>5", true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nFL";
      helpFormatter0.setArgName("nFL");
      helpFormatter0.getArgName();
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "nFL", (Options) null, "nFL", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'y';
      charArray0[2] = 'g';
      charArray0[3] = ')';
      charArray0[4] = ':';
      charArray0[5] = '=';
      charArray0[6] = 'i';
      mockPrintWriter0.write(charArray0);
      helpFormatter0.setOptPrefix("i");
      helpFormatter0.getDescPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 0, "-");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("{`>|48Kf\"H,#T19svH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("i");
      helpFormatter0.getDescPadding();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 0, "-");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("{`>|48Kf\"H,#T19svH");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "l{'C$@g6R");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      int int0 = (-828);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-828), (-1652), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = (-1);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1), (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-1623);
      helpFormatter0.getDescPadding();
      String string0 = "cmdLineSyntax not provided";
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      String string1 = "org.apache.commons.cli.HelpFormatter$1";
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "-\"gs");
      options0.getMatchingOptions("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      option0.setValueSeparator('f');
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      helpFormatter0.printHelp("<Ol", options2);
      helpFormatter0.setLongOptSeparator("");
      Options options3 = new Options();
      options3.hasShortOption(" ");
      options3.toString();
      helpFormatter0.printHelp(1512, "i,)io{bb", "Ac\"9Ekn>l8?ISM9", options3, "i,)io{bb", true);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getWidth();
      Options options4 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Paj'eQ", options4, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "-");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getDescPadding();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 114, 0, "YH zC3b4(");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setArgName("7j;]Tl");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XjL}(#;rNShZ(JT");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 9, "l{'C$@g]6R");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 66, "l{'C$@g]6R");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setOptPrefix("org.apache.commons.cli.AlreadySelectedException");
      helpFormatter2.getDescPadding();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, "x4}529h\"3", "org.apache.commons.cli.AlreadySelectedException", options0, "0.S}dA ");
      options0.addOption("", true, "cmdLineSyntax not provided");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", "--", options0, 3, 3, "WZn", false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1453);
      String string0 = "nFL";
      helpFormatter0.setArgName("nFL");
      helpFormatter0.getArgName();
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "nFL", (Options) null, "nFL", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uG6]*";
      MockFile mockFile0 = new MockFile("uG6]*");
      MockFile mockFile1 = new MockFile(mockFile0, " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      String string1 = "B/Rwx_F|";
      mockPrintWriter0.write("B/Rwx_F|", 1, 3);
      int int0 = 299;
      helpFormatter0.printWrapped(printWriter0, 299, (-2), "uG6]*");
      String string2 = "]Kzo}%U|aAb\\K-dhyz";
      String string3 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("--", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "arg");
      Option option0 = new Option("", " ");
      option0.setRequired(true);
      option0.setValueSeparator('f');
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.toString();
      helpFormatter0.printHelp("<Ol", options2);
      helpFormatter0.setLongOptSeparator("");
      Options options3 = new Options();
      options3.hasShortOption(" ");
      options3.toString();
      helpFormatter0.printHelp(1512, "i,)io{bb", "Ac\"9Ekn>l8?ISM9", options3, "i,)io{bb", false);
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.getWidth();
      Options options4 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("Paj'eQ", options4, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockFile mockFile1 = new MockFile(mockFile0, "I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), (-1), "-");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("^4eRQNPQN:?C?");
      helpFormatter0.setOptPrefix("^4eRQNPQN:?C?");
      helpFormatter0.setOptPrefix("gziFO*");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLongOptPrefix("gziFO*");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.setDescPadding(74);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("]", "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = " :: ";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOption("--", true, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.defaultNewLine = "^Quojqa|Fm$Cz";
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-4131);
      helpFormatter0.setDescPadding((-4131));
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLongOptPrefix("q,J^s");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("\n", "iG\f-K'XRB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "X";
      helpFormatter0.setDescPadding((-2066));
      helpFormatter0.setArgName("X");
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultLongOptPrefix = "";
      int int0 = (-1726);
      helpFormatter0.setWidth((-1726));
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      int int1 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), (-1726));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      String string0 = "";
      String string1 = "~O_:'D$uR#";
      StringBuffer stringBuffer0 = new StringBuffer("~O_:'D$uR#");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, "~O_:'D$uR#");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      int int1 = 659;
      StringWriter stringWriter0 = new StringWriter(659);
      StringWriter stringWriter1 = stringWriter0.append('~');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 13, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = (-1739);
      Options options0 = new Options();
      String string0 = "rdwG2uLh#ntxn7NP";
      helpFormatter0.defaultArgName = "rdwG2uLh#ntxn7NP";
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      stringBuffer0.append(stringBuffer1);
      Options options1 = options0.addOption("bmw1B", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1739), options1, (-1739), (-1739));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
