/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:23:45 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "' was specified but an option from this group ";
      helpFormatter0.setLongOptPrefix("' was specified but an option from this group ");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
      int int0 = 2801;
      String string1 = "v$tN0D.]JrxeUjV|$";
      Options options0 = new Options();
      String string2 = "org.apache.commons.cli.Util";
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "org.apache.commons.cli.Util");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer(49);
      helpFormatter0.renderWrappedText(stringBuffer0, 49, 8, " :: ");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "");
      Options options2 = options1.addOption("arg", (String) null, true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(908, "^<#TB}xJ[gM&Gz+lSJ", "--", options4, "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "U !", "U !", (Options) null, "U !");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim("E+|");
      helpFormatter0.rtrim("%F>I~s.sE(%;;(nyi");
      helpFormatter0.renderOptions((StringBuffer) null, 633, options0, 633, 777);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding(729);
      Option option0 = new Option("c", true, "\n");
      String string0 = null;
      option0.clearValues();
      Options options1 = options0.addOption((String) null, "", true, "-");
      helpFormatter0.setLeftPadding((-1));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      option0.setLongOpt("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "usage: ", options1, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-1313), "U ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append('K');
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      String string0 = "NO_ARGS_ALLOWED";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) printStream0;
      objectArray0[1] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("NO_ARGS_ALLOWED", objectArray0);
      int int0 = 1;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, " ", options0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2102);
      Options options0 = null;
      helpFormatter0.setArgName("na1d.");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("na1d.", "na1d.", (Options) null, "na1d.");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "mpvG";
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("mpvG", options0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultNewLine = "Gpc#";
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setWidth((-1049));
      helpFormatter0.defaultLongOptPrefix = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1178), "@j)A@,5lYXR S", " ", (Options) null, 2239, 34, " | ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultNewLine = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getLeftPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a)Z~w\"/thH%,)8eDrQ", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 64);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      helpFormatter0.printUsage(printWriter0, 64, "\"ioY");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      int int0 = 5;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setNewLine("");
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = (-1883);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, (-1883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      Option option0 = new Option("c", true, "\n");
      Options options1 = options0.addOption((String) null, "[ option: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options2.addOption("", "[", true, " ");
      helpFormatter0.printHelp("[", "[", options1, "[ option: ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-2), (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Illegal option name '", options0);
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      int int0 = 2;
      helpFormatter0.createPadding(2);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getOptPrefix();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = new Option("", true, "Qw");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1209, (String) null, "-", options1, "' contains an illegal character : '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2034, (String) null, "org.apache.commons.cli.HelpFormatter", options0, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "|V?%5q|/=2~zW.cGl|");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "?*s>:w1w)MJ-T", (String) null, options2, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1673);
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, " ", "R", options0, "R");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      String string0 = "p";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 1, "p");
      Options options0 = new Options();
      String string1 = "";
      options0.addOption("", true, "--");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2195, "", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 125, 125);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "(0V";
      Options options1 = options0.addOption("8", "", true, "(0V");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "usage: ", true, (String) null);
      optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      options2.addOption("iwP", ">", true, "[ Options: [ short ");
      helpFormatter0.printHelp("[ option: ", "8", options1, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("\"z4%X$0I`)L!HkI", 10, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("V ^jt9Sd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 618, "V ^jt9Sd", "-<VfX?Jc.ZX#'@1r$", options0, 751, 751, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      Option option0 = new Option("c", true, "\n");
      Options options1 = options0.addOption((String) null, "[ option: ", false, "dY");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      helpFormatter0.defaultWidth = (-2);
      Options options2 = options1.addOptionGroup(optionGroup1);
      options0.hasLongOption("[");
      options2.addOption("dY", "[", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "[", options1, "[ option: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      Options options0 = null;
      int int0 = 105;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 105, "&p=>ZtD(qt{`", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "arg", true, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "-");
      optionGroup0.addOption(option0);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options2 = options0.addOptionGroup(optionGroup1);
      options1.addOption("", "", true, "-");
      helpFormatter0.printHelp(" ", (String) null, options2, (String) null, true);
      helpFormatter0.findWrapPos("", (-2), (-845));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1425), "line.separator", "", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 3, options1, 22, 63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "[ option: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp("[", "[", options1, "[ option: ", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp(64, "[", "q:H>", options0, "[", false);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      helpFormatter0.defaultNewLine = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2415, (Options) null, 117, (-735));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "[ option: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      options3.addOption("", "[", true, " ");
      helpFormatter0.printHelp("[", "[", options2, "[ option: ", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      mockPrintWriter2.println();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-2), "", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-15), 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      Option option0 = new Option("", true, "\n");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, "[ option: ", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options3 = options2.addOptionGroup(optionGroup1);
      Options options4 = options3.addOption("", "[", true, " ");
      helpFormatter0.printHelp("[", "[", options2, "[ option: ", true);
      helpFormatter0.printHelp("has already been selected: '", "zMx4<pY#", options4, "*;hzy.LY&PxoOH@|5p+", true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp(118, "-", "!C~c3Zs@c4*V", options0, "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      int int0 = (-2399);
      boolean boolean0 = false;
      helpFormatter0.getArgName();
      String string0 = "t_KVr=QdE=4";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2399), "t_KVr=QdE=4", "arg", options0, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      helpFormatter0.printHelp(3, "z", "M/k!LKh`Gd<d[]U=C{", options0, "Fz,UC=R}-");
      helpFormatter0.printHelp(3, "Fz,UC=R}-", "z", options0, "", false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "!C~c3Zs@c4*V";
      objectArray0[2] = (Object) "eQt";
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "!C~c3Zs@c4*V";
      objectArray0[5] = (Object) "eQt";
      objectArray0[6] = (Object) "eQt";
      objectArray0[7] = (Object) "!C~c3Zs@c4*V";
      mockPrintWriter0.format("eQt", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("eQt", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 1052, "?7rHVoMX66-:*-", (String) null, options0, 1052, 946, "AP#hw>:cy/", true);
      helpFormatter0.getArgName();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("eQt", 64, 64);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockFile mockFile0 = new MockFile("2Un");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-145), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "\"";
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) stringWriter0;
      objectArray0[7] = (Object) stringWriter0;
      objectArray0[8] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\"", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, (-2519), "\"");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.addOption("", "", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-564), " ", " ", options0, 9, (-596), "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setSyntaxPrefix("[");
      helpFormatter0.defaultOptPrefix = " ";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(3, "\n", "", options0, "");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-1050), "$DEX,/;6a;DX");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "usage: ");
      MockFile mockFile0 = new MockFile("Q{`F\"\"K8zfOi");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "Q{`F\"\"K8zfOi";
      objectArray0[2] = (Object) "Q{`F\"\"K8zfOi";
      objectArray0[3] = (Object) "R";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "R";
      PrintStream printStream0 = mockPrintStream0.printf("\n", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      helpFormatter0.printHelp(printWriter0, 428, "org.apache.commons.cli.HelpFormatter$1", "", options1, 428, 428, "", false);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("--", (-1), (-272));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", "", false, "");
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "K?/e>QTfrHW%X\"P8E", options0, " ", true);
      String string0 = null;
      Option option0 = null;
      try {
        option0 = new Option("--", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, (-1), ">");
      Options options0 = new Options();
      Options options1 = options0.addOption("S", true, "]B1;!]aiV5hed");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options1);
      helpFormatter1.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-3576), options0, 1, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.defaultLeftPad = 1129;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Options options0 = new Options();
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      Options options0 = new Options();
      Options options1 = options0.addOption("eQt", "arg", true, "eQt");
      MockFile mockFile0 = new MockFile("R");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) "R";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) "R";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) options0;
      PrintStream printStream0 = mockPrintStream0.printf("Q{`F\"\"K8zfOi", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      helpFormatter0.printHelp(printWriter0, (-1), "--", "N{RdR3hT|/Oq#R", options1, 428, 428, "--", false);
      helpFormatter0.getArgName();
      helpFormatter0.findWrapPos("X;<Vx!a'1:J!5gqC", 428, (-1));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "arg");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 13, (String) null, "", options0, 6, 4043, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "arg";
      Options options1 = options0.addOption("arg", "_NlupVs`8&X.`r:.2t'", true, "m[A8]|+QnD14|I");
      Options options2 = options1.addOption("", false, "arg");
      helpFormatter0.printHelp(1869, "4M^A`l", "line.separator", options1, "m[A8]|+QnD14|I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("--", objectArray0);
      String string1 = "";
      Object[] objectArray1 = new Object[4];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) options0;
      objectArray1[3] = (Object) "[";
      mockPrintWriter0.format("", objectArray1);
      int int0 = (-75);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      Options options0 = new Options();
      helpFormatter0.printHelp(118, "eQt", "!C~c3Zs@c4*V", options0, "eQt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      Options options1 = options0.addOption("arg", "arg", false, "--");
      options0.addOption("eQt", false, "j;|");
      helpFormatter0.printHelp(118, "+80", (String) null, options1, "FCj#$reQ!=TKjSUOM");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "lf1$Zvt  ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) helpFormatter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.HelpFormatter", objectArray0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "--", "'", (Options) null, (-3622), 3, " ", false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      Options options0 = new Options();
      helpFormatter0.printHelp(118, "eQt", "!C~c3Zs@c4*V", options0, "eQt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 9, "21ux'q4q^<oA8HOr", "", options0, 1, (-2399), "org.apache.commons.cli.HelpFormatter$OptionComparator", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 63, "usage: ");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "-";
      objectArray0[6] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      int int0 = 1622;
      String string0 = "org.apache.commons.cli.OptionValidator";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1622, "usage: ", " | ", (Options) null, 1622, (-3922), "org.apache.commons.cli.OptionValidator", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 47, 47, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "-");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3499, "", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderOptions(stringBuffer0, 2, options0, 125, 47);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "_NlupVs`8&X.`r:.2t'", true, "m[A8]|+QnD14|I");
      options1.addOption("", false, "arg");
      helpFormatter0.printHelp(1869, "4M^A`l", "line.separator", options1, "m[A8]|+QnD14|I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      mockPrintWriter0.format("--", objectArray0);
      Object[] objectArray1 = new Object[4];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "";
      objectArray1[2] = (Object) options0;
      objectArray1[3] = (Object) "[";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1622, "", "", options0, 101, (-75), ")?ORD5dPLf=$g", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      helpFormatter0.defaultDescPad = 10;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      int int0 = (-1);
      String string0 = ">";
      int int1 = 2104;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1, 2104, "usage: ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 18, 2, " ");
      helpFormatter0.renderWrappedText(stringBuffer1, 53, 53, ")^nW1gN[H[9Snfn;");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp(3, "V&frW", " ", options0, " ");
      helpFormatter0.printHelp("5.~&}Kw,Bd%2-c", " ", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 621, "3? *", "--", (Options) null, 31, 1, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 74, "");
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "");
      helpFormatter1.printHelp(74, "org.apache.commons.cli.ParseException", "4dA<Q8}EkMA(HU", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "eQt");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eQt");
      helpFormatter0.printHelp(92, "Q{`F\"\"K8zfOi", "", options0, "");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = new Locale("", "", "line.separator");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      options1.getOptions();
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "eQt";
      objectArray0[5] = (Object) options1;
      objectArray0[6] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "6?FX0H0m9ln8L", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, (-788), "", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) pipedOutputStream0;
      filterOutputStream0.flush();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) pipedOutputStream0;
      filterOutputStream0.close();
      objectArray0[3] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("{", objectArray0);
      int int0 = 12;
      helpFormatter0.printWrapped(printWriter0, 12, "LQT8`.");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 12, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(118, "", "eQt", options0, "'z", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, (-1), ">");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer("");
      helpFormatter1.renderOptions(stringBuffer0, 5, options0, 74, 36);
      helpFormatter0.printHelp(74, "[", "\n", options0, "`1K/rp~,;/^YD(x]u#");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "eQt");
      helpFormatter0.printHelp(118, "eQt", "!C~c3Zs@c4*V", options1, "eQt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 118, "\"rX", "\"rX", options0, (-2399), 1622, "!C~c3Zs@c4*V", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.Option", "sB\"oKQIv*");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 1, options0, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "X)eg$@1V^s Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1007), 44, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1168);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, (-1), ">");
      Options options0 = new Options();
      helpFormatter1.printHelp("]]^@L:", " ", options0, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", (String) null, false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 9, 2890);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2494), (String) null, (String) null, (Options) null, (-1379), (-1379), "C:mh%'>Lw}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("has already been selected: '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "ubb?|TV", "xm{$:~", (Options) null, (-3515), (-504), "ubb?|TV");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", (String) null, true, "HV2fQ(X_%Bz");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "usage: ", "", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[ option: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      mockPrintWriter1.println(0.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter1.print((long) 1);
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg", 1, 2);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter1, 0, "[ option: ");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "]r");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 74, (-1), ">");
      Options options0 = new Options();
      Options options1 = options0.addOption("S", true, "]B1;!]aiV5hed");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-1), "-", options1);
      helpFormatter1.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("", 20, 2210);
      Options options0 = new Options();
      helpFormatter0.printHelp("l,;", options0);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, " ", " ", (Options) null, "-");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "eQt";
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", false, "eQt");
      helpFormatter0.printHelp(118, "eQt", "!C~c3Zs@c4*V", options1, "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos(":GUvAGr5(/\")KZ^", 9, 3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      String string0 = "";
      String string1 = null;
      StringBuffer stringBuffer0 = new StringBuffer(103);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 103, 103, "c/mK:+m>:6Y9");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 103, options0, 103, 103);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 17, 12, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("]rxLC]|:E~!+kTn%\"", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&cwn7`_W)=_AKqp+mI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "t.Oz`V~x";
      mockPrintWriter1.format("t.Oz`V~x", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, (String) null, "]rxLC]|:E~!+kTn%\"", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      helpFormatter0.rtrim("HV2fQ(X_%Bz");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.findWrapPos("]", 0, 0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]rxLC]|:E~!+kTn%\"";
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1259));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]rxLC]|:E~!+kTn%\"", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`ZW+e)J06&j\\.p";
      Options options0 = new Options();
      String string1 = "k=;3`SB;";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "`ZW+e)J06&j.p", options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "", (Options) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Options options0 = new Options();
      options0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.HelpFormatter$1");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) optionGroup0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[3] = (Object) "arg";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "[ Options: [ short java.util.HashMap@0000000002 ] [ long {} ]";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      helpFormatter0.printUsage(printWriter0, 63, "Pw}XwK");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.defaultOptPrefix = "[ARG...]";
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("x\"9cq0|dTB,1", 64, (-111));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", (String) null, true, "HV2fQ(X_%Bz");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup1.setSelected(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      Options options2 = options1.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`ZW+e)J06&j.p", " ", options2, " ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("]rxLC]|:E~!+kTn%\"", options0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&cwn7`_W)=_AKqp+mI");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) options0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "t.Oz`V~x";
      PrintWriter printWriter0 = mockPrintWriter1.format("t.Oz`V~x", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 9, (-1905), "");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&)i?{yICMrK";
      Options options0 = null;
      String string1 = "Cannot add value, list full.";
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 117, (Options) null, 85, 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      String string0 = "k=;3`SB;";
      helpFormatter0.printHelp(" ", ":)([{hG^s", options0, "k=;3`SB;", true);
      MockFile mockFile0 = new MockFile("`ZW+e)J06&j.p", "");
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockFile.createTempFile("HEjK7){J", "org.apache.commons.cli.ParseException", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      int int0 = 0;
      int int1 = 9;
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 1, 9);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.printHelp(" ", ":)([{hG^s", options0, "k=;3`SB;", true);
      MockFile mockFile0 = new MockFile("`ZW+e)J06&j.p", "");
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      helpFormatter0.rtrim(" ");
      helpFormatter0.findWrapPos("", (-1789), 118);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, " ", " ", (Options) null, "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "}H=vb gDce ,QUGC");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("8Q[");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-49), (-49), "zF,9o_\"^F");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1614;
      String string0 = helpFormatter0.createPadding(1614);
      String string1 = " | ";
      helpFormatter0.setNewLine(" | ");
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(string0, "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", (String) null, true, "HV2fQ(X_%Bz");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string0 = null;
      Options options2 = options1.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`ZW+e)J06&j.p", " ", options2, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ", true);
      String string0 = "";
      int int0 = 1;
      mockFileOutputStream0.write(1);
      mockFileOutputStream0.close();
      helpFormatter0.setLongOptSeparator("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("QPG2zfg9");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1));
      helpFormatter0.getOptionComparator();
      PrintWriter printWriter0 = null;
      int int0 = (-2);
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = "org.apache.commons.cli.AlreadySelectedException";
      // Undeclared exception!
      try { 
        options0.addOption("--", true, "org.apache.commons.cli.AlreadySelectedException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, "zF,9o_\"^F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1617);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setSyntaxPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]";
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "%N>_)J7;qX$AZw@";
      Options options1 = options0.addOption("arg", false, "%N>_)J7;qX$AZw@");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1301), options2, (-1301), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3469;
      helpFormatter0.setLeftPadding(3469);
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.HelpFormatter$OptionComparator");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 3469, (-1365));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      int int0 = (-1153);
      helpFormatter0.defaultWidth = (-1153);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("&)i?{yICMrK", "&)i?{yICMrK", (Options) null, "Cannot add value, list full.", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("oWuc#u&9W&A*", options0, false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("}Pn8!");
      helpFormatter0.findWrapPos("line.separator", 913, 2);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.ParseException");
      helpFormatter0.getArgName();
      int int1 = 0;
      helpFormatter0.setDescPadding(0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("-", "}]^3a/t");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // }]^3a/t
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setDescPadding(1954);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "q,RDT*^>*i";
      helpFormatter0.defaultNewLine = "q,RDT*^>*i";
      helpFormatter0.getNewLine();
      int int0 = 74;
      helpFormatter0.defaultWidth = 74;
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("}Pn8!", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("*Kkm)W]|Iy'I$C.?Y");
      String string0 = "L";
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-4064), options0, 0, (-4064));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ] [ long ");
      MockFile mockFile0 = new MockFile("usage: ", " | ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 1524;
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ] [ long ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ] [ long ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      Options options0 = new Options();
      String string2 = ", ";
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, ";c");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.findWrapPos("&)i?{yICMrK", 2831, 2381);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("", 2828, 2381);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1171), "\n", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, " ", "arg", options0, 3, 3, "V&frW");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = null;
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 0, "}H=vb gDce ,QUGC");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-5507));
      helpFormatter0.setDescPadding((-5507));
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("F", "!kQcIACy");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options2, (-5507), 1042);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, ">\"sk8N0f|ob]>[`,", ">\"sk8N0f|ob]>[`,", (Options) null, "eQt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      int int0 = 2877;
      String string0 = "L\"bcNLGn%uJ=lmJxF";
      String string1 = "arg";
      Options options0 = new Options();
      options0.addOption("arg", true, "-");
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "arg";
      Options options2 = options1.addOption("arg", "usage: ", false, "arg");
      // Undeclared exception!
      try { 
        options2.addOption("\n", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
