/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "usage: ");
          StringWriter stringWriter0 = new StringWriter();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
          mockPrintWriter0.print((double) 3);
          Locale locale0 = Locale.ITALIAN;
          String string0 = "org.apache.commons.cli.HelpFormatter$1";
          PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "org.apache.commons.cli.HelpFormatter$1", (Object[]) null);
          stringWriter0.append((CharSequence) "-");
          mockPrintWriter0.print("usage: ");
          // Undeclared exception!
          helpFormatter0.printWrapped(printWriter0, 0, "org.apache.commons.cli.HelpFormatter$1");
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      Options options3 = options2.addOption((String) null, "usage: ", true, " [ARG]");
      helpFormatter0.printHelp("O", options3);
      helpFormatter0.setDescPadding((-4428));
      helpFormatter0.createPadding(2922);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-3868), "cmdLineSyntax not provided");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "org.apache.commons.cli.HelpFormatter", " ", options0, "usage: ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("v;+xF9Db:,", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 3373;
      String string0 = "' was specified but an option from this group ";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "' was specified but an option from this group ", options0, "W<CxqI~6%^}q}oA8Y", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      String string0 = "";
      helpFormatter0.printHelp(34, "Wus;MEV5Y ", "Wus;MEV5Y ", options0, "", true);
      String string1 = "N";
      helpFormatter0.findWrapPos("N", 0, 0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "N");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // N
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      boolean boolean0 = true;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) optionGroup0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) optionGroup0;
      mockPrintWriter0.printf("-", objectArray0);
      String string0 = "BhE%hDL=>l6Sk3";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-579), "BhE%hDL=>l6Sk3");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(")", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(126, "The option '", "l=vz$D*lqTxL", options0, "=Nxu@", true);
      helpFormatter0.findWrapPos("l=vz$D*lqTxL", 2, 2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.getOptions();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 3);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 2891, "kh");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      mockFile0.getAbsolutePath();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(10, "5P{", "!O&()t1ZZK_y0k-X?@}", options1, "\"", true);
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      helpFormatter0.printHelp(10, "\"", "/experiment/\n/-", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 1834, "Vy?H2'~r1ip", "", options1, 10, 10, "|I3]~Q,M\"q]o%2bw", false);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter1.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 1, options1, 1, 331);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 21, 1, "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 5, (-129), "[ Options: [ short ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 39, "Vy?H2'~r1ip", (String) null, options0, (-1493), 1230, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1655, "[ARG...]", "Jd{{<->^W>/9)T48r", options0, "6%}K.pj", false);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      options0.addOption("", "[ARG...]", false, "--");
      charArray0[1] = '<';
      charArray0[2] = '*';
      charArray0[3] = 'b';
      stringBuffer0.append(charArray0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 29, options0, 1655, 632);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 1380, 116, "hjtSw4\"}2_");
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, (-1857), 1000, "hjtSw4\"}2_");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      helpFormatter0.getSyntaxPrefix();
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.printHelp(5, "usage: ", "usage: ", options0, "QSvkgXcBvw#r5~-", true);
      helpFormatter0.renderOptions((StringBuffer) null, 5, options0, 5, 5);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 44, "arg", "KAI9d9vqJ4Mr.p[)k1", options0, 45, 44, (String) null, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(74);
      helpFormatter1.printHelp("KAI9d9vqJ4Mr.p[)k1", options0);
      helpFormatter1.findWrapPos("usage: ", 46, 3);
      helpFormatter1.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "6";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth((-580));
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.printf("`", (Object[]) null);
      Options options1 = new Options();
      options0.hasLongOption("vd");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "5,ki1'm", " ] [ long ", options0, "arg", false);
      helpFormatter1.printOptions(mockPrintWriter0, (-2), options0, 3, 1);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 1, 2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("uXmJU~Y<,rz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append((CharSequence) "--");
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, "uXmJU~Y<,rz", "uXmJU~Y<,rz", options1, 1347, 74, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(3415);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Option option0 = new Option("", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      options1.addOptionGroup(optionGroup1);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 74, "arg", options1);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      helpFormatter2.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      helpFormatter0.printHelp("-", options0, true);
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter4.getWidth();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter5.getArgName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "org.apache.commons.cli.HelpFormatter");
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, " ");
      options1.addOptionGroup(optionGroup2);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(1);
      // Undeclared exception!
      helpFormatter1.printHelp("usage: ", "usage: ", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp(15, "!O&()t1ZZK_y0k-X?@}", "!O&()t1ZZK_y0k-X?@}", options1, "]", false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = 0;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      URI uRI0 = MockURI.aFTPURI;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) mockPrintWriter1;
      objectArray0[3] = (Object) uRI0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) options0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "", options1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(101);
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 3614, 101);
      StringBuffer stringBuffer1 = new StringBuffer(101);
      helpFormatter0.printHelp(3, "!O&()t1ZZK_y0k-X?@}", "a!&c@X", options0, "", true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "!O&()t1ZZK_y0k-X?@}");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "x(Y:B");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.defaultLeftPad = (-2476);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(64, "org.apache.commons.cli.Options", "[ Options: [ short ", options0, "Illegal option name '", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("org.apache.commons.cli.HelpFormatter", 3, (-479));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      Object object0 = new Object();
      mockPrintWriter0.printf("<]K>uPya(YJ&t/2vUaD", objectArray0);
      Options options0 = new Options();
      helpFormatter0.printHelp(5, "/experiment/\n/-", "QSvkgXcBvw#]5~N", options0, "/experiment/\n/-", false);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) mockFile0;
      mockPrintWriter0.printf("-", objectArray1);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", true, "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1138), "", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      mockPrintWriter0.printf("`", (Object[]) null);
      Options options1 = new Options();
      options0.hasLongOption("vd");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "5,ki1'm", " ] [ long ", options0, "arg", false);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-2), options0, (-1263), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 31;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 31, " :: ", "a!&c@X", options1, 31, 31, "Illegal option name '", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      int int0 = 10;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("usage: ");
      byte[] byteArray0 = new byte[1];
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 10, "", options0);
      byteArray0[0] = (byte) (-23);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "KAI9d9vqJ4Mr.p[)k1", "KAI9d9vqJ4Mr.p[)k1", options0, 1, 10, "", true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("uXmJU~Y<,rz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1852, "8", "VG^{,T6.%\"~aj&", options0, 1, (-2), "j\u0005<Sj{v:/A?", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptionGroups();
      OptionGroup optionGroup0 = new OptionGroup();
      CharBuffer.allocate(27);
      MockFile mockFile0 = new MockFile("\n", ":#y$LLz7 dAAJm4R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.getArgName();
      mockPrintWriter0.append((CharSequence) "arg");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 27, 74, "");
      helpFormatter0.getOptionComparator();
      helpFormatter1.printHelp(" ", options0, false);
      helpFormatter1.setLeftPadding(3);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "4pn<-^}Sz2r&z", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("uXmJU~Y<,rz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 10, "uXmJU~Y<,rz", "Vy?H2'~r1ip", options1, 1347, 31, "Vy?H2'~r1ip", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(10);
      helpFormatter0.printHelp("-", options1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Option option0 = new Option("", "<", true, (String) null);
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("arg", "usage: ", true, "--");
      helpFormatter0.printHelp("KAI9d9vqJ4Mr.p[)k1", options2, true);
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options3 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "KAI9d9vqJ4Mr.p[)k1", "<{m.#;u$0J`b(v~/", options3, "org.apache.commons.cli.Util", true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption("m", true, "' contains an illegal character : '");
      helpFormatter0.printUsage(printWriter0, 3612, "--", options1);
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("[uAxfT=oA^y*X&n", options2, true);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.printHelp(printWriter0, 1659, "c]X?", "", options2, 1762, 22, "N{");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("uXmJU~Y<,rz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      mockPrintWriter0.append((CharSequence) charBuffer0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("arg", "arg", false, "arg");
      Options options1 = options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter1.printHelp("-", "!=j^<", options1, "");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-677), "", "--", options0, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      Options options2 = options1.addOptionGroup(optionGroup2);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "usage: ", options1, "usage: ");
      option0.setType("arg");
      options2.addOption(option0);
      String string0 = "FP_Dm}^%4B#L#tj[L";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "x(Y:B", "FP_Dm}^%4B#L#tj[L", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      Options options2 = options1.addOptionGroup(optionGroup2);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "usage: ", options1, "usage: ");
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-915), (String) null, "=%)w", options2, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) mockFile0;
      mockPrintWriter0.printf("-", objectArray1);
      Options options0 = new Options();
      Option option0 = new Option("", "arg", true, "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("o_7cbg%{G~Q-x6b", "zU'\u0002", options0, (String) null);
      options1.addOption(option0);
      helpFormatter0.printHelp((-1), "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "zU'\u0002", options0, "o_7cbg%{G~Q-x6b", true);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "x(Y:B");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.printHelp(64, "org.apache.commons.cli.Options", "[ Options: [ short ", options0, "Illegal option name '", true);
      File file0 = MockFile.createTempFile("usage: ", ">", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append('?');
      helpFormatter0.printWrapped(printWriter0, (-1), "H75z2");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(101);
      helpFormatter0.renderOptions(stringBuffer0, 31, options0, 3614, 101);
      Option option0 = new Option("", true, "mVF]A");
      Options options1 = options0.addOption(option0);
      option0.setType(options1);
      options1.addOption(option0);
      Options options2 = options1.addOption((String) null, true, ":\"t_MBhe!j!cQKO.Z");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(530, "'", "'", options2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(34);
      helpFormatter0.renderOptions(stringBuffer0, 1488, options0, 101, 3614);
      StringBuffer stringBuffer1 = new StringBuffer(3614);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "^", " ", options0, "a!&c@X", true);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasLongOption("arg");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter1.renderWrappedText(stringBuffer0, 3, 9, "");
      helpFormatter1.renderWrappedText(stringBuffer1, 9, 1, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, (String) null, "-", options1, "vmyvmRg'uRv&FWT", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 64;
      helpFormatter0.createPadding(64);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 64, "                                                                ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-11);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      helpFormatter0.setDescPadding((-11));
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "\"";
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("uXmJU~Y<,rz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options1 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "uXmJU~Y<,rz", "dl5])?qt>", options1, 31, 31, "-~a:<(S(izR", true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "dl5])?qt>", "*/dWuk%0s X", options1, 63, 16, "");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp("U^ZSGj^PFzUxB>a", "_'DkG", options0, "_'DkG", false);
      mockPrintWriter0.print(0.0);
      int int0 = 10;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "KAI9d9vqJ4Mr.p[)k1", "KAI9d9vqJ4Mr.p[)k1", options0, 58, 10, "KAI9d9vqJ4Mr.p[)k1", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "x(Y:B";
      Option option0 = new Option("", true, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      options1.addOptionGroup(optionGroup2);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "usage: ", options1, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      Options options2 = options1.addOptionGroup(optionGroup2);
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "usage: ", options1, "usage: ");
      option0.setType("");
      options2.addOption(option0);
      String string0 = "FP_Dm}^%4B#L#tj[L";
      // Undeclared exception!
      helpFormatter0.printHelp(1, "x(Y:B", "FP_Dm}^%4B#L#tj[L", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption("arg", true, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer1, 9, 49, "]");
      helpFormatter0.printHelp(15, "!O&()t1ZZK_y0k-X?@}", "!O&()t1ZZK_y0k-X?@}", options1, "]", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("X(4NGnp@)UV0v*`F&[o");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "X(4NGnp@)UV0v*`F&[o";
      objectArray0[2] = (Object) "X(4NGnp@)UV0v*`F&[o";
      objectArray0[3] = (Object) printWriter0;
      PrintWriter printWriter1 = mockPrintWriter1.format("--", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "5");
      helpFormatter0.printHelp(printWriter1, 1949, "X(4NGnp@)UV0v*`F&[o", "$B]u]l)9^tVC]0%)\"'g", options2, 1949, 1949, "", true);
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("usage: ");
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) helpFormatter0;
      objectArray1[1] = (Object) "";
      mockPrintWriter2.printf("", objectArray1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter2, 31, 16, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter2, 3, "Q [%+qU>\"{!", "3d|+TA&O(", (Options) null, 422, 3, "$*6};=J^Z,%Fv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[3@IYW>3),AO4@g>";
      helpFormatter0.defaultLongOptPrefix = "[3@IYW>3),AO4@g>";
      helpFormatter0.defaultArgName = "[3@IYW>3),AO4@g>";
      helpFormatter0.setLeftPadding((-198));
      helpFormatter0.rtrim(" ");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(1159);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1159, (Options) null, 1159, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "x(Y:B");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("[ Options: [ short ", "WoPnXM+Z0PRTY*g1U;", options2, "");
      option0.setType((Object) null);
      Options options3 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[ Options: [ short ", "", options3, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "wf0", objectArray0);
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("wf0", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 32, 0, "wf0");
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 0, "/experiment/\n/-", "", (Options) null, 10, 32, "xJX");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      int int0 = (-528);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      int int1 = 16;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-528), 16, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      mockPrintWriter0.append((CharSequence) "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2251, (String) null, "", options0, 1, 769, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(13);
      options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options1, 13, 1043);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("arg");
      helpFormatter0.printHelp((-1), "KG0Cq", "-([A9N<B_-", options0, "-([A9N<B_-");
      helpFormatter0.setSyntaxPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      String string0 = "9X:),XhZ~#*\"rSM!E{";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 64, 64, "9X:),XhZ~#*\"rSM!E{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "wf0", objectArray0);
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("wf0", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 32, 0, "wf0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "\n", " ", (Options) null, (-292), 32, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      mockPrintWriter0.append((CharSequence) "usage: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "[ Options: [ short ", "arg", options1, 1, 74, "", false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CharBuffer.allocate(3);
      mockPrintWriter0.append((CharSequence) "JI^^I3+-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "Cannot add value, list full.";
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 1, 3, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      Options options0 = new Options();
      int int0 = 10;
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter0, 1, "KAI9d9vqJ4Mr.p[)k1", "KAI9d9vqJ4Mr.p[)k1", options0, 58, 10, "KAI9d9vqJ4Mr.p[)k1", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      EvoSuiteFile evoSuiteFile0 = null;
      helpFormatter0.defaultLongOptPrefix = "";
      byte[] byteArray0 = new byte[5];
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 9, (Options) null, 449, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      int int0 = 31;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "", "OY5my8a_M3", options0, 31, 3, "KAI9d9vqJ4Mr.p[)k1", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      options0.getOption(">");
      String string0 = "-([A9N<B_-";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-607), "-([A9N<B_-", "]", options0, "-([A9N<B_-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.HelpFormatter";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("k", false, (String) null);
      OptionGroup optionGroup1 = new OptionGroup();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter1.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter2, (-225), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      CharBuffer.allocate(74);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("arg");
      helpFormatter0.printHelp((-1), "KG0Cq", "-([A9N<B_-", options0, "-([A9N<B_-");
      helpFormatter0.setSyntaxPrefix((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VOo.9L");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "-");
      helpFormatter0.printWrapped(printWriter0, 3639, 1, "VOo.9L");
      helpFormatter0.getWidth();
      Options options0 = null;
      int int0 = 2043;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 109, " | ", " | ", (Options) null, 2043, 1595, "VOo.9L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "";
      mockPrintWriter0.printf("", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 31, 16, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "Q [%+qU>\"{!", "3d|+TA&O(", (Options) null, 422, 3, "$*6};=J^Z,%Fv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "wf0", objectArray0);
      Object object0 = new Object();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-849), "wf0", "wf0", options0, 1, 1, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.defaultOptPrefix = "Q-c.I:saMxOU";
      helpFormatter0.rtrim("4@rf(");
      helpFormatter0.setArgName("4@rf(");
      helpFormatter0.getOptionComparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-469));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[3@IYW>3),AO4@g>";
      helpFormatter0.defaultLongOptPrefix = "[3@IYW>3),AO4@g>";
      helpFormatter0.defaultArgName = "[3@IYW>3),AO4@g>";
      helpFormatter0.setLeftPadding((-198));
      String string1 = "E@";
      helpFormatter0.rtrim("E@");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        options0.addOption("[3@IYW>3),AO4@g>", "", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[3@IYW>3),AO4@g>' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("7T,t4u>nuzwAV7Utrt");
      Options options0 = new Options();
      helpFormatter0.printHelp(65, "g(", "B{", options0, "", false);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("7T,t4u>nuzwAV7Utrt");
      helpFormatter0.setSyntaxPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.findWrapPos("DNG", (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setLongOptSeparator("LMyo1");
      Option option0 = new Option("arg", false, "usage: ");
      OptionGroup optionGroup1 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption((String) null, false, (String) null);
      options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("uXmJU~Y<,rz", "iLzV=h*m5;iw", options1, "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      CharBuffer.allocate(3);
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options0, true);
      helpFormatter0.setLeftPadding(74);
      // Undeclared exception!
      try { 
        helpFormatter1.createPadding((-1758));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("uXmJU~Y<,rz", options0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      int int0 = 64;
      CharBuffer.allocate(64);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter0.printWrapped(printWriter0, 69, 0, "JI^^I3+-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1619);
      Options options2 = options1.addOption("yCe", true, "vP~[bIxyC,aP");
      Options options3 = options2.addOption("arg", true, "\u0007KVu\"?l39'*.::");
      OptionGroup optionGroup0 = new OptionGroup();
      options3.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = new StringBuffer("WoPnXM+Z0PRTY*g1U;");
      helpFormatter0.renderOptions(stringBuffer1, 2057, options0, 44, 1619);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, ", ");
      options0.hasShortOption("\u0007KVu\"?l39'*.::");
      helpFormatter0.printHelp(31, "5LRd", "]", options0, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 34, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = object0;
      mockPrintWriter0.printf("L(=1TEL", objectArray0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 32, "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) "L(=1TEL";
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "7~M}.}'>^Z^Y,", objectArray1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1431), "L(=1TEL", "", options0, 32, (-1431), "7~M}.}'>^Z^Y,");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`wGN&gT");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "`wGN&gT";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format(locale0, "arg", objectArray0);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-3786), "`wGN&gT", " :: ", options0, 9, (-3786), "`wGN&gT");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, "a!&c@X", "", options0, 31, 31, "", false);
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = (-1444);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "}+";
      String string1 = "<";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = true;
      String string2 = "-";
      // Undeclared exception!
      try { 
        options1.addOption("t@BzjMh~DvNJ??/k<", true, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 't@BzjMh~DvNJ??/k<' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(31);
      String string0 = "t9[8lD\\";
      helpFormatter0.setArgName("t9[8lD");
      String string1 = " ";
      helpFormatter0.setLongOptSeparator(" ");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string0 = "u_";
      Options options0 = new Options();
      String string1 = "pB7!LN";
      options0.getOption("r(X^b^N'&Zf]D1vS`ep");
      boolean boolean0 = false;
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("pB7!LN", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'pB7!LN' contains an illegal character : '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", (Object[]) null);
      helpFormatter0.printWrapped(printWriter0, 16, 292, "!)ulK UEw%K]u");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 422, "$*6};=J^Z,%Fv", "", (Options) null, (-1066), 38, " | ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "x(Y:B");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp("[ Options: [ short ", "WoPnXM+Z0PRTY*g1U;", options2, "");
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 31, options2, 31, 9);
      helpFormatter0.renderWrappedText(stringBuffer1, 9, 31, "]");
      helpFormatter0.printHelp(15, "!O&()t1ZZK_y0k-X?@}", "!O&()t1ZZK_y0k-X?@}", options1, "]", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) mockFile0;
      mockPrintWriter0.printf("-", objectArray1);
      Options options0 = new Options();
      helpFormatter0.printHelp(5, "org.apache.commons.cli.Options", "QSvkgXcBvw#]5~N", options0, "/experiment/\n/-", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "wf0", objectArray0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "--");
      helpFormatter0.printHelp(printWriter0, 1455, "/experiment/\n/-", "wf0", options1, 1455, 123, " ] [ long ", false);
      helpFormatter0.setWidth(3252);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("\n", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[3];
      mockFile0.getAbsolutePath();
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf(locale0, "wf0", objectArray0);
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) helpFormatter0;
      objectArray1[2] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("wf0", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 32, 0, "wf0");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 32, "/experiment/\n/-", "org.apache.commons.cli.AlreadySelectedException", (Options) null, (-292), 32, "/experiment/\n/-");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uXmJU~Y<,rz";
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("JI^^I3+-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "JI^^I3+-");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 31, options2, 31, 9);
      helpFormatter0.renderWrappedText(stringBuffer0, 9, 44, "T&%G/S%}");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(15, (String) null, "", options1, "puC$U", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1483, "", "cmdLineSyntax not provided", options0, "-([A9N<B_-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArrayOutputStream0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-1), (String) null, "Jf&<]=!?^eki", (Options) null, 0, 31, "Jf&<]=!?^eki");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("\n", "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      
      helpFormatter0.defaultSyntaxPrefix = "?sp";
      Options options0 = new Options();
      helpFormatter0.printHelp((-1), "--", "g(", options0, "", false);
      helpFormatter0.defaultWidth = (-1);
      helpFormatter0.getNewLine();
      helpFormatter0.getArgName();
      String string0 = helpFormatter0.rtrim("?sp");
      assertEquals("?sp", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("l= nV;YQfd'Z0");
      StringBuffer stringBuffer0 = new StringBuffer(58);
      int int0 = 693;
      Options options0 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options0.addOption(" ", (String) null, true, "l= nV;YQfd'Z0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-115));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      helpFormatter0.setLongOptPrefix("8<K|mFe1.D;i{uo8G)B");
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getArgName();
      String string0 = "NO_ARGS_ALLOWED";
      Options options0 = new Options();
      String string1 = "   ";
      // Undeclared exception!
      try { 
        options0.addOption("8<K|mFe1.D;i{uo8G)B", "   ", true, "z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8<K|mFe1.D;i{uo8G)B' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      int int0 = 0;
      Options options0 = null;
      helpFormatter0.defaultOptPrefix = "Q-c.I:saMxOU";
      int int1 = 4398;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 4398, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      MockFile mockFile0 = new MockFile("");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.defaultOptPrefix = "RYgy|S.CL-(#u^U'/";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      int int0 = 13;
      helpFormatter0.setWidth(13);
      String string0 = "+f[";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "+f[");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +f[
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(10);
      helpFormatter0.getWidth();
      String string0 = "3A8%2{n\"4u";
      Options options0 = new Options();
      options0.addOption("", true, "org.apache.commons.cli.HelpFormatter");
      String string1 = "rJtR{=LQ";
      Option option0 = null;
      try {
        option0 = new Option("rJtR{=LQ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'rJtR{=LQ' contains an illegal character : '{'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "_Fe]0o";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultArgName = "0F*Tw<";
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(74);
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setLongOptSeparator("                                                                          ");
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('P');
      int int0 = 0;
      int int1 = 27;
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) " ", 0, 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.setWidth(990);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 4165, 0, "'");
      int int0 = 1;
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", true, "|[E0-Qr");
      // Undeclared exception!
      try { 
        options1.addOption(">HH+OX|QdLaX<R%eJ", "--", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '>HH+OX|QdLaX<R%eJ' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[3@IYW>3),AO4@g>";
      helpFormatter0.defaultLongOptPrefix = "[3@IYW>3),AO4@g>";
      helpFormatter0.defaultArgName = "[3@IYW>3),AO4@g>";
      helpFormatter0.setLeftPadding((-198));
      String string1 = "E@";
      helpFormatter0.rtrim("E@");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 491;
      helpFormatter0.getLeftPadding();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", "", true, "/k?t%9<:4V");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }
}
