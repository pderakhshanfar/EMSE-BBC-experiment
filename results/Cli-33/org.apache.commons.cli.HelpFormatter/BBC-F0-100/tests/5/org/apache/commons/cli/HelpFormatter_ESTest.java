/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 12:22:25 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("crFzLrT[?q", "org.apache.commons.cli.AlreadySelectedException", (File) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2517, "org.apache.commons.cli.AlreadySelectedException");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.defaultDescPad = (-251);
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 63, "Yk4lB3@$+uu");
      helpFormatter0.getOptPrefix();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, ".uHLSSt[:", "-", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "XG-G.kVBy;22M");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "arg", true, "--");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options0.addOption("", true, "-");
      helpFormatter0.rtrim("-");
      MockPrintStream mockPrintStream0 = new MockPrintStream("-");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) options2;
      objectArray0[4] = (Object) options2;
      objectArray0[5] = (Object) options0;
      objectArray0[6] = (Object) option0;
      PrintStream printStream0 = mockPrintStream1.printf("arg", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2256), options1, 4, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "orh%j";
      String string1 = "tfkVWYBo\\>Bn*S%v-O_";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("IP;$}kw", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.optionComparator = null;
      helpFormatter1.rtrim("Qz<gvdgn;Q(5|xp,>");
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setArgName("E+yeHAt");
      helpFormatter0.setWidth((-4860));
      helpFormatter0.rtrim("The option '");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("E+yeHAt", "The option '", options0, "0MNpT^%2,=6|3Vd", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.ITALY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      int int0 = 0;
      String string0 = "]";
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "]");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      helpFormatter0.defaultDescPad = 1019;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)23;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5`:O\"yp8mt*~e5DpT");
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.defaultLeftPad = 1019;
      helpFormatter0.defaultLongOptPrefix = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      helpFormatter0.defaultOptPrefix = null;
      helpFormatter0.defaultArgName = "";
      helpFormatter0.createPadding(0);
      helpFormatter0.findWrapPos("iK", 117, 117);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((byte)13);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("The option '", "", true, "?,TBkX&tzt2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The option '' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      Options options0 = new Options();
      options0.hasOption("--");
      helpFormatter0.printHelp(27, ",:", ",:", options0, "NO_ARGS_ALLOWED", true);
      // Undeclared exception!
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "\n", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultSyntaxPrefix = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "c'F=wwsgEqM=3FN");
      helpFormatter0.printHelp(3, "-", "\"S`ou#:!T1[", options0, "-", true);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      String string1 = "iqSXb]";
      helpFormatter0.setArgName("iqSXb]");
      helpFormatter0.getLongOptPrefix();
      int int0 = 719;
      String string2 = ">";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string3 = null;
      // Undeclared exception!
      try { 
        options0.addOption("' contains an illegal character : '", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '' contains an illegal character : '' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", (String) null, true, (String) null);
      options0.addOption("arg", "arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 31, "%26AvI12E", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.defaultLeftPad = (-1719);
      String string0 = helpFormatter0.defaultArgName;
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-429);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "-", "\n", options0, "-", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("%XF-{^ 'jlv@ OZ4", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", true, "-");
      helpFormatter0.printHelp(8, "\"S`ou#:!T1[", "\"S`ou#:!T1[", options1, "R/yc(3M4_3a", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, (-118), options0, 1, 223);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      String string1 = "";
      int int0 = (-571);
      helpFormatter0.findWrapPos("", (-571), 0);
      int int1 = (-2676);
      helpFormatter0.findWrapPos("", (-2676), 727);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage(printWriter0, (-1538), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 5621, "![3)m&wyWL");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 34, "   ");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      helpFormatter0.rtrim("\n");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = (-821);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "\n", true, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-821), (String) null, options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Options options0 = new Options();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/experiment");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      options0.addOption("_", true, "t+x@Pk/~/;x");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "usage: ", true, "[ Options: [ short ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("org.apache.commons.cli.ParseException", options0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("@Of8mJad(Cm&8}qBC`");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("{QTi('a65", "", (Options) null, "Nj+h|WF:P:>", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options0.addOption("e", true, "t+x@Pk/~/;x");
      optionGroup0.toString();
      helpFormatter0.printHelp(10, "r;[H|6%", "<2={\"]R0Pi", options0, "-", true);
      helpFormatter0.rtrim("<2={\"]R0Pi");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 10, "<2={\"]R0Pi", "<2={\"]R0Pi", options1, 2, 10, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 31, (String) null, (String) null, options1, 1809, 3245, " 0&<h+7%:", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 2, "Wg m/)@RY3YyD?q>K", (String) null, (Options) null, 3, 165, "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setNewLine((String) null);
      options0.toString();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 116, "arg", "-", options0, 3, 1, (String) null, false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "arg", "usage: ", options0, 3, 3, "--", false);
      int int0 = 3653;
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3653, "usage: ", options0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "acr*NogqZw0Qzw";
      String string1 = " ";
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 1, "G6q'#WM21 *`)");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(34, "--", "", options0, "-", false);
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("--");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      helpFormatter0.printOptions(mockPrintWriter0, 0, options0, 34, 0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", true, "t+x@Pk/~/;x");
      optionGroup0.toString();
      helpFormatter0.printHelp(10, "r;[H|6%", "<2={\"]R0Pi", options0, "-", true);
      helpFormatter0.rtrim("<2={\"]R0Pi");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "r;[H|6%", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "hP$", options0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("_", true, "t+x@Pk/~/;x");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      MockPrintStream mockPrintStream0 = new MockPrintStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) charBuffer0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "[ Options: [ short ", options1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = options0.addOption((String) null, true, "9");
      helpFormatter0.printHelp(10, "-", "--", options1, "usage: ", false);
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter2.setSyntaxPrefix("dt9X");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "t+x@Pk/~/;x");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "", options1, "", true);
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter0.setSyntaxPrefix("N);XlkBHWzga");
      StringWriter stringWriter0 = new StringWriter(9);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "t+x@Pk/~/;x");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 3, (-116), "org.apache.commons.cli.Option");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", true, "t+x@Pk/~/;x");
      optionGroup0.toString();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1009), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      int int0 = (-1727);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1727), "[ Options: [ short ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 3140;
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3140, "Cannot add value, list full.", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "k";
      mockPrintWriter0.printf("-", objectArray0);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " x`+I", objectArray1);
      helpFormatter0.printWrapped(printWriter0, 341, "k");
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "cmdLineSyntax not provided", options0, "\n", true);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.findWrapPos(" x`+I", 74, 2);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<2={\"]R0Pi");
      options0.hasOption("gZDO#jG@McG[D");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 33, "]", "usage: ", options0, 2481, 33, "\n", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = helpFormatter2.defaultOptPrefix;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, " ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "t+x@Pk/~/;x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "<2={\"]R0Pi");
      Options options2 = new Options();
      helpFormatter0.printHelp(printWriter0, 10, "[ option: ", "Illegal option name '", options2, 44, 10, "<2={\"]R0Pi");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
      helpFormatter2.printHelp("--", "--", options1, "[XI!W;EKPX`kmq.N", false);
      helpFormatter2.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options2, 3, 64);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      String string0 = "t+x@Pk/~/;x";
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("", true, "t+x@Pk/~/;x");
      int int0 = 10;
      helpFormatter0.createPadding(10);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "-", true);
      helpFormatter0.rtrim("<2={\"]R0Pi");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      StringWriter stringWriter0 = new StringWriter(3);
      int int1 = 1552;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) stringBuffer0, 103, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -103
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, ">");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3, "--", "", options1, "", true);
      String string0 = helpFormatter1.defaultSyntaxPrefix;
      helpFormatter0.setSyntaxPrefix("N);XlkBHWzga");
      MockFile mockFile0 = new MockFile("\n");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockFile0.mkdirs();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 64, "");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("", true, "t+x@Pk/~/;x");
      int int0 = 10;
      helpFormatter0.createPadding(10);
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "-", true);
      helpFormatter0.rtrim("<2={\"]R0Pi");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      StringWriter stringWriter0 = new StringWriter(3);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "t+x@Pk/~/;x", 1552, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1914;
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter1.setOptPrefix("--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim(" ");
      helpFormatter1.getWidth();
      helpFormatter0.getWidth();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp("", "", options0, "+PRvE:;lY", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nr;H|6%>";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "org.apache.commons.cli.OptionGroup", "wx,", options0, "4[", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("nr;H|6%>");
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, " ", "_6w)B$Lq51b!%ch!u", options1, 3, 117, "wx,", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nrH|Q6%";
      Options options0 = new Options();
      helpFormatter0.printHelp(44, "nrH|Q6%", ">a3B5PA7[JdUo(C,'", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("arg");
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|Xq3LrmqG");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "VBj~_{t.z_wlb", "--", options0, 10, 73, "arg", false);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<2={\"]R0Pi");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 54, "]", "h*SH $iUd\"w@4_l[{we", options0, 2605, 33, "", true);
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-338);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, (-338));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "t+x@Pk/~/;x");
      helpFormatter0.createPadding(10);
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "-", true);
      helpFormatter0.rtrim("<2={\"]R0Pi");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addOption("X0_MNBPhr6tjyT", "-", true, "\n");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter2.setOptPrefix("--");
      helpFormatter0.printHelp(341, "N]E=6uTK", ",rq_J{R\"| R?U;|`Axf", options0, "usage: ", true);
      helpFormatter2.rtrim("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("!_R");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getDescPadding();
      helpFormatter2.setOptPrefix("--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.rtrim(" ");
      helpFormatter2.getWidth();
      helpFormatter1.getWidth();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_SYNTAX_PREFIX;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) bufferedOutputStream0;
      objectArray0[2] = (Object) "org.apache.commons.cli.HelpFormatter";
      objectArray0[3] = (Object) helpFormatter1;
      objectArray0[4] = (Object) helpFormatter2;
      PrintWriter printWriter0 = mockPrintWriter0.format("org.apache.commons.cli.HelpFormatter", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      PrintWriter printWriter1 = mockPrintWriter1.printf("\n", objectArray0);
      // Undeclared exception!
      helpFormatter3.printHelp(printWriter1, 1, ">4PZ8?+:~c|=o?Gc", ">4PZ8?+:~c|=o?Gc", options0, 3, 1, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(32, " | ", " ", options0, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.setSyntaxPrefix("--");
      Options options1 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) null, 291, "wx,", "org.apache.commons.cli.OptionValidator", options0, 74, 2877, "bK2.}d9RxF%9MKW?", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printHelp(3, " ", "", options0, "$/]eA+bR.9m)u2", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setSyntaxPrefix("");
      Options options1 = new Options();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) null, 2180, "", "arg", options0, 74, 108, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nr;H|6%>";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "wx,", "4[", options0, "nr;H|6%>", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("VBj~_{t.z_wlb");
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VBj~_{t.z_wlb");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "arg", "\n", options0, (-1104), 13, "Q8ZVd7HenqOfo/$'Dq", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nr;H|6%>";
      Options options0 = new Options();
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      options0.hasShortOption("");
      helpFormatter0.renderOptions(stringBuffer0, 27, options0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-2), "\n", "wx,", options0, "-", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "-", "<2={\"]R0Pi", options0, "$?xNXM>", false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]T}6Z@\"";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp(10, "]T}6Z@\"", "<2={\"]R0Pi", options1, "org.apache.commons.cli.Util", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("-", 10, (-584));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "-", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      helpFormatter0.printHelp("g]EXf", "", options0, "");
      helpFormatter0.printHelp("L$N", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setDescPadding((-1956));
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.setOptPrefix("g]EXf");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("line.separator", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nr;H|6%>";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "wx,", "nr;H|6%>", options0, "wx,", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(";Eo");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1104), "usage: ", "", options1, 13, 3, "oO", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(9, "jJOx6]p`^Q", "|yW#DBT;en3#'", options0, "jJOx6]p`^Q", false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, "`tSs", "Y/(^co?", options0, 9, (-2104), "jJOx6]p`^Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.defaultOptPrefix = "--";
      helpFormatter2.getDescPadding();
      helpFormatter2.setOptPrefix("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "$?xNXM>";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(10, "usage: ", "--", (Options) null, " [ARG]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("", false, "t+x@Pk/~/;x");
      options1.getOptionGroups();
      int int0 = 10;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options1.getOptionGroups();
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      // Undeclared exception!
      helpFormatter2.renderOptions(stringBuffer0, 1, options1, 4204, 1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1914;
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "ABQX-=EfO\"hRqpg", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", false, "t+x@Pk/~/;x");
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "-", false);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim(" ");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp(printWriter0, 41, "\"", "--", options0, (-3315), 32, " :: ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("arg", "-", options0, "");
      helpFormatter1.printHelp(".Dio\"A{z", options0);
      helpFormatter1.setDescPadding(2);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("pUau  >J.LDR<1(");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.findWrapPos("e-%lY", (-1), 1);
      helpFormatter0.rtrim("<2={\"]R0Pi");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getWidth();
      HelpFormatter helpFormatter4 = new HelpFormatter();
      helpFormatter2.getWidth();
      HelpFormatter helpFormatter5 = new HelpFormatter();
      helpFormatter2.getArgName();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addOption("", false, "t+x@Pk/~/;x");
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("v/", 2672, (-3315));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      Options options0 = new Options();
      helpFormatter0.printHelp("<", options0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 64;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 64, "I+\"Na;Y5B1Fe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 326, (Options) null, 903, 903);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addOption("arg", (String) null, false, "arg");
      helpFormatter0.printHelp(10, "k", "cmdLineSyntax not provided", options2, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter1.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)0;
      helpFormatter0.setArgName("Z s74");
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.rtrim("");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding((byte)99);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      options0.hasOption("--");
      options0.addOption("", "usage: ", true, "-");
      helpFormatter0.printHelp(3, "-", "\"S`ou#:!T1[", options0, "-", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options0, 790, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "--";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(33, "-", "arg", options0, "-", false);
      options0.getOptionGroups();
      helpFormatter1.printHelp("GAhhGFbNe*vdsw-Oy@", "bfY00-o< 8^`ukgYY5", options0, "\n");
      helpFormatter1.printHelp(" ", options0);
      helpFormatter1.setDescPadding((-1));
      helpFormatter1.getDescPadding();
      helpFormatter1.getOptPrefix();
      helpFormatter0.findWrapPos(" ", 34, 2191);
      helpFormatter1.rtrim("GAhhGFbNe*vdsw-Oy@");
      helpFormatter0.getWidth();
      helpFormatter1.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 48, options0, 711, 48);
      helpFormatter0.rtrim("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "=rJ@Wt8r4iF/^NQNLMo", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 711, "", ".YIMxDas=Ad", options0, 24, 24, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("", false, "");
      int int0 = (-3315);
      String string0 = "M<cEh";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3275), "gi", "M<cEh", options1, 18, 1147, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string0 = "t+x@Pk/~/;x";
      options0.addOption("", false, "t+x@Pk/~/;x");
      int int0 = 2672;
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-3315), "", "", options0, 319, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("MoE37By  ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) "MoE37By  ";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) "-";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "-";
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-1016), 22, "-");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "-", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      helpFormatter0.printHelp("\n", "\n", options0, "d0c$fTB[r97n");
      helpFormatter0.printHelp("d0c$fTB[r97n", options0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("<|t@ t", 1, 1);
      helpFormatter0.rtrim("[ Options: [ short ");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nr;H|6%>";
      helpFormatter0.defaultSyntaxPrefix = "nr;H|6%>";
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((-1481), "pa!O", "-", options0, "pa!O", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "$?xNXM>", "$?xNXM>", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      helpFormatter0.printHelp(792, "$?xNXM>", "", options0, "", false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = " ]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", " ]", options0, "d0c$fTB[r97n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("k", options1);
      helpFormatter0.setDescPadding(10);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("k");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("", 10, 10);
      helpFormatter0.rtrim("");
      helpFormatter0.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1767, "", "[ARG...]", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "<S|KvXe*$D<X't 9K2z", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "$?xNXM>", "$?xNXM>", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("<2={\"]R0Pi", "arg", options0, "arg");
      helpFormatter0.printHelp("--", options0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 617, 1, "usage: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "<S|KvXe*$D<X't 9K2z", options0, "-");
      Options options1 = new Options();
      helpFormatter0.printHelp(328, "<Z", "-", options0, "BA>]BMX~!fu+ csp", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter2.printHelp(" >5C", options1, false);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter1.setOptionComparator(comparator1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2673, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "-", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      Collection collection0 = new LinkedList<Integer>();
      helpFormatter0.printHelp("\n", "\n", options0, "d0c$fTB[r97n");
      helpFormatter0.printHelp("d0c$fTB[r97n", options0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("[ARG...]");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("<|t@ t", 1, 1);
      helpFormatter0.rtrim("[ Options: [ short ");
      helpFormatter0.getWidth();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "d0c$fTB[r97n", "[ Options: [ short ", options0, "[ARG...]");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      helpFormatter1.getWidth();
      helpFormatter1.getArgName();
      helpFormatter1.printHelp(54, "e", "org.apache.commons.cli.Option", options0, "arg");
      helpFormatter1.getOptionComparator();
      helpFormatter0.setLongOptPrefix("--");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "s!$HZ8^[9{D0!");
      helpFormatter0.printHelp("hb4NqQOrsqBXBmCn>7>", "", options0, "", true);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 74, options0, (-1), (-144));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.hasShortOption("qCtl2");
      String string0 = "7";
      Option option0 = new Option("7", "7");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string1 = "";
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup2);
      options2.addOption("", "-", true, "_HVacJn8gt&6**");
      String string2 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1738), "org.apache.commons.cli.HelpFormatter$OptionComparator", "Tds<:EKGwu", options1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      helpFormatter0.setSyntaxPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 31, options0, 950, 31);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("QMnr3H|6%>", options0, true);
      Option option0 = new Option("arg", "", true, "arg");
      Options options1 = options0.addOption(option0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      int int0 = 105;
      // Undeclared exception!
      try { 
        options1.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      options0.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      helpFormatter0.printHelp("axX\"sN^fSa4x~", options0, true);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 97, (-694), "axX\"sN^fSa4x~");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "e";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string1 = "x<~yB5";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "x<~yB5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // x<~yB5
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "$?xNXM>";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, (String) null, "nr;H|6%>", options0, "org.apache.commons.cli.OptionGroup", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]/}e&!MR$i3", "A CloneNotSupportedException was thrown: ", (Options) null, "%{9||%sCKj4u50}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, true, "--");
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      Options options1 = options0.addOption((String) null, "r;[H|6%", false, (String) null);
      boolean boolean0 = true;
      Options options2 = options1.addOption("", true, "");
      int int0 = 10;
      helpFormatter0.createPadding(7);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1), "       ", ">", options2, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "UV:]MGTNq6");
      options1.addOption((String) null, "Nl%k3", true, " ]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Nl%k3", (String) null, options0, "!M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-338);
      int int1 = helpFormatter0.defaultDescPad;
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('F');
      StringWriter stringWriter1 = stringWriter0.append('B');
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'F';
      charArray0[2] = 'B';
      charArray0[3] = 'F';
      charArray0[4] = 'B';
      charArray0[5] = 'F';
      charArray0[6] = 'B';
      stringWriter1.write(charArray0);
      stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.findWrapPos("", (-3758), (-3758));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      helpFormatter0.printHelp("nr;H|6%>", "\n", options0, "d0c$fTB[r97n");
      helpFormatter0.printHelp("d0c$fTB[r97n", options0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("[ARG...]");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("<|t@ t", 1, 1);
      helpFormatter0.rtrim("[ Options: [ short ");
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter(1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "[ARG...]", 10, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-1));
      helpFormatter0.rtrim(" ");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("ltG:PHT$Ak  p", "Z;^OBe.V[7AX", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-3104);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      String string1 = "<2={\"]R0Pi";
      helpFormatter0.printHelp(10, "=]7]AzU+aAxb", "=]7]AzU+aAxb", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      String string2 = "";
      helpFormatter0.printHelp("=]7]AzU+aAxb", "", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "nr;H|6%>";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, " ", false);
      Collection collection0 = new LinkedList<Object>();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0, false);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("I2/WTeBROZc%Dxgp");
      helpFormatter0.setSyntaxPrefix("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      String string0 = "<tQRCZeKwB";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockPrintStream0;
      mockPrintStream0.println((Object) helpFormatter0);
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      PrintStream printStream0 = mockPrintStream0.format("<tQRCZeKwB", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      int int0 = 1809;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1809, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[ option: ");
      helpFormatter0.setLeftPadding(10);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option(" ", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "]w$i)=AQj.A!l{=hu";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-512), (-512), "]w$i)=AQj.A!l{=hu");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-338);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-338), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      options0.addOption("", false, "t+x@Pk/~/;x");
      int int0 = 10;
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      helpFormatter0.printHelp("nr;H|6%>", (String) null, options0, "d0c$fTB[r97n");
      helpFormatter0.printHelp("d0c$fTB[r97n", options0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      String string0 = "[ARG...]";
      MockFile mockFile0 = new MockFile("<Zf7OUbBb4{/jW6", "[ARG...]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "CU");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CU
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "<S|KvXe*$D<X't 9K2z", options0, "-");
      helpFormatter1.printHelp("--", options0);
      helpFormatter1.setDescPadding(3);
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ", "s!$HZ8^[9{D0!");
      int int0 = 10;
      try { 
        MockURI.URI("?o[%^*w(5HlrBJ%", (String) null, "-", 10, "N lH8oSoT", "cmdLineSyntax not provided", "cmdLineSyntax not provided");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ?o[%^*w(5HlrBJ%://-:10N%20lH8oSoT?cmdLineSyntax%20not%20provided#cmdLineSyntax%20not%20provided
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      Options options0 = new Options();
      helpFormatter0.printHelp(10, "-", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      helpFormatter0.printHelp("\n", "\n", options0, "d0c$fTB[r97n");
      helpFormatter0.printHelp("d0c$fTB[r97n", options0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      helpFormatter0.setOptPrefix("[ARG...]");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      helpFormatter0.findWrapPos("<|t@ t", 1, 1);
      helpFormatter0.rtrim("[ Options: [ short ");
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      helpFormatter0.printHelp("e", options0, false);
      String string0 = "--";
      Option option0 = null;
      try {
        option0 = new Option("Y2\"UjImW!$", "vP<", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Y2\"UjImW!$' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("e", options0, false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = null;
      helpFormatter0.defaultOptPrefix = ">MOwNe}N2g'm<";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("-");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 985, 985, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      stringWriter1.getBuffer();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("--", "'(", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      int int0 = 0;
      helpFormatter0.setWidth(0);
      int int1 = (-1776);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("-");
      helpFormatter0.rtrim("");
      helpFormatter0.getLongOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptionComparator((Comparator) null);
      String string1 = "<";
      helpFormatter0.setLongOptSeparator("<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "arg", 74, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "<2={\"]R0Pi";
      helpFormatter0.printHelp(10, "=]7]AzU+aAxb", "=]7]AzU+aAxb", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      String string1 = "";
      helpFormatter0.printHelp("=]7]AzU+aAxb", "", options0, ",m@C(d-8Q.,qn/8G");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "qCtl2";
      options0.hasShortOption("qCtl2");
      String string1 = "7";
      Option option0 = new Option("7", "7");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String string2 = "O^=Z!#3hM8rm*<0Pz}(";
      String string3 = "";
      Options options2 = options1.addOption("", "", false, "--");
      String string4 = "Tds<:EKGwu";
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ", "'", options2, "Tds<:EKGwu");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "nr;H|6%>";
      Options options0 = new Options();
      int int0 = 10;
      helpFormatter0.printHelp(10, "nr;H|6%>", "<2={\"]R0Pi", options0, "$?xNXM>", false);
      options0.getOptionGroups();
      helpFormatter0.printHelp("nr;H|6%>", (String) null, options0, "d0c$fTB[r97n");
      helpFormatter0.printHelp("d0c$fTB[r97n", options0);
      helpFormatter0.setDescPadding(1);
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("<Zf7OUbBb4{/jW6", "[ARG...]");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "CU");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CU
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      int int0 = 2879;
      helpFormatter0.setOptionComparator(comparator0);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      String string0 = helpFormatter0.createPadding(2879);
      helpFormatter0.rtrim(string0);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringBuffer0.insert(74, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 3;
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "?20ORU#)& N9nmJ:O";
      helpFormatter0.setNewLine("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('8');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) stringWriter1;
      objectArray0[1] = (Object) "?20ORU#)& N9nmJ:O";
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "";
      mockPrintWriter0.printf(locale0, "org.apache.commons.cli.HelpFormatter$OptionComparator", objectArray0);
      int int0 = 0;
      Options options0 = new Options();
      String string0 = "O;3";
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", true, "O;3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("A CloneNotSupportedException was thrown: ");
      assertEquals("A CloneNotSupportedException was thrown: ", helpFormatter0.getSyntaxPrefix());
  }
}
