* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: org.apache.commons.cli.HelpFormatter
* Starting Client-0
* Connecting to master process on port 21965
* Analyzing classpath: 
  - subjects/buggy-versions/Cli-33/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.cli.HelpFormatter
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1103
* Using seed 324182608
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 400 / 1103
[MASTER] 12:10:19.914 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I93 Branch 54 IF_ICMPNE L953 - false: 3280,2943,1337| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I279 Branch 38 IFEQ L828 - false: 314,0,0| Number of FF evals: 1168
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I121 Branch 30 IFNULL L789 - true: 103,0,0| Number of FF evals: 861
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I95 Branch 28 IFEQ L780 - false: 15,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;: I101 Branch 43 IF_ICMPNE L882 - true: 22,0,0| Number of FF evals: 1058
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getNewLine()Ljava/lang/String;: root-Branch: 457,0,0| Number of FF evals: 619
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V: I56 Branch 10 IFNULL L564 - true: 10,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printHelp(ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;Ljava/lang/String;)V: Line 434: 70,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I124 Branch 31 IFNE L789 - true: 1311,727,150| Number of FF evals: 5692
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOptionGroup(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/OptionGroup;)V: I4 Branch 14 IFNE L608 - true: 383,59,0| Number of FF evals: 2769
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I124 Branch 31 IFNE L789 - false: 1248,664,159| Number of FF evals: 5367
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getDescPadding()I: root-Branch: 355,0,0| Number of FF evals: 597
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I229 Branch 36 IF_ICMPGE L812 - false: 15,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setLongOptSeparator(Ljava/lang/String;)V: Line 297: 252,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I137 Branch 32 IFEQ L796 - false: 17,0,0| Number of FF evals: 353
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I67 Branch 24 IFNULL L660 - false: 1064,601,119| Number of FF evals: 5720
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setArgName(Ljava/lang/String;)V: root-Branch: 49,0,0| Number of FF evals: 105
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I45 Branch 22 IFEQ L657 - false: 1047,584,120| Number of FF evals: 5719
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I257 Branch 37 IFNULL L821 - true: 999,274,146| Number of FF evals: 3167
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I10 Branch 44 IF_ICMPEQ L922 - false: 430,0,0| Number of FF evals: 1293
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I82 Branch 25 IFNE L664 - false: 10,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I45 Branch 22 IFEQ L657 - true: 1012,549,126| Number of FF evals: 5521
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getArgName()Ljava/lang/String;: root-Branch: 49,0,0| Number of FF evals: 607
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setOptionComparator(Ljava/util/Comparator;)V: I3 Branch 1 IFNONNULL L350 - false: 50,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderWrappedText(Ljava/lang/StringBuffer;IILjava/lang/String;)Ljava/lang/StringBuffer;: I96 Branch 42 IF_ICMPLE L882 - true: 3515,3076,1703| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I121 Branch 30 IFNULL L789 - false: 1351,954,283| Number of FF evals: 5822
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V: I94 Branch 13 IFEQ L587 - false: 106,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I41 Branch 21 IFNULL L657 - false: 1100,761,203| Number of FF evals: 5971
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I41 Branch 21 IFNULL L657 - true: 88,0,0| Number of FF evals: 742
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setLongOptSeparator(Ljava/lang/String;)V: Line 298: 252,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I65 Branch 51 IF_ICMPEQ L939 - true: 2065,1837,662| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getWidth()I: root-Branch: 49,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I112 Branch 29 IFEQ L786 - false: 103,0,0| Number of FF evals: 1041
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getLeftPadding()I: root-Branch: 252,0,0| Number of FF evals: 327
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I25 Branch 47 IF_ICMPGT L922 - false: 14851,11933,7267| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I14 Branch 19 IFNULL L647 - true: 236,0,0| Number of FF evals: 1122
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I25 Branch 47 IF_ICMPGT L922 - true: 14851,11933,7389| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V: I62 Branch 11 IFLE L567 - false: 1181,844,26| Number of FF evals: 6594
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I175 Branch 34 IF_ICMPLE L802 - true: 195,0,0| Number of FF evals: 1668
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I3 Branch 18 IFNE L642 - false: 10,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOptionGroup(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/OptionGroup;)V: I59 Branch 17 IFNE L627 - true: 383,59,0| Number of FF evals: 2770
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setArgName(Ljava/lang/String;)V: Line 319: 49,0,0| Number of FF evals: 60
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setArgName(Ljava/lang/String;)V: Line 318: 49,0,0| Number of FF evals: 60
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I22 Branch 46 IF_ICMPEQ L922 - false: 14851,11933,7352| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printHelp(Ljava/io/PrintWriter;ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;IILjava/lang/String;Z)V: I78 Branch 8 IFLE L527 - true: 12,0,0| Number of FF evals: 703
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I68 Branch 52 IF_ICMPEQ L939 - true: 2065,1837,666| Number of FF evals: 12049
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I51 Branch 23 IFNONNULL L659 - false: 1250,787,234| Number of FF evals: 6711
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getWidth()I: Line 164: 49,0,0| Number of FF evals: 73
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printHelp(Ljava/io/PrintWriter;ILjava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;IILjava/lang/String;)V: Line 480: 112,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printHelp(Ljava/lang/String;Ljava/lang/String;Lorg/apache/commons/cli/Options;Ljava/lang/String;)V: Line 401: 4,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.rtrim(Ljava/lang/String;)Ljava/lang/String;: I3 Branch 55 IFNULL L980 - true: 594,0,0| Number of FF evals: 697
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOption(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/Option;Z)V: I38 Branch 20 IFEQ L657 - false: 88,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I13 Branch 45 IF_ICMPLE L922 - true: 430,0,0| Number of FF evals: 1063
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I152 Branch 33 IFNULL L797 - false: 1362,778,201| Number of FF evals: 5692
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.appendOptionGroup(Ljava/lang/StringBuffer;Lorg/apache/commons/cli/OptionGroup;)V: I47 Branch 16 IFEQ L621 - false: 1202,865,39| Number of FF evals: 6594
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.printUsage(Ljava/io/PrintWriter;ILjava/lang/String;Lorg/apache/commons/cli/Options;)V: I68 Branch 12 IFNE L567 - true: 1181,844,32| Number of FF evals: 6594
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.setLongOptSeparator(Ljava/lang/String;)V: root-Branch: 252,0,0| Number of FF evals: 248
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.rtrim(Ljava/lang/String;)Ljava/lang/String;: I19 Branch 57 IFLE L987 - true: 6,0,0| Number of FF evals: 953
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.renderOptions(Ljava/lang/StringBuffer;ILorg/apache/commons/cli/Options;II)Ljava/lang/StringBuffer;: I58 Branch 27 IFNONNULL L772 - false: 116,0,0| Number of FF evals: 592
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getLeftPadding()I: Line 184: 252,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getArgName()Ljava/lang/String;: Line 328: 49,0,0| Number of FF evals: 59
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getNewLine()Ljava/lang/String;: Line 244: 457,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.getDescPadding()I: Line 204: 355,0,0| Number of FF evals: 244
Number of times BBC is called, activated, and useful for org.apache.commons.cli.HelpFormatter.findWrapPos(Ljava/lang/String;II)I: I13 Branch 45 IF_ICMPLE L922 - false: 524,0,0| Number of FF evals: 961
* Search finished after 602s and 233 generations, 95421 statements, best individual has fitness: 114.0
* Minimizing test suite
[MASTER] 12:21:34.573 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 201
* Number of covered goals: 201
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 149
* Number of covered goals: 142
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 57
* Number of covered goals: 57
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 478
* Number of covered goals: 445
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 67%
* Total number of goals: 46
* Number of covered goals: 31
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 95%
* Total number of goals: 149
* Number of covered goals: 142
* Generated 134 tests with total length 1818
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:22:29.094 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.87495% of time used, but only 16/134 tests minimized), falling back to using all assertions
[MASTER] 12:22:37.435 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 12:22:55.611 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.808 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.849 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.890 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:55.928 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 12:22:56.069 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_143_tmp__ESTest.test0(HelpFormatter_143_tmp__ESTest.java:41)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:22:56.069 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
Options options0 = new Options();
OptionGroup optionGroup0 = new OptionGroup();
HelpFormatter helpFormatter1 = new HelpFormatter();
FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
helpFormatter1.rtrim("\n");
HelpFormatter helpFormatter2 = new HelpFormatter();
helpFormatter2.getArgName();
helpFormatter2.getOptionComparator();
StringBuffer stringBuffer0 = new StringBuffer("");
helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "");
FileDescriptor fileDescriptor0 = new FileDescriptor();
MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
mockFileOutputStream0.flush();
MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
PrintWriter printWriter0 = mockPrintWriter0.append('x');
helpFormatter2.printUsage(printWriter0, 74, "usage: ", options0);
helpFormatter2.printWrapped((PrintWriter) mockPrintWriter0, 74, 1, (String) null);

[MASTER] 12:23:03.901 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_185_tmp__ESTest.test0(HelpFormatter_185_tmp__ESTest.java:195)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:23:03.907 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);

MockFile mockFile0 = new MockFile("usage: ");
assertNotNull(mockFile0);

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(helpFormatter1);
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);

String string0 = helpFormatter1.rtrim("arg");
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(string0);
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals("arg", string0);
assertNotSame(helpFormatter1, helpFormatter0);

HelpFormatter helpFormatter2 = new HelpFormatter();
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertNotNull(helpFormatter2);
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter2.defaultLeftPad);

String string1 = helpFormatter1.getArgName();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertFalse(helpFormatter1.equals((Object)helpFormatter2));
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals("arg", string1);
assertNotSame(helpFormatter1, helpFormatter0);
assertNotSame(helpFormatter1, helpFormatter2);

Comparator comparator0 = helpFormatter0.getOptionComparator();
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertNotNull(comparator0);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotSame(helpFormatter0, helpFormatter1);
assertNotSame(helpFormatter0, helpFormatter2);

StringBuffer stringBuffer0 = new StringBuffer("-");
assertNotNull(stringBuffer0);
assertEquals(1, stringBuffer0.length());
assertEquals("-", stringBuffer0.toString());

StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 4290, 1, "^imD*(ydG4Nqo@]<R");
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertNotNull(stringBuffer1);
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(18, stringBuffer0.length());
assertEquals("-^imD*(ydG4Nqo@]<R", stringBuffer0.toString());
assertEquals(18, stringBuffer1.length());
assertEquals("-^imD*(ydG4Nqo@]<R", stringBuffer1.toString());
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotSame(helpFormatter0, helpFormatter1);
assertNotSame(helpFormatter0, helpFormatter2);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append('x');
assertNotNull(printWriter0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

Options options0 = new Options();
assertNotNull(options0);

OptionGroup optionGroup0 = new OptionGroup();
assertNotNull(optionGroup0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());

Options options1 = options0.addOptionGroup(optionGroup0);
assertNotNull(options1);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertSame(options0, options1);
assertSame(options1, options0);

Options options2 = options1.addOption("", "cmdLineSyntax not provided", true, "The option '");
assertNotNull(options2);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertSame(options2, options1);
assertSame(options2, options0);
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options1, options2);
assertSame(options1, options0);

Collection collection0 = options2.getOptionGroups();
assertNotNull(collection0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertSame(options2, options1);
assertSame(options2, options0);
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options1, options2);
assertSame(options1, options0);

Options options3 = options2.addOption("arg", true, "--");
assertNotNull(options3);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options0);
assertSame(options3, options1);
assertSame(options3, options2);
assertSame(options3, options0);
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options1, options3);
assertSame(options1, options2);
assertSame(options1, options0);

helpFormatter0.defaultArgName = "";
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("", helpFormatter0.getArgName());
assertEquals(" ", helpFormatter0.getLongOptSeparator());

Option option0 = new Option("", "\n", true, "x/fv%pw*JQhK)/Hy");
assertNotNull(option0);
assertNull(option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("x/fv%pw*JQhK)/Hy", option0.getDescription());
assertFalse(option0.hasArgs());
assertTrue(option0.hasArg());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasArgName());
assertFalse(option0.hasOptionalArg());
assertTrue(option0.hasLongOpt());
assertEquals("\n", option0.getLongOpt());
assertNull(option0.getValue());
assertEquals("", option0.getOpt());
assertFalse(option0.isRequired());
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);

Options options4 = options3.addOption(option0);
assertNotNull(options4);
assertNull(option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("x/fv%pw*JQhK)/Hy", option0.getDescription());
assertFalse(option0.hasArgs());
assertTrue(option0.hasArg());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasArgName());
assertFalse(option0.hasOptionalArg());
assertTrue(option0.hasLongOpt());
assertEquals("\n", option0.getLongOpt());
assertNull(option0.getValue());
assertEquals("", option0.getOpt());
assertFalse(option0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options2, options4);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options0);
assertSame(options3, options1);
assertSame(options3, options2);
assertSame(options3, options0);
assertSame(options3, options4);
assertSame(options4, options1);
assertSame(options4, options2);
assertSame(options4, options0);
assertSame(options4, options3);
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options4);
assertSame(options1, options3);
assertSame(options1, options2);
assertSame(options1, options4);
assertSame(options1, options0);

Options options5 = options4.addOptionGroup(optionGroup0);
assertNotNull(options5);
assertNull(option0.getArgName());
assertFalse(option0.hasValueSeparator());
assertEquals('\u0000', option0.getValueSeparator());
assertEquals("x/fv%pw*JQhK)/Hy", option0.getDescription());
assertFalse(option0.hasArgs());
assertTrue(option0.hasArg());
assertEquals(1, option0.getArgs());
assertFalse(option0.hasArgName());
assertFalse(option0.hasOptionalArg());
assertTrue(option0.hasLongOpt());
assertEquals("\n", option0.getLongOpt());
assertNull(option0.getValue());
assertEquals("", option0.getOpt());
assertFalse(option0.isRequired());
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());
assertEquals((-2), Option.UNLIMITED_VALUES);
assertEquals((-1), Option.UNINITIALIZED);
assertSame(options2, options4);
assertSame(options2, options5);
assertSame(options2, options1);
assertSame(options2, options3);
assertSame(options2, options0);
assertSame(options3, options1);
assertSame(options3, options2);
assertSame(options3, options0);
assertSame(options3, options4);
assertSame(options3, options5);
assertSame(options4, options1);
assertSame(options4, options2);
assertSame(options4, options0);
assertSame(options4, options3);
assertSame(options4, options5);
assertSame(options5, options1);
assertSame(options5, options2);
assertSame(options5, options0);
assertSame(options5, options4);
assertSame(options5, options3);
assertSame(options0, options2);
assertSame(options0, options1);
assertSame(options0, options3);
assertSame(options0, options4);
assertSame(options0, options5);
assertSame(options1, options3);
assertSame(options1, options2);
assertSame(options1, options4);
assertSame(options1, options0);
assertSame(options1, options5);

helpFormatter2.printUsage(printWriter0, 1, " ", options4);

[MASTER] 12:23:09.519 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.apache.commons.cli.HelpFormatter_196_tmp__ESTest.test0(HelpFormatter_196_tmp__ESTest.java:201)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 12:23:09.521 [logback-1] WARN  JUnitAnalyzer - Failing test:
 HelpFormatter helpFormatter0 = new HelpFormatter();
assertNotNull(helpFormatter0);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);

Options options0 = new Options();
assertNotNull(options0);

OptionGroup optionGroup0 = new OptionGroup();
assertNotNull(optionGroup0);
assertNull(optionGroup0.getSelected());
assertFalse(optionGroup0.isRequired());

HelpFormatter helpFormatter1 = new HelpFormatter();
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(helpFormatter1);
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
assertFalse(boolean0);

String string0 = helpFormatter1.rtrim("\n");
assertFalse(helpFormatter1.equals((Object)helpFormatter0));
assertNotNull(string0);
assertEquals("usage: ", helpFormatter1.getSyntaxPrefix());
assertEquals(3, helpFormatter1.getDescPadding());
assertEquals("arg", helpFormatter1.getArgName());
assertEquals("\n", helpFormatter1.getNewLine());
assertEquals(" ", helpFormatter1.getLongOptSeparator());
assertEquals(1, helpFormatter1.getLeftPadding());
assertEquals("-", helpFormatter1.getOptPrefix());
assertEquals(74, helpFormatter1.getWidth());
assertEquals("--", helpFormatter1.getLongOptPrefix());
assertEquals(74, helpFormatter1.defaultWidth);
assertEquals(1, helpFormatter1.defaultLeftPad);
assertEquals(3, helpFormatter1.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals("", string0);
assertNotSame(helpFormatter1, helpFormatter0);

HelpFormatter helpFormatter2 = new HelpFormatter();
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertNotNull(helpFormatter2);
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);

String string1 = helpFormatter2.getArgName();
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertFalse(string1.equals((Object)string0));
assertNotNull(string1);
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertEquals("arg", string1);
assertNotSame(helpFormatter2, helpFormatter1);
assertNotSame(helpFormatter2, helpFormatter0);

Comparator comparator0 = helpFormatter2.getOptionComparator();
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertNotNull(comparator0);
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(3, helpFormatter2.getDescPadding());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertNotSame(helpFormatter2, helpFormatter1);
assertNotSame(helpFormatter2, helpFormatter0);

StringBuffer stringBuffer0 = new StringBuffer("");
assertNotNull(stringBuffer0);
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());

StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "");
assertFalse(helpFormatter0.equals((Object)helpFormatter2));
assertFalse(helpFormatter0.equals((Object)helpFormatter1));
assertNotNull(stringBuffer1);
assertEquals(1, helpFormatter0.getLeftPadding());
assertEquals("-", helpFormatter0.getOptPrefix());
assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
assertEquals("--", helpFormatter0.getLongOptPrefix());
assertEquals(3, helpFormatter0.getDescPadding());
assertEquals(74, helpFormatter0.getWidth());
assertEquals("\n", helpFormatter0.getNewLine());
assertEquals("arg", helpFormatter0.getArgName());
assertEquals(" ", helpFormatter0.getLongOptSeparator());
assertEquals(0, stringBuffer0.length());
assertEquals("", stringBuffer0.toString());
assertEquals("", stringBuffer1.toString());
assertEquals(0, stringBuffer1.length());
assertEquals(3, helpFormatter0.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(1, helpFormatter0.defaultLeftPad);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(74, helpFormatter0.defaultWidth);
assertNotSame(helpFormatter0, helpFormatter2);
assertNotSame(helpFormatter0, helpFormatter1);
assertSame(stringBuffer0, stringBuffer1);
assertSame(stringBuffer1, stringBuffer0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

PrintWriter printWriter0 = mockPrintWriter0.append('x');
assertNotNull(printWriter0);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);

helpFormatter2.printUsage(printWriter0, 74, "usage: ", options0);
assertFalse(helpFormatter2.equals((Object)helpFormatter1));
assertFalse(helpFormatter2.equals((Object)helpFormatter0));
assertEquals("\n", helpFormatter2.getNewLine());
assertEquals("--", helpFormatter2.getLongOptPrefix());
assertEquals(1, helpFormatter2.getLeftPadding());
assertEquals(74, helpFormatter2.getWidth());
assertEquals("arg", helpFormatter2.getArgName());
assertEquals("-", helpFormatter2.getOptPrefix());
assertEquals("usage: ", helpFormatter2.getSyntaxPrefix());
assertEquals(" ", helpFormatter2.getLongOptSeparator());
assertEquals(3, helpFormatter2.getDescPadding());
assertFalse(fileDescriptor0.valid());
assertEquals(74, HelpFormatter.DEFAULT_WIDTH);
assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
assertEquals(3, helpFormatter2.defaultDescPad);
assertEquals(1, HelpFormatter.DEFAULT_LEFT_PAD);
assertEquals(1, helpFormatter2.defaultLeftPad);
assertEquals(74, helpFormatter2.defaultWidth);
assertNotSame(helpFormatter2, helpFormatter1);
assertNotSame(helpFormatter2, helpFormatter0);
assertSame(mockPrintWriter0, printWriter0);
assertSame(printWriter0, mockPrintWriter0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'HelpFormatter_ESTest' to results/Cli-33/org.apache.commons.cli.HelpFormatter/BBC-F0-100/tests/28
* Done!

* Computation finished
