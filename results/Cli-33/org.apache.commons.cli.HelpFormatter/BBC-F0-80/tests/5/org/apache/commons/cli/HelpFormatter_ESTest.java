/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:01:16 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "org.apache.commons.cli.ParseException";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.cli.ParseException");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1261, 749, "org.apache.commons.cli.ParseException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "arg", true, "arg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-201), options0, 3775, 696);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-13), (-13));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setDescPadding((-561));
      helpFormatter0.setArgName("");
      helpFormatter0.setLongOptPrefix("5:r ");
      helpFormatter0.getArgName();
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.defaultWidth = (-1449);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasOption(" ]");
      optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      int int0 = 818;
      helpFormatter0.getWidth();
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 818, "", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "usage: ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "--", false, "x^0PI4nep\"syIPjA");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "fWCY4=.7{BHlk]y]&Q", "x^0PI4nep\"syIPjA", options2, "fWCY4=.7{BHlk]y]&Q", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(925);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("a(9z");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      helpFormatter1.printOptions(printWriter0, 13, options0, 114, 13);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, "&", "", options0, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 116, (Options) null, 116, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "[ARG...]");
      Option option0 = new Option("", "!>7Doy> Cyhe(9#\"", true, (String) null);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "usage: ", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2344, "8K,?K%a4wZ", "8K,?K%a4wZ", options3, "8K,?K%a4wZ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-259);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      String string0 = "Illegal option name '";
      MockFile mockFile0 = new MockFile("Illegal option name '", "-");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = ".!\"\"0^f%+\\i'9";
      String string1 = "FpJ'Mjn(Zy,),1!>n";
      String string2 = "O\\\"9)pLg<";
      helpFormatter0.printHelp(1573, ".!\"\"0^f%+i'9", "FpJ'Mjn(Zy,),1!>n", options0, "O\"9)pLg<");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 1573, options0, 1942, 1942);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "arg");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      optionGroup0.setRequired(true);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "", options1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", false, "-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.findWrapPos("usage: ", (-1), 3);
      helpFormatter0.printHelp(3, " ", "arg", options0, "arg");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 1849;
      helpFormatter0.printHelp(1849, "Z%rtxvUi$!A^< h", "Z%rtxvUi$!A^< h", options0, "Z%rtxvUi$!A^< h");
      int int1 = 14;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 14, "Z%rtxvUi$!A^< h", "|(6pwDmKwc", options0, 1849, 14, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.hasShortOption("-");
      options0.hasShortOption((String) null);
      helpFormatter0.printHelp(58, "#CJ0W)8H4", ">7d%_Z-5u8", options0, "");
      options0.toString();
      options0.helpOptions();
      helpFormatter0.printHelp("gt\"x'Iau!u&i6]", "", options0, "cmdLineSyntax not provided", true);
      helpFormatter0.findWrapPos(" | ", (-2), (-2));
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("org.apache.commons.cli.Option", 1739, (-2908));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option("arg", " ");
      OptionGroup optionGroup2 = optionGroup1.addOption(option1);
      OptionGroup optionGroup3 = optionGroup2.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup3);
      String string0 = "P8I{/&Tdso,d;g=";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-2), "P8I{/&Tdso,d;g=", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\"gCI#m%0p0y)");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("-F<7O");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = options0.addOptionGroup(optionGroup0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 4, "-F<7O", "org.apache.commons.cli.HelpFormatter", options2, 47, 1938, "usage: ", true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, "arg", options1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "?Y{8<'Y@*5O7TH6", "arg", options0, 3, 1, "\n", true);
      helpFormatter0.printHelp(4, "org.apache.commons.cli.Option", " ", options1, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter2.renderWrappedText(stringBuffer0, 74, 1166, "D C");
      StringBuffer stringBuffer2 = helpFormatter0.renderOptions(stringBuffer1, 0, options0, 74, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.renderOptions(stringBuffer2, 74, options1, 92, 672);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      Options options2 = options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("+}j35[L4");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix("7YKdC!lq");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "", options2, (String) null, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = 744;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2), options1, 744, 17);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "?Y{8<'Y@*5O7TH6", "arg", options0, 3, 1, "\n", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-72), "", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("6^A[ ", options0, true);
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp("   ", "\n", options0, "Ym2*6kj)$4Uo&ssC1+j", true);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      Options options2 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile(",");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options3 = new Options();
      helpFormatter0.printHelp("\n", options3);
      helpFormatter2.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "a?.+^> B-OX(e)mP");
      helpFormatter0.setNewLine("AtgS");
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      helpFormatter0.createPadding(0);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("--", "z3DS?Nu\nF", options0, "Qi{JE*XBF*P", false);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile((File) null, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = new Locale("AtgS", "bCdU]|&PQO");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "5c0n4ss.8|TZt]Q)wd", (Object[]) null);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "NaJ+hM!$[]-1OY9$}", options2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "a?.+^> B-OX(e)mP");
      helpFormatter0.setNewLine("AtgS");
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption("AtgS", "arg", true, "AtgS");
      helpFormatter0.setLongOptPrefix("a?.+^> B-OX(e)mP");
      helpFormatter0.getLongOptSeparator();
      Options options3 = new Options();
      options2.addOption("", true, "iGp7Ol>TxYmX`Q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("a?.+^> B-OX(e)mP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iGp7Ol>TxYmX`Q");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "L(4tUj!bJ+x");
      helpFormatter0.printHelp(printWriter0, 2, "5sleKL6p", (String) null, options2, 2052, 2052, (String) null, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 299, options1, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "a?.+^> B-OX(e)mP");
      helpFormatter0.setNewLine("AtgS");
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      Options options1 = options0.addOption("AtgS", "arg", true, "AtgS");
      helpFormatter0.setLongOptPrefix("a?.+^> B-OX(e)mP");
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      options1.addOption("", true, "iGp7Ol>TxYmX`Q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("5sleKL6p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iGp7Ol>TxYmX`Q");
      mockPrintWriter0.append((CharSequence) "iGp7Ol>TxYmX`Q");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "AtgS", "", options1, (-1518), (-1), (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "a?.+^> B-OX(e)mP");
      helpFormatter0.setNewLine("AtgS");
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      Options options1 = options0.addOption("AtgS", "arg", true, "AtgS");
      helpFormatter0.setLongOptPrefix("a?.+^> B-OX(e)mP");
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      Options options3 = options1.addOption("", true, "iGp7Ol>TxYmX`Q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("5sleKL6p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iGp7Ol>TxYmX`Q");
      mockPrintWriter0.append((CharSequence) "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1920), "JTY#[=$[", "au75NB5$j$&9", options3, (-1649), 2, "a?.+^> B-OX(e)mP", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "a?.+^> B-OX(e)mP");
      helpFormatter0.setNewLine("AtgS");
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      options0.addOption("AtgS", "arg", true, "AtgS");
      helpFormatter0.setLongOptPrefix("a?.+^> B-OX(e)mP");
      helpFormatter0.getLongOptSeparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.setSyntaxPrefix("P[x2\"+>Y^^*?jPxS^U");
      helpFormatter0.getLongOptSeparator();
      Options options1 = new Options();
      options0.addOption("AtgS", true, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("Cannot add value, list full.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 49, "a?.+^> B-OX(e)mP", "AtgS", options1, 0, (-1), "DkVI?.oN1xJbaT3", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("6^A[ ", options0, true);
      helpFormatter0.createPadding(3);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter1.printHelp("   ", "\n", options0, "Ym2*6kj)$4Uo&ssC1+j", true);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      Options options2 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile(",");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 4111, "--", "I:e%", options0, 1, 74, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "org.apache.commons.cli.Option", "8k", options0, 18, 4, "[ Options: [ short ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(byteArrayOutputStream0, false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "", options0);
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter2);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter3, 74, "\n", options0);
      helpFormatter2.printHelp(3, " ", "--", options0, "--");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", true, "a?.+^> B-OX(e)mP");
      helpFormatter0.setNewLine("AtgS");
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      Options options1 = options0.addOption("AtgS", "arg", true, "AtgS");
      helpFormatter0.setLongOptPrefix("a?.+^> B-OX(e)mP");
      helpFormatter0.getLongOptSeparator();
      Options options2 = new Options();
      options1.addOption("", true, "iGp7Ol>TxYmX`Q");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("5sleKL6p");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iGp7Ol>TxYmX`Q");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "L(4tUj!bJ+x");
      helpFormatter0.printHelp(printWriter0, 2, "5sleKL6p", (String) null, options1, 2052, 2052, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 841, (-2257), "");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      options0.getOptionGroups();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("+}j35[L4");
      helpFormatter0.setSyntaxPrefix("7YKdC!q");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "+}j35[L4", options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.setDescription((String) null);
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      options0.getOptionGroups();
      helpFormatter0.setSyntaxPrefix("&)Y 1h5RKj6Ny");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("/m_,H ck-l", (String) null, options1, " :: ", false);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = null;
      int int0 = (-2107);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "_Q", options0, "_Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(string0, "", options0, "p", false);
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      helpFormatter1.getNewLine();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
      // Undeclared exception!
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "", options0, 74, 1, "--", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(string0, "", options0, "p", false);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Option option0 = new Option("", "arg", false, "");
      options1.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 3, "\n", options1);
      helpFormatter0.findWrapPos("83_Eu(C<3 ,<B", 103, 1483);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(string0, "", options0, "p", false);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      mockPrintWriter1.checkError();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 3, "\n", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "-");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 4111, "-", "-", options0, 3, 1, " ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      stringWriter1.write("/-\"Y-SDbBx4HbfBlb5@", 3, 3);
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "\n");
      options1.hasOption("\n");
      MockFile mockFile0 = new MockFile("/-\"Y-SDbBx4HbfBlb5@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-932), "/-\"Y-SDbBx4HbfBlb5@", "L(4tUj!bJ+x", options0, 74, 1, "\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.setLongOptPrefix("a(9z");
      Options options0 = new Options();
      String string0 = "p<XD]H[l";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-285), "(tx{9vhZvQP", "a(9z", options0, "p<XD]H[l", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "_";
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 31, options0, 31, 1613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      stringWriter1.write("/-\"Y-SDbBx4HbfBlb5@", 3, 3);
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.getLongOptSeparator();
      String string0 = "";
      Options options0 = new Options();
      String string1 = "(}";
      Options options1 = options0.addOption("", false, "(}");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions((PrintWriter) null, 3, options0, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "org.apache.commons.cli.Option", "-", options0, 18, 4, "[ Options: [ short ");
      Options options1 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter0.setNewLine("-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter1;
      PrintWriter printWriter1 = printWriter0.format("", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter1, (-689), (String) null, "-", options0, 413, 320, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      stringWriter1.write("/-\"Y-SDbBx4HbfBlb5@", 3, 3);
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "(}");
      options1.hasOption("\n");
      MockFile mockFile0 = new MockFile(">", "]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Locale locale0 = Locale.KOREAN;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "usage: ", (Object[]) null);
      helpFormatter1.printUsage(printWriter0, 74, "Illegal option name '");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 13, "", "(}", options1, 74, 1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, 103, "");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 103, "");
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(string0, "", options0, "p", false);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 3, "\n", options1);
      helpFormatter0.findWrapPos("83_Eu(C<3 ,<B", 103, 1483);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp(810, "*xh", "", options0, "*xh");
      helpFormatter0.renderOptions((StringBuffer) null, 2890, options0, 810, 2890);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-1906), 30, "*xh");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", (String) null, options0, "org.apache.commons.cli.Option", false);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", options0);
      helpFormatter0.getSyntaxPrefix();
      Comparator comparator0 = helpFormatter1.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "--";
      objectArray0[2] = (Object) helpFormatter2;
      objectArray0[3] = (Object) comparator0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "<", options1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      Collection collection0 = new LinkedList<Object>();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("+}j35[L4");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix("7YKdC!lq");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp(" ", "+}j35[L4", options0, (String) null, true);
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "#^-j5Q5ku";
      objectArray0[1] = (Object) "#^-j5Q5ku";
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      Options options2 = options1.addOption((String) null, true, "   ");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("8k", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      stringWriter1.write("/-\"Y-SDbBx4HbfBlb5@", 3, 3);
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "(}");
      options1.hasOption("\n");
      helpFormatter1.printHelp("-", "", options1, "zpT97i?e]", false);
      helpFormatter1.getWidth();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("<", "<", options0, string0, true);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-72), "\n", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      options0.addOption(option0);
      options0.getOptionGroups();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("+}j35[L4");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "line.separator", "   ", options0, "UF+!q8[/NH+s)Sc:y9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp("<", "<", options0, string0, true);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter0.printHelp("--", options0);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("<");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 198;
      String string0 = "4>7%)";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(198, "4>7%)", "cmdLineSyntax not provided", (Options) null, "yBj:4=(j\"3ep%Y;t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      String string0 = helpFormatter0.defaultSyntaxPrefix;
      helpFormatter0.getLongOptPrefix();
      Options options1 = options0.addOption("nu3Gjf", "nu3Gjf", false, "--");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("L(7?J|OG<A$L");
      helpFormatter0.setArgName("zfT{");
      helpFormatter0.setSyntaxPrefix("usage: ");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("nu3Gjf", "+}j35[L4", options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "j0z8P,#FR#wu8J");
      Option option0 = new Option("", "arg");
      Options options2 = options1.addOption(option0);
      options2.getOption("3N$D893/}h 6up9S_)q");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(80, (String) null, "org.apache.commons.cli.Options", options2, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      helpFormatter0.setDescPadding((-1));
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.setDescPadding(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null, 3, 3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 1, "usage: ", "=aewWW'<3u3s)-1:2P", options1, 1907, 3, "   ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("+}j35[L4");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix("7YKdC!lq");
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('[');
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "org.apache.commons.cli.HelpFormatter$1", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "org.apache.commons.cli.Option", "8k", options0, 18, 4, "[ Options: [ short ");
      Options options1 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter0.setNewLine("-");
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      helpFormatter0.setDescPadding((-1));
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options3 = options1.addOptionGroup(optionGroup0);
      Options options4 = options3.addOption((String) null, false, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", options4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      Option option1 = new Option("", true, "");
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(101, "   ", "3T=%[[k4u6Fuu", options0, "j?D<eDO&=v=TZ");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "org.apache.commons.cli.Option", "8k", options0, 1325, 4, "[ Options: [ short ");
      Options options1 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter0.setNewLine("-");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("[ Options: [ short ", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1, "arg");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 107, options0, 33, 3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", "arg");
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      Options options2 = options0.addOption(option0);
      options2.getOptionGroups();
      options0.addOption("", (String) null, true, "");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("--");
      helpFormatter1.setSyntaxPrefix("f(Ml3N:%/2RZ}:");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("-", "Illegal option name '", options1, "IBbgTi%u6Ll;+o", true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", options0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding((-255));
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "}a4+^'-hyp>", (String) null, options2, (-2), 44, (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      String string0 = null;
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      options0.addOption(option0);
      option0.getValues();
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, "usage: ", true, "arg");
      options1.getOption("N9Iz76.[");
      helpFormatter0.setLongOptPrefix((String) null);
      Options options2 = new Options();
      StringBuffer stringBuffer0 = new StringBuffer(1118);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, options1, (-3622), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.printHelp(string0, "", options0, "p", false);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = options0.addOption("arg", false, "usage: ");
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options1);
      helpFormatter0.getSyntaxPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptionComparator();
      Option option0 = new Option("", "arg", false, "");
      options1.addOption(option0);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
      helpFormatter1.getNewLine();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(stringWriter0);
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 3, "\n", options1);
      helpFormatter3.printHelp(3897, string0, "", options1, (String) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "   ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getDescPadding();
      helpFormatter0.setDescPadding(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options1.addOption("]", true, "u;YKz(~$L6?'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      helpFormatter0.getLongOptPrefix();
      options0.addOption("NO_ARGS_ALLOWED", false, "0S1pO 8slOzrR");
      helpFormatter0.printHelp("<", "org.apache.commons.cli.Option", options0, "--", false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-3722);
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "\n", (-3722), 39);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -3722, end 39, s.length() 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      stringWriter1.getBuffer();
      stringWriter1.write("/-\"Y-SDbBx4HbfBlb5@", 3, 3);
      helpFormatter0.rtrim(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setArgName("-");
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter1.getLongOptSeparator();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "k}5");
      options1.hasOption("\n");
      helpFormatter1.printHelp("-", "", options1, "zpT97i?e]", false);
      helpFormatter1.getWidth();
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      File file0 = MockFile.createTempFile("[ option: ", "--", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      helpFormatter0.printWrapped(printWriter0, 3, "[ option: ");
      helpFormatter0.setDescPadding(74);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "4kbFETH.2b#a?XnH";
      // Undeclared exception!
      try { 
        options1.addOption("4kbFETH.2b#a?XnH", "'", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '4kbFETH.2b#a?XnH' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", options0);
      helpFormatter0.getWidth();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding((-255));
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      options1.addOptionGroup(optionGroup0);
      options1.addOption("", false, " | ");
      helpFormatter0.printUsage(printWriter0, 3, "{", options2);
      helpFormatter0.printUsage(printWriter0, 1006, "[");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("   ", "k;bFP6:OfODg@AB", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      Options options0 = new Options();
      options0.addOption(option0);
      options0.getOptionGroups();
      Options options1 = options0.addOption((String) null, "usage: ", true, "arg");
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.rtrim("+}j35[L4");
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix("7YKdC!lq");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", "", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      mockPrintWriter0.println(0.0F);
      helpFormatter0.printUsage(printWriter0, 1727, "[");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("arg");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "org.apache.commons.cli.Option", "8k", options0, 18, 4, "[ Options: [ short ");
      Options options1 = new Options();
      options0.helpOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter0.setNewLine("-");
      Options options2 = options0.addOption("", "arg", true, (String) null);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 4, "", " ", options2, 1383, 0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", options0);
      helpFormatter0.getWidth();
      String string0 = "[";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      mockPrintWriter0.append('$');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 4, "#^-j5Q5ku");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding((-276));
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      String string1 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]");
      // Undeclared exception!
      try { 
        options0.addOption("--", "8]OF$dbSoC'?ts1.q", false, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", options0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("A+~6gxN]{KiKy?M/");
      helpFormatter0.createPadding(74);
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp("A+~6gxN]{KiKy?M/", options1);
      options1.hasLongOption("A+~6gxN]{KiKy?M/");
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", "Cq@Ip7R3<pCdMAfZ", options1, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4214));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringWriter stringWriter0 = new StringWriter(3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = 457;
      stringWriter1.write("/-\"Y-SDbBx4HbfBlb5@", 3, 3);
      Options options0 = new Options();
      int int1 = 20;
      helpFormatter0.renderOptions(stringBuffer0, 457, options0, 20, 20);
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 20, "[Y}5'", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("arg", true, "   ");
      helpFormatter0.setNewLine((String) null);
      option0.toString();
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      options0.getOptionGroups();
      helpFormatter0.setDescPadding((-1));
      Options options2 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      Options options3 = options1.addOptionGroup(optionGroup0);
      options3.addOption((String) null, false, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, (-1), (String) null, options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      int int0 = 1483;
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("<", "<", options0, string0, false);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.append((CharSequence) "--", 1, (-190));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end -190, s.length() 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("btp", options0, true);
      helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "--", options0, " ", true);
      StringWriter stringWriter0 = new StringWriter();
      Options options1 = new Options();
      helpFormatter1.printHelp("arg", options1);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getOptionComparator();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null, options0);
      helpFormatter1.getNewLine();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-5218), 1, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "";
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1006, ":KGs p?=U~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, true);
      int int0 = 1483;
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", options0);
      helpFormatter0.getWidth();
      String string0 = "A+~6gxN]{KiKy?M/";
      helpFormatter0.setLongOptPrefix("A+~6gxN]{KiKy?M/");
      helpFormatter0.createPadding(74);
      Options options1 = new Options();
      helpFormatter0.printHelp(31, "\"vo4XKQ", "8]OF$dbSoC'?ts1.q", options1, "\"vo4XKQ", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-990), "8]OF$dbSoC'?ts1.q", "'Yy~rq/nuP2P_hbW\"~", options0, (-990), 74, "o%P4(w:/DJ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      helpFormatter0.printHelp(" ] [ long ", options1, false);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getOptPrefix();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setOptPrefix("");
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[ARG...]";
      helpFormatter0.defaultNewLine = "[ARG...]";
      int int0 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9@&L'Ud;mH");
      mockPrintWriter0.println('\\');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) helpFormatter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) "[ARG...]";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) helpFormatter0;
      objectArray0[7] = (Object) "9@&L'Ud;mH";
      mockPrintWriter0.format("-", objectArray0);
      mockPrintWriter0.write("9@&L'Ud;mH", 1, 0);
      helpFormatter0.setLeftPadding(908);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "9@&L'Ud;mH");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = null;
      int int0 = 0;
      Options options0 = new Options();
      boolean boolean0 = true;
      Option option0 = new Option("arg", true, "   ");
      options0.addOption(option0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "roJs'u%^Mm4}", "   ", options0, "   ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", options0);
      helpFormatter0.getWidth();
      helpFormatter0.setLongOptPrefix("A+~6gxN]{KiKy?M/");
      helpFormatter0.createPadding(74);
      Options options1 = new Options();
      options1.helpOptions();
      helpFormatter0.printHelp("A+~6gxN]{KiKy?M/", options1);
      options1.hasLongOption("A+~6gxN]{KiKy?M/");
      helpFormatter0.printHelp("8]OF$dbSoC'?ts1.q", "Cq@Ip7R3<pCdMAfZ", options1, "");
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-4214));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1385), (-1385), "'+>9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-449);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-449));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.append('C');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter1, (-2339), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "org.apache.commons.cli.HelpFormatter");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(10, "@ym|]<}qiZ0Tb#d|", "--", options0, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1260, 24, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("   ");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.getChannel();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 604, (-519), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[");
      PrintWriter printWriter0 = mockPrintWriter0.append('$');
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "[");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 329;
      String string0 = "`5J@QUwO!";
      Options options0 = null;
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";S");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "`5J@QUwO!", 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-4420), "+z:*Fq/uN");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$OptionComparator");
      assertEquals("org.apache.commons.cli.HelpFormatter$OptionComparator", helpFormatter0.getNewLine());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dJFR[243'=@IM";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "dJFR[243'=@IM";
      helpFormatter0.setNewLine("dJFR[243'=@IM");
      helpFormatter0.setSyntaxPrefix("dJFR[243'=@IM");
      helpFormatter0.setWidth(1017);
      String string1 = ";|OGGt\"z_<eUtd/^Xz";
      String string2 = "";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string3 = "0t^";
      // Undeclared exception!
      try { 
        options0.addOption(" ] [ long ", true, "0t^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ] [ long ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, (String) null, "q@ue`fnB^j$&", options0, "q@ue`fnB^j$&", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "'y%psnp00";
      helpFormatter0.getArgName();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0, false);
      int int0 = 1483;
      String string0 = helpFormatter0.createPadding(1483);
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, string0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yOa%Z/)6T6}9M";
      helpFormatter0.defaultOptPrefix = "yOa%Z/)6T6}9M";
      helpFormatter0.setSyntaxPrefix("[");
      helpFormatter0.setLongOptPrefix("9l^0+");
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setArgName("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = null;
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.commons.cli.Option");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringWriter stringWriter0 = new StringWriter(460);
      helpFormatter0.setOptionComparator((Comparator) null);
      stringWriter0.append((CharSequence) "-");
      stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter0.write("/-\"Y-SDbBx4HbfBlb5@", 31, (-1455));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "The option '";
      helpFormatter0.defaultSyntaxPrefix = "The option '";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(9);
      String string0 = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      String string1 = "8)we5Gm1";
      options0.addOption("arg", " ", false, "8)we5Gm1");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("[", false, "Noaa;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = helpFormatter0.getSyntaxPrefix();
      assertEquals("usage: ", string0);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals(1, helpFormatter0.defaultLeftPad);
  }
}
