/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:05:37 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-795));
      helpFormatter0.getLeftPadding();
      helpFormatter0.findWrapPos("", 2, 112);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-2341);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", "\n", options0, "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(" ", "", options0, "D");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "D";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf("arg", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 74, "An_K\"b", "", options0, (-127), 1, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-3848));
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      int int0 = (-800);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-800));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-2178));
      Options options1 = options0.addOption("arg", "arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("o=|f", options1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "e{]OC(pX wOl%]";
      String string0 = null;
      helpFormatter0.rtrim((String) null);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("qokMY&&", "org.apache.commons.cli.HelpFormatter", (Options) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 2085;
      String string0 = "]";
      Options options0 = null;
      int int1 = (-185);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setDescPadding((-185));
      helpFormatter0.setOptPrefix("]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(2085, "]", "]", (Options) null, "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "arg");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = (-1030);
      helpFormatter0.setLeftPadding(224);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getWidth();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-505));
      boolean boolean0 = true;
      options0.addOption("arg", "arg", true, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "--", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = new Options();
      Options options2 = options0.addOptionGroup(optionGroup1);
      options2.addOption((String) null, false, (String) null);
      String string0 = "arg";
      options2.addOption("", (String) null, false, "");
      options1.addOptionGroup(optionGroup1);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", "-");
      options1.addOption(option0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 2, options1, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.CHINESE;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.toString();
      Option option0 = new Option("", "--", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options1);
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      options0.addOption("", "<", true, "}SUneuU^-9k");
      helpFormatter0.printHelp("<", "}SUneuU^-9k", options0, "B");
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 41, options0, 10, 33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      mockPrintWriter0.println((float) 1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      Locale locale0 = Locale.US;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.lookupTag(linkedList0, set0);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "ln$X{K^YO<EC", objectArray0);
      int int0 = 4;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 4, 47, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 3;
      Options options1 = new Options();
      String string0 = "[ Options: [ short ";
      MockFile mockFile0 = new MockFile("[ Options: [ short ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1299), "[ Options: [ short ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Option option0 = new Option((String) null, "mK<.pvi_:", false, " ");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", "--", false, "arg");
      options3.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) null, 3, "J", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "--", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "0+8c6bCSJu]$,+9F5", options1);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-221), 64, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3100, "usage: ", "", options0, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter1.printHelp("usage: ", "1,", options0, "org.apache.commons.cli.AlreadySelectedException");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "usage: ");
      int int0 = (-614);
      helpFormatter1.defaultSyntaxPrefix = "--";
      int int1 = 3348;
      // Undeclared exception!
      helpFormatter1.printHelp(1, "usage: ", "", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "-", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, (String) null, options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      int int0 = 3;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "";
      String string1 = "JIEM~VJS?.K";
      Option option0 = new Option("arg", "JIEM~VJS?.K", false, "usage: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-221), "JIEM~VJS?.K", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 9, options0, 1555, 9);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      StringBuffer stringBuffer0 = new StringBuffer();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuffer0);
      helpFormatter0.printHelp(printWriter0, 40, "LAW0bdYKDdc+", "8)v", options0, 10, 1024, (String) null, true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 10, 2708);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.US;
      Options options1 = new Options();
      Options options2 = new Options();
      Options options3 = options2.addOption("", "", true, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = (-221);
      String string0 = "]";
      int int1 = 3;
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "--", true, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "0+8c6bCSJu]$,+9F5", options4);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2, "i9m'M(J09", "*bz,!F=8zi29", options3, (-221), 2, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("]");
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      options0.addOption((String) null, "--", false, "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 117;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 117, "]", "]", options0, 1160, 0, "Os", true);
      helpFormatter0.findWrapPos("\"((]ZR;S~-", 103, 727);
      helpFormatter0.getLongOptPrefix();
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Options options0 = new Options();
      options0.addOption("", "arg", true, "-");
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '2';
      charArray0[2] = 'B';
      charArray0[3] = ',';
      charArray0[4] = 'w';
      charArray0[5] = '6';
      charArray0[6] = '2';
      charArray0[7] = '\'';
      mockPrintStream0.println(charArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      mockPrintWriter0.print((double) 74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 119, "", options0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(69, "arg", "arg", options0, "-");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, " ", options0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      Options options1 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter2.printHelp(41, " ", "--", options0, "org.apache.commons.cli.Option");
      helpFormatter0.getOptPrefix();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "\n", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 650;
      helpFormatter1.printHelp(650, "A!$Z'.y8kP+Y{]|r", "--", options0, " | ");
      helpFormatter1.printHelp("--", "--", options0, "6.Dg");
      Options options1 = options0.addOption((String) null, "OfV;8'}#|x8", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "-", options1, "j{", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("\n", "The option '", options0, "");
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter2.createPadding((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(1230, "--", "b^0KjT|4DY4]_+N", options0, "rDOhV^*Bv4");
      helpFormatter0.printHelp("[ option: ", "arg", options0, "&=");
      Options options1 = options0.addOption("", " ", false, "(&mf~$b:$`J%B8");
      helpFormatter0.printHelp("usage: ", "-", options1, "\n", true);
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 45, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setLongOptSeparator("'tqgRoYO$~");
      helpFormatter0.setLongOptPrefix("A\"!6/ Y$ikJn9");
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("arg", "arg");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.defaultWidth = 53;
      mockFile0.setWritable(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "k|n/# T", " ] [ long ", (Options) null, 15, 3, "bJlBnNemCGWy];j5FoC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "", false, "\u0003GsPS_o:Kj;");
      Options options2 = options0.addOption(option0);
      options2.hasLongOption("\n");
      OptionGroup optionGroup1 = new OptionGroup();
      optionGroup1.setRequired(false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "`DcK%Qd-L_G1Lc", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.renderWrappedText(stringBuffer0, 1, 1, "");
      helpFormatter2.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.optionComparator = null;
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getOptionComparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", (String) null, options0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, (String) null);
      helpFormatter0.printHelp(3081, "2-*O~EcE@[g^p%", "2-*O~EcE@[g^p%", options2, "X/#9bhow(}ii)p;yN");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3081, "_&QcY+1{Y&ed\"VY7\"", "   ", options2, 3, 39, "' was specified but an option from this group ", true);
      int int0 = helpFormatter0.defaultLeftPad;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", " | ", false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasLongOption("--");
      optionGroup0.setRequired(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("9", "1>u.;)87", options1, ";nZ&");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 31, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.hasLongOption("\n");
      optionGroup0.setRequired(false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", "`Oac\"l/n", options0, "' contains an illegal character : '");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "./iF<Rj`|lDa;',b41");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup0.setRequired(false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1491, (String) null, "--", (Options) null, 78, 18, " ] [ long ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3081, "usage: ", "2-*O~EcE@[g^p%", options1, "org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options2 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = (-46);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1634), "usage: ", "^4|z'<k", options0, (-46), (-1133), "#|(\"i]4");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("s,z^;_hC>3#D+};/", "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "--");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "s,z^;_hC>3#D+};/";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      objectArray0[4] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("qprq!U^<}$^Z4x@z`3", objectArray0);
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 254, "A)VkfaL+kW _YTyi", "", options0, 274, 10, "A)VkfaL+kW _YTyi");
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(254);
      StringBuffer stringBuffer1 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 614, 2950, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 614, "--", "A)VkfaL+kW _YTyi", (Options) null, 3, (-697), (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      int int0 = 39;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "`Oac\"l/n");
      String string0 = "*R[FJ9";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 39, "`Oac\"l/n", "*R[FJ9", options0, 2383, (-156), "?S5[0@:7", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      mockPrintWriter0.print(true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      helpFormatter0.defaultWidth = 1081;
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, (-2654), "f^'H{\"7", "4-DPYa38S$J", options0, 99, (-2654), "f^'H{\"7", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 99, "`Oac\"l/n", "", options1, 99, 641, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3081, "usage: ", "2-*O~EcE@[g^p%", options1, "org.apache.commons.cli.AlreadySelectedException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 12, "t=[`PtW$oZB40~", "-", options0, 12, 39, "\n", false);
      helpFormatter0.findWrapPos("$l?!~n%V<", 1, 1);
      helpFormatter1.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = true;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(31, "-", "usage: ", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      optionGroup0.setRequired(false);
      Options options0 = new Options();
      helpFormatter1.printHelp("arg", "", options0, "");
      helpFormatter1.rtrim(" ");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", true, "7,;");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "", options0, "arg");
      int int0 = 37;
      StringBuffer stringBuffer0 = new StringBuffer(37);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1055), (-1055), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = (-1797);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 74, (-1797));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("s,z^;_hC>3#D+};/", "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(" ", objectArray0);
      byteArrayOutputStream0.writeTo(printStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      int int0 = 254;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "", options0, 1, 254, "A)VkfaL+kW _YTyi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.append('3');
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "usage: ", "", options0, ")-YseZZ/5'$!q~Z");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(10, "usage: ", ")-YseZZ/5'$!q~Z", options0, "org.apache.commons.cli.HelpFormatter$1", true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3081, "usage: ", "2-*O~EcE@[g^p%", options1, "org.apache.commons.cli.AlreadySelectedException");
      Options options2 = new Options();
      optionGroup0.setRequired(false);
      helpFormatter1.printHelp("usage: ", "", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer(4636);
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.defaultDescPad = (-476);
      helpFormatter1.getLongOptPrefix();
      helpFormatter1.getArgName();
      MockFile mockFile0 = new MockFile("OQIga6el2rnBS", "=Y]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, (-183), options1, 1458, 1458);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2165), 13, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", false, "arg");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      options1.getMatchingOptions("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "org.apache.commons.cli.AlreadySelectedException", "", options0, ".u");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) null, 1, "");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "--";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "line.separator", options0, 1, 1072, "", false);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`Oac\"l/n";
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "CVzp+");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 284, options1, 284, 284);
      stringBuffer1.insert(3, 664);
      stringBuffer0.append("usage: ");
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 284, 6, "Q:IvsCUR]!zl");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer2, 325, 74, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "OlDq{$4yNehFA?Q");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-2483), (-2483), "Q:IvsCUR]!zl");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "e66+", false, "e66+");
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '=';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      printWriter0.println(charArray0);
      helpFormatter0.printOptions(printWriter0, 3, options1, 3, 1204);
      StringBuffer stringBuffer0 = new StringBuffer(305);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1386), options1, 64, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "LZ]B,.if1df&", "LZ]B,.if1df&", options0, 102, 3, "!gSM#e7n; hG^q0P@", false);
      helpFormatter0.findWrapPos("!gSM#e7n; hG^q0P@", 116, 3);
      helpFormatter0.printHelp(3, ":=*PGWv`;(l", ">", options0, "`Oac\"l/n");
      helpFormatter0.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      locale0.getDisplayCountry();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      printWriter0.print(true);
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "LZ]B,.if1df&", "LZ]B,.if1df&", options0, 102, 3, "!gSM#e7n; hG^q0P@", false);
      helpFormatter0.findWrapPos("!gSM#e7n; hG^q0P@", 116, 3);
      helpFormatter0.printHelp(3, ":=*PGWv`;(l", "", options0, "`Oac\"l/n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp("--", "!gSM#e7n; hG^q0P@", options0, "", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "`Oac\"l/n";
      objectArray0[5] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "LZ]B,.if1df&", "!gSM#e7n; hG^q0P@", options1, 87, 2616, "", false);
      helpFormatter0.findWrapPos("{f-dm/cFi*|M/w", 87, 10);
      helpFormatter0.printHelp(2, ":=*PGWv`;(l", ":=*PGWv`;(l", options1, "");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Options options0 = new Options();
      helpFormatter0.printHelp(printWriter0, 3, "LZ]B,.if1df&", "LZ]B,.if1df&", options0, 102, 3, "!gSM#e7n; hG^q0P@", false);
      helpFormatter0.findWrapPos("!gSM#e7n; hG^q0P@", 116, 3);
      helpFormatter0.printHelp(3, ":=*PGWv`;(l", ">", options0, "`Oac\"l/n");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultArgName = "";
      mockPrintWriter0.print("NAlWi4");
      helpFormatter0.setOptionComparator((Comparator) null);
      StringWriter stringWriter0 = new StringWriter(17);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Options options0 = new Options();
      options0.getMatchingOptions((String) null);
      helpFormatter0.renderOptions(stringBuffer0, 17, options0, 17, 12);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("CVzp+", "Q:IvsCUR]!zl", options1, "CVzp+");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
      helpFormatter0.setLeftPadding(13);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "CVzp+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      options2.hasLongOption((String) null);
      optionGroup0.setRequired(true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "./iF<Rj`|lDa;',b41", options2, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, (String) null, "arg", options2, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("arg");
      int int0 = 2532;
      helpFormatter0.setLeftPadding(2532);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append('L');
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      stringBuffer0.append((long) 74);
      Object[] objectArray0 = new Object[2];
      stringBuffer0.insert(3, 'L');
      objectArray0[0] = (Object) locale0;
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.getNewLine();
      Object object0 = new Object();
      objectArray0[1] = object0;
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      mockFile0.toURI();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, " ");
      Options options3 = options2.addOption(option0);
      option0.clearValues();
      Options options4 = options3.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "-", options4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "`Oac\"l/n";
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`Oac\"l/n");
      PrintWriter printWriter0 = mockPrintWriter0.printf("", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 1166, "?", "", options0, 1166, (-2654), "`Oac\"l/n", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ] [ long ", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("--");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      int int0 = (-2464);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = (-2644);
      int int2 = 1213;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1213, "--");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "0^L?Pw[knFLk~M";
      helpFormatter0.printHelp("0^L?Pw[knFLk~M", options0, false);
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      options1.addOptionGroup(optionGroup0);
      boolean boolean1 = true;
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[8] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ">";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) ">";
      objectArray0[7] = (Object) ">";
      objectArray0[8] = (Object) filterOutputStream0;
      mockPrintWriter0.printf(">", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("<");
      int int0 = 2532;
      helpFormatter0.setLeftPadding(2532);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append('L');
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      StringBuffer stringBuffer1 = new StringBuffer();
      objectArray0[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      locale0.getDisplayVariant();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, " ");
      Options options2 = options1.addOption(option0);
      option0.clearValues();
      Options options3 = options2.addOption("arg", false, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 0, "<", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Options options0 = new Options();
      helpFormatter0.printWrapped(printWriter0, 3, "e66+");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[6] = (Object) ">";
      boolean boolean0 = false;
      int int0 = 1217;
      String string0 = "@i:Z&U\"N0;C<n";
      helpFormatter0.findWrapPos("\"^n>3:{X3,vC>L", (-456), 286);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "", (Options) null, "@i:Z&U\"N0;C<n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("<");
      helpFormatter0.setLeftPadding(2532);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setWidth((-3707));
      helpFormatter0.setLongOptSeparator("<");
      Options options0 = null;
      String string0 = "'|7kGT#j\"L[z;4ZYS";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("<", (Options) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "arg", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("CVzp+", "Q:IvsCUR]!zl", options1, "CVzp+");
      int int0 = (-2464);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int1 = (-2644);
      int int2 = 1213;
      // Undeclared exception!
      try { 
        stringBuffer0.insert(74, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ">";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) ">";
      objectArray0[7] = (Object) ">";
      objectArray0[8] = (Object) filterOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(">", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, ">");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'Z';
      charArray0[2] = 't';
      charArray0[3] = 'O';
      charArray0[4] = 'Q';
      charArray0[5] = '-';
      charArray0[6] = ')';
      stringWriter0.write(charArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1044, 1044, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 1809, 1809, "org.apache.commons.cli.HelpFormatter$1");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "A~;OqQ>8<1Pon\\";
      helpFormatter0.setOptPrefix("A~;OqQ>8<1Pon");
      int int0 = 0;
      helpFormatter0.createPadding(0);
      int int1 = 0;
      String string1 = null;
      Options options0 = new Options();
      options0.getOptionGroups();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("A~;OqQ>8<1Pon", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      helpFormatter0.rtrim("<");
      int int0 = 2532;
      helpFormatter0.setLeftPadding(2532);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append('L');
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        stringBuffer0.insert(3, 'L');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1351);
      String string0 = "[";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1351), "[", "[", options0, "~3*HQ?9z0Vzm", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-15);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-15), options0, (-2142), (-15));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      String string0 = "|^";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("--", false, "org.apache.commons.cli.HelpFormatter$OptionComparator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 9;
      helpFormatter0.defaultDescPad = 9;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultArgName = "--";
      String string1 = "$";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFile0;
      objectArray0[2] = (Object) dataOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format("usage: ", objectArray0);
      helpFormatter0.printUsage(printWriter0, (-1), "arg");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.createPadding(1000);
      String string0 = "";
      String string1 = "[";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = null;
      Options options1 = options0.addOption("arg", true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      Option option0 = null;
      try {
        option0 = new Option("=FS*f_-GU2*", "p-y/&N~uRs8\"", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=FS*f_-GU2*' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      String string0 = "";
      int int0 = 113;
      helpFormatter0.findWrapPos("", 74, 113);
      MockFile mockFile0 = new MockFile(" ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // -
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setArgName("");
      int int0 = 379;
      String string1 = "J0)XWY_82?.ZU&*+g";
      Options options0 = new Options();
      Options options1 = options0.addOption("", true, "Cannot add value, list full.");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "\n", false, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options2.addOption("J0)XWY_82?.ZU&*+g", "A>,", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'J0)XWY_82?.ZU&*+g' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "e66+", false, "e66+");
      helpFormatter0.printOptions(printWriter0, 3, options1, 3, 1204);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      int int0 = 0;
      helpFormatter0.setDescPadding(0);
      String string0 = "e?@/pZ@(zC)4bm";
      helpFormatter0.setSyntaxPrefix("e?@/pZ@(zC)4bm");
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stringBuffer0.append((double) 74);
      // Undeclared exception!
      try { 
        stringBuffer0.setCharAt((-22), 'c');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-1281);
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = " ";
      MockFile mockFile0 = new MockFile(" ");
      MockFile mockFile1 = new MockFile(mockFile0, "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      // Undeclared exception!
      try { 
        mockPrintWriter0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 1;
      String string0 = "";
      helpFormatter0.defaultArgName = "";
      String string1 = "NAlWi4";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "K]@.>1Ly";
      objectArray0[2] = (Object) "NAlWi4";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "NAlWi4";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "NAlWi4";
      mockPrintWriter0.format("K]@.>1Ly", objectArray0);
      mockPrintWriter0.print("NAlWi4");
      String string2 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "", "", (Options) null, 2117, 2117, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3100, "usage: ", "2-*O~EcE@[g^p%", options0, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter1.printHelp("usage: ", "", options0, "org.apache.commons.cli.AlreadySelectedException");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.getOptPrefix();
      helpFormatter1.printHelp(32, "arg", "--", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("A", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3081, "usage: ", "2-*O~EcE@[g^p%", options1, "org.apache.commons.cli.AlreadySelectedException");
      options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      helpFormatter1.printHelp("usage: ", "", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer(31);
      helpFormatter0.renderWrappedText(stringBuffer0, 1454, (-1316), "arg");
      helpFormatter0.setLeftPadding((-910));
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(3081, "usage: ", "2-*O~EcE@[g^p%", options1, "org.apache.commons.cli.AlreadySelectedException");
      options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      helpFormatter1.printHelp("usage: ", "", options1, "");
      StringBuffer stringBuffer0 = new StringBuffer(4636);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-3943), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLeftPadding();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockFile mockFile0 = new MockFile("s,z^;_hC>3#D+};/", "usage: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      mockFile0.delete();
      MockFile mockFile1 = new MockFile(mockFile0, "arg");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Object[] objectArray0 = new Object[1];
      PrintStream printStream0 = mockPrintStream0.printf(" ", objectArray0);
      byteArrayOutputStream0.writeTo(printStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1), "\n", (String) null, options0, 3, 4353, "usage: ", false);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("usage: ", 3, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Oac\"l/n");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      Options options0 = new Options();
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      helpFormatter0.defaultArgName = "--";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "K]@.>1Ly";
      objectArray0[2] = (Object) "-";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "usage: ";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) " ";
      PrintWriter printWriter0 = mockPrintWriter0.format("K]@.>1Ly", objectArray0);
      mockPrintWriter0.print("--");
      mockPrintWriter0.printf("BYmK7Tm(:Q#(!}v", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 1221, "BYmK7Tm(:Q#(!}v");
      Options options0 = new Options();
      helpFormatter0.printHelp("BYmK7Tm(:Q#(!}v", options0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 3896, 3896, "G: `Kqv2J@;qvKE");
      helpFormatter0.setWidth((-683));
      helpFormatter0.getNewLine();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 546, "");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, 0, options0, (-1793), (-683));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, " ] [ long ", "--", options1, " ] [ long ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator(" :: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      String string0 = "^^cDeVTo)";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2045), "^^cDeVTo)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      PrintWriter printWriter1 = mockPrintWriter1.format("5^O[:", (Object[]) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "\n", false, "6#~o?pO.2Pafh");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter1, 1080, options1, 1080, (-341));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "dq=zvX8~jeXQ36'~ )";
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-1);
      helpFormatter0.setWidth((-1));
      helpFormatter0.setLongOptSeparator("dq=zvX8~jeXQ36'~ )");
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("'|7kGT#j\"L[z;4ZYS", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }
}
