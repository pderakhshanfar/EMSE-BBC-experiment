/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:06:14 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.rtrim("swrGQv$_^!");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      Options options0 = new Options();
      Option option0 = new Option("", "arg");
      options0.addOption(option0);
      Options options1 = options0.addOption("arg", "\n", false, "-");
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "-", options1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = "";
      String string1 = "RBw4a0QyTZ2.a";
      Options options2 = options1.addOption("", "--", false, "RBw4a0QyTZ2.a");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-3299), options2, 32, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "\n";
      Options options0 = null;
      helpFormatter0.setArgName("[ARG...]");
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer("\n");
      helpFormatter0.renderWrappedText(stringBuffer0, 2, 2, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3498, "4u6!q~!j5'8nMV56A<", ";aC}<u$o]t8|3", (Options) null, 25, 25, "s4|L.sBQ0;Fe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("]", 0, 0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      int int0 = 2318;
      Options options0 = new Options();
      options0.addOption("arg", " [ARG]", false, ":{H4GH/$UA{");
      options0.hasOption("\n");
      Options options1 = options0.addOption("", false, "");
      int int1 = 2613;
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 2318, options1, 2613, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "--", true, "usage: ");
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("k#nRCX1", options0, true);
      helpFormatter0.printHelp(592, "[ Options: [ short ", "[ Options: [ short ", options1, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" |\"B(KbdpIt AL!");
      helpFormatter0.setLeftPadding((-2478));
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-7), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--", true, "*.RB^wPU.#eYk,IV!?");
      option0.setArgName("arg");
      options0.addOption(option0);
      helpFormatter0.printHelp(3, "arg", "arg", options0, "arg", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options1 = new Options();
      helpFormatter1.printHelp("--", "-", options0, "*\"]skhJ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options1.addOptionGroup(optionGroup0);
      int int0 = 3;
      String string0 = "V";
      String string1 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string2 = "yPeCI_MN?fN-JJuuMy";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1407), (-425), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("jpIpo;", options2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "   ");
      helpFormatter0.printOptions(mockPrintWriter0, 3, options1, 78, 1668);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 11, options0, 11, 11);
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, " ");
      int int0 = 9;
      StringBuffer stringBuffer0 = new StringBuffer("NO_ARGS_ALLOWED");
      String string0 = "r.b\"R^>\\#'O\\R2";
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 9, 9, "r.b\"R^>#'OR2");
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 1, options1, 64, 9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, (-1201), "E=2X}hBm;Y'(;7]m4>");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("36=", 1, 1);
      helpFormatter0.findWrapPos("36=", 1, 1);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.printHelp(118, "D5p:JV|$wa/FT1 3%0", "\n", options0, "D5p:JV|$wa/FT1 3%0", false);
      helpFormatter0.renderOptions((StringBuffer) null, 118, options0, 118, 14);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 995, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 734;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringBuffer0.setLength(74);
      stringBuffer0.replace(9, 74, " ");
      Options options0 = null;
      int int1 = 1585;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 734, (Options) null, 734, 1585);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("X)|=ns4cE|", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append('J');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 63, 63, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-166), 35, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, true, "org.apache.commons.cli.OptionValidator");
      helpFormatter0.printHelp(1787, "Illegal option name '", "t}g~tc!8BLlKF[CZ!", options1, "VVNx#.T", true);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 2, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-579), "q#;F9=BL", "q#;F9=BL", options0, "7p+LQ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = "*.RB^w|Uq#eYk,Ii!9";
      Option option0 = new Option("arg", "--", false, "*.RB^w|Uq#eYk,Ii!9");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3, "arg", "arg", options0, "arg", false);
      options0.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, (-2922), options1, 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      byte[] byteArray0 = new byte[3];
      helpFormatter0.setNewLine("has already been selected: '");
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)116;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.printHelp(63, "ORVgx [#&t-P6o", "ORVgx [#&t-P6o", options0, "ORVgx [#&t-P6o", true);
      helpFormatter0.printHelp("n5b-9", options0);
      Options options1 = new Options();
      helpFormatter0.printHelp("ORVgx [#&t-P6o", "21eVcJTYV0", options0, "ORVgx [#&t-P6o");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 63, 64, "");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">MF.>");
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      helpFormatter0.defaultLeftPad = 2547;
      helpFormatter0.defaultLeftPad = 2547;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "|E4=&Md\"5eF9%L", false, "^dp$huKI");
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.findWrapPos("arg", 860, 860);
      helpFormatter0.printHelp(".xVo", options0);
      MockFile mockFile0 = new MockFile("\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-1183), options1, (-1), (-1183));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(63, "ORVgx [#&t-P6o", "ORVgx [#&t-P6o", options0, "ORVgx [#&t-P6o", true);
      helpFormatter0.printHelp("n5b9", options0);
      options0.addOption((String) null, true, (String) null);
      helpFormatter0.printHelp("ORVgx [#&t-P6o", "21eVcJTYV0", options0, "ORVgx [#&t-P6o");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOption("@JVY");
      options0.addOption("n5b9", true, " ");
      helpFormatter0.printHelp(1787, "ORVgx [#&<tk-P6o", "ORVgx [#&<tk-P6o", options0, "n5b9", true);
      helpFormatter0.rtrim("@JVY");
      options0.getOptionGroups();
      StringBuffer stringBuffer0 = new StringBuffer("cW");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-2), (-1), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", "usage: ", true, "{V]%(8DW6LgPf%&L;P");
      options1.addOption("arg", false, " ");
      helpFormatter0.printHelp("~b/J'4lpaoQW", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "~b/J'4lpaoQW", options0, "~b/J'4lpaoQW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "ORVgx [#&<tk-P6o";
      Options options0 = new Options();
      Options options1 = options0.addOption("n5b9", true, " ");
      helpFormatter0.printHelp(63, "ORVgx [#&<tk-P6o", "ORVgx [#&<tk-P6o", options1, "ORVgx [#&<tk-P6o", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "oxC6'Szk0%^11H";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "uSs[J3PBHH&A^5", false, "usage: ");
      Options options2 = options1.addOption("", false, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 44, "|juK},6w~Xi:.c%v^^R", "oxC6'Szk0%^11H", options2, (-2168), 44, "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?";
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2596, "?", "?", options1, 74, 74, (String) null);
      Options options2 = new Options();
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "?", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("{V]%(8DW6LgPf%&L;P", options0, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "--");
      options0.addOption(option0);
      int int0 = 31;
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3730, "", "@OOU&nTKsmP", options0, 31, 438, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      Locale locale0 = new Locale("", "line.separator", "arg");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter2.format(locale0, "", objectArray0);
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ", true, "?*");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption((String) null, false, "Flr?Njgb+A3Rfc/CJN");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 44, "wW^S<iNV@j.| GPf5", options2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      stringWriter0.append('$');
      helpFormatter0.defaultWidth = (-2);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1102), "A<9:W%Ci!B|Td.cYw=", (String) null, options0, 3, 31, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.hasLongOption("!");
      helpFormatter0.defaultDescPad = (-816);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ]", ";ktVU", options1, "G~~%EJyIcyVd|w");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = new Options();
      File file0 = MockFile.createTempFile("SfZ", "w9q,UMF=Rkhz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      helpFormatter0.printWrapped(printWriter0, 31, 438, "jo@q{J2db!5F(CT");
      helpFormatter0.printHelp("jo@q{J2db!5F(CT", "jo@q{J2db!5F(CT", options1, "--");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("J3");
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.defaultSyntaxPrefix = "\n";
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1, (-2166), "Yltp^F");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOption("", "usage: ", true, "{V]%(8DW6LgPf%&L;P");
      helpFormatter0.printHelp("org.apache.commons.cli.AlreadySelectedException", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("arg", "arg", options0, "'");
      helpFormatter1.getNewLine();
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultLongOptPrefix = "Hlv3.?+XK,,'q.1";
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.setOptionComparator((Comparator) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(42, (String) null, (String) null, options0, (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = " ";
      options0.addOption("", "arg", false, "org.apache.commons.cli.AlreadySelectedException");
      helpFormatter0.printHelp(" ", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "arg", " ", (Options) null, "W+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "*.RB^w|Uq#eYk,Ii!9");
      Options options1 = options0.addOption(option0);
      helpFormatter0.defaultLeftPad = (-1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("RB", "", options1, "", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = helpFormatter0.defaultDescPad;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-", "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "org.apache.commons.cli.Option";
      objectArray0[4] = (Object) "Lg9-fgL,`";
      mockPrintWriter0.printf("?", objectArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, (-1175), options0, 1, 82);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, 74, options1, 2655, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options1.addOption("", " ", false, "?");
      helpFormatter0.printHelp(3336, "eKj:;_p:R-WE", "O", options1, "{C7?/@t", true);
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 13, options2, 13, 9);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("~<?oTzE*]<J", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag("`{R/S*u[tG1:N#Z");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "`{R/S*u[tG1:N#Z";
      objectArray0[3] = (Object) optionGroup0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "vzQ\"uf<# xVa}D?", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.printf("org.apache.commons.cli.Util", objectArray0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 74, "-", "", options1, 10, 43, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      boolean boolean0 = false;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "?", "?", options0, 438, 31, "?");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}!C<E=", "", options0, "");
      helpFormatter0.setArgName("");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("d<qgFjI|pKV&!", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 889;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-", "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.printf("-", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 65, "--", "", options0, 3550, 3, "-", false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", "usage: ", false, "{V]%(8DW6LgPf%&L;P");
      helpFormatter0.printHelp("~b/J'4lpaoQW", options1);
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options2);
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) "org.apache.commons.cli.HelpFormatter$1";
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) mockPrintWriter1;
      PrintWriter printWriter0 = mockPrintWriter1.format("--", objectArray0);
      helpFormatter0.printHelp(printWriter0, 1275, "org.apache.commons.cli.HelpFormatter$OptionComparator", "org.apache.commons.cli.HelpFormatter$1", options0, 1275, 1275, "", true);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 889;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-", "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) "org.apache.commons.cli.Option";
      objectArray0[4] = (Object) "CHC}'al[wj4l";
      PrintWriter printWriter0 = mockPrintWriter0.printf("?", objectArray0);
      helpFormatter0.printHelp(printWriter0, 889, "oLatz\"uo", (String) null, options0, 9, 87, "arg", true);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, " ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "arg", options1, "-");
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("-", 1, (-2678));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = helpFormatter0.defaultDescPad;
      helpFormatter0.setLongOptPrefix("?");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("xF%=;$7PTJx", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("usage: ");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("Lg9-fgL,`", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(" ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 64, "?", "' contains an illegal character : '", options0, (-2376), 72, "?", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 889;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-", "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "org.apache.commons.cli.Option";
      objectArray0[4] = (Object) "CHC}'al[wj4l";
      PrintWriter printWriter0 = mockPrintWriter0.printf("?", objectArray0);
      helpFormatter0.printHelp(printWriter0, 889, "   ", "?", options0, 48, 74, "JY{jG#y<=Wcg", false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 74, "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      options0.getOption("--");
      Option option0 = new Option("", "--", false, "*.RB^w|Uq#eYk,Ii!9");
      option0.setRequired(false);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("RB", "", options1, "", false);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("usage: ").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "*.RB^w|Uq#eYk,Ii!9");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("RB", "", options1, "", false);
      helpFormatter0.setNewLine((String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("^Y'|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "RB";
      objectArray0[1] = (Object) options1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, (-2704), (String) null, "]", options0, (-2704), 1, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1, "--", (String) null, options0, 56, (-363), "-", true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "--", true, "Z=;?|1M");
      option0.addValueForProcessing("usage: ");
      options0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("-", " ", options0, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 408;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(1287);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 10, "arg", options0);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "   ", "line.separator", options0, "j\tchl)v0+ v@sXjIh", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Option option0 = new Option("", "--", false, "*.RB^w|Uq#eYk,Ii!9");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("RB", "", options1, "", false);
      helpFormatter0.setNewLine((String) null);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      Options options3 = options2.addOption((String) null, "--", true, "--");
      helpFormatter0.printHelp("|Z>TtYS~S$BC@K8", options3);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("S@R7oJ>z\"Wou", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "S@R7oJ>z\"Wou";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(printWriter0, 1, (String) null, " ", options2, 490, 3, "R9I", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      helpFormatter0.setNewLine("%Mhr&");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "<", options0, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("<").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print(3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 31, "", options0);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = options0.addOption("", false, " ");
      Option option0 = new Option("", " ", false, "-");
      options1.addOption(option0);
      Options options2 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 9, "", "X#L", options2, 9, 32, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Options options0 = new Options();
      String string0 = " ndz-emWNZa";
      options0.addOption("arg", ")GdR|\"&/q6o", false, " ndz-emWNZa");
      String string1 = "NO_ARGS_ALLOWED";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ndz-emWNZa");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "xF`;$7P(Jx";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "xF`;$7P(Jx";
      objectArray0[7] = (Object) mockPrintWriter1;
      objectArray0[8] = (Object) " ndz-emWNZa";
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "NO_ARGS_ALLOWED", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 1, " ndz-emWNZa", options0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 889;
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-", "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) "org.apache.commons.cli.Option";
      objectArray0[4] = (Object) "CHC}'al[wj4l";
      PrintWriter printWriter0 = mockPrintWriter0.printf("?", objectArray0);
      helpFormatter0.printHelp(printWriter0, 889, "p[&+f,+dZGPLUN y6k", "Lg9-fgL,`", options0, 74, 74, "?", false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.setArgName("htpX t2LDsicf+");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      String string0 = "H*Y;emg";
      helpFormatter0.printHelp("H*Y;emg", options0);
      // Undeclared exception!
      helpFormatter0.printHelp(1, "htpX t2LDsicf+", "htpX t2LDsicf+", options1, "H*Y;emg");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$1", options0);
      StringBuffer stringBuffer0 = new StringBuffer(1);
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 119, "W:&W3g=mlMn6cndTEj");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-239), "", "?", (Options) null, "?", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.defaultLeftPad = 74;
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "|E4=&Md\"5eF9%L", false, "^dp$huKI");
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.printHelp(33, "`QiDTB~Z@EPXUdbTg", "", options1, "^dp$huKI");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "?";
      helpFormatter0.setSyntaxPrefix("?");
      String string1 = "";
      Options options0 = new Options();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?");
      helpFormatter0.defaultDescPad = 889;
      String string2 = "Lg9-fgL,`";
      options0.getMatchingOptions("p[&+f,+dZGPLUN y6k");
      options0.hasShortOption("Lg9-fgL,`");
      Options options1 = options0.addOption("", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 732;
      helpFormatter0.createPadding(732);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      boolean boolean0 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("J3");
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.defaultSyntaxPrefix = "\n";
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "org.apache.commons.cli.Option");
      StringWriter stringWriter2 = stringWriter1.append('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter2);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringWriter2;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "Yltp^F";
      mockPrintWriter0.printf("Yltp^F", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "^'_ 8*ffzv", "<", (Options) null, 74, 74, "4J2*LX", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 408;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) "";
      mockPrintWriter0.printf(locale0, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.print(1287);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 10, "arg", options0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "org.apache.commons.cli.AlreadySelectedException", "!v*TI5WId+8>@", (Options) null, 3, 31, "CHC}'al[wj4l", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", "T", (Options) null, "T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      String string0 = "";
      int int0 = 0;
      String string1 = "";
      String string2 = "org.apache.commons.cli.Option";
      Options options0 = new Options();
      boolean boolean0 = true;
      helpFormatter0.defaultDescPad = 889;
      options0.getMatchingOptions("p[&+f,+dZGPLUN y6k");
      options0.hasShortOption("Lg9-fgL,`");
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "H;J2{/wRw'NbwiH[", options0, "igJy", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("ycB4:j+6T{e++A:p", "", options1, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.rtrim("arg");
      helpFormatter0.defaultLeftPad = 2522;
      helpFormatter0.defaultLeftPad = 2522;
      Options options0 = new Options();
      options0.addOption("arg", "|E4=&Md\"5eF9%L", false, "^dp$huKI");
      helpFormatter0.printHelp("arg", options0);
      helpFormatter0.findWrapPos("arg", 860, 860);
      helpFormatter0.printHelp(".xVo", options0);
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("-", "?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      helpFormatter0.printHelp("p[&+f,+dZGPLUN y6k", options0);
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp("org.apache.commons.cli.Option", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4552), "+m.#~FngfAsIcPD", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", "\n", true, "(9WB64_JAo$c");
      options0.helpOptions();
      Options options2 = options0.addOption(option0);
      helpFormatter0.printHelp(13, "p$l w@IUUS^B9[X", "p$l w@IUUS^B9[X", options2, "3<E[t=$O;", true);
      helpFormatter0.printHelp(1411, "3<E[t=$O;", (String) null, options1, "", true);
      helpFormatter0.printHelp(1411, "-", "3<E[t=$O;", options1, "-", true);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("", "usage: ", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options2 = options1.addOption("arg", false, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2566), "org.apache.commons.cli.HelpFormatter$1", "", options2, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-", false, "+W");
      options1.hasShortOption("-");
      helpFormatter0.printHelp(19, "%]%zEx", "QLJD'`Tk)AI", options0, "c[", true);
      helpFormatter0.printHelp(1443, " ", " ", options1, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "org.apache.commons.cli.ParsBException");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((-1), ";@~?DKsL/?_'M#iPXS", "Q<&[|", options0, "   ", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      helpFormatter0.setNewLine("%Mhr&");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "<", options0, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("<", (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print(3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 31, "", options0);
      helpFormatter0.getSyntaxPrefix();
      Options options1 = options0.addOption("", false, " ");
      Option option0 = new Option("", " ", false, "-");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2), "96X-11v", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("?");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOption("", " ", false, "?");
      helpFormatter0.printHelp(3336, "eKj:;_p:R-WE", "O", options1, "{C7?/@t", true);
      helpFormatter0.printHelp(2, "{C7?/@t", " ", options1, "eKj:;_p:R-WE", false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setLongOptSeparator((String) null);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-290), "cU", "cU", options0, (String) null, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      char[] charArray0 = new char[8];
      charArray0[0] = 'O';
      charArray0[1] = 'F';
      charArray0[2] = 'c';
      charArray0[3] = 'q';
      charArray0[4] = 'I';
      charArray0[5] = 'T';
      charArray0[6] = '$';
      charArray0[7] = '3';
      stringBuffer0.append(charArray0);
      int int0 = (-1122);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 74, (Options) null, 74, (-1122));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.defaultDescPad = 889;
      String string2 = "p[&+f,+dZGPLUN y6k";
      options0.getMatchingOptions("p[&+f,+dZGPLUN y6k");
      options0.hasShortOption("Lg9-fgL,`");
      Options options1 = options0.addOption("", true, "");
      String string3 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(0, "", "org.apache.commons.cli.Option", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      helpFormatter0.setArgName("   ");
      helpFormatter0.setLongOptSeparator("");
      Options options0 = new Options();
      String string1 = "c~pii^ 5";
      int int0 = 0;
      helpFormatter0.setWidth(0);
      String string2 = "org.apache.commons.cli.HelpFormatter";
      // Undeclared exception!
      try { 
        options0.addOption("   ", "c~pii^ 5", false, "org.apache.commons.cli.HelpFormatter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "^Y";
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 538, 538, " | ");
      helpFormatter0.getOptionComparator();
      helpFormatter0.setOptPrefix("usage: ");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ";
      Options options0 = new Options();
      Option option0 = new Option("", " ", false, "--");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 3734, "{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "'$/h%|K>!B.ZajH#)K,";
      helpFormatter0.optionComparator = null;
      helpFormatter0.setDescPadding((-1074));
      int int0 = (-447);
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = "A!30$1";
      // Undeclared exception!
      try { 
        options1.addOption("T<A(", (String) null, false, "A!30$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'T<A(' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.setLongOptSeparator("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-782), "org.apache.commons.cli.Options", "org.apache.commons.cli.Options", (Options) null, "org.apache.commons.cli.Options", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      int int0 = 975;
      String string0 = "line.separator";
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "RK X4&";
      helpFormatter0.setOptPrefix("RK X4&");
      MockFile mockFile0 = new MockFile("-");
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptPrefix();
      String string0 = "{S_Ss`D&%mL.Bo1";
      Options options0 = new Options();
      String string1 = "jqPG";
      String string2 = "";
      // Undeclared exception!
      try { 
        options0.addOption("--", "jqPG", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setWidth(74);
      helpFormatter0.setWidth(1087);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 2306;
      String string0 = "g!9M\\@}Jr<B";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 2306, "g!9M@}Jr<B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.printHelp("ycB4:j+6T{e++A:p", "", options1, " [ARG]");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1619);
      helpFormatter0.getOptPrefix();
      String string0 = "7_-^}I[$O_";
      Options options0 = new Options();
      boolean boolean0 = false;
      String string1 = "";
      Option option0 = null;
      try {
        option0 = new Option("oUcU$(TTK.X/a", false, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'oUcU$(TTK.X/a' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator1;
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator2;
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setLongOptPrefix("~H5XyE>ru_u");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setLongOptPrefix(" ");
      String string0 = "";
      helpFormatter0.setLongOptPrefix("");
      Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 1549, "");
      helpFormatter0.setWidth(1549);
      String string1 = "nNzz)![f3\\T\\>HbhD[w";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "nNzz)![f3T>HbhD[w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = null;
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.setWidth(570);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(" ", "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      MockFile mockFile0 = new MockFile("", "aQPlX,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      mockFile0.createNewFile();
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      objectArray0[0] = object1;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2272), "p[&+f,+dZGPLUN y6k", "", options0, 74, (-706), (String) null, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      helpFormatter0.setNewLine("%Mhr&");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "<", options0, "");
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2766), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("}!C<E=", "org.apache.commons.cli.Option", options0, "org.apache.commons.cli.Option");
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options1 = null;
      String string0 = "3<\\E[t=$O;";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "xF%=;$7PTJx", "Yltp^F", (Options) null, "3<E[t=$O;", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      helpFormatter0.getLeftPadding();
      helpFormatter0.defaultSyntaxPrefix = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1, "xF%=;$7PTJx", "Yltp^F", (Options) null, "3<E[t=$O;", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasShortOption((String) null);
      options0.addOption("arg", true, " ");
      helpFormatter0.printHelp(1787, "--", "--", options0, "usage: ", true);
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("org.apache.commons.cli.Option");
      int int0 = HelpFormatter.DEFAULT_LEFT_PAD;
      helpFormatter0.defaultSyntaxPrefix = "\n";
      Options options0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "xF%=;$7PTJx", "Yltp^F", (Options) null, "3<E[t=$O;", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.defaultLeftPad = 74;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("Fy0", "\n");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.setLongOptPrefix("usage: ");
      helpFormatter0.printHelp("U4lhmwV~kV>RJwMUCi,", "U4lhmwV~kV>RJwMUCi,", options2, "arg");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = (-2509);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "-", 1, (-2509));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("4o]zm-7CyAd7Ecl");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "F=gcZR&~V%", "F=gcZR&~V%", options1, "cU", true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(74, helpFormatter0.defaultWidth);
      
      helpFormatter0.setWidth(0);
      helpFormatter0.getSyntaxPrefix();
      assertEquals(0, helpFormatter0.defaultWidth);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string1 = null;
      boolean boolean0 = true;
      Options options2 = options1.addOption((String) null, true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "DmWDDewL}_YK~x";
      helpFormatter0.defaultLongOptPrefix = "DmWDDewL}_YK~x";
      helpFormatter0.getLongOptPrefix();
      File file0 = MockFile.createTempFile("org.apache.commons.cli.HelpFormatter", "*M//\">");
      MockFile mockFile0 = new MockFile(file0, "DN7\"~-`A/Rt)");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = 408;
      helpFormatter0.getDescPadding();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2766), "`m-9F%$3");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("<");
      helpFormatter0.setNewLine("%Mhr&");
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      helpFormatter0.printHelp("<", "<", options0, "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      mockPrintWriter1.print(3);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 31, "", options0);
      helpFormatter0.getSyntaxPrefix();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1442), "line.separator", " | ", (Options) null, (-3142), (-1442), ";J.W", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
