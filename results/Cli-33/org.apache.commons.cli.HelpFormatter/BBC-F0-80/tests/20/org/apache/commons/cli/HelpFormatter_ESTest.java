/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:10:33 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Qkv@v&");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("line.separator", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "/PsS(");
      Options options0 = new Options();
      option0.setRequired(true);
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("The optio`n '", options1, true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getWidth();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option((String) null, true, "/PsS(");
      Options options0 = new Options();
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("The option '", options1, true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.append((float) 74);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 67, (Options) null, 3481, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x\"s4!~J4%IHfN_");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(74);
      helpFormatter0.defaultLongOptPrefix = "                                                                          ";
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("\n");
      int int0 = 52;
      helpFormatter0.createPadding(52);
      MockFile mockFile0 = new MockFile("#^eb");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      String string0 = "A+OE_T1}f,d)@*ZXm";
      helpFormatter0.setSyntaxPrefix("A+OE_T1}f,d)@*ZXm");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, "A+OE_T1}f,d)@*ZXm", "A+OE_T1}f,d)@*ZXm", options0, "A+OE_T1}f,d)@*ZXm", false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Options options0 = new Options();
      String string0 = null;
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "xI!Y2-k*I cp=a9H", "xI!Y2-k*I cp=a9H", options0, 1, 74, (String) null, true);
      String string1 = "";
      String string2 = "cmdLineSyntax not provided";
      // Undeclared exception!
      try { 
        options0.addOption("7JO_Zo#_E]`U", true, "cmdLineSyntax not provided");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '7JO_Zo#_E]`U' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", true, " ");
      helpFormatter0.defaultOptPrefix = "";
      option0.setArgName("");
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      helpFormatter0.printHelp("--", options1);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "I;Uk:WU2XsvLJf/s=";
      String string1 = null;
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(0);
      int int1 = 2733;
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Locale locale0 = Locale.GERMANY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) "I;Uk:WU2XsvLJf/s=";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "-", objectArray0);
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-947));
      Options options0 = new Options();
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(">;w]4gX(=QE", ">;w]4gX(=QE", options0, ">;w]4gX(=QE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(3);
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("[`5jgkS IJ$", 0, (-15));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, "arg");
      option0.setArgName("--");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("[ option: ", options1);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 23, (-374));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot add value, list full.");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "", "9c", options1, "R|o/i'pVp%^Um14P*0", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(679);
      int int0 = (-10);
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.defaultDescPad = (-10);
      String string0 = "-";
      helpFormatter0.rtrim("-");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLeftPad = (-484);
      Options options0 = new Options();
      options0.addOption("arg", true, "");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options0, " ");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          Options options0 = new Options();
          Options options1 = new Options();
          Option option0 = new Option("arg", true, "arg");
          options1.addOption(option0);
          options0.getOptionGroups();
          options1.addOption(option0);
          Options options2 = options1.addOption("", "usage: ", false, "-");
          helpFormatter0.printHelp(" ", options2);
          options0.addOption(option0);
          StringBuffer stringBuffer0 = new StringBuffer();
          // Undeclared exception!
          helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "arg");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&q");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "|L3GOp#`T", "|L3GOp#`T", options0, 506, 506, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-1), options0, 0, 763);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".mKAC,Ym@J+");
      options0.getOptions();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, ".mKAC,Ym@J+", "arg", options0, 63, 63, "arg", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions((StringBuffer) null, 338, options0, 3, 74);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName(" ");
      helpFormatter0.createPadding(327);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getOptionComparator();
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp("}8vXWxA", options0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) helpFormatter0;
      objectArray0[1] = (Object) "                                                                                                                                                                                                                                                                                                                                       ";
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 327, 2, "");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2427, 2, "                                                                                                                                                                                                                                                                                                                                       ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintWriter0.print((Object) helpFormatter0);
      options0.hasOption(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "NO_ARGS_ALLOWED", "arg", options0, 3, 3, "-");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "-", " ", options0, 2384, 1, (String) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("Z|jwXu>5hl", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "pKZ_t", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped(printWriter0, 34, 34, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-516));
      Options options0 = new Options();
      String string0 = "L|";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G22_aJtO@>G", "G22_aJtO@>G", options0, "2=QW;@$sO", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(" ", "", options0, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 187, "[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp("\n", " ", options0, "usage: ", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("org.apache.commons.cli.HelpFormatter$OptionComparator", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Option option0 = new Option("g", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "78");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printOptions(mockPrintWriter0, 4, options1, 1758, 1);
      options0.toString();
      helpFormatter0.printHelp(" ", "--", options0, " ");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("N&q>", options0, false);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "<", "", options0, "");
      List list0 = options0.getMatchingOptions("^");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) list0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) "^";
      objectArray0[3] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 1, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1441);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1441, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("dE&$M7R[Iz`.S.dm[t", "DQDx#<KD$_[hi&$f2L", (Options) null, "dE&$M7R[Iz`.S.dm[t", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("ebJQ{be", options0);
      helpFormatter0.printHelp("Cannot add value, list full.", options0, false);
      helpFormatter0.createPadding(0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      helpFormatter0.defaultOptPrefix = "org.apache.commons.cli.HelpFormatter";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("N&q>");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 13, "|L3GOp#`T", "|L3GOp#`T", options0, 506, 506, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter1.findWrapPos("NO_ARGS_ALLOWED", 1, 0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockFile mockFile0 = new MockFile("\n");
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Locale locale0 = new Locale("arg", "usage: ");
      String string0 = "<";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<", (Object[]) null);
      int int0 = 0;
      int int1 = 33;
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 33, "<");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      String string0 = "$YVV;";
      String string1 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$YVV;", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = new Options();
      MockFile mockFile0 = new MockFile("arg", "n|rG0ZnzXIHD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print((Object) "Z");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp(13, "--", "", options1, "BihOe");
      mockFile0.getAbsolutePath();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 422, "-", "Z", options1, (-1092), 74, ",Q ;2.Ze@^&;");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.setDescPadding(63);
      Options options2 = options1.addOption("arg", false, "-");
      // Undeclared exception!
      try { 
        options2.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.getChannel();
      Options options0 = new Options();
      Option option0 = new Option("", true, "E=Z#E{n");
      Options options1 = options0.addOption(option0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) options1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("/-fk", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1245, " [ARG]", (String) null, options0, (-1), 1245, "[ Options: [ short ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("\n");
      Options options0 = new Options();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      options0.toString();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "?b7ly(iTX(dxK%_Yt", options0, "?b7ly(iTX(dxK%_Yt");
      Options options1 = new Options();
      Options options2 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-978));
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionGroup", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      options0.getMatchingOptions("w\"rMxj!_U4");
      // Undeclared exception!
      helpFormatter0.printHelp("[", "5-`(D; -", options0, "--");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.getChannel();
      Options options0 = new Options();
      Option option0 = new Option("", true, "E=Z#E{n");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(" ] [ long ", options1);
      helpFormatter0.printHelp(" ] [ long ", options1, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.apache.commons.cli.Options", false);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println(0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "The option '", false, "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "<WA]W=", "", options1, 2630, 63, "<WA]W=", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.getLongOptSeparator();
      MockFile mockFile0 = new MockFile(");?xanTATgj.");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[3];
      helpFormatter0.defaultNewLine = "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(">", objectArray0);
      helpFormatter0.printUsage(printWriter0, 3, "arg", options0);
      helpFormatter1.getOptPrefix();
      helpFormatter1.rtrim((String) null);
      helpFormatter0.createPadding(3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(74);
      Options options0 = new Options();
      helpFormatter0.setNewLine("");
      helpFormatter0.getNewLine();
      helpFormatter0.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      mockPrintWriter0.print((Object) helpFormatter0);
      options0.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = options0.addOption("", "-", false, "iQl");
      Options options2 = options1.addOption("CD", false, "^X%RCTWpN`");
      options1.hasLongOption("usage: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      options2.getMatchingOptions("");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", "iQl", options2, "2@46N(kleF");
      helpFormatter0.setNewLine("org.apache.commons.cli.HelpFormatter$1");
      helpFormatter2.getSyntaxPrefix();
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      mockPrintWriter0.print((Object) helpFormatter0);
      options0.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "zq4NGNvj,j^3&", "h/T.cO[Dd>aep", options0, 74, 63, "xS2FdVi/S)DeO#z#_9");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter2.printHelp("-", options0, false);
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "cmdLineSyntax not provided", options0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Option option0 = new Option("", "org.apache.commons.cli.Options", true, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ", true);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println((-2));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      optionGroup0.addOption(option0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, " | ", "&u", options1, 5053, 811, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, list full.";
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOption(option0);
      options0.toString();
      helpFormatter0.printHelp("'&zLpaRHgc6#i46CMK", "", options0, "'&zLpaRHgc6#i46CMK");
      Options options2 = new Options();
      options2.addOption("", "org.apache.commons.cli.HelpFormatter$1", false, "M]*J6+3Ni&");
      options2.getMatchingOptions("-");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.printHelp("Cannot add value, list full.", "M]*J6+3Ni&", options2, "[ Options: [ short java.util.HashMap@0000000005 ] [ long {} ]");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp((-1), "Cannot add value, list full.", "", options1, "org.apache.commons.cli.HelpFormatter$1", false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(56);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "usage: ", false, "9bj0A;':~g");
      StringBuffer stringBuffer1 = new StringBuffer("usage: ");
      stringBuffer0.append(stringBuffer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.renderOptions(stringBuffer0, 33, options1, 56, 56);
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.println(1);
      mockPrintWriter0.print('/');
      mockPrintWriter0.write(1020);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "9bj0A;':~g");
      helpFormatter0.printUsage(printWriter0, 56, "\n", options1);
      helpFormatter0.getDescPadding();
      helpFormatter0.setLeftPadding(56);
      helpFormatter0.rtrim("\n");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 56, "", options0);
      helpFormatter0.getOptPrefix();
      helpFormatter0.rtrim("7@Zt-ln?Ll:-?VN *-");
      helpFormatter0.createPadding(366);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Options options0 = new Options();
      helpFormatter0.printHelp("_t9)=:>", "-", options0, "0`5KH``LOY+<e\"y\"K");
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Option option0 = new Option((String) null, "arg", false, "arg");
      options0.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp(" ", options2);
      helpFormatter1.printHelp("usage: ", options0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("eHY[\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b([yMU O", false);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println(42);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("\n");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 65, "Q Cfw-]v_x81%z", "", options1, 12, 1, "usage: ", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.getLeftPadding();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 64, " ");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("eHY[\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options0.toString();
      helpFormatter1.printHelp("?PF=\"eAq166T)2di", "?PF=\"eAq166T)2di", options1, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]");
      Options options2 = options1.addOption("", "", true, "c");
      options2.addOption("arg", "usage: ", true, "[ Options: [ short java.util.HashMap@0000000007 ] [ long {} ]");
      options1.getMatchingOptions("!JKN+l>)}.O");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("arg", "4>4v%N~&!pb}Rk", options2, "4>4v%N~&!pb}Rk");
      helpFormatter0.setNewLine("");
      helpFormatter1.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("eHY[\"");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("b([yMU O", false);
      mockFileOutputStream0.getChannel();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.println(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 31, "arg", "8,`/63pM~", options1, 1, 811, " ]", false);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getSyntaxPrefix();
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "3k`wx", options0);
      helpFormatter0.printHelp(74, "3k`wx", "3k`wx", options0, "3k`wx");
      options0.getMatchingOptions("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("arg");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      optionGroup0.setRequired(true);
      mockFileOutputStream0.getChannel();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, "", options0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 32, 8, "org.apache.commons.cli.Util");
      mockPrintWriter0.println(32);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 379, "3k`wx", "", options1, 32, (-3336), "'l#JtfKD&IjJHvkrQA", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'&zLpaRHgc6#i46CMK";
      String string1 = "";
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, list full.";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "Cannot add value, list full.", "'&zLpaRHgc6#i46CMK", options0, "'&zLpaRHgc6#i46CMK", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("m:|`#c*/");
      helpFormatter0.getSyntaxPrefix();
      StringWriter stringWriter0 = new StringWriter(3);
      StringWriter stringWriter1 = stringWriter0.append(',');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "m:|`#c*/");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3449), "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      mockPrintWriter0.print((Object) helpFormatter0);
      options0.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "zq4NGNvj,j^3&", "h/T.cO[Dd>aep", options0, 74, 63, "xS2FdVi/S)DeO#z#_9");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Option option0 = new Option("1", (String) null);
      Options options1 = options0.addOption(option0);
      helpFormatter3.printHelp("-", "uT FL-<wy-=", options1, "1", false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'-GU#.Ks8_<&J7K+Lg5");
      options0.addOption("arg", "", false, "j+3QT~7k5>hrCS[");
      Options options1 = new Options();
      options0.addOption("", "--", false, "ADMe");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", ":UwR! *Ltr4", options1, "usage: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      stringBuffer0.append((long) 3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      boolean boolean0 = false;
      Options options1 = options0.addOption("arg", false, "--");
      Option option0 = new Option("", ";I&P", false, " | ");
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 34, options2, (-558), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.hasOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WpfT]^cBofh/J");
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.write(44);
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      String string0 = "'l#JtfKD&IjJHvkrQA";
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      mockPrintWriter0.print((Object) helpFormatter0);
      options0.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "zq4NGNvj,j^3&", "h/T.cO[Dd>aep", options0, 74, 63, "xS2FdVi/S)DeO#z#_9");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("--", "?nu", options0, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-114), "^}K|$$S}+k%", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'&zLpaRHgc6#i46CMK";
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, list full.";
      Options options0 = new Options();
      int int0 = 1;
      Options options1 = new Options();
      String string1 = ";YQ^D2[F:C2>Z`_";
      options1.hasOption(";YQ^D2[F:C2>Z`_");
      int int1 = 0;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-114), ";YQ^D2[F:C2>Z`_", "", options1, (-114), (-114), "Pw^m=eKwdX[h");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      int int0 = 1;
      Options options0 = new Options();
      options0.hasOption("tXb(1Kz");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(" ");
      mockFileOutputStream0.getChannel();
      int int1 = 44;
      mockFileOutputStream0.write(1);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream1, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1518), "^{QC!yW7< gdPu", "", options1, 32, 32, "]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      Option option0 = new Option("NO_ARGS_ALLOWED", ",xsh%YqOM4b4cO", false, "arg");
      Options options1 = options0.addOption(option0);
      helpFormatter0.renderOptions(stringBuffer0, (-1), options1, 320, 3832);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      helpFormatter0.setSyntaxPrefix("");
      Options options2 = new Options();
      options2.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("'&zLLaRHgc6#i46 MK", "", options0, "'&zLLaRHgc6#i46 MK");
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", "--", false, (String) null);
      Options options2 = options1.addOption(option0);
      helpFormatter1.printHelp("org.apache.commons.cli.HexpFormatte#", options2);
      helpFormatter1.printHelp("A CloneNotSupprtedExceptin ws thrown: ", options1, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("-");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = null;
      Option option0 = new Option("", "--", true, (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("<}6d;p-If$2/", true);
      mockFileOutputStream0.getChannel();
      MockFile mockFile0 = new MockFile("--");
      MockFile mockFile1 = new MockFile("--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      mockPrintWriter0.println(63);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-2), "", "'l#JtfKD&IjJHvkrQA", options0, (-2), (-78), " ] [ long ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      mockPrintWriter0.print((Object) helpFormatter0);
      options0.hasOption("");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 3, "zq4NGNvj,j^3&", "h/T.cO[Dd>aep", options0, 74, 63, "xS2FdVi/S)DeO#z#_9");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 3, "--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      helpFormatter0.setLongOptPrefix("");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, " ", "-", options0, 1, 815, "--", true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp("--", options0);
      helpFormatter0.printHelp("--", options1, true);
      helpFormatter3.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("PY\ttZ");
      helpFormatter0.setOptionComparator((Comparator) null);
      int int0 = (-1);
      String string0 = "<";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), (String) null, "f4cSo?{`mX@o(0\">", options0, 12, 34, " ] [ long ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 64;
      String string0 = null;
      Options options0 = new Options();
      options0.hasShortOption(">");
      String string1 = "F!u:'d,Pa";
      Option option0 = new Option("8d3", "F!u:'d,Pa");
      Options options1 = options0.addOption(option0);
      options1.hasShortOption("org.apache.commons.cli.ParseException");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 64, (String) null, (String) null, options1, 8, (-2), "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.setLongOptPrefix("");
      int int0 = (-114);
      Options options0 = new Options();
      options0.hasOption("");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WpfT]^cBofh/J");
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.write(44);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      String string1 = "'l#JtfKD&IjJHvkrQA";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 3, "WpfT]^cBofh/J", "-[hMN'5:nUk", options1, 1, 3, "'l#JtfKD&IjJHvkrQA", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "&/9yl";
      helpFormatter0.setArgName("&/9yl");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      String string1 = null;
      int int0 = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1), "<", "&/9yl", options0, 63, (-1), " ] [ long ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.getChannel();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      Options options0 = new Options();
      options0.getMatchingOptions("--");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "3k`wx", options0);
      options0.getMatchingOptions("-");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter$OptionComparator", "3k`wx", options0, "3k`wx");
      helpFormatter0.getOptPrefix();
      helpFormatter0.setNewLine("3k`wx");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("&/9yl");
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("usage: ", options0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      helpFormatter0.printHelp("/", options1);
      helpFormatter1.printHelp("\n", options0, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("   ", 2, (-526));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, l$st%ull.";
      Options options0 = new Options();
      options0.helpOptions();
      options0.toString();
      helpFormatter0.printHelp(" ", "", options0, " ");
      Options options1 = new Options();
      String string0 = "FU5saB+\"7t;Ws~%Nwft";
      options1.addOption("", "Cannot add value, l$st%ull.", true, "\n");
      options1.getMatchingOptions("-");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "jKLJ#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "Cannot add value, list full.";
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp("'&zLpaRHgc6#i46CMK", "", options0, "'&zLpaRHgc6#i46CMK");
      Options options1 = new Options();
      options1.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "M]*J6+3Ni&");
      options1.getMatchingOptions("-");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      helpFormatter0.printHelp("1d_~={QNkONa4CL:f", "M]*J6+3Ni&", options1, "jKLJ#");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setNewLine("FU5saB+\"7t;Ws~%Nwft");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("*|-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = "rL";
      String string1 = "Lm}l1";
      Option option0 = new Option("rL", "Lm}l1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(597, "", "NO_ARGS_ALLOWED", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "3k`wx", options0);
      Options options1 = new Options();
      helpFormatter0.printHelp("3k`wx", options1);
      helpFormatter0.printHelp("h-E2,X2&QO", options1, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      Options options1 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp("5-`(D; -", options1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLeftPadding((-556));
      int int0 = 11;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(11, "cAOW9d-4HV?ig*j4", "`'k4", options0, "cAOW9d-4HV?ig*j4");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "3k`wx", options0);
      helpFormatter0.printHelp(3038, "3k`wx", "3k`wx", options0, "3k`wx");
      options0.getMatchingOptions("--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      mockFileOutputStream0.getChannel();
      mockPrintWriter0.println(32);
      int int0 = (-3336);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 379, "3k`wx", "", options1, 3038, (-3336), "'l#JtfKD&IjJHvkrQA", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 24, options1, 64, 24);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-3155), 116, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(46, "oD!Ctmj?i0", (String) null, (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'&zLpaRHgc6#i46CMK";
      String string1 = "";
      Options options0 = new Options();
      options0.addOption("", "", false, "--");
      helpFormatter0.printHelp("'&zLpaRHgc6#i46CMK", "", options0, "'&zLpaRHgc6#i46CMK");
      Options options1 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("M]*J6+3Ni&", "-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'M]*J6+3Ni&' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("*|-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", "p6+W", false, "--");
      Option option0 = new Option("", " ");
      Options options2 = options1.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options2.addOptionGroup(optionGroup1);
      String string1 = "[";
      // Undeclared exception!
      try { 
        options2.addOption("=@}WvL`@?z:H> jV1Q", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '=@}WvL`@?z:H> jV1Q' contains an illegal character : '='
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      boolean boolean0 = false;
      String string0 = null;
      String string1 = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      helpFormatter0.printHelp(44, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "cAOW9d-4HV?ig*j4", options0, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      // Undeclared exception!
      try { 
        options0.addOption("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", "&Qww=Z,XOgCQy_[m", false, "8ES}OdkjkF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-3));
      String string0 = "org.apache.commons.cli.Option";
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.Option");
      helpFormatter0.getDescPadding();
      helpFormatter0.setDescPadding(0);
      String string1 = "JTux}(BJ=fhjFu";
      Options options0 = new Options();
      String string2 = "If:S";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("If:S", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'If:S' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("p)g(,/+dezHu@X");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.setDescPadding(1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.append((Object) helpFormatter0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, (-1105), 0, "arg");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "org.apache.commons.cli.HelpFormatter$OptionComparator");
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = null;
      try {
        option0 = new Option("\n", "org.apache.commons.cli.HelpFormatter$OptionComparator", false, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "'&zLpaRHgc6#i46CMK";
      String string1 = "";
      Options options0 = new Options();
      helpFormatter0.printHelp("'&zLpaRHgc6#i46CMK", "", options0, "'&zLpaRHgc6#i46CMK");
      Options options1 = new Options();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        options1.addOption("M]*J6+3Ni&", "-", true, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'M]*J6+3Ni&' contains an illegal character : ']'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      helpFormatter0.getLongOptPrefix();
      Options options0 = new Options();
      String string0 = "Cannot add value, list full.";
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "L[._Du2e';F>:ZQ~", "Cannot add value, list full.", options0, (String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "   ";
      int int0 = (-2);
      helpFormatter0.findWrapPos("   ", (-2), (-2));
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(3562);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) pipedOutputStream0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintWriter1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter1.printf(locale0, "", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 32, "A|ZDe");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.OptionValidator");
      PrintWriter printWriter0 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      Options options0 = new Options();
      options0.hasOption(" :: ");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 3, (String) null, "['XTt{i{k", options0, 1, (-285), "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix("");
      int int0 = 1;
      Options options0 = new Options();
      String string0 = "";
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "", options0, 0, 3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-556);
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      helpFormatter0.setLeftPadding((-556));
      int int1 = 3;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3, 3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      String string0 = "usage: ";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string1 = "";
      Option option0 = new Option("", "--", true, "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.toString();
      options0.getOptions();
      int int0 = (-1);
      options0.helpOptions();
      options1.addOption(option0);
      int int1 = (-1596);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 66, "usage: ", "usage: ", options1, (-1), (-1596), "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("");
      PrintWriter printWriter0 = null;
      helpFormatter0.setLongOptPrefix("");
      int int0 = 3;
      int int1 = (-114);
      Options options0 = new Options();
      options0.hasOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1, "", "", options0, 0, 3, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 13;
      helpFormatter0.setLongOptSeparator("-");
      helpFormatter0.defaultDescPad = 13;
      String string0 = "-";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("&oTjvy6P");
      MockFile mockFile0 = new MockFile((String) null, " ");
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = new Locale("--", "-");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "&oTjvy6P";
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      mockPrintWriter0.format(locale0, "", objectArray0);
      int int0 = 2125;
      String string0 = "umvSnj/\\[`4D1Vo";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("-", "arg", false, "arg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      Options options0 = new Options();
      options0.getMatchingOptions("eHY[\"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      mockFileOutputStream0.getChannel();
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-252), "--", "", options0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      int int0 = 0;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-517), (-2288), "C\"\"t5Z/LM}xEqb!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("ZR;Aw=/5]jlTn%a");
      helpFormatter0.setOptionComparator((Comparator) null);
      String string0 = "^cRx55V";
      MockFile mockFile0 = new MockFile("^cRx55V");
      MockFile mockFile1 = new MockFile(mockFile0, "\n");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      boolean boolean0 = false;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      int int0 = 32;
      String string0 = "3k`wx";
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 32, "3k`wx", options0);
      int int1 = 1;
      // Undeclared exception!
      helpFormatter0.printHelp(1, "3k`wx", "3k`wx", options0, "3k`wx");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      int int0 = (-2094);
      String string0 = "[O8DRP8PAjeO@Y9kT";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("\n", "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }
}
