/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:10:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-518));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("]", "usage: ", options0, "]");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("X_ROY", options1, true);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "";
      helpFormatter0.setNewLine("");
      String string1 = "@$a+Md+fDjh4&?E<z{Q";
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("@$a+Md+fDjh4&?E<z{Q", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Locale locale0 = Locale.US;
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "org.apache.commons.cli.OptionGroup", (Object[]) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, (-1782), "@$a+Md+fDjh4&?E<z{Q", (String) null, options0, 39, (-1782), "' was specified but an option from this group ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth((-1316));
      int int0 = HelpFormatter.DEFAULT_WIDTH;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("usage: ", "\n", options0, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", true, "usage: ");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      stringBuffer0.chars();
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer0, 1, options0, 74, 74);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-2), 74, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      int int0 = (-125);
      String string0 = "org.apache.commons.cli.ParseException";
      String string1 = "\\O|R8W";
      Options options0 = new Options();
      options0.hasLongOption("org.apache.commons.cli.OptionValidator");
      helpFormatter0.setWidth((-993));
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("?XD}", "Tm!eQ", options0, "org.apache.commons.cli.ParseException", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1, options0, 1, 1);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1106), 1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = ">bg9r `2Gz";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">bg9r `2Gz");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PrintWriter printWriter0 = null;
      int int0 = 194;
      String string1 = "EALYG %j8uY/V;%-*";
      Options options0 = new Options();
      String string2 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 194, "EALYG %j8uY/V;%-*", "", options0, 1623, (-2), "fcm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "K", false, "-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Options options1 = new Options();
      options1.hasOption((String) null);
      options1.addOption("arg", false, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("$db");
      Locale locale0 = Locale.ITALIAN;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "--", (Object[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('t');
      helpFormatter1.printHelp(printWriter0, 74, "Sd3s-[W5<}e6bg)yD", (String) null, options1, 3, 1135, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1, "", "\n", (Options) null, 1, (-320), "]", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter1;
      objectArray0[1] = (Object) mockPrintWriter1;
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) "--";
      objectArray0[4] = (Object) "arg";
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.printHelp(2593, "Jd{/kNHDvn!\"J3+", "", options0, "");
      objectArray0[7] = (Object) "arg";
      PrintWriter printWriter0 = mockPrintWriter1.printf("arg", objectArray0);
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "$<O-E+^oyEd@");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = helpFormatter0.defaultLeftPad;
      Options options1 = new Options();
      String string0 = "";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 443, "<`_^5NbC>x/9SO", "<`_^5NbC>x/9SO", options1, 15, (-1194), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.printHelp("usage: ", ">YL0ITyj!hW", options0, "usage: ");
      helpFormatter0.findWrapPos("usage: ", 2, 2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "N$CJ(");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      int int0 = 10;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-5255), options0, 36, 3939);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("", "K", true, "-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{;MH]k_R=OH");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "--");
      Options options1 = new Options();
      helpFormatter0.getNewLine();
      helpFormatter0.setWidth((-825));
      options1.hasOption((String) null);
      helpFormatter0.printHelp(9, "\n", (String) null, options0, "Vq-FI\".#@._Fb~`", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getWidth();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "\n");
      helpFormatter0.renderOptions(stringBuffer0, 74, options1, 16, 2732);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      mockPrintWriter0.print("arg");
      Options options1 = new Options();
      options0.getOption("");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 60, "|F_/ZOOL9vr", "e4L47", options0, 74, 74, "0z3&(f8+", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 9, (String) null, "e4L47", options1, (-2), (-1), "F0.~^}", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, (-1075), options0, 32, 10);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 114, 2271);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("arg");
      Options options0 = new Options();
      Option option0 = new Option("arg", "--");
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("arg", options2, true);
      helpFormatter0.findWrapPos(">", 0, 0);
      helpFormatter0.setArgName("arg");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(23);
      helpFormatter0.getWidth();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("!N_", "!N_", (Options) null, "iG]KTD.+,cg_5177 Lr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      Options options0 = new Options();
      options0.addOption("arg", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(74);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      byteArrayOutputStream0.reset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 31, "a}DP9E~", "a}DP9E~", options1, 15, 31, (String) null, false);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter0, 1, options1, 1, 31);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "jfy|8[726";
      Options options0 = null;
      boolean boolean0 = false;
      int int0 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(13, "jfy|8[726", "[<sHe", (Options) null, "jfy|8[726");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringWriter0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = 'Y';
      charArray0[2] = 'K';
      charArray0[3] = '$';
      charArray0[4] = 'K';
      charArray0[5] = '*';
      charArray0[6] = '>';
      charArray0[7] = '\\';
      charArray0[8] = '&';
      mockPrintWriter0.println(charArray0);
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) "7)<[";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) stringWriter0;
      objectArray0[6] = (Object) "7)<[";
      objectArray0[7] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("7)<[", objectArray0);
      helpFormatter0.printUsage(printWriter0, 2648, "");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      option0.getValues();
      options1.addOption("arg", false, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printUsage((PrintWriter) null, 1, (String) null, options2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("c", "--").when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(3);
      mockPrintWriter0.flush();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      mockPrintWriter0.print(1.0F);
      mockPrintWriter0.print((Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 6, "O7=6jVdW_?g$q?T");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 6, "V%foL.y!I1Bi_iuU2Y", options0);
      helpFormatter0.getNewLine();
      options0.hasOption("O7=6jVdW_?g$q?T");
      helpFormatter0.printHelp("*rFdXwQ@ID zW^&", "O7=6jVdW_?g$q?T", options0, "*rFdXwQ@ID zW^&");
      helpFormatter0.getOptPrefix();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1861, 6, "");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      option0.toString();
      int int0 = (-4558);
      option0.getValues();
      Options options3 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 34, "K", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = ')';
      charArray0[2] = '?';
      mockPrintWriter0.print((-479.8061));
      charArray0[3] = 'W';
      charArray0[4] = 'Y';
      charArray0[5] = 'e';
      charArray0[6] = '\"';
      charArray0[7] = '1';
      mockPrintWriter0.write(charArray0);
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("?JRe", "\" ", options0, "60G_&X6", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "--", options0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ixl");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "|F_/ZOOL9vr");
      Options options2 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 34, (String) null, options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options2.hasOption("--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, (String) null, "\n", options1, "O7=6jVdW_?g$q?T", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("VS0xx");
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-2), "KQl&w[Sa.Vxb0k");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "usage: ", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options1.addOption((String) null, true, "rN9J$ql");
      helpFormatter0.printHelp("--", "arg", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix((String) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 9, 10, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(23);
      helpFormatter0.getWidth();
      Options options0 = new Options();
      helpFormatter0.setOptPrefix("$dHWa0alS");
      helpFormatter0.printHelp("~bK@}X]zVABj>A=Al", "CKE EyX?&GmGh", options0, "--", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setLongOptPrefix("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "_BK>3h";
      objectArray0[1] = (Object) options0;
      objectArray0[2] = (Object) options0;
      objectArray0[3] = (Object) "CKE EyX?&GmGh";
      objectArray0[4] = (Object) options0;
      objectArray0[5] = (Object) "                       ";
      objectArray0[6] = (Object) "usage: ";
      objectArray0[7] = (Object) options0;
      PrintWriter printWriter0 = mockPrintWriter0.format("_BK>3h", objectArray0);
      helpFormatter0.printOptions(printWriter0, 23, options0, 3, 23);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      double double0 = 1.0;
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      int int0 = 188;
      helpFormatter0.createPadding(188);
      options0.getOptionGroups();
      int int1 = (-151);
      options0.getMatchingOptions("");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos(" ] [ long ", 0, (-151));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.addOption("", false, "usage: ");
      helpFormatter0.printHelp("?JRe", "\" ", options0, "", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, (-722), "HEE\"", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println(3);
      int int0 = 6;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      mockPrintWriter0.print(1.0F);
      mockPrintWriter0.print((Object) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String string0 = "O7=6jVdW_?g$q?T";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 6, "O7=6jVdW_?g$q?T");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 6, "V%foL.y!I1Bi_iuU2Y", options0);
      helpFormatter0.getNewLine();
      options0.getMatchingOptions("-");
      helpFormatter0.findWrapPos("Jf*'&p;NG|-x", (-151), 1655);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1237), "V%foL.y!I1Bi_iuU2Y", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("VS0xx");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "|F_/ZOOL9vr", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "VS0xx");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 34, (-2), "line.separator");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 19, "VS0xx");
      helpFormatter0.printHelp(34, " ] [ long ", "", options1, "", true);
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1691.612);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      String string0 = helpFormatter0.createPadding(1701);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options1 = new Options();
      helpFormatter0.printHelp(string0, "", options1, " ] [ long ");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 188, "   ", "f`%))F", options0, 2, 31, "!N_");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("--", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.createPadding(188);
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options1 = new Options();
      helpFormatter0.printHelp("-", "!N_", options1, "rF");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "KX6Us[LGR:}T{d", options1, (-4718), 3, "   ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      String string0 = "-9n$f@~";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 3, (-3527), "-9n$f@~");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-361), 34, "org.apache.commons.cli.Util");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      String string0 = "--";
      helpFormatter0.printHelp("q:z&w^323E<", options0);
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 32, options0, 54, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("VS0xx");
      options0.getOptionGroups();
      Options options2 = options1.addOption("", true, "l~mC#QL");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "Pvk=k\"^Ko?r99", options2, "-", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getSyntaxPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
      // Undeclared exception!
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 0, "--", "Ej-d@LgL~\"-", options0, 1, 74, "--", false);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "4RCWFqD&I,";
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1072), "-", "-", options0, "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("q:z&w^323E<", options0);
      options0.getOptionGroups();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter2.printHelp((-2501), ",H1Vq]v^YfV", "", options0, "org.apache.commons.cli.HelpFormatter$OptionComparator", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      String string0 = "4RCWFqD&I,";
      options0.addOptionGroup(optionGroup0);
      int int0 = 37;
      helpFormatter0.printHelp(37, "A]AhKxqEyELL5<^(uP", "4RCWFqD&I,", options0, (String) null);
      String string1 = "Cannot add value, list full.";
      String string2 = null;
      Option option0 = null;
      try {
        option0 = new Option("-", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      mockPrintWriter0.print(0);
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.hasLongOption("|F_/ZOOL9vr");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 233, "UZG_", "=E&VTf*r>#sd", options0, 1870, 776, "@xW1,njyVH#", false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "|F_/\\ZOOL9vr";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(7, (String) null, "A CloneNotSupportedException was thrown: ", options2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", "usage: ", false, "usage: ");
      Option option0 = new Option("", "--");
      options1.addOption(option0);
      options1.hasLongOption("\n");
      helpFormatter0.printHelp("xV1nA+k($~?|Z", options1, false);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter(74);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.renderOptions(stringBuffer0, 13, options1, 2327, 45);
      helpFormatter1.printHelp((-1), "zRM", "QPco?jF", options0, "@;x$UZ<U<(6H\"_", false);
      helpFormatter1.setLongOptPrefix("org.apache.commons.cli.OptionValidator");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("VS0xx");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "|F_/ZOOL9vr", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "VS0xx");
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 34, (-2), "line.separator");
      helpFormatter0.renderWrappedText(stringBuffer1, (-1), 19, "VS0xx");
      helpFormatter0.printHelp(34, " ] [ long ", "", options1, "", true);
      helpFormatter0.setLongOptPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2), options0, 34, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = " ] [ long ";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("VS0xx");
      options0.addOption("VS0xx", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "|F_/ZOOL9vr", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "=";
      helpFormatter0.setNewLine("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Options options0 = new Options();
      helpFormatter0.defaultArgName = null;
      Options options1 = options0.addOption("", "-", false, "--");
      options1.getOptionGroups();
      String string1 = "F";
      options0.getOptions();
      options1.addOption("F", "UM(e3uwy`", false, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      mockPrintWriter0.print(0);
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.getOption("");
      options0.hasLongOption("J1$,5gY}'F");
      helpFormatter0.createPadding(0);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options1 = new Options();
      helpFormatter0.printHelp("NO_ARGS_ALLOWED", " | ", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      helpFormatter0.defaultLongOptPrefix = "\n";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      boolean boolean0 = true;
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter0.printHelp(0, "4RCWFqD&I,", "A]AhKxqEyELL5<^(uP", options2, "4RCWFqD&I,");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "bxm37p9q", "").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 31, 283, "*J]hsF{");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, true);
      options0.getOptionGroups();
      helpFormatter0.printHelp("Ack!%/I+CK$gW;7AH", "", options0, (String) null, false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("%Pj");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append('k');
      helpFormatter0.printWrapped(printWriter0, 9, "");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("-", "", "v5 >W{s\"c2ku8:", "-").when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 283, "*J]hsF{");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.getBuffer();
      helpFormatter0.printHelp("*J]hsF{", "*J]hsF{", options0, "~\"]i]T#EQW(", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockFile mockFile0 = new MockFile("", "usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1832, "3:,R");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      options1.getOptionGroups();
      boolean boolean0 = false;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      int int0 = 10;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 10, options0, (-2), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      helpFormatter0.rtrim("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 0;
      int int1 = 32;
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 32, "org.apache.commons.cli.AlreadySelectedException");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('*');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 1194, "o96j[|%)xa.J", "o96j[|%)xa.J", options0, (-2), 1, "' eas specifigd but an option from this group ", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = new Options();
      options0.getMatchingOptions("");
      options0.getOptionGroups();
      Options options2 = new Options();
      options2.addOption("", false, "");
      options2.hasOption("arg");
      helpFormatter0.printHelp("\n", "%ZmSy;7.GHFUER>", options2, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.printHelp("ajL*&7nMu[cd", "", options0, " [ARG]");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "*J]hsF{";
      helpFormatter0.renderWrappedText(stringBuffer0, 283, 283, "\n");
      Options options2 = new Options();
      helpFormatter0.printHelp("*J]hsF{", options0, false);
      StringWriter stringWriter0 = new StringWriter(27);
      stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer(19);
      helpFormatter0.renderOptions(stringBuffer1, 3, options1, 1, 0);
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "", options0, "-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      StringWriter stringWriter0 = new StringWriter(546);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 283, "*J]hsF{");
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0, true);
      StringWriter stringWriter0 = new StringWriter(3);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer1, 3, options0, 0, 0);
      helpFormatter0.printHelp(3, "*", "-", options0, "\n", true);
      helpFormatter0.setLongOptPrefix("eYo+Q^{F*{ho");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      PrintWriter printWriter0 = null;
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options2, "&Mp\"Orl>jwJz", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      Options options0 = new Options();
      options0.getMatchingOptions(" ");
      options0.getOptionGroups();
      helpFormatter0.printHelp("kJY:", (String) null, options0, "\"", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix("");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 1415, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      String string0 = helpFormatter0.createPadding(1533);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      helpFormatter0.printHelp(string0, "bE", options0, "3$");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1059, 0, "*J]hsF{");
      Options options0 = new Options();
      helpFormatter0.printHelp("60c1[\"O<", options0, true);
      StringWriter stringWriter0 = new StringWriter(3759);
      stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer1, 9, options0, 0, 31);
      helpFormatter0.printHelp(16, "m`H8Wd4a+[YZUU6&", "oSFRD9}5G,j /DaPE?v", options0, "60c1[\"O<", true);
      helpFormatter0.setLongOptPrefix("|F_/ZOOL9vr");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.setDescPadding((-1741));
      helpFormatter0.getLeftPadding();
      String string0 = "S ?Jn79LO]f xV0";
      helpFormatter0.setNewLine("S ?Jn79LO]f xV0");
      helpFormatter0.getDescPadding();
      helpFormatter0.getOptPrefix();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 283, 43, "--");
      Options options0 = new Options();
      helpFormatter0.printHelp("*J]hsF{", options0, false);
      StringWriter stringWriter0 = new StringWriter(6);
      stringWriter0.getBuffer();
      StringBuffer stringBuffer1 = new StringBuffer("");
      helpFormatter0.renderOptions(stringBuffer1, 43, options0, 0, 0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(54, "usage: ", "pW,", options0, "-", false);
      helpFormatter1.setLongOptPrefix("has already been selected: '");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      mockPrintWriter0.print(0.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      String string0 = "O7=6jVdW_?g$q?T";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 711, "");
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1500, "", options0);
      helpFormatter0.getNewLine();
      options0.hasOption("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(1500, "]E9$w%//nkcq8RTq", "]E9$w%//nkcq8RTq", (Options) null, "U2f:X@+ ll*qTuQb*", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("K-F^<08-wCK3");
      StringBuffer stringBuffer0 = new StringBuffer(3);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2720);
      helpFormatter0.defaultDescPad = (-2720);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "OW3Cuf9N";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-5005), "OW3Cuf9N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 298, "*J]hsF{");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim("\n");
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 31, 283, "*J]hsF{");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.getNewLine();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 126;
      helpFormatter0.renderWrappedText(stringBuffer0, 126, 33, "\n");
      Options options0 = new Options();
      helpFormatter0.printHelp("\n", options0, false);
      StringWriter stringWriter0 = new StringWriter(101);
      StringBuffer stringBuffer1 = stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer1, (-4506), options0, 13, 127);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(12, "", "*", options0, "   ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, " | ", false, (String) null);
      Options options1 = options0.addOption(option0);
      options1.hasLongOption((String) null);
      helpFormatter0.printHelp("/d9E[XG", options0, false);
      StringWriter stringWriter0 = new StringWriter(546);
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 834, options0, 3, 834);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp(1, "--", "usage: ", options0, "usage: ", false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = 'k';
      charArray0[2] = '&';
      charArray0[3] = 'h';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'v';
      charArray0[7] = 'n';
      charArray0[8] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 836, options0, 0, 836);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('T');
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2), "' was specified but an option from this group ", "' was specified but an option from this group ", options0, 0, 0, "e4L47", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("q:z&w^323E<", options0);
      options0.hasOption("--");
      options0.getMatchingOptions("--");
      helpFormatter0.defaultSyntaxPrefix = " :: ";
      options0.getOptionGroups();
      Options options1 = options0.addOption("", false, "r#qS,}C~fqc\"3kj3[");
      helpFormatter0.printHelp("txDnHdF:U^6l", "txDnHdF:U^6l", options1, "", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "";
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultNewLine = "line.separator";
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "d>^.edXS.@0{y;Z7\\X";
      helpFormatter0.setLongOptSeparator("d>^.edXS.@0{y;Z7X");
      int int0 = (-3060);
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-3060));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultWidth = 1194;
      helpFormatter0.createPadding(1194);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "@LN+yMs^mQeO83f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(23);
      helpFormatter0.getWidth();
      helpFormatter0.getArgName();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "!N_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      mockPrintWriter0.print(0);
      String string0 = " | ";
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.getOption("X");
      options0.hasLongOption("J1$,5gY}'F");
      String string1 = "";
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1059, "|F_/ZOOL9vr", " | ", options0, 1059, 1059, "", true);
      helpFormatter0.setArgName("Ea");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      mockPrintWriter0.print(0);
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.hasLongOption("J1$,5gY}'F");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1059, "|F_/ZOOL9vr", " | ", options0, 1059, 1059, "", false);
      Collection collection0 = new LinkedList<String>();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "\n", options1, (String) null, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.defaultWidth = 2181;
      int int0 = 1;
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.defaultLeftPad = 1;
      helpFormatter0.setWidth(3);
      helpFormatter0.setWidth(3);
      helpFormatter0.defaultOptPrefix = "usage: ";
      helpFormatter0.setDescPadding(0);
      helpFormatter0.setArgName((String) null);
      helpFormatter0.setSyntaxPrefix("usage: ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      helpFormatter0.setSyntaxPrefix("line.separator");
      helpFormatter0.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|F_/ZOOL9vr");
      mockPrintWriter0.print(0);
      String string0 = " | ";
      mockPrintWriter0.print((double) 3);
      Options options0 = new Options();
      options0.getOption("");
      options0.hasLongOption("J1$,5gY}'F");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1059, "|F_/ZOOL9vr", " | ", options0, 1059, 1059, "", true);
      helpFormatter0.setArgName("");
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, " | ");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('K');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      Options options2 = new Options();
      options1.hasLongOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-6), "", "N", options1, (-6), 34, "\n", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "K", true, "");
      Option option0 = new Option("arg", "");
      options0.addOption(option0);
      options1.hasLongOption("G'(7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("G'(7", options1, true);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter1.renderWrappedText(stringBuffer0, 994, 3, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("q:z&w^32{3E<", options0);
      options0.hasOption("--");
      options0.getMatchingOptions("--");
      helpFormatter0.defaultSyntaxPrefix = " :: ";
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.getBuffer();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.addOption("", true, " :: ");
      helpFormatter0.printHelp("--", "", options0, "-%hn*>u(u33nc", true);
      helpFormatter1.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = "r#qS,}C~fqc\"3kj3[";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      mockPrintWriter0.print(1.0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.getOption("arg");
      options1.hasLongOption("VS0xx");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "|F_/ZOOL9vr", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, (String) null, options1, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      options0.hasShortOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      optionGroup0.addOption(option0);
      Options options1 = options0.addOption(option0);
      mockPrintWriter0.println((String) null);
      options1.hasLongOption("VS0xx");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "Illegal option name '", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options1.addOption((String) null, true, "rN9J$ql");
      helpFormatter0.printHelp("--", "arg", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      Option option0 = new Option("E", " ");
      Options options1 = new Options();
      helpFormatter0.printHelp(" ] [ long ", options1, true);
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 283, 2010, "");
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", options0, true);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.getBuffer();
      helpFormatter0.renderOptions(stringBuffer0, (-221), options0, 31, 2010);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(283, "", "*", options0, " ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ] [ long ");
      mockPrintWriter0.print(3);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "arg");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasLongOption("VS0xx");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2555, "J1$,5gY}'F", "", options1, 19, 19, "|F_/ZOOL9vr", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      options1.addOption((String) null, true, "rN9J$ql");
      helpFormatter0.printHelp("--", "arg", options0, "", true);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      helpFormatter0.setNewLine("arg");
      String string0 = "";
      int int0 = 0;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("usage: ", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "<";
      int int0 = (-1224);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      helpFormatter0.defaultDescPad = 0;
      options0.getOption("'");
      // Undeclared exception!
      helpFormatter0.printHelp(0, "org.apache.commons.cli.HelpFormatter$1", "*P/)7&\"", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(0);
      URI uRI0 = MockURI.aFTPURI;
      String string0 = "org.apache.commons.cli.HelpFormatter$1";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      Option option0 = null;
      try {
        option0 = new Option("--", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '--' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "-Q0`D8RDO`{~|r?1w";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-Q0`D8RDO`{~|r?1w", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "e&bl~W";
      Options options0 = new Options();
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      String string1 = "";
      option0.getValues();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setSelected((Option) null);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, (-1), options2, (-2998), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("-");
      Options options0 = new Options();
      helpFormatter0.printHelp("q:z&w^323E<", options0);
      options0.hasOption("--");
      options0.getMatchingOptions("--");
      helpFormatter0.defaultSyntaxPrefix = " :: ";
      options0.getOptionGroups();
      helpFormatter0.printHelp("-", "-", options0, "-", false);
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setSyntaxPrefix(" :: ");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, "-");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("K", "arg", true, "");
      Option option0 = new Option("arg", "usage: ");
      Options options2 = options1.addOption(option0);
      options2.hasLongOption("usage: ");
      helpFormatter0.printHelp("e&bl~W", options2, true);
      PrintWriter printWriter0 = null;
      String string0 = "";
      option0.getValues();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-4558), "", (String) null, options1, (-1), (-2998), "e&bl~W", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = ">";
      helpFormatter0.setOptPrefix(">");
      helpFormatter0.getLeftPadding();
      String string1 = null;
      Options options0 = new Options();
      String string2 = "";
      String string3 = "";
      String string4 = "mh+y'Ti.59";
      String string5 = "*!iB!RG,vOL{";
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "--");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // --
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
