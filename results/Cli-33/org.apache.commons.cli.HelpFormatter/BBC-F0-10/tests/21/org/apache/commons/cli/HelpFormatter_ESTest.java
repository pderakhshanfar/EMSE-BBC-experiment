/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:12:24 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Locale;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup1);
      option0.setValueSeparator('y');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "A CloneNotSupportedException was thrown: ", "", options0, "A CloneNotSupportedException was thrown: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) helpFormatter1;
      objectArray0[5] = (Object) mockFile0;
      PrintWriter printWriter0 = mockPrintWriter0.format(";L7#su.B", objectArray0);
      // Undeclared exception!
      helpFormatter1.printUsage(printWriter0, 1, "-");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 15, "Pfw/:=?VqR*/$g", "Pfw/:=?VqR*/$g", options0, 63, 63, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "arg");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, 0, "1");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-2));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "Dl|W6uWN>QSt!6LS!/g", "Dl|W6uWN>QSt!6LS!/g", options0, "Dl|W6uWN>QSt!6LS!/g", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix((String) null);
      helpFormatter0.rtrim("|");
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 64;
      String string0 = "";
      options0.getOptionGroups();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1323), "", "--", options0, 1044, 1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("}^[", "A CloneNotSupportedException was thrown: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "A CloneNotSupportedException was thrown: ";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) helpFormatter0;
      objectArray0[6] = (Object) file0;
      objectArray0[7] = (Object) "}^[";
      objectArray0[8] = (Object) "A CloneNotSupportedException was thrown: ";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "# |&d[xk}&Bv^46i", objectArray0);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption("", "usage: ", false, "pkAQWqQfX");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-2089), "}^[", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1681));
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("tE7e+K -|QHPv'\"H", options0, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Object object0 = new Object();
      helpFormatter0.optionComparator = null;
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", true, "");
      options1.addOption("", "The option '", false, "e\"'j.Cgv6TB5v%)PDE");
      options0.getOption("");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Hn", options0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Option cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-568);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-568), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("$", (String) null, false, "arg");
      Options options2 = options1.addOption("arg", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2458), "Y", (String) null, options2, (-2458), 0, "org.apache.commons.cli.Option");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setDescPadding((-2691));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O~54[$Cc<zhB");
      helpFormatter0.setArgName("O~54[$Cc<zhB");
      helpFormatter0.createPadding(1526);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.rtrim("]");
      helpFormatter0.getDescPadding();
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.rtrim("0");
      StringBuffer stringBuffer0 = new StringBuffer("");
      Options options0 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 2141, options0, 2141, 3035);
      helpFormatter0.getLongOptSeparator();
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) null, 74, "VrY\"T`Y", "VrY\"T`Y", options0, (-388), (-1), "--", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("--");
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.defaultDescPad = 1834;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      helpFormatter0.setLongOptSeparator("(Bp!");
      helpFormatter0.getOptPrefix();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      Options options0 = new Options();
      helpFormatter0.printOptions(mockPrintWriter0, 1834, options0, 811, 1834);
      helpFormatter0.rtrim("");
      helpFormatter0.findWrapPos("", 1834, 0);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arg");
      PrintWriter printWriter0 = null;
      int int0 = 728;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 728, 124, "t ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      MockFile mockFile0 = new MockFile("I@Z%3jCzTs4p[u");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "\n", (String) null, options1, 315, 3, "PNYZu", true);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp(3, "\n", "", options0, " ", true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      MockFile mockFile0 = new MockFile("arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mockPrintWriter1.println(false);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, (String) null, "--", options0, 74, 88, "arg", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.toString();
      helpFormatter0.printHelp(1834, "_H]PEOfP4`<7", "`,Pm}hO[gJ`=k3wR", options0, "_H]PEOfP4`<7");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter1.optionComparator = comparator0;
      helpFormatter1.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", options0);
      MockFile mockFile0 = new MockFile((File) null, "   ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      helpFormatter0.printOptions(mockPrintWriter0, (-1002), options0, 74, 3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      String string0 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 195, "", "]", options0, (-2674), (-2334), (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      mockPrintWriter0.printf("--", objectArray0);
      Options options0 = new Options();
      String string0 = "line.separator";
      options0.hasShortOption("+w(d5Azx*5a");
      Option option0 = new Option("U", "line.separator");
      Options options1 = options0.addOption(option0);
      String string1 = "";
      Options options2 = options1.addOption("", "\n", true, ", ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-91), "U", options2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("--", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) helpFormatter0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) locale0;
      objectArray0[7] = (Object) mockPrintWriter0;
      objectArray0[8] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "\n", objectArray0);
      int int0 = (-207);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Options options3 = options2.addOption((String) null, true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-207), options3, (-2051), (-2051));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) pipedOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) pipedOutputStream0;
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      String string0 = "Illegal option name '";
      Options options0 = new Options();
      String string1 = "^+6:W]Ed\\'J<zTxJ7k";
      Option option0 = new Option("arg", "^+6:W]Ed'J<zTxJ7k");
      Options options1 = options0.addOption(option0);
      options1.addOption("arg", "--", true, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-91), "Illegal option name '", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("^F&b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "F1kHt+*Z7", "usage: ", options0, 1, 3, "", true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("Ya");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1506, (-948), "--");
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-949), "}M6~1EQp/x}H", "--", options0, (-49), 27, " R{", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.printHelp((PrintWriter) mockPrintWriter0, 3829, "-", " ", options0, 4, 229, "7V4s3>&C^RnB|h]ovu", false);
      StringBuffer stringBuffer0 = new StringBuffer("--");
      Option option0 = null;
      try {
        option0 = new Option("PCM$hkJ-m", false, " | ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'PCM$hkJ-m' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('A');
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      byteArrayOutputStream0.writeTo(mockPrintStream0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-949), "B*-jX_UibvM~ET", "org.apache.commons.cli.HelpFormatter$OptionComparator", options0, 0, 103, "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("F1kHt+*Z7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "~S!", "usage: ", options0, 3, (-949), "Illegal option name '", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("F1kHt+*Z7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 0, "]", "]", options0, 1, (-494), "--", false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Option option0 = new Option("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-4148), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("`|arO7\"m;<LADl", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2594, "-", ";A4", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter1.defaultNewLine = "--";
      // Undeclared exception!
      try { 
        helpFormatter2.renderOptions(stringBuffer0, 74, (Options) null, 1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 2594;
      helpFormatter0.printHelp(2594, "-", ";A4", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 64, options0, 1, 968);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.renderOptions(stringBuffer0, (-1), options0, 74, 1);
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer1, 0, 79, "\n");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("6", (String) null, false, "6");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("yU|[3Jza!7~be.s4", 0, 0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Object object0 = new Object();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.addOption("", "--", true, "-");
      options1.getOption("-");
      helpFormatter0.printHelp("Hn", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "\n", options1, "`9$'_$6-", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", false, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-804), "TFb*&dDv(1x-u", "TFb*&dDv(1x-u", options1, "TFb*&dDv(1x-u", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      options0.addOption("", (String) null, true, "");
      options1.addOption("", "", true, (String) null);
      options0.getOption((String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.printHelp("e\"'j.Cgv6TB5v%)PDE", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Object object0 = new Object();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "--", true, "");
      Options options2 = options1.addOption("", "The option '", false, "e\"'j.Cgv6TB5v%)PDE");
      options0.getOption("");
      helpFormatter0.printHelp("Hn", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      Options options3 = options2.addOption("", true, "");
      helpFormatter0.printHelp("tEj{|_b", "-", options3, "-", true);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      int int0 = HelpFormatter.DEFAULT_DESC_PAD;
      Options options0 = new Options();
      helpFormatter0.printHelp(669, ":~29_>8haz\t", "-", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 5, options0, 0, 0);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 5, "[");
      helpFormatter0.printHelp("\n", options0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("--");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(669, "+&lHW0rj<&#?3z", "-", options0, "org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 0, "org.apache.commons.cli.HelpFormatter$1");
      helpFormatter1.printHelp(7, "arg", "org.apache.commons.cli.HelpFormatter$1", options0, "-", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(669, ":~29_>8haz\t", "-", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      stringBuffer0.setLength(0);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 0, "[");
      helpFormatter0.setNewLine(" :: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "usage: ");
      Options options1 = new Options();
      helpFormatter0.printHelp("arg", options1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2601, "-", ";A4", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter1.renderOptions(stringBuffer0, 64, options0, 1, 968);
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      helpFormatter3.defaultWidth = 2;
      helpFormatter3.defaultSyntaxPrefix = "-";
      helpFormatter3.renderWrappedText(stringBuffer1, 3, 64, ":B8bd+m;OB|/8zO");
      helpFormatter3.setNewLine("");
      helpFormatter3.printHelp("?ch!", options0, true);
      helpFormatter3.rtrim("");
      helpFormatter1.rtrim("usage: ");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2594, "-", ";A4", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      Options options1 = new Options();
      helpFormatter0.printHelp(74, "A CloneNotSupportedException was thrown: ", "-", options0, "");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "\n");
      StringBuffer stringBuffer2 = helpFormatter3.renderOptions(stringBuffer1, 3, options0, 14, 34);
      helpFormatter1.renderWrappedText(stringBuffer2, 74, (-2), "NUP>3");
      helpFormatter2.setNewLine("arg");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 1, (-1145), "NO_ARGS_ALLOWED");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(92, "tk*^GmKj*Ow5", "", (Options) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", (String) null, false, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("yU|[3Jza!7~be.s4", 8, (-62));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("N`&+m!gLbmdPXt prtf");
      helpFormatter0.getLeftPadding();
      int int0 = 669;
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(1, ">U_)H':Yfl)2", "[ARG...]", options0, "");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      String string0 = "@?O:xM%K`";
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, 615, "@?O:xM%K`");
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ", "arg", true, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      MockFile.createTempFile("' was specified but an option from this group ", "");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "68f*wcG.+^g9Ja";
      Object object1 = new Object();
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("H*(IXqu~I4");
      helpFormatter0.getOptionComparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1462), "", "", options0, " ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("");
      MockFile.createTempFile("' was specified but an option from this group ", "");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "68f*wcG.+^g9Ja";
      Object object1 = new Object();
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("H*(IXqu~I4");
      helpFormatter0.getOptionComparator();
      options0.addOption("", "", false, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp(74, "--", "arg", options0, "Ugt", false);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Object object0 = new Object();
      helpFormatter0.setOptionComparator((Comparator) null);
      Object object1 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "");
      Options options1 = new Options();
      boolean boolean0 = false;
      Options options2 = options1.addOption("arg", false, "-");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 10, options2, 74, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, (-1), 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("");
      MockFile.createTempFile("' was specified but an option from this group ", "");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = new Options();
      options0.getOption("bp{");
      helpFormatter0.printHelp(" ", options0);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(669, "+&lHW0rj<&#?3z", "-", options0, "org.apache.commons.cli.HelpFormatter$1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = new StringBuffer("--");
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 0, "org.apache.commons.cli.HelpFormatter$1");
      Options options1 = new Options();
      helpFormatter0.renderOptions(stringBuffer0, 64, options0, 17, 44);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", (String) null, false, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.findWrapPos("yU|[3Jza!7~be.s4", 8, 8);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 538, "CNP9yA*");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLeftPadding();
      helpFormatter0.getWidth();
      String string0 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "line.separator";
      helpFormatter0.setNewLine("line.separator");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(669, "line.separator", "[", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix("c`6cb}`Y9Wa^\"");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setNewLine("Qy;l_0`hIH=sY^:");
      helpFormatter1.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(55, "7iWX0R", "-", options0, "");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "+&lHW0rj<&#?3z");
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      int int0 = 0;
      charBuffer0.chars();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 74, 3, "+&lHW0rj<&#?3z");
      helpFormatter2.renderWrappedText(stringBuffer0, 3070, (-417), "7iWX0R");
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter3.setNewLine("-");
      // Undeclared exception!
      helpFormatter3.renderWrappedText(stringBuffer1, 0, 74, "arg");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      int int0 = 0;
      Options options0 = new Options();
      options0.addOption("arg", "usage: ", false, "");
      helpFormatter0.getNewLine();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = null;
      int int1 = 1627;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1918, 911, ", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(669, "+&lHW0rj<&#?3z", "-", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 0, "[");
      helpFormatter0.setNewLine(" :: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "usage: ");
      // Undeclared exception!
      helpFormatter1.printHelp(0, ":qu8,>-w4", "usage: ", options0, "-", true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-384));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Of");
      int int0 = 911;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, (-15), 0, "Of");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 34, 74, "");
      int int0 = 0;
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        options0.addOption(" ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(1);
      Options options0 = new Options();
      String string0 = "0\\+fp Lvai5BOwkN";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "[", "0+fp Lvai5BOwkN", options0, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(1, "", "", options0, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("<");
      helpFormatter0.defaultSyntaxPrefix = "<";
      helpFormatter0.getDescPadding();
      helpFormatter0.getLeftPadding();
      String string0 = "P7jm~UlmJ5/";
      helpFormatter0.rtrim("P7jm~UlmJ5/");
      int int0 = 14;
      String string1 = "<";
      Options options0 = new Options();
      String string2 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("-", (String) null, false, "line.separator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-6O]#?0`Ay");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.findWrapPos("org.apache.commons.cli.AlreadySelectedException", (-869), (-869));
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("' was specified but an option from this group ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "68f*wcG.+^g9Ja";
      Object object1 = new Object();
      objectArray0[3] = object1;
      mockPrintWriter0.printf(locale0, "", objectArray0);
      Options options0 = new Options();
      int int0 = (-1040);
      Options options1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1040), "68f*wcG.+^g9Ja", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(669, "+&lHW0rj<&#?3z", "-", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 0, 0);
      helpFormatter0.renderWrappedText(stringBuffer1, 3, 0, "[");
      helpFormatter0.setNewLine(" :: ");
      helpFormatter1.renderWrappedText(stringBuffer0, 74, 1, "usage: ");
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.renderOptions(stringBuffer0, 1, options1, (-2719), 3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) helpFormatter1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) mockFile0;
      objectArray0[3] = (Object) null;
      mockPrintWriter0.format(">]wCgZ\"~yh>", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.addOptionGroup(optionGroup0);
      PrintWriter printWriter0 = mockPrintWriter0.append('@');
      helpFormatter0.printHelp(printWriter0, 74, " ", "usage: ", options0, 74, 3, "NO_ARGS_ALLOWED");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-384));
      Options options0 = new Options();
      String string0 = "";
      Options options1 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" | ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-927), "1D7Fm%SQ@l|G6u?4'", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      Object object0 = new Object();
      helpFormatter0.setOptionComparator((Comparator) null);
      Object object1 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, "");
      Options options1 = new Options();
      helpFormatter0.setArgName(",E6B$Pd6)O7Jx");
      helpFormatter0.printHelp(" ", options0, true);
      helpFormatter0.rtrim(" <5%#gLEv%FudY{=");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("' was specified but an option from this group ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      objectArray0[2] = (Object) "68f*wcG.+^g9Ja";
      Object object1 = new Object();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", "vQeIEKz8:,]e", options0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setLongOptSeparator("");
      helpFormatter0.rtrim("");
      MockFile.createTempFile("' was specified but an option from this group ", "");
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "68f*wcG.+^g9Ja";
      Object object1 = new Object();
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      Options options0 = new Options();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setLongOptPrefix("H*(IXqu~I4");
      Comparator comparator0 = helpFormatter0.getOptionComparator();
      Options options1 = options0.addOption("", "", false, "");
      helpFormatter0.printHelp("Q<T<fJwH~TycWmx", "", options1, "68f*wcG.+^g9Ja");
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      helpFormatter0.setLeftPadding(911);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "-", objectArray0);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)1;
      mockFileOutputStream0.write(byteArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "O2D9$R", options0);
      StringBuffer stringBuffer0 = new StringBuffer(" ");
      helpFormatter0.renderWrappedText(stringBuffer0, (byte)50, 64, " ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, (-83), (int) (byte)1, " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      PrintWriter printWriter0 = null;
      int int0 = 560;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 830, options0, 1, 1);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 560, "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-");
      helpFormatter0.setLeftPadding(911);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[0];
      mockPrintWriter0.printf(locale0, "-", objectArray0);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)1;
      mockFileOutputStream0.write(byteArray0);
      Options options0 = new Options();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, "O2D9$R", options0);
      helpFormatter0.setWidth(74);
      helpFormatter0.setArgName("}_*");
      helpFormatter0.setNewLine("");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getDescPadding();
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = (-154);
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText((StringBuffer) null, 1, (-154), "--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "uP<";
      helpFormatter0.setSyntaxPrefix("uP<");
      helpFormatter0.setArgName("uP<");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      stringBuffer0.appendCodePoint(3);
      int int0 = 0;
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding((-384));
      int int0 = (-2);
      Options options0 = new Options();
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", "", options1, "[");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setLongOptPrefix("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      int int0 = 1364;
      String string0 = "((}A52B~`}";
      String string1 = "~I/av#W";
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.println(74);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 1364, "~I/av#W");
      helpFormatter0.setLeftPadding(1364);
      Options options0 = null;
      helpFormatter0.defaultArgName = " [ARG]";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("vQeIEKz8:,]e", "NO_ARGS_ALLOWED", (Options) null, "cmdLineSyntax not provided");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      int int0 = 669;
      Options options0 = new Options();
      helpFormatter0.printHelp(669, ":~29_>8haz\t", "usage: ", options0, "[");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      Options options1 = new Options();
      Option option0 = new Option((String) null, "");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, " :: ", options0, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      int int0 = 0;
      helpFormatter0.createPadding(0);
      boolean boolean0 = true;
      helpFormatter0.defaultNewLine = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "f>oA\\J7m8\\17%qk'";
      Options options0 = new Options();
      String string1 = "]";
      String string2 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      int int0 = (-378);
      options0.hasOption("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-378));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding((-457));
      helpFormatter0.setSyntaxPrefix("]");
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", false, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      helpFormatter0.setOptPrefix(":~29_>8haz\t");
      helpFormatter0.setNewLine("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      helpFormatter0.printHelp(669, "+&lHW0rj<&#?3z", "-", options0, "[");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 0, options0, 0, 0);
      StringBuffer stringBuffer2 = helpFormatter0.renderWrappedText(stringBuffer1, 3, 1, "[");
      helpFormatter0.setNewLine(" :: ");
      MockFile mockFile0 = new MockFile("f$<} i");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) stringBuffer2;
      objectArray0[2] = (Object) "f$<} i";
      objectArray0[3] = (Object) ":~29_>8haz\t";
      objectArray0[4] = (Object) stringBuffer1;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) "f$<} i";
      objectArray0[7] = (Object) "-";
      PrintWriter printWriter0 = mockPrintWriter0.format("--", objectArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      helpFormatter1.printHelp(printWriter0, 0, "cmdLineSyntax not provided", "nm_Q[QYi&J", options1, 1571, 0, "");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(0);
      helpFormatter0.createPadding(0);
      helpFormatter0.setLeftPadding(5019);
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = (-1);
      helpFormatter0.setOptPrefix("S.^-.$ qn*+-7V[QI");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      helpFormatter0.defaultDescPad = 10;
      int int1 = 32;
      helpFormatter0.setWidth(32);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = "^r+g~l}vS?Olz<A";
      // Undeclared exception!
      try { 
        stringBuffer0.insert(44, (CharSequence) "usage: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("70pk1cD*q[Ii*$");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) " :: ";
      objectArray0[2] = (Object) "70pk1cD*q[Ii*$";
      objectArray0[3] = (Object) " ";
      objectArray0[4] = (Object) helpFormatter0;
      objectArray0[5] = (Object) " ";
      mockPrintWriter0.format(" :: ", objectArray0);
      int int0 = 0;
      String string0 = null;
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("8)-7xviV?6}nV", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '8)-7xviV?6}nV' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions((PrintWriter) null, 749, options0, 749, 749);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 13, "U|k^");
      helpFormatter0.createPadding(10);
      int int0 = 1;
      String string0 = " ]";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("qf@rzJ", (String) null, true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'qf@rzJ' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim((String) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, " | ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  | 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("-6O]#?0`Ay");
      Options options0 = new Options();
      Options options1 = options0.addOption("", (String) null, false, "");
      options1.getOption("A CloneNotSupportedException was thrown: ");
      options1.hasOption("{");
      helpFormatter0.printHelp("-6O]#?0`Ay", options1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2), "A CloneNotSupportedException was thrown: ", "-6O]#?0`Ay", options0, "-6O]#?0`Ay", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("-");
      int int0 = (-365);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string1 = "[";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), "[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.rtrim("");
      File file0 = MockFile.createTempFile("' was specified but an option from this group ", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRANCE;
      String string0 = "68f*wcG.+^g9Ja";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' was specified but an option from this group ";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "68f*wcG.+^g9Ja";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "68f*wcG.+^g9Ja", objectArray0);
      String string1 = "Q<T<fJwH~TycWmx";
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage(printWriter0, 0, "Q<T<fJwH~TycWmx", options0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", options0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("-", helpFormatter0.getOptPrefix());
      assertEquals("arg", helpFormatter0.getArgName());
  }
}
