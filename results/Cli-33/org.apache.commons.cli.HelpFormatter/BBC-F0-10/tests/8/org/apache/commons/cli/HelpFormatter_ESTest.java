/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:09:11 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 14;
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.setLeftPadding(14);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getDescPadding();
      helpFormatter0.createPadding(3);
      String string0 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      PrintWriter printWriter0 = mockPrintWriter0.append('7');
      Options options0 = new Options();
      helpFormatter0.printOptions(printWriter0, 0, options0, 13, 1768);
      helpFormatter0.getDescPadding();
      helpFormatter0.defaultLeftPad = 0;
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      int int0 = (-1860);
      int int1 = 13;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-1860), "--", "--", options0, 13, 13, "--");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator((String) null);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = options0.addOption("pk2dk$5$", "pk2dk$5$", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      Option option0 = new Option((String) null, "", false, "/.=");
      Options options3 = options2.addOption(option0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2914, "=jy<}u.f&X2pOLatn<", options3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "[ Options: [ short ", true, ":L'r9Fwa7,m[73[g{y$");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "[";
      helpFormatter1.printHelp("arg", "[", options1, "", true);
      helpFormatter0.getLeftPadding();
      File file0 = MockFile.createTempFile("BR%", "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter0 = mockPrintWriter1.format("1rs", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter2, 1, "", "arg", options1, (-1017), 74, "--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = (-2557);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("cmdLineSyntax not provided", "cmdLineSyntax not provided", options0, "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2071), ">}Pp*OAm}X?[", ">}Pp*OAm}X?[", options0, (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "usage: ", options0, " ", true);
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 9, 9);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = false;
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-2106), "", "", options1, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = false;
      options0.addOption((String) null, "--", false, (String) null);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      String string0 = "cmdLineSyntax nt Xrovided";
      helpFormatter1.printHelp("cmdLineSyntax nt Xrovided", "n;W", options0, "usage: ", true);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.setNewLine((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.createPadding(74);
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, (-1040), (Options) null, 1, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 74, "org.apache.commons.cli.ParseException", "+`N(CXH4B0NLf", options0, 641, (-1350), "line.separator");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("O", "usage: ");
      optionGroup0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-1464), " ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append('_');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", true, "--");
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 12, options2, 5, 63);
      // Undeclared exception!
      helpFormatter0.renderOptions(stringBuffer1, 0, options0, 0, 74);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      boolean boolean0 = true;
      String string0 = "gX+|";
      Options options1 = options0.addOption("arg", "usage: ", true, "gX+|");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options0.hasShortOption("");
      // Undeclared exception!
      helpFormatter2.printHelp(1, "Am'a[.x@u[x'`t#", "usage: ", options1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printOptions(mockPrintWriter0, 33, options0, 1, 74);
      options0.hasShortOption("]");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 3, "--", "-", options0, 74, 3, "arg", true);
      helpFormatter1.getLongOptPrefix();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), "!,D=13KIxu.c}-t");
      helpFormatter3.printUsage((PrintWriter) mockPrintWriter0, 3, "RyY", options0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('C');
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuffer stringBuffer1 = new StringBuffer();
      Options options0 = new Options();
      Option option0 = new Option("", (String) null, true, "1pF43/");
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 66, "u\"lx)j(", options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 2131, "# W7", options0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.defaultWidth = (-836);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(" ", "", options0, "", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      options0.addOption((String) null, "=e", false, "--");
      Options options1 = options0.addOption("arg", false, "-");
      helpFormatter0.printHelp("-", "", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = helpFormatter0.defaultOptPrefix;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("-", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("# W7", " ", options1, "arg", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\n");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      Options options2 = new Options();
      helpFormatter0.printHelp("`", "-", options2, "", true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, "Cannot add value, list full.");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "arg", "h6|*!^af^X)FYPn,", (Options) null, 1, 3, "Cannot add value, list full.");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 63, "/s", "/s", options0, 89, 89, "/s");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printHelp("/s", options0);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "\n", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      int int0 = (-709);
      String string1 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(3, "", "Yt~y>hPGs&+J8)4", options0, "fiyDh:'le>5F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter1.printHelp("erFu%P.7flwC~t", "--", options1, "--", false);
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos((String) null, 74, (-4448));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      helpFormatter0.printHelp("usage: ", "", options0, "\n", true);
      String string1 = "";
      MockFile mockFile0 = new MockFile("PSx_P(?_@()GXS", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "<";
      objectArray0[1] = (Object) mockFileOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "<", objectArray0);
      // Undeclared exception!
      helpFormatter1.printWrapped(printWriter0, 0, "|y[aL%;W");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("W>'G0P!0!C~B.tq`bM", "]", (Options) null, "]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "# W7";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", " ");
      int int0 = (-244);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1), "\n", "Th opeion '", options0, (-244), 3, "iyz#+* b6H||xes");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-1456), "", "bwy9u*go}", options0, (-1456), (-1456), "wkl5x?/k'S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 6, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "usage: ");
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.hasShortOption((String) null);
      helpFormatter2.defaultDescPad = (-924);
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter1, 3, "arg", "\n", options0, 74, 1, " ", true);
      helpFormatter2.getLongOptPrefix();
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultArgName;
      StringWriter stringWriter0 = new StringWriter(74);
      stringWriter0.append('!');
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      int int0 = (-1756);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 0, (-1756), "\n");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "arg");
      stringWriter0.append('C');
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "usage: ");
      stringWriter3.append('B');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      stringBuffer0.append('J');
      stringBuffer0.setLength(3);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, 1, (-463), "MlXM*Npu#pt+]G[v2");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('p');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      int int0 = (-184);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-184), (-1634), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ]");
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      Options options0 = new Options();
      Options options1 = options0.addOption("", "-", false, "-");
      Options options2 = options1.addOption("arg", true, (String) null);
      Option option0 = new Option((String) null, true, " ");
      Options options3 = options2.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options4 = options3.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(printWriter0, (-560), options4, (-2), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "");
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, (-3656), "kz4E`HbS]6!w", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.rtrim("");
      try { 
        MockURI.URI("", "-", "8AO6");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :-#8AO6
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultArgName;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "usage: ");
      stringWriter0.append('C');
      options0.hasShortOption("org.apache.commons.cli.HelpFormatter");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "usage: ";
      objectArray0[1] = (Object) "6- ?";
      objectArray0[2] = (Object) "arg";
      objectArray0[3] = (Object) "QTY^'wC`raX";
      objectArray0[4] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) stringWriter1;
      PrintWriter printWriter0 = mockPrintWriter0.format("=9{w", objectArray0);
      helpFormatter0.printHelp(printWriter0, 114, "CS'}quJ/Yb]pY[^", "QTY^'wC`raX", options0, 10, 114, (String) null, true);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(0);
      Options options0 = new Options();
      options0.addOption((String) null, "", false, "");
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '\"';
      mockPrintWriter0.print(charArray0);
      Options options1 = options0.addOption("", "8Ww^-X]fV`", true, "-");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options0.hasShortOption("CS'}quJ/Yb]pY[^");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "6- ?", "E<B5yG@h_", options0, 753, 64, "QTY^'wC`raX", true);
      helpFormatter1.getLongOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, (-1405), options1, 34, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultArgName;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      stringWriter0.append('C');
      StringWriter stringWriter1 = stringWriter0.append('y');
      stringWriter1.getBuffer();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = 0;
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "usage: ", options0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.createPadding(31);
      PrintWriter printWriter0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 3, "", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "usage: ");
      mockPrintWriter1.println(1748);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 2, options1, 10, 58);
      helpFormatter0.renderWrappedText(stringBuffer1, 58, 3, "");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter2.getOptPrefix();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "# W7";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1634), "\n", "The option '", options0, (-244), 3, "iyz#+* b6H||xes");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockFileOutputStream0.write(25);
      Options options0 = new Options();
      options0.addOption((String) null, "", false, "");
      Options options1 = options0.addOption("", "8Ww^-X]fV`", true, "-");
      options1.getMatchingOptions("");
      mockPrintWriter0.println((-1655));
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 1748, "-", "-", options1, 753, 1748, "!3<be3@n#q", true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      mockPrintWriter0.println(69);
      Options options1 = new Options();
      helpFormatter0.createPadding(69);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, (-563), 333, "\n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rMD@9[!9A{.Pe");
      helpFormatter0.printHelp("[ option: ", "", options0, "", true);
      options0.getMatchingOptions(" ");
      mockPrintWriter0.println(9);
      Options options1 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      options1.hasShortOption("SY:");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 753, "E<B5yG@h_", "QTY^'wC`raX", options1, 753, 1, "-", true);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.printHelp(5, " 5Q?5evM`,U", "[", options1, "--");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      String string0 = helpFormatter0.defaultArgName;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "usage: ");
      stringWriter0.append('C');
      StringWriter stringWriter1 = stringWriter0.append('y');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "\n");
      helpFormatter0.setOptionComparator((Comparator) null);
      helpFormatter0.renderWrappedText(stringBuffer1, 67, 5, "usage: ");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      mockPrintWriter0.println(69);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printUsage((PrintWriter) mockPrintWriter1, 3, "", options0);
      // Undeclared exception!
      try { 
        helpFormatter2.printWrapped((PrintWriter) null, 1, (-463), "org.apache.commons.cli.OptionGroup");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rMD@9[!9A{.Pe");
      helpFormatter0.printHelp("[ option: ", "", options0, "", true);
      options0.getMatchingOptions(" ");
      mockPrintWriter0.println(9);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 9, "[ option: ");
      Option option0 = new Option((String) null, "]");
      Options options1 = new Options();
      options1.addOption(option0);
      helpFormatter0.printHelp(" :: ", options1);
      options1.addOption("", "", true, "\n");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 13, (String) null, "W<?nfrhR=!^v9L0m*u", options0, 1, (-2), "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Option option0 = new Option("", " | ");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("", " ", false, "-");
      Options options2 = options1.addOption(option0);
      option0.setOptionalArg(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options3 = options2.addOption("", true, "--");
      options3.addOption(option0);
      helpFormatter1.printHelp("-", options3);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      HelpFormatter helpFormatter3 = new HelpFormatter();
      Options options4 = new Options();
      helpFormatter3.printHelp("\n", options4, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      mockPrintWriter0.println(69);
      Options options1 = new Options();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options2 = new Options();
      options1.getMatchingOptions("arg");
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter1, 3, "-", (String) null, options2, 3, 31, "iW;", true);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, options1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("# W7", " ", options1, "arg", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 43, "usage: ");
      Option option1 = null;
      try {
        option1 = new Option(" | ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("$k7 8G[y3 p", options1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "-", "", options1, 21, 74, "y<*R5V:8", true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("arg", "' contains an illegal character : '", (Options) null, "--", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      String string0 = " eiPW=vcGI7|=&vob";
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rMD@9[!9A{.Pe");
      helpFormatter0.printHelp("[ option: ", "", options0, "", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-4), "rMD@9[!9A{.Pe");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("u\"lx)j(", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "usage: ";
      objectArray0[3] = (Object) "-";
      PrintWriter printWriter0 = mockPrintWriter0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(74);
      // Undeclared exception!
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 0, 1, "usage: ");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "usage: ");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringBuffer0.append(1899L);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-2481), (Options) null, 44, 2626);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "[ option: ";
      helpFormatter0.setSyntaxPrefix("org.apache.commons.cli.HelpFormatter");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "[ option: ", options0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix(":iKj/q-U&@");
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2008, "sl?= FV8", "M[9.V=a", options0, 0, 0, "ev)|X=]R(Br", false);
      helpFormatter0.renderOptions((StringBuffer) null, 114, options0, 593, 593);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(0);
      Options options0 = new Options();
      options0.addOption((String) null, "", false, "");
      Options options1 = options0.addOption("", "8Ww^-X]fV`", true, "-");
      options1.getMatchingOptions("");
      mockPrintWriter0.println((-1655));
      Options options2 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, (-1040), "-", "-", options1, 753, (-1040), "!3<be3@n#q", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("usage: ", "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      helpFormatter0.renderWrappedText(stringBuffer0, 3394, 421, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter1.createPadding(0);
      helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, 31, 3, "o@[%2");
      helpFormatter0.getOptPrefix();
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(mockPrintWriter0, 1, (Options) null, 32, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintWriter0;
      Options options0 = new Options();
      options0.helpOptions();
      String string0 = "";
      helpFormatter0.printHelp("cmdLineSyntax not provided", "", options0, (String) null);
      helpFormatter0.setLeftPadding(1);
      helpFormatter0.getDescPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "ZPA&Q `cErv\nova2!", options0, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = (-1554);
      String string0 = ";z7~,bt^-!l\\P6'N";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1554), (-1554), ";z7~,bt^-!lP6'N");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      helpFormatter0.defaultDescPad = (-987);
      Options options1 = new Options();
      options1.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("z>G<te&zs]A0TV<", "Z4b]h}^", options1, "cmdLineSyntax not provided");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(10, " ", "\"*So~Aq#;+$8u@..@M", options2, "\"*So~Aq#;+$8u@..@M", false);
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y<sZE3qCiLw&");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "Y<sZE3qCiLw&";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options2;
      objectArray0[5] = (Object) "arg";
      Options options3 = options1.addOption("arg", true, "-");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 0, (String) null, "@ {2ntB>9*__td>[E4#", options3, 0, 10, "arg", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) mockPrintWriter0;
      mockFile0.toURI();
      Object object0 = new Object();
      objectArray0[6] = object0;
      String string0 = helpFormatter0.defaultArgName;
      mockPrintWriter0.append((CharSequence) " ");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 115, 115, "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(0);
      Options options0 = new Options();
      options0.addOption((String) null, "", false, "");
      options0.getMatchingOptions("");
      mockPrintWriter0.println(3);
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "", "", options1, 3, 0, "eJTM4FdKL4?r+V~b`", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      helpFormatter1.printHelp("$k7 8G[y3 p", options1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      MockFile mockFile0 = new MockFile("", "![ *q0plZi&P");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      helpFormatter0.rtrim("usage: ");
      mockPrintWriter0.append((CharSequence) "\n");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 4020, "cmdLineSyntax not provided", "cmdLineSyn not qrvided", (Options) null, 4020, 1245, "cZU()U%.+D)", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOption("arg", "usage: ", true, "gX+|");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      options0.hasShortOption("");
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", "-", options1, 32, 1, (String) null, true);
      helpFormatter2.getLongOptPrefix();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "gX+|");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-392), options1, 3, 2424);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      String string0 = " | ";
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 74, "-");
      Option option0 = new Option("", " | ");
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addOption("", " ", false, "-");
      Options options2 = options1.addOption(option0);
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      options2.addOption("", true, "--");
      // Undeclared exception!
      helpFormatter0.printOptions(mockPrintWriter1, 1, options1, 103, 72);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      helpFormatter0.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      Option option0 = new Option("", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp("$k7 8G[y3 p", options1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 74, "usage: ", " | ", options0, 74, 3, "arg", true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      helpFormatter0.renderOptions(stringBuffer0, 4699, options1, 114, 114);
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = HelpFormatter.DEFAULT_OPT_PREFIX;
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" eiPW=vcGI7|=&vob");
      helpFormatter0.printHelp(">", "pTQ__\"IFSjs", options0, "pTQ__\"IFSjs", true);
      int int0 = 108;
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 108, "!?eC:x");
      Option option0 = new Option("A", "-");
      Options options1 = options0.addOption(option0);
      Options options2 = new Options();
      helpFormatter0.printHelp("pTQ__\"IFSjs", options1);
      helpFormatter0.getDescPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-2), 531, "qW!~[;");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("-", "arg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 421, 3394, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.getLongOptSeparator();
      helpFormatter1.createPadding(1);
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, 661, (-2801), "arg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(10, " ", "\"*So~Aq#;+$8u@..@M", options2, "\"*So~Aq#;+$8u@..@M", false);
      helpFormatter0.setWidth((-12));
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y<sZE3qCiLw&");
      String string0 = helpFormatter0.defaultArgName;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      mockPrintWriter0.append((CharSequence) "\"*So~Aq#;+$8u@..@M");
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      stringWriter0.write(charArray0);
      mockPrintWriter0.checkError();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2347), "\"*So~Aq#;+$8u@..@M", "", options1, (-1), 13, " ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFile mockFile0 = new MockFile("arg", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      helpFormatter0.renderWrappedText(stringBuffer0, 3394, 421, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptSeparator();
      helpFormatter1.createPadding(421);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 0, (-4536), ">");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      File file0 = MockFile.createTempFile("u\"lx)j(", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      String string1 = helpFormatter0.defaultArgName;
      mockPrintWriter0.append((CharSequence) "arg");
      Options options0 = null;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "arg");
      StringWriter stringWriter2 = stringWriter1.append('C');
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "u\"lx)j(");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_~B^s");
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.createPadding(2534);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 2534, (-3683), " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "");
      Options options1 = options0.addOption(option0);
      helpFormatter0.printHelp(3, " ", "\"*So~Aq#;+$8u@..@M", options1, "\"*So~Aq#;+$8u@..@M", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y<sZE3qCiLw&");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "Y<sZE3qCiLw&";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options1;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) options1;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) "Y<sZE3qCiLw&";
      PrintStream printStream0 = mockPrintStream0.format(">", objectArray0);
      printStream0.format("Y<sZE3qCiLw&", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "VJ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("u\"lx)j(", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter1 = mockPrintWriter0.printf("--", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0);
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(printWriter1, 0, "M[9.V=a", "M[9.V=a", options0, 9, 5, "ev)|X=]R(Br", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "OCP&c<x )qL89pU4");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "HV", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.findWrapPos("E~", 1255, (-2));
      helpFormatter0.getLongOptPrefix();
      Options options2 = new Options();
      helpFormatter0.printHelp((-1), "sBVXBpUZ", "", options2, "org.apache.commons.cli.HelpFormatter", false);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("arg", "-");
      Options options1 = options0.addOption(option0);
      String string0 = " :: ";
      options1.getOption(" :: ");
      String string1 = "F ";
      options0.hasOption("F ");
      helpFormatter0.printHelp("F ", options1);
      options1.hasOption("W.");
      String string2 = "?(x";
      option0.clone();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "?(x", options0, "F ", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "OCP&c<x )qL89pU4");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("arg", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) options1;
      mockPrintStream0.format("OCP&c<x )qL89pU4", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Option> comparator0 = (Comparator<Option>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      assertEquals(74, helpFormatter0.defaultWidth);
      assertEquals("--", helpFormatter0.getLongOptPrefix());
      assertEquals(1, helpFormatter0.defaultLeftPad);
      assertEquals(3, helpFormatter0.defaultDescPad);
      assertEquals("usage: ", helpFormatter0.getSyntaxPrefix());
      assertEquals(" ", helpFormatter0.getLongOptSeparator());
      assertEquals("arg", helpFormatter0.getArgName());
      assertEquals("-", helpFormatter0.getOptPrefix());
      
      helpFormatter0.setArgName((String) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      helpFormatter0.setArgName("%^Xqs+g");
      Option option0 = new Option("", "%^Xqs+g");
      Options options1 = options0.addOption(option0);
      option0.clearValues();
      boolean boolean0 = false;
      option0.setOptionalArg(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      String string0 = "U>n0RARP";
      helpFormatter0.printHelp("s, ", "U>n0RARP", options0, "[ option: ", true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.getArgName();
      int int0 = (-1074);
      Options options0 = new Options();
      options0.getOption("[ Options: [ short ");
      // Undeclared exception!
      try { 
        options0.addOption("-", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      Options options0 = new Options();
      String string0 = "";
      helpFormatter0.printHelp("K#RP)40", "", options0, "", true);
      helpFormatter0.setOptPrefix("K#RP)40");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 3, options0, (-4812), (-4812));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.getNewLine();
          String string0 = " eiPW=vcGI7|=&vob";
          Options options0 = new Options();
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rMD@9[!9A{.Pe");
          helpFormatter0.printHelp("[ option: ", "", options0, "", true);
          // Undeclared exception!
          helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "rMD@9[!9A{.Pe");
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      mockFileOutputStream0.write(0);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "", false, "");
      options0.getMatchingOptions("");
      mockPrintWriter0.println(3);
      options1.hasShortOption("]");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 81, "8Ww^-X]fV`", (String) null, options1, (-218), (-2034), "Bha", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("QJ");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("y2+xSt:u@ F");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, " ");
      Option option0 = new Option("arg", "");
      Options options2 = options1.addOption(option0);
      helpFormatter0.printHelp(10, " ", "\"*So~Aq#;+$8u@..@M", options2, "\"*So~Aq#;+$8u@..@M", false);
      helpFormatter0.setWidth(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Y<sZE3qCiLw&");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) options2;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "Y<sZE3qCiLw&";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) options2;
      objectArray0[5] = (Object) "arg";
      objectArray0[6] = (Object) options2;
      objectArray0[7] = (Object) helpFormatter0;
      objectArray0[8] = (Object) "Y<sZE3qCiLw&";
      PrintStream printStream0 = mockPrintStream0.format(">", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-1), "VJ");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption(" ]", "usage: ", true, "+L0i>0xG*Grw;zm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' ]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("_~B^s");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 3394, "_~B^s");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("$Idr f^Z`G]xLP");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      assertEquals(74, helpFormatter1.defaultWidth);
      
      helpFormatter1.printHelp("$Idr f^Z`G]xLP", "arg", options0, "usage: ", true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter1, 3, " | ");
      Option option0 = new Option("", "");
      options0.addOption(option0);
      helpFormatter1.setOptionComparator((Comparator) null);
      assertEquals("arg", helpFormatter1.getArgName());
      assertEquals(3, helpFormatter1.defaultDescPad);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      Option option0 = new Option("", "%^Xqs+g");
      Options options1 = options0.addOption(option0);
      option0.clearValues();
      boolean boolean0 = false;
      option0.setOptionalArg(false);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options1, "H9&b4c9Y L\"`_ub");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("u\"lx)j(", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('C');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      String string0 = helpFormatter0.defaultArgName;
      PrintWriter printWriter1 = mockPrintWriter1.append((CharSequence) "arg");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter1, 694, "u\"lx)j(", "1>%Z*;Z1s7b", (Options) null, 694, 4020, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine("))K(bMT5s\"!");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setOptPrefix("usage: ");
      int int0 = helpFormatter0.getWidth();
      assertEquals("usage: ", helpFormatter0.getOptPrefix());
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptPrefix();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      helpFormatter0.defaultOptPrefix = "-";
      // Undeclared exception!
      try { 
        stringBuffer0.insert(811, (long) 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 811
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setNewLine(" ] [ long ");
      String string0 = "[R$";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[R$");
      mockPrintWriter0.println((long) 3);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "usage: ", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setWidth(0);
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "OCP&c<x )qL89pU4");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "HV", false, " ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options2.addOption("arg", ">Mzsw}jig2-u", false, ">Mzsw}jig2-u");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 0, options3, (-1), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      String string0 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      Options options0 = new Options();
      options0.hasLongOption((String) null);
      options0.getOption("rgqL-PNz1?*i+d<I");
      options0.hasOption("rSyPj!PF\"` y d0O");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      assertEquals(1, helpFormatter0.defaultLeftPad);
      
      helpFormatter0.setLeftPadding(0);
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.getOptionComparator();
      assertEquals(0, helpFormatter0.defaultLeftPad);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      boolean boolean0 = true;
      String string0 = "]";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
