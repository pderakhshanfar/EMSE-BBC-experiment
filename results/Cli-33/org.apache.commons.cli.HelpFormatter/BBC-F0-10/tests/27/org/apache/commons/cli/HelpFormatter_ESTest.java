/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:16:41 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      OptionGroup optionGroup0 = new OptionGroup();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 2334, "");
      helpFormatter0.setLeftPadding((-205));
      Option option0 = new Option("arg", "", false, "^x");
      helpFormatter0.getLeftPadding();
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = (-4006);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "$>f~x,W@*l\"u>`C-";
      String string1 = "G0f";
      helpFormatter0.setSyntaxPrefix("$>f~x,W@*l\"u>`C-");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("arg", "G0f", false, "--");
      Option option0 = new Option("G0f", "arg");
      Options options3 = options2.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", options3, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      String string0 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, (-497), "nq,gtC|9U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-1), "usage: ", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 116, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = null;
      helpFormatter0.defaultLeftPad = 2157;
      helpFormatter0.setLeftPadding((-1389));
      helpFormatter0.setLongOptSeparator(" ");
      helpFormatter0.setLeftPadding(2157);
      helpFormatter0.getSyntaxPrefix();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "DrQ", "DrQ", (Options) null, "<");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Option option1 = new Option((String) null, "--", true, "usage: ");
      optionGroup1.addOption(option1);
      OptionGroup optionGroup2 = optionGroup0.addOption(option1);
      Options options1 = options0.addOptionGroup(optionGroup2);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-5286), "1&jz8Z$5pk674}8J%r", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 8;
      Options options0 = new Options();
      helpFormatter0.renderOptions((StringBuffer) null, 1295, options0, 8, 8);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 1295, 8, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      String string0 = "M*yNL-Nsxt\\6i>gD";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-3298), ">");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.HelpFormatter", (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "org.apache.commons.cli.ParseException";
      Options options0 = null;
      int int0 = 18;
      helpFormatter0.defaultWidth = 18;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.ParseException", (Options) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("--");
      // Undeclared exception!
      helpFormatter1.renderWrappedText(stringBuffer0, 1, 37, "6#1L11m;0Ei)O~");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "(5uz:{Z>_JO1 ";
      helpFormatter0.setArgName("(5uz:{Z>_JO1 ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.printWrapped(printWriter0, 0, "(5uz:{Z>_JO1 ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      boolean boolean0 = true;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) options0;
      Locale locale1 = Locale.ITALY;
      locale0.getDisplayCountry(locale1);
      PrintWriter printWriter0 = mockPrintWriter2.printf(locale0, "usage: ", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter1.printOptions(printWriter0, (-2305), options0, (-548), (-548));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLeftPadding((-1));
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "/$u", " ", options0, "--", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.findWrapPos("", 1, 0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Options options0 = new Options();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1777), " Y3!C", " Y3!C", options0, "?!tU3!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) null, 1, "$Be:f");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.println((double) 1);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 74, "K ", (String) null, options0, (-38), 3, (String) null, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = new Options();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("usage: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = new Locale("-");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) options0;
      objectArray0[1] = (Object) "b$;i10#";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) "b$;i10#";
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "org.apache.commons.cli.Option", objectArray0);
      helpFormatter0.printHelp(printWriter0, 8, "org.apache.commons.cli.Option", "?%z(^w^", options1, 44, 2, (String) null, true);
      helpFormatter0.getOptionComparator();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2, "?%z(^w^", "5", options0, 1596, 64, "ysAL7x{_G*");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "XY\\oo%q)y?&4_?";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(32, "XYoo%q)y?&4_?", "-B6*lS+5UWfe;U4c2$", (Options) null, "org.apache.commons.cli.Option");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      optionGroup0.toString();
      optionGroup0.addOption(option0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setWidth(1);
      // Undeclared exception!
      helpFormatter0.printHelp("arg", "-", options0, (String) null, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.findWrapPos("dE{", 74, (-488));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--").when(comparator0).toString();
      doReturn(1813).when(comparator0).compare(anyString() , anyString());
      helpFormatter0.setOptionComparator(comparator0);
      String string0 = HelpFormatter.DEFAULT_ARG_NAME;
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("l", "usage: ");
      Options options1 = options0.addOption(option0);
      options0.addOption("arg", "arg", false, "--");
      options0.getOptions();
      helpFormatter0.printHelp((-1), "$", "A$W)8#;{^h2\"r<wd7", options0, "A$W)8#;{^h2\"r<wd7", false);
      Options options2 = new Options();
      helpFormatter0.setWidth((-2));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ecuD'Mq(gOGCtw@!");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$";
      objectArray0[1] = (Object) option0;
      objectArray0[2] = (Object) options1;
      objectArray0[3] = (Object) "A$W)8#;{^h2\"r<wd7";
      objectArray0[4] = (Object) "l";
      objectArray0[5] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("<", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2299), (String) null, "<", options2, (-2299), (-1), (String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", "--");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      Options options1 = options0.addOption("", "org.apache.commons.cli.HelpFormatter$1", true, "/df=`];k");
      helpFormatter0.printHelp(64, "yFW<&I35~o'McWDG", "=7+3},I#4)", options1, "=7+3},I#4)", true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("arg", (String) null);
      optionGroup0.toString();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp("-", options0, true);
      helpFormatter0.findWrapPos("cmdLineSyntax not provided", 9, 9);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", false, "");
      String string1 = "[";
      option0.setArgName("[");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", true, "3Rmd,wxah");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Options options3 = options1.addOption("", true, "");
      Options options4 = options3.addOptionGroup(optionGroup0);
      OptionGroup optionGroup2 = optionGroup0.addOption(option0);
      options4.addOptionGroup(optionGroup2);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 0, "z[fE#45ylJ", options2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.defaultWidth = (-4006);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = "$>f~x,W@*l\"u>`C-";
      helpFormatter0.setSyntaxPrefix("$>f~x,W@*l\"u>`C-");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("$>f~x,W@*l\"u>`C-", "G0f", (Options) null, "<");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options0.getOptions();
      helpFormatter0.setSyntaxPrefix("s:yz");
      helpFormatter0.setLongOptPrefix("\n");
      Options options2 = options1.addOption("", " ", false, "--");
      Options options3 = new Options();
      options3.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 850, "e# ++", "\n", options2, 3, 1, "\n", false);
      Options options4 = options3.addOption((String) null, true, "\"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 58, "--", options4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      helpFormatter0.setSyntaxPrefix("\"");
      Options options0 = new Options();
      options0.addOption((String) null, "--", true, ">uf");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.createPadding(3);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3, "[ option: ", "", (Options) null, 3414, 57, ">uf", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      Options options2 = options1.addOption("", "$1P}M'EiJhb", true, "+r25.9Y?XR8M");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.createPadding(859);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 859, ";;al<7npU?sg0XP6!j;", "-", options2, 859, 74, "", true);
      helpFormatter0.printOptions(mockPrintWriter0, 859, options2, 859, 859);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-1536), "e# ++", "<!:dyW", options1, (-1536), (-3032), "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      int int0 = 859;
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      String string0 = "+r25.9Y?XR8M";
      Options options2 = options1.addOption("", "$1P}M'EiJhb", true, "+r25.9Y?XR8M");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      helpFormatter0.createPadding(859);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 859, ";;al<7npU?sg0XP6!j;", "-", options2, 859, 74, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("e# ++");
      // Undeclared exception!
      try { 
        helpFormatter1.renderWrappedText(stringBuffer0, 1, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append('m');
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "usage: ");
      options1.addOption("", "", false, (String) null);
      helpFormatter0.printHelp(2, "EK", "#Zou<", options1, "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.printHelp("6+W=x[", options1, true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-714));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      Options options1 = options0.addOptionGroup(optionGroup1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("R", "[-R null]", options1, "a_<fh", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "arg", options0, "org.apache.commons.cli.HelpFormatter$1", false);
      Options options1 = new Options();
      options1.getOptions();
      helpFormatter0.setSyntaxPrefix("u*:TCWh^;RaEy>qe");
      helpFormatter1.setLongOptPrefix(" ");
      Options options2 = options1.addOption("", "--", false, "|");
      Options options3 = new Options();
      options2.getOptions();
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Options options4 = new Options();
      // Undeclared exception!
      helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "--", "`^tw;=6f4:C0N?U", options4, (-776), 3, "D", false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      mockPrintWriter0.append('m');
      mockPrintWriter0.println(false);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1745, 1745, "   ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "arg");
      Options options3 = options2.addOptionGroup(optionGroup0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, "<", options3);
      helpFormatter1.getWidth();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1040, (String) null, (Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("EK", "N", true, "\u0000");
      options1.addOption("", true, "]");
      Collection collection0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-528), "EK", (String) null, (Options) null, "]", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 10;
      String string0 = "8J.vN/C%Y,GElZ(R2e";
      String string1 = "w{!+?r:W5W9\"`+*CB";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Fo?~bHO%'${N?m0+,", "", (Options) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-714));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, (-714), "\"", "R", options1, 66, (-714), "'", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      boolean boolean0 = true;
      Options options1 = options0.addOption("arg", " ", true, "-");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      String string1 = "";
      Option option0 = new Option("arg", "", false, "");
      Options options3 = options2.addOption(option0);
      options1.addOption(option0);
      String string2 = "v~p)fvAc<cb";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-205), "", "L", options3, "v~p)fvAc<cb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      int int0 = 2597;
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 14, "--", "usage: ", options0, 4, 2597, "usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      options0.addOption((String) null, "'M", true, "arg");
      boolean boolean0 = false;
      helpFormatter0.printHelp(2, "AvLto]", "AvLto]", options0, "`^tw;=6f4:C0N?U", false);
      helpFormatter0.setArgName("`^tw;=6f4:C0N?U");
      // Undeclared exception!
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, "AvLto]", "AvLto]", options0, 1, 2, "'M");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      String string0 = "`^tw;\\=6f4:C0N?U";
      String string1 = "'M";
      options0.addOption((String) null, "'M", true, "arg");
      int int0 = 2;
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options0.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("s:yz");
      helpFormatter0.setLongOptPrefix("   ");
      Options options2 = options1.addOption("arg", "arg", true, "7&gaDrxXW-<$BJ6>%[;");
      Options options3 = new Options();
      options2.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 66, "-", "x2|@o~|,5y", options1, 862, 3, "-", false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\n", "\n", (Options) null, 3, 3, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("--", (String) null, (String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "arg");
      options0.getOptions();
      helpFormatter0.printHelp((-1), "\n", "", options2, "AvLto]", true);
      helpFormatter0.setArgName("AvLto]");
      helpFormatter0.setWidth(6);
      Options options3 = options0.addOption(option0);
      options3.helpOptions();
      helpFormatter0.printHelp("c\tS0~@$ri-X\" =;P)g", "", options3, "", false);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      printWriter0.println(false);
      helpFormatter0.printWrapped(printWriter0, 1745, 1745, " ");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", true, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      Options options3 = options2.addOption("arg", ":9v+U=mA", true, "b$SXtssZ\"~b");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, (-3165), "' was specified but an option from this group ", options3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      int int0 = 850;
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options0.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("s:yz");
      int int1 = 14;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderOptions(stringBuffer0, 74, options0, 74, 3);
      helpFormatter0.setArgName("|768foXgg]c");
      // Undeclared exception!
      try { 
        options0.addOption("KnAlB&<FH6Fr^", true, "\"X)H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'KnAlB&<FH6Fr^' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      String string0 = "\"";
      Options options0 = null;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "\"", "\"", (Options) null, 3, 3, "\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      PrintWriter printWriter0 = mockPrintWriter0.append('9');
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped(printWriter0, 1745, 3, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      pipedOutputStream0.flush();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      helpFormatter0.setLongOptPrefix("e# ++");
      helpFormatter0.setArgName("");
      helpFormatter0.setWidth(45);
      options0.getOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) null, 1308, (String) null, "org.apache.commons.cli.AlreadySelectedException", options1, 1308, 45, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.getOptions();
      helpFormatter0.setSyntaxPrefix("%.U");
      helpFormatter0.setLongOptPrefix("%.U");
      helpFormatter0.setLongOptPrefix((String) null);
      Options options1 = options0.addOption("", " ", true, "");
      options1.getOptions();
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptionComparator();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      PrintWriter printWriter0 = mockPrintWriter0.append('E');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 439, ":/", "", options1, (-3631), (-319), "e# ++");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, "org.apache.commons.cli.HelpFormatter$1", options0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("BZYsch@9)&9!]vx4T0", options0, false);
      helpFormatter0.printHelp("qwUJ:b", options0);
      options0.hasOption((String) null);
      options0.getMatchingOptions("[");
      // Undeclared exception!
      try { 
        options0.addOption("BZYsch@9)&9!]vx4T0", "qwUJ:b", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BZYsch@9)&9!]vx4T0' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      helpFormatter0.setLongOptPrefix("e# ++");
      mockPrintWriter0.append('P');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-3631), "$1P}M'EiJhb", (String) null, options1, 14, 7132, "`^tw;=6f4:C0N?U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, 24, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(49, "$,#e~EJ~bj", "$,#e~EJ~bj", options0, "");
      String string0 = null;
      Options options1 = new Options();
      options1.getOptions();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      options0.hasShortOption("!!q3tE{T\"] ]kk.t,9");
      helpFormatter0.printHelp("--", "--", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options0.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.setLongOptPrefix("   ");
      Options options2 = options1.addOption("arg", true, "   ");
      Options options3 = new Options();
      options3.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 850, "e# ++", "\n", options2, 74, 1, "   ", false);
      helpFormatter1.getLongOptSeparator();
      helpFormatter0.getNewLine();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "--");
      options0.addOption(option0);
      String string0 = "";
      Options options1 = options0.addOption("arg", true, "");
      Options options2 = new Options();
      options2.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((String) null, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", options1, "EAVDM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "usage: ");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "arg");
      options0.getOptions();
      helpFormatter0.printHelp("\n", "\n", options2, "j<QEP#Vu`ZU^");
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, (-1), options0, (-1), 14);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "'M", true, "arg");
      helpFormatter0.printHelp(2, "AvLto]", "AvLto]", options0, "`^tw;=6f4:C0N?U", false);
      helpFormatter0.setArgName("`^tw;=6f4:C0N?U");
      helpFormatter0.setWidth(32);
      options1.addOption("", false, "-");
      helpFormatter0.printHelp("`^tw;=6f4:C0N?U", "'M", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      Options options0 = new Options();
      helpFormatter0.setLeftPadding((-714));
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("R", (String) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("\n", options0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      helpFormatter0.setLongOptPrefix("e# ++");
      Options options2 = options1.addOption("", "$1P}M'EiJhb", true, "+r25.9Y?XR8M");
      options2.getOptions();
      helpFormatter0.createPadding(850);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "arg";
      helpFormatter0.setSyntaxPrefix("-");
      helpFormatter0.setLongOptSeparator("\n");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("B;1l");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setWidth(3);
      helpFormatter0.getNewLine();
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 989, "arg");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      helpFormatter0.setLongOptPrefix("e# ++");
      Options options2 = options1.addOption("", "$1P}M'EiJhb", true, "+r25.9Y?XR8M");
      options2.getOptions();
      helpFormatter0.createPadding(850);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 850, ";;al<7npU?sg0XP6!j;", "-", options2, 850, (-88), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      helpFormatter0.setWidth(1422);
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 1422, "");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLeftPadding();
      StringBuffer stringBuffer0 = new StringBuffer(74);
      helpFormatter0.renderWrappedText(stringBuffer0, 1, 1, "");
      int int1 = 9;
      Options options0 = new Options();
      Option option0 = null;
      try {
        option0 = new Option("-=n_R/%", "~?UcWhMrnz\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '-=n_R/%' contains an illegal character : '-'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultArgName = "--";
      helpFormatter0.getWidth();
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "'M", true, "arg");
      helpFormatter0.printHelp(2, "AvLto]", "AvLto]", options0, "`^tw;=6f4:C0N?U", false);
      helpFormatter0.setArgName("`^tw;=6f4:C0N?U");
      helpFormatter0.setWidth(32);
      helpFormatter0.printHelp("`^tw;=6f4:C0N?U", "'M", options1, "", false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options0.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("s:yz");
      helpFormatter0.setLongOptPrefix("   ");
      Options options2 = options1.addOption("", " ", false, "--");
      Options options3 = new Options();
      options3.getOptions();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 850, "e# ++", "\n", options2, 3, 1, "   ", false);
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 3, (String) null, options2);
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+lbC)rz#`kfT@P";
      Options options0 = null;
      String string1 = "usage: ";
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 2822, 2822, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+lbC)rz#`kfT@P", "`1^a\"Ff6lpB)9 ", (Options) null, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.hasLongOption("arg");
      options0.toString();
      Options options1 = new Options();
      helpFormatter0.printHelp("[ Options: [ short java.util.HashMap@0000000004 ] [ long {} ]", "6UEbpRD6B~G", options1, "6UEbpRD6B~G", false);
      helpFormatter0.getArgName();
      StringBuffer stringBuffer0 = new StringBuffer(1);
      int int0 = 34;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-483), 34, "'RxZ#");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      helpFormatter0.renderWrappedText(stringBuffer0, 108, 92, "");
      helpFormatter0.setNewLine("");
      helpFormatter0.setOptPrefix("nq,gtC|9U");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(" ");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-319), 0, "|");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      String string0 = "u*:TCWh^;RaEy\\>qe";
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      mockPrintWriter0.println(2987.2F);
      helpFormatter0.setSyntaxPrefix("e# ++");
      helpFormatter0.setLongOptPrefix("e# ++");
      options1.addOption("", "$1P}M'EiJhb", false, "line.separator");
      Collection collection0 = new LinkedList<Object>();
      helpFormatter0.createPadding(850);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.createPadding(1143);
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp((PrintWriter) mockPrintWriter0, 31, "", "", options0, 1, 870, (String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.addOption("EK", "N", true, "\u0000");
      helpFormatter0.printHelp(2, "\u0000", "N", options0, "", true);
      helpFormatter0.setArgName("\u0000");
      helpFormatter0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HelpFormatter helpFormatter0 = new HelpFormatter();
          String string0 = "";
          StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "--");
          int int0 = 1;
          Options options0 = new Options();
          OptionGroup optionGroup0 = new OptionGroup();
          FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
          Option option0 = new Option((String) null, false, "");
          OptionGroup optionGroup1 = optionGroup0.addOption(option0);
          options0.addOptionGroup(optionGroup1);
          // Undeclared exception!
          helpFormatter0.renderOptions(stringBuffer0, 1, options0, 1, 1);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getLongOptPrefix();
      helpFormatter0.getWidth();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[";
      helpFormatter0.setSyntaxPrefix(">Z");
      helpFormatter0.setLongOptSeparator(">Z");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine(">Z");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-20), "|");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options0.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("s:yz");
      helpFormatter0.setLongOptPrefix("   ");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter1, 1, (-283), ".5g?b'9*e7qO+i");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "nq,gtC|9U";
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      String string1 = HelpFormatter.DEFAULT_LONG_OPT_PREFIX;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setNewLine("nq,gtC|9U");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      int int0 = (-497);
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, (-497), "--");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultOptPrefix = "[";
      helpFormatter0.setSyntaxPrefix(">Z");
      helpFormatter0.setLongOptSeparator(">Z");
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.getLongOptSeparator();
      helpFormatter0.setNewLine("B;1l");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "--");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, 0, "|");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.setArgName("usage: ");
      helpFormatter0.setSyntaxPrefix("");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byteArrayOutputStream0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("-k1yV9t", objectArray0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-2152), (String) null, (String) null, (Options) null, 0, 3, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.findWrapPos("", 74, 74);
      PrintWriter printWriter0 = null;
      int int0 = (-923);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("[ Options: [ short ");
      helpFormatter0.getOptPrefix();
      String string0 = null;
      MockFile mockFile0 = new MockFile("* pWXa9:dW");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "[ Options: [ short ", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1;
      helpFormatter0.defaultWidth = 1;
      String string0 = null;
      Options options0 = new Options();
      options0.hasLongOption("");
      options0.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (String) null, options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer("jPU6I@vGT4|1F");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Options options0 = new Options();
      helpFormatter0.printHelp("u*:TCWh^;RaEy>qe", "u*:TCWh^;RaEy>qe", options0, "`^tw;=6f4:C0N?U", true);
      Options options1 = new Options();
      options1.getOptions();
      pipedOutputStream0.flush();
      helpFormatter0.setSyntaxPrefix("e# ++");
      helpFormatter0.setLongOptPrefix("e# ++");
      Options options2 = options1.addOption("", "$1P}M'EiJhb", true, "+r25.9Y?XR8M");
      options2.getOptions();
      helpFormatter0.createPadding(850);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 850, ";;al<7npU?sg0XP6!j;", "", options2, 850, (-88), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("Six^r#!^");
      helpFormatter0.setNewLine("O#nR;r%SC{F>");
      helpFormatter0.getNewLine();
      String string0 = "org.apache.commons.cli.OptionGroup";
      String string1 = "' was specified but an option from this group ";
      Options options0 = new Options();
      String string2 = "B^mux";
      options0.hasLongOption("org.apache.commons.cli.Options");
      boolean boolean0 = false;
      options0.helpOptions();
      // Undeclared exception!
      try { 
        options0.addOption("B^mux", false, "hY~\"b|As-VE*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'B^mux' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "N";
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "-", true, "--");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(9, "", "N", options1, "-", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp("arg", options0);
      // Undeclared exception!
      try { 
        options0.addOption("BZYsch@9)&9!]vx4T0", "usage: ", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BZYsch@9)&9!]vx4T0' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "qwUJ:b";
      Options options0 = new Options();
      String string1 = "BZYsch@9)&9!]vx4T0";
      boolean boolean0 = true;
      helpFormatter0.printHelp("qwUJ:b", options0);
      String string2 = null;
      // Undeclared exception!
      try { 
        options0.addOption("BZYsch@9)&9!]vx4T0", "qwUJ:b", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'BZYsch@9)&9!]vx4T0' contains an illegal character : '@'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "+lbC)rz#`kfT@P";
      Options options0 = null;
      String string1 = "usage: ";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("+lbC)rz#`kfT@P", "`1^a\"Ff6lpB)9 ", (Options) null, "usage: ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "yc(z?Ag+";
      helpFormatter0.rtrim("yc(z?Ag+");
      String string1 = "";
      helpFormatter0.setLongOptPrefix("");
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'i';
      charArray0[2] = '8';
      charArray0[3] = '<';
      char char0 = 'N';
      String string2 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("74Yj ^'eo3j.wwIs7e", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.defaultArgName = "--";
      helpFormatter0.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "nq,gtC|9U";
      helpFormatter0.getLongOptPrefix();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      helpFormatter0.defaultArgName = "--";
      helpFormatter0.setLeftPadding(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("-", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("' was specified but an option from this group ");
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      helpFormatter0.printWrapped(printWriter0, 1745, 1745, " ");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-2512);
      helpFormatter0.defaultLeftPad = (-2512);
      String string0 = "has already been selected: '";
      helpFormatter0.setLongOptSeparator("org.apache.commons.cli.ParseException");
      int int1 = 329;
      helpFormatter0.createPadding(329);
      String string1 = "-";
      Options options0 = new Options();
      String string2 = "";
      String string3 = "";
      helpFormatter0.defaultSyntaxPrefix = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("&pUiK6b=OY9@d8", "", false, "-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&pUiK6b=OY9@d8' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(10, "8J.vN/C%Y,GElZ(R2e", "w{!+?r:W5W9\"`+*CB", (Options) null, "w{!+?r:W5W9\"`+*CB", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(1527);
      helpFormatter0.setArgName("");
      helpFormatter0.rtrim("@02TVb`oh@N`y87_e");
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer("usage: ");
      Options options0 = new Options();
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 0, 0);
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-2059), options0, 0, (-2059));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(13);
      String string1 = "jvoxklW{l";
      Options options0 = new Options();
      boolean boolean0 = true;
      String string2 = "UHE$";
      options0.addOption((String) null, " ", true, "UHE$");
      OptionGroup optionGroup0 = new OptionGroup();
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-1045));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("", "Y'%O", true, (String) null);
      Option option0 = new Option((String) null, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("", false, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("G~e5i;.<3\"f", "", options3, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter$OptionComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      String string0 = "w6_aDSn38q\"xPL";
      Options options0 = new Options();
      String string1 = "[ Options: [ short ";
      options0.hasLongOption(" ");
      String string2 = ";OW{m-h$b7hK&";
      options0.addOption("ae", "ae", false, ";OW{m-h$b7hK&");
      boolean boolean0 = false;
      // Undeclared exception!
      helpFormatter0.printHelp(0, "w6_aDSn38q\"xPL", (String) null, options0, "[ Options: [ short ", false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "A)F%5F";
      MockFile mockFile0 = new MockFile("-", "A)F%5F");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }
}
