/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:17:06 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HelpFormatter_ESTest extends HelpFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("line.separator");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-3368), "line.separator");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", true, "usage: ");
      options1.hasLongOption("-");
      helpFormatter0.printHelp("80", "iJ.\"#%9@W", options1, "", true);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("--");
      // Undeclared exception!
      helpFormatter0.printOptions((PrintWriter) null, 1, options1, 4118, 74);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      MockFile mockFile0 = new MockFile("-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1981, "C. [p_QA~X|6iJ(@z", "$g%ue=_[Y%{", options0, 1981, (-3207), "");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultArgName = "'[cIk9U3>NO7:g7}Ai";
      helpFormatter0.setLeftPadding((-1032));
      helpFormatter0.defaultOptPrefix = "-";
      helpFormatter0.setLongOptPrefix("-");
      helpFormatter0.findWrapPos("]<[Xz!7djG", 204, 204);
      helpFormatter0.getLeftPadding();
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.findWrapPos("'[cIk9U3>NO7:g7}Ai", 9, 13);
      helpFormatter0.getWidth();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option((String) null, "arg");
      Options options1 = options0.addOption(option0);
      Options options2 = options1.addOption("", false, "");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options3 = options2.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("arg", options3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix(" ");
      Options options0 = new Options();
      helpFormatter0.printHelp(3, "arg", " ", options0, "-");
      String string0 = "(`['i,vI+?r^$@w3";
      int int0 = 0;
      helpFormatter0.findWrapPos("(`['i,vI+?r^$@w3", 0, 0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("usage: ", "usage: ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // usage: 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 0;
      String string0 = " ]";
      String string1 = "6wje0e'j0G";
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.cli.HelpFormatter$1");
      int int1 = 101;
      StringBuffer stringBuffer1 = helpFormatter0.renderOptions(stringBuffer0, 0, options0, 101, 491);
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer1, 29, (-4695), "org.apache.commons.cli.HelpFormatter$1");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      helpFormatter0.defaultOptPrefix = "";
      helpFormatter0.getOptPrefix();
      String string1 = "org.apache.commons.cli.Option";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", "org.apache.commons.cli.Option");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.apache.commons.cli.Option
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("");
      helpFormatter0.setArgName("");
      helpFormatter0.getSyntaxPrefix();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getLongOptSeparator();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      helpFormatter0.rtrim(",CM?jXhA`[-|NpxDK");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Options options0 = new Options();
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 40, "-", "", options0, 40, 40, ",CM?jXhA`[-|NpxDK", false);
      helpFormatter0.getLongOptPrefix();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      helpFormatter0.printHelp("\n", "2Y*-E$$V#lBQ", options1, "", true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "\n", "usage: ", options0, "--");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 0;
      helpFormatter0.createPadding(0);
      helpFormatter0.getOptPrefix();
      int int1 = (-2821);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, (-2821));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\n");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter0, (-2083), options0, (-2083), (-2083));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      int int0 = 3348;
      String string0 = ", ";
      StringWriter stringWriter0 = new StringWriter(3);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 69, (String) null, ", ", options0, (-836), 1, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("--", "-", options0, "arg", true);
      HelpFormatter helpFormatter2 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter2.setOptionComparator(comparator0);
      helpFormatter1.rtrim("arg");
      helpFormatter1.findWrapPos("usage: ", 1, 0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      Option option0 = new Option("", "usage: ");
      helpFormatter0.setWidth((-920));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("2Y*-E$$V#lBQ", "2Y*-E$$V#lBQ", options1, "usage: ", true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) stringWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("usage: ", objectArray0);
      helpFormatter0.printHelp(printWriter0, 9, "[gvaiY1$7NG1f<>aD", (String) null, options0, 9, 5119, "[gvaiY1$7NG1f<>aD", false);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.getNewLine();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      int int0 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.setNewLine("has already been selected: '");
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions((StringBuffer) null, 1, (Options) null, 64, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "m";
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 31, "{<8GB9Ur>[>MHGV|0aw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.setDescPadding((-1));
      Options options1 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(44, "1@?Y", (String) null, options1, "1@?Y");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      helpFormatter0.printHelp(3, "#M!7FOD", "^t\"Dt&VTBIwH@`Q", options0, "arg");
      helpFormatter0.getWidth();
      helpFormatter0.getOptionComparator();
      helpFormatter0.getWidth();
      helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 9, 3469);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = null;
      helpFormatter0.setLongOptPrefix((String) null);
      int int0 = 2978;
      helpFormatter0.setDescPadding(2978);
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.getLeftPadding();
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos((String) null, (-1474), (-1474));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[";
      File file0 = MockFile.createTempFile("6QVkK`;qMwn", "6QVkK`;qMwn");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "\n", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      // Undeclared exception!
      try { 
        helpFormatter0.printOptions(mockPrintWriter1, 0, (Options) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 74;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(74, "org.apache.commons.cli.ParseException", "7?", (Options) null, "7?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      String string1 = "";
      int int0 = 768;
      Options options0 = new Options();
      boolean boolean0 = true;
      options0.addOption("arg", "cE{#<o$NxTN,`lrn(", true, "usage: ");
      String string2 = "org.apache.commons.cli.HelpFormatter$OptionComparator";
      String string3 = "org.apache.commons.cli.OptionValidator";
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, 768, "", options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Options options0 = new Options();
      options0.toString();
      options0.getOptions();
      boolean boolean0 = true;
      Options options1 = options0.addOption("", "`z,dmmgwr&b", true, "--");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      helpFormatter0.printHelp(" ", " ", options2, "", true);
      helpFormatter0.getLongOptPrefix();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 34, options2, 3, 74);
      int int0 = 942;
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer1, (-1971), options1, 942, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("gEC9", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("usage: ");
      Options options2 = options1.addOption("1", "+~1t2 E^_i\"2aF~BH", true, "gEC9");
      options2.getOptions();
      Options options3 = options0.addOption(option0);
      List list0 = new LinkedList<String>();
      helpFormatter0.printHelp(48, ">cbV46", "=SaBbf4n<g#=!m", options0, "arg", true);
      options2.addOption("gEC9", false, "--");
      helpFormatter0.printHelp("=SaBbf4n<g#=!m", "", options3, "1");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("+~1t2 E^_i\"2aF~BH", options0);
      helpFormatter1.getArgName();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultNewLine = "";
      Options options0 = new Options();
      String string0 = "RV6 ig:n3,}obQ";
      options0.hasShortOption("&Kr)B!");
      Option option0 = new Option("", "RV6 ig:n3,}obQ");
      Options options1 = options0.addOption(option0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7OGC7mqrBm['");
      helpFormatter0.printHelp("k I?@|D'eZ)O(", options1, true);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getNewLine();
      helpFormatter0.getLongOptSeparator();
      String string1 = "TL5X&!5";
      helpFormatter0.printHelp("TL5X&!5", "", options1, "-", true);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.format("arg", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("--");
      mockPrintWriter0.append('h');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 3044, "--", "arg", (Options) null, 16, 2260, "}HLOPE", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 74;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      StringWriter stringWriter0 = new StringWriter(74);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringBuffer stringBuffer1 = helpFormatter1.renderOptions(stringBuffer0, 1859, options0, 74, 1859);
      helpFormatter1.renderWrappedText(stringBuffer1, 116, 103, "\n");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.defaultLeftPad = 74;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "usage: ");
      // Undeclared exception!
      helpFormatter0.renderWrappedText(stringBuffer0, 0, 25, ">^\"5wi^4~p:{Zv~P._J");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("]");
      mockPrintWriter1.append('h');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter1, 2260, (String) null, (String) null, (Options) null, 1210, 2260, "org.apache.commons.cli.HelpFormatter", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      int int0 = 2134;
      Options options0 = new Options();
      Options options1 = options0.addOption("m", true, "m");
      helpFormatter0.printHelp(2134, "]", "m", options1, "[", true);
      // Undeclared exception!
      try { 
        options1.addOption("usage: ", true, "6nL_,qnnYF}'r5Kz_8P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("8Y", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("");
      Options options2 = options1.addOption("1", "+~1t2 E^_i\"2aF~BH", true, "8Y");
      options2.getOptions();
      options1.helpOptions();
      helpFormatter0.printHelp(18, "\"?mf<Q(czz(vw", "", options2, "The option '", false);
      options2.addOption("1", false, "--");
      helpFormatter0.printHelp("1", " [ARG]", options2, "P,J? ");
      helpFormatter0.printHelp("+~1t2 E^_i\"2aF~BH", options1);
      helpFormatter0.getArgName();
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) null, (-4127), "\"?mf<Q(czz(vw", options0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("");
      options1.addOption("1", "+~1t2 E^_i\"2aF~BH", true, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = ';';
      charArray0[2] = '{';
      charArray0[3] = '.';
      mockPrintWriter0.print(charArray0);
      Options options2 = new Options();
      mockPrintWriter0.print("arg");
      Options options3 = options1.addOption("", "usage: ", true, "-");
      options3.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 110, "K{7/eQcS#E]{\"N*r,", "", options0, (-1), (-2), "", true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">");
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 1;
      helpFormatter0.rtrim("");
      helpFormatter0.getLeftPadding();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      Options options2 = options1.addOption("", false, "\n");
      options2.addOption("W", (String) null, true, "Co8%=$H2Wp");
      // Undeclared exception!
      helpFormatter0.printHelp("i>Sy7lB0$0?", options2, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, ">^\"5wi^4~p:{Zv~P._J", ">^\"5wi^4~p:{Zv~P._J", options0, ">^\"5wi^4~p:{Zv~P._J");
      helpFormatter0.defaultLeftPad = 74;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      helpFormatter0.printHelp(printWriter0, 2260, "}HLOPE", "arg", options0, 16, 16, "", true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      helpFormatter0.renderWrappedText(stringBuffer0, 74, 74, "");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setLongOptPrefix("arg");
      helpFormatter0.setWidth(1);
      String string0 = "@o";
      helpFormatter0.setNewLine("@o");
      Options options0 = new Options();
      options0.hasOption("<");
      Options options1 = options0.addOption((String) null, " ", false, "");
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.printHelp(285, "arg", "--", options1, "line.separator", false);
      // Undeclared exception!
      helpFormatter0.printHelp("@o", "ja1<z4qw3[Ao", options1, "arg");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "-");
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.hasOption("");
      Options options2 = options1.addOption("1", "+~1t2 E^_i\"2aF~BH", true, "");
      options2.getOptions();
      options1.helpOptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("usage: ");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "-");
      helpFormatter0.printHelp(printWriter0, 4996, "1", "6@ m47=D*", options1, 3, 108, (String) null, false);
      optionGroup0.toString();
      helpFormatter0.printHelp("\"?mf<Q(czz(vw", "]J5", options1, (String) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.printHelp("\n", options1);
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, (String) null);
      helpFormatter0.printHelp("vyK9AG>@j{i'8E]", " [ARG]", options1, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter0.setWidth(1);
      String string0 = "@o";
      helpFormatter1.setNewLine("@o");
      Options options0 = new Options();
      options0.hasOption("<");
      String string1 = null;
      String string2 = "";
      options0.addOption((String) null, " ", true, "");
      options0.getOptions();
      options0.helpOptions();
      // Undeclared exception!
      helpFormatter0.printHelp("[ARG...]", "usage: ", options0, "arg", true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setLeftPadding(63);
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter(63);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("m", true, "m");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2134, " ", options1);
      options1.addOption("arg", "arg", true, "");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix("<");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 439, "arg", options1);
      helpFormatter0.getDescPadding();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("m", true, "m");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2134, "]", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix(", ");
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-830), ", ", options1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.format("arg", (Object[]) null);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.rtrim("usage: ");
      // Undeclared exception!
      try { 
        helpFormatter0.printWrapped((PrintWriter) null, 64, 3044, "BiYp~}iN6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HelpFormatter helpFormatter0 = new HelpFormatter();
          helpFormatter0.setOptPrefix(" ");
          helpFormatter0.setOptPrefix(" ");
          HelpFormatter helpFormatter1 = new HelpFormatter();
          helpFormatter1.setLongOptPrefix("arg");
          helpFormatter0.setWidth(1);
          helpFormatter1.setNewLine("@o");
          Options options0 = new Options();
          options0.hasOption("<");
          Options options1 = options0.addOption((String) null, " ", false, "");
          options0.getOptions();
          options0.helpOptions();
          helpFormatter0.printHelp(285, "arg", "--", options1, "line.separator", false);
          helpFormatter1.printHelp("\n", "l+der.! ", options1, "--");
          HelpFormatter helpFormatter2 = new HelpFormatter();
          StringWriter stringWriter0 = new StringWriter(63);
          StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-");
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
          // Undeclared exception!
          helpFormatter2.printHelp((PrintWriter) mockPrintWriter0, 1, "-", "gtWAzF^k\"%", options1, 2670, 784, "--", false);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("");
      Options options2 = options1.addOption("1", "+~1t2 E^_i\"2aF~BH", true, "");
      options2.getOptions();
      options1.helpOptions();
      helpFormatter0.printHelp(13, "\"?mf<Q(czz(vw", "", options2, "The option '", false);
      Options options3 = options2.addOption("1", false, "--");
      helpFormatter0.printHelp((-1), " [ARG]", "", options3, "1");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText(stringBuffer0, (-1988), (-4726), "\"?mf<Q(czz(vw");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, ">^\"5wi^4~p:{Zv~P._J", ">^\"5wi^4~p:{Zv~P._J", options0, ">^\"5wi^4~p:{Zv~P._J");
      helpFormatter0.defaultLeftPad = 74;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      mockPrintWriter0.print((Object) helpFormatter0);
      helpFormatter0.printOptions(mockPrintWriter0, (-1996), options0, 1878, 1878);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2260, "", "arg", options0, 16, 16, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getNewLine();
      helpFormatter0.rtrim((String) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.optionComparator = comparator0;
      helpFormatter0.defaultWidth = 2006;
      String string0 = null;
      helpFormatter0.defaultLongOptPrefix = "'";
      helpFormatter0.defaultNewLine = "'";
      helpFormatter0.rtrim((String) null);
      helpFormatter0.getWidth();
      helpFormatter0.getDescPadding();
      helpFormatter0.getArgName();
      helpFormatter0.getNewLine();
      String string1 = "";
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, false, "'");
      options1.hasShortOption("usage: ");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = null;
      try {
        option0 = new Option("   ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '   ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, ">^\"5wi^4~p:{Zv~P._J", ">^\"5wi^4~p:{Zv~P._J", options0, ">^\"5wi^4~p:{Zv~P._J");
      helpFormatter0.defaultLeftPad = 74;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, 2260, "", "arg", options0, 16, 16, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[inR8kbAKvyzth");
      Options options0 = new Options();
      Option option0 = new Option("", "-", false, "96!?RFCU^u");
      helpFormatter0.setOptPrefix((String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      helpFormatter0.getOptPrefix();
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "-");
      int int0 = 1348;
      Options options0 = new Options();
      stringBuffer0.deleteCharAt(0);
      options0.getMatchingOptions("");
      helpFormatter0.renderOptions(stringBuffer0, 1348, options0, 100, 12);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "--", 3461, 1831);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[inR8kbAKvyzth");
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      HelpFormatter helpFormatter0 = new HelpFormatter();
      // Undeclared exception!
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, "]q8FW(nG;tP}9ia&VW", options0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      helpFormatter0.setWidth(21);
      helpFormatter0.setNewLine("has already been selected: '");
      Options options0 = new Options();
      options0.hasOption("arg");
      Options options1 = options0.addOption("@", "usage: ", true, "");
      options0.getOptions();
      options1.helpOptions();
      helpFormatter0.printHelp(21, "A<ej\"4", "\"?mf<Q(czz(vw", options1, "", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "has already been selected: '";
      objectArray0[1] = (Object) helpFormatter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("@", objectArray0);
      helpFormatter0.printWrapped(printWriter0, 21, 13, "wdR0Q");
      helpFormatter0.createPadding(63);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setSyntaxPrefix("");
      helpFormatter0.getLeftPadding();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", false, "");
      helpFormatter0.printHelp(3, "ewn{=5Qul8%v\"TQV*I", "'", options1, "usage: ", true);
      helpFormatter0.rtrim("");
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) null, (-262), (-3906), "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("", "-");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      options1.hasOption("");
      Options options2 = options1.addOption("1", "+~1t2 E^_i\"2aF~BH", true, "");
      options2.getOptions();
      options1.helpOptions();
      helpFormatter0.printHelp(13, "\"?mf<Q(czz(vw", "", options2, "The option '", false);
      helpFormatter0.printHelp("1", " [ARG]", options2, "P,J? ");
      helpFormatter0.printHelp("+~1t2 E^_i\"2aF~BH", options1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      helpFormatter0.setLeftPadding((-416));
      int int0 = 116;
      helpFormatter0.findWrapPos("XJjXMY^0CG/7", 116, 116);
      Options options0 = new Options();
      String string0 = "";
      Options options1 = options0.addOption("", true, "M:hO");
      options0.getOptionGroups();
      Option option0 = new Option("arg", "M:hO", true, "");
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addOption("arg", "--", true, (String) null);
      options3.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("org.apache.commons.cli.OptionValidator", options3, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "[inR8kbAKvyzth";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("[inR8kbAKvyzth");
      Options options0 = new Options();
      Option option0 = new Option("", "-", false, "96!?RFCU^u");
      helpFormatter0.setOptPrefix((String) null);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 10, ">", "[inR8kbAKvyzth", options2, 103, 1273, "cmdLineSyntax not provided", true);
      optionGroup1.toString();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "Oeim=Iyj0{*Ir<", options2, "]J5", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.append('R');
      Options options0 = new Options();
      mockPrintWriter0.print("o");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(450, "", "", options0, "A CloneNotSupportedException was thrown: ", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      char[] charArray0 = new char[2];
      helpFormatter0.defaultLeftPad = (int) 'n';
      charArray0[1] = 'n';
      mockPrintWriter0.print(charArray0);
      Options options0 = new Options();
      mockPrintWriter0.print("o");
      Options options1 = options0.addOption("o", "usage: ", true, "-");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)13, "o", "o", options1, (-2210), (int) (byte) (-123), "\"", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.append('R');
      Options options0 = new Options();
      mockPrintWriter0.print("o");
      Options options1 = options0.addOption("o", "usage: ", true, "p)S;A");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (int) (byte)13, "o", "o", options1, (-2208), (int) (byte) (-123), "\"", false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      int int0 = 21;
      helpFormatter0.setWidth(21);
      helpFormatter0.setNewLine("has already been selected: '");
      Options options0 = new Options();
      options0.hasOption("arg");
      Options options1 = options0.addOption("@", "usage: ", true, "");
      options0.getOptions();
      options1.helpOptions();
      helpFormatter0.printHelp(21, "A<ej\"4", "\"?mf<Q(czz(vw", options1, "", false);
      helpFormatter0.printHelp("ncdJmX#2OLZ", "wdR0Q", options0, "");
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", options0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName("arg");
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "", options0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      int int0 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.setNewLine("has already been selected: '");
      String string0 = "9G_pV";
      Options options0 = new Options();
      Options options1 = new Options();
      options1.getOptions();
      Option option0 = new Option("NO_ARGS_ALLOWED", false, "W~GMb");
      options1.addOption(option0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(26, "", "i", options1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultWidth = 854;
      helpFormatter0.rtrim("");
      helpFormatter0.getArgName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = 3;
      String string0 = "RM*=<K";
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, 3, "RM*=<K", options0);
      helpFormatter0.setOptPrefix("RM*=<K");
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (-6), "RM*=<K", "RM*=<K", options0, 0, 14, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      options0.helpOptions();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-1435), "{YzRhe88|y)FMF0", "org.apache.commons.cli.AlreadySelectedException", options0, "A CloneNotSupportedException was thrown: ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      mockPrintWriter0.format("arg", (Object[]) null);
      int int0 = 3044;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp(3, "]", "", (Options) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      helpFormatter0.setWidth(21);
      helpFormatter0.setNewLine("has already been selected: '");
      Options options0 = new Options();
      options0.hasOption("arg");
      Options options1 = options0.addOption("@", "usage: ", false, "");
      options0.getOptions();
      String string0 = "\"?mf<Q(czz(vw";
      options1.helpOptions();
      options1.helpOptions();
      options1.getOption("\"?mf<Q(czz(vw");
      helpFormatter0.printHelp(21, "9G_pV", "", options1, "9G_pV", true);
      helpFormatter0.findWrapPos("", 0, 21);
      helpFormatter0.setDescPadding(21);
      try { 
        MockURI.URI("rOqivjA~P[1Z.", "arg", "*Xz?YQ/|nn.6~X:.5J", 0, "o8jDV-pw`u(-", "9G_pV", "usage: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: rOqivjA~P[1Z.://arg@[*Xz?YQ/|nn.6~X:.5J]:0%7Fo8jDV-pw%60u(-?9G_pV#usage:%20
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(590);
      Options options0 = new Options();
      helpFormatter0.printHelp("C-:\"=dh", "C-:\"=dh", options0, "C-:\"=dh");
      helpFormatter0.printHelp("C-:\"=dh", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append((CharSequence) "C-:\"=dh");
      Options options1 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("iCJ", options0, false);
      helpFormatter1.getLongOptSeparator();
      String string0 = "The option '";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((-897), "iCJ", "tQS$", options0, "--", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      helpFormatter0.setWidth(21);
      helpFormatter0.setNewLine("has already been selected: '");
      Options options0 = new Options();
      options0.hasOption("arg");
      Options options1 = options0.addOption("@", "usage: ", true, "");
      options0.getOptions();
      options1.helpOptions();
      helpFormatter0.printHelp(21, "A<ej\"4", "\"?mf<Q(czz(vw", options1, "", false);
      Options options2 = new Options();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append('.');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1);
      mockPrintWriter0.print("has already been selected: '");
      options1.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, (-2208), "U_QNHRS", "", options1, 21, (-608), "", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultSyntaxPrefix = "";
      helpFormatter0.defaultNewLine = "";
      helpFormatter0.setOptionComparator((Comparator) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Options options0 = new Options();
      Options options1 = options0.addOption("m", true, "m");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2134, "]", options0);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter0.setOptPrefix("usage: ");
      // Undeclared exception!
      helpFormatter1.printUsage((PrintWriter) mockPrintWriter0, 1, "\n", options1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setLongOptPrefix("arg");
      helpFormatter0.setWidth(1);
      helpFormatter1.setNewLine("@o");
      Options options0 = new Options();
      options0.hasOption("<");
      Options options1 = options0.addOption((String) null, " ", false, "");
      options0.getOptions();
      options0.helpOptions();
      helpFormatter0.printHelp(285, "mI", "--", options1, "line.separator", false);
      helpFormatter1.printHelp("\n", "l+der.! ", options1, "--");
      HelpFormatter helpFormatter2 = new HelpFormatter();
      helpFormatter2.printHelp("@o", options0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      helpFormatter0.setOptionComparator(comparator1);
      helpFormatter0.getNewLine();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      mockPrintWriter0.print(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.append('n');
      Options options0 = new Options();
      mockPrintWriter0.print("\n");
      options0.getOptionGroups();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp(printWriter0, (int) (byte) (-80), "\n", "", options0, (int) (byte)44, (-2208), "usage: ", false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      helpFormatter0.getOptPrefix();
      helpFormatter0.getDescPadding();
      String string0 = "*:+:1b=RL_Kf";
      MockFile mockFile0 = new MockFile("*:+:1b=RL_Kf", "--");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(590);
      Options options0 = new Options();
      helpFormatter0.printHelp("C-:\"=dh", "C-:\"=dh", options0, "C-:\"=dh");
      helpFormatter0.printHelp("C-:\"=dh", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append((CharSequence) "C-:\"=dh");
      Options options1 = null;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter1.printHelp("", options0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      helpFormatter0.setLeftPadding(590);
      Options options0 = new Options();
      helpFormatter0.printHelp("C-:\"=dh", "C-:\"=dh", options0, "C-:\"=dh");
      helpFormatter0.printHelp("C-:\"=dh", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      boolean boolean0 = false;
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.printHelp("usage: ", "usage: ", options0, "", false);
      String string0 = "3X;zi<C";
      Options options1 = new Options();
      Option option0 = null;
      try {
        option0 = new Option(" | ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' | ' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, ">^\"5wi^4~p:{Zv~P._J", ">^\"5wi^4~p:{Zv~P._J", options0, ">^\"5wi^4~p:{Zv~P._J");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$1", ">^\"5wi^4~p:{Zv~P._J", options0, "OW?cgP:g/@Zn", true);
      helpFormatter0.rtrim(">^\"5wi^4~p:{Zv~P._J");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 0, "0)V-~i?P");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultLongOptPrefix = "";
      Options options0 = null;
      helpFormatter0.defaultSyntaxPrefix = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", "E<x", (Options) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      locale0.getExtensionKeys();
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      locale0.getExtensionKeys();
      Object object0 = new Object();
      objectArray0[4] = object0;
      mockPrintWriter0.printf(locale0, "arg", objectArray0);
      Options options0 = new Options();
      HelpFormatter helpFormatter1 = new HelpFormatter();
      // Undeclared exception!
      try { 
        helpFormatter1.printWrapped((PrintWriter) mockPrintWriter0, (-3835), "RM*=<K");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setOptPrefix(" ");
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.append('~');
      Options options0 = new Options();
      String string0 = "m";
      Options options1 = options0.addOption("m", true, "m");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 2134, "]", options1);
      HelpFormatter helpFormatter1 = new HelpFormatter();
      helpFormatter1.setOptPrefix(", ");
      String string1 = "<";
      File file0 = null;
      MockFile mockFile0 = new MockFile((File) null, "[ Options: [ short ");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("--", " ", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      int int0 = 21;
      helpFormatter0.setWidth(21);
      helpFormatter0.setNewLine("has already been selected: '");
      String string0 = "9G_pV";
      Options options0 = new Options();
      options0.hasOption("arg");
      Options options1 = options0.addOption("@", "usage: ", false, "");
      options0.getOptions();
      String string1 = "\"?mf<Q(czz(vw";
      options1.helpOptions();
      options1.helpOptions();
      options1.getOption("\"?mf<Q(czz(vw");
      helpFormatter0.printHelp(21, "9G_pV", "", options1, "9G_pV", true);
      // Undeclared exception!
      try { 
        helpFormatter0.findWrapPos("", 0, (-3150));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = (-1);
      String string0 = "RM*=<K";
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, (-1), "RM*=<K", options0);
      helpFormatter0.setOptPrefix("RM*=<K");
      helpFormatter0.printHelp(printWriter0, 3, "RM*=<K", "RM*=<K", options0, 0, 14, "");
      helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2405, "RM*=<K", "has already been selected: '", options0, 2405, 44, "{5OrrYj6_a]W");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "<", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      File file0 = MockFile.createTempFile("arg", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter1, 785, " ");
      helpFormatter0.getLeftPadding();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "!PVQN";
      helpFormatter0.setOptPrefix("!PVQN");
      StringBuffer stringBuffer0 = null;
      int int0 = 0;
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 0, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.rtrim("");
      helpFormatter0.setArgName((String) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "-");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1391;
      helpFormatter0.createPadding(1391);
      String string0 = "!YI#PF-";
      helpFormatter0.setLongOptSeparator("!YI#PF-");
      String string1 = "";
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", true, "]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("arg");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "-");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) helpFormatter0;
      objectArray0[2] = (Object) helpFormatter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "arg", objectArray0);
      int int0 = (-1);
      String string0 = "RM*=<K";
      Options options0 = new Options();
      helpFormatter0.printUsage(printWriter0, (-1), "RM*=<K", options0);
      helpFormatter0.setOptPrefix("RM*=<K");
      MockFile mockFile0 = new MockFile((File) null, "arg");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "<", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      int int0 = 590;
      helpFormatter0.setLeftPadding(590);
      String string0 = "C-:\"=dh";
      Options options0 = new Options();
      helpFormatter0.printHelp("C-:\"=dh", "C-:\"=dh", options0, "C-:\"=dh");
      helpFormatter0.printHelp("C-:\"=dh", options0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) " ");
      stringBuffer0.append((CharSequence) "C-:\"=dh");
      // Undeclared exception!
      try { 
        helpFormatter0.renderOptions(stringBuffer0, 1433, options0, (-7), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getSyntaxPrefix();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptPrefix("~e8(");
      int int0 = 1;
      helpFormatter0.setWidth(1);
      helpFormatter0.setNewLine("has already been selected: '");
      String string0 = "9G_pV";
      Options options0 = new Options();
      options0.hasOption("arg");
      String string1 = "";
      Options options1 = options0.addOption("@", "usage: ", true, "");
      options0.getOptions();
      String string2 = "\"?mf<Q(czz(vw";
      options1.helpOptions();
      options1.helpOptions();
      options1.getOption("\"?mf<Q(czz(vw");
      // Undeclared exception!
      helpFormatter0.printHelp(1, "9G_pV", "", options1, "9G_pV", true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getLongOptSeparator();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "--", 74, 74);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      helpFormatter0.setOptPrefix((String) null);
      helpFormatter0.setDescPadding(0);
      helpFormatter0.getNewLine();
      helpFormatter0.setNewLine("\n");
      Options options0 = new Options();
      Options options1 = options0.addOption("arg", "cmdLineSyntax not provided", true, "0%HIiT|=3?");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options2 = options1.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp((String) null, "\n", options2, "\n", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("arg");
      int int0 = 234;
      helpFormatter0.defaultWidth = 234;
      mockPrintWriter0.format("arg", (Object[]) null);
      int int1 = 3044;
      Options options0 = null;
      helpFormatter0.defaultNewLine = "8)^JFPKl2ktb' AEz";
      int int2 = 0;
      String string0 = "";
      // Undeclared exception!
      helpFormatter0.printHelp(0, "8)^JFPKl2ktb' AEz", "8)^JFPKl2ktb' AEz", (Options) null, "");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "bZl?V/";
      String string1 = "";
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("[", "", (Options) null, "[", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = (-154);
      helpFormatter0.setDescPadding((-188));
      // Undeclared exception!
      try { 
        helpFormatter0.createPadding((-154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setOptPrefix("");
      helpFormatter0.setSyntaxPrefix("6nL_,qnnYF}'r5Kz_8P");
      StringWriter stringWriter0 = new StringWriter(31);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      stringWriter0.append('~');
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 31, "]");
      int int0 = 3546;
      // Undeclared exception!
      try { 
        helpFormatter0.renderWrappedText((StringBuffer) null, 3546, 0, "6nL_,qnnYF}'r5Kz_8P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getDescPadding();
      Options options0 = new Options();
      // Undeclared exception!
      helpFormatter0.printHelp(0, "M;dRL;]", "M;dRL;]", options0, "M;dRL;]", false);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 497;
      helpFormatter0.setDescPadding(10);
      helpFormatter0.setWidth(3385);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getOptionComparator();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "usage: ");
      String string0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printUsage(printWriter0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.defaultDescPad = 0;
      helpFormatter0.defaultLongOptPrefix = "";
      String string0 = "Cannot add value, list full.";
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("Cannot add value, list full.", (Options) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.getWidth();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("--", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.append((CharSequence) "arg");
      int int0 = 0;
      String string0 = "Tp'";
      Options options0 = new Options();
      options0.getOptionGroups();
      String string1 = "T0K6ty3JYl:1ZHy/FZ";
      // Undeclared exception!
      try { 
        options0.addOption("Tp'", " ", true, "T0K6ty3JYl:1ZHy/FZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Tp'' contains an illegal character : '''
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setArgName((String) null);
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", "L%T:x>I\"=QdcR;d_", options0, "", false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(704);
      helpFormatter0.setLongOptPrefix("r5");
      helpFormatter0.getLongOptPrefix();
      helpFormatter0.setArgName("r5");
      helpFormatter0.setLongOptSeparator("r5");
      int int0 = 1674;
      String string0 = "org.apache.commons.cli.HelpFormatter";
      String string1 = "";
      Options options0 = new Options();
      boolean boolean0 = false;
      Option option0 = new Option("r5", " ", false, "r5");
      options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      String string2 = "[";
      Option option1 = null;
      try {
        option1 = new Option("[", "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setDescPadding(237);
      String string0 = "hLd";
      Options options0 = new Options();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        options0.addOption("usage: ", false, "usage: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'usage: ' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setOptPrefix("1%#");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(74, ">^\"5wi^4~p:{Zv~P._J", ">^\"5wi^4~p:{Zv~P._J", options0, ">^\"5wi^4~p:{Zv~P._J");
      helpFormatter0.defaultLeftPad = 74;
      helpFormatter0.printHelp(74, "org.apache.commons.cli.HelpFormatter$1", ">^\"5wi^4~p:{Zv~P._J", options0, "OW?cgP:g/@Zn", true);
      helpFormatter0.rtrim(">^\"5wi^4~p:{Zv~P._J");
      // Undeclared exception!
      helpFormatter0.printWrapped((PrintWriter) null, 0, 74, "OW?cgP:g/@Zn");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "arg");
      helpFormatter0.renderWrappedText(stringBuffer0, 5018, 5018, "$V");
      assertEquals(5, stringBuffer0.length());
      assertEquals("arg$V", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      String string0 = "";
      Options options0 = null;
      // Undeclared exception!
      try { 
        helpFormatter0.printHelp("", (Options) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cmdLineSyntax not provided
         //
         verifyException("org.apache.commons.cli.HelpFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      int int0 = 1524;
      helpFormatter0.setLeftPadding(1524);
      String string0 = "";
      helpFormatter0.setSyntaxPrefix("");
      Options options0 = new Options();
      boolean boolean0 = true;
      String string1 = null;
      Option option0 = null;
      try {
        option0 = new Option("\n", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '
         // '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      helpFormatter0.setLongOptSeparator("hQnP1J,~#J]H]N");
      assertEquals("hQnP1J,~#J]H]N", helpFormatter0.getLongOptSeparator());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("--", " [ARG]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  [ARG]
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
