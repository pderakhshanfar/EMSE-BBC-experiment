/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 21:18:44 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.IOException;
import java.sql.SQLException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import javax.xml.namespace.QName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNotNull(serializationConfig0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      assertNotSame(xmlSerializerProvider0, xmlSerializerProvider1);
      assertNotSame(xmlSerializerProvider1, xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNull(qName0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(xmlRootNameLookup0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteFormattedNumbers());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNotNull(tokenBuffer0);
      
      ToXmlGenerator toXmlGenerator0 = xmlSerializerProvider0._asXmlGenerator(tokenBuffer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer0.canWriteFormattedNumbers());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertNull(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "n7Jf#dy`hRQ99KjD$0", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("n7Jf#dy`hRQ99KjD$0", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1624), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("n7Jf#dy`hRQ99KjD$0", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1624), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertNotNull(toXmlGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("n7Jf#dy`hRQ99KjD$0", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1624), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1624), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertNotNull(toXmlGenerator0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      FloatNode floatNode0 = new FloatNode(3);
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(3.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(3, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((short)3, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertEquals(3L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertEquals(3.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNotNull(floatNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, true);
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(3.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(3, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((short)3, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertEquals(3L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertEquals(3.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "item", writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("item", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(3.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(3, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((short)3, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertEquals(3L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertEquals(3.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("item", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertNotNull(toXmlGenerator0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(floatNode0.booleanValue());
      assertTrue(floatNode0.isFloat());
      assertFalse(floatNode0.isArray());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, floatNode0.asToken());
      assertEquals(0, floatNode0.size());
      assertFalse(floatNode0.isLong());
      assertFalse(floatNode0.isIntegralNumber());
      assertFalse(floatNode0.isDouble());
      assertTrue(floatNode0.canConvertToInt());
      assertFalse(floatNode0.isBigInteger());
      assertEquals(3.0F, floatNode0.floatValue(), 0.01F);
      assertFalse(floatNode0.isMissingNode());
      assertEquals(3, floatNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, floatNode0.getNodeType());
      assertFalse(floatNode0.isInt());
      assertTrue(floatNode0.canConvertToLong());
      assertEquals((short)3, floatNode0.shortValue());
      assertFalse(floatNode0.isObject());
      assertEquals(3L, floatNode0.longValue());
      assertFalse(floatNode0.isNaN());
      assertEquals(3.0, floatNode0.doubleValue(), 0.01);
      assertNull(floatNode0.textValue());
      assertTrue(floatNode0.isFloatingPointNumber());
      assertEquals(JsonParser.NumberType.FLOAT, floatNode0.numberType());
      assertFalse(floatNode0.isBigDecimal());
      assertFalse(floatNode0.isShort());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("item", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "ENLh&/\"&6", writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("ENLh&/\"&6", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2037), (-1), objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("ENLh&/\"&6", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-2037), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertNotNull(toXmlGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("ENLh&/\"&6", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-2037), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-2037), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertNotNull(filteringGeneratorDelegate0);
      
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertNotNull(jsonGeneratorDelegate0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._wrapAsIOE(jsonGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      assertNotNull(qName0);
      
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray((ToXmlGenerator) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1979, (-2426), objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1979, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2426), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertNotNull(toXmlGenerator0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      QName qName0 = new QName("0\"xF@K2Eb)0%\"(rMnx", "0\"xF@K2Eb)0%\"(rMnx", "");
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1979, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2426), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid white space character (0x7f) in text to output (in xml 1.1, could output as a character entity)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._serializeXmlNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNotNull(serializationConfig0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      
      try { 
        xmlSerializerProvider1._serializeXmlNull((JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._rootNameFromConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2067), 6, (ObjectCodec) null, nonNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals((-2067), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(6, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertNotNull(toXmlGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("wQZ$6DuY`", "JSON", ")>t>\"\"v)Dq5qva.");
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      char[] charArray0 = new char[7];
      asciiXmlWriter0.writeRawAscii(charArray0, (-2082), (-2082));
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2082), (-2082), objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-2082), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2082), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertNotNull(toXmlGenerator0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2082
         //
         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2067), (-2067), objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2067), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-2067), toXmlGenerator0.getFormatFeatures());
      assertNotNull(toXmlGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      repairingNsStreamWriter0.writeStartElement("JSON", "JSON", "j/pub+l/ g}GKEWW2");
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("JSON", "JSON", "read(buf,");
      assertNotNull(qName0);
      
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._asXmlGenerator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertNotNull(jsonGeneratorDelegate0);
      
      try { 
        xmlSerializerProvider0._asXmlGenerator(jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      XmlSerializerProvider xmlSerializerProvider1 = null;
      try {
        xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, (SerializationConfig) null, beanSerializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = null;
      try {
        xmlSerializerProvider0 = new XmlSerializerProvider((XmlSerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "XmlMapper does not with generators of type other than ToXmlGenerator; got: ", sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("XmlMapper does not with generators of type other than ToXmlGenerator; got: ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertEquals("XmlMapper does not with generators of type other than ToXmlGenerator; got: ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      SQLException sQLException0 = new SQLException();
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1824));
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertNotNull(placeholderForType0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertNotNull(jsonGeneratorDelegate0);
      
      Integer integer0 = new Integer(401);
      assertEquals(401, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) jsonGeneratorDelegate0, (Object) integer0, (JavaType) placeholderForType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2104), (-2104), objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-2104), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2104), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertNotNull(toXmlGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      QName qName0 = new QName("JSON", "u,8-Y VMR8-", "com.ctc.wstx.baseURL");
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-2104), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2104), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals((-2104), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2104), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals((-2104), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2104), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals((-2104), toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals((-2104), toXmlGenerator1.getFeatureMask());
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8143, 8143, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertNotNull(toXmlGenerator0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = QName.valueOf("JSON");
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 8143, 8143, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertNotNull(toXmlGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      QName qName0 = QName.valueOf("JSON");
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(8143, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(8143, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 98, (-2067), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      Version version0 = new Version(15, 419, 15, "JSON", "JSON", "");
      SimpleModule simpleModule0 = new SimpleModule("JSON", version0);
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) simpleModule0, (JavaType) placeholderForType0, jsonSerializer0);
      assertTrue(placeholderForType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0, (JavaType) null, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = new FloatNode(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "item", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      SimpleModule simpleModule0 = new SimpleModule("item");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) simpleModule0, (JavaType) placeholderForType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) "", (JavaType) placeholderForType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(xmlRootNameLookup0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) jsonFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "n7Jf#dy`hRQ99KjD$0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1624), 0, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) toXmlGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.copy();
      assertNotSame(xmlSerializerProvider0, defaultSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2104), (-2104), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("JSON", "u,8-Y VMR8-", "com.ctc.wstx.baseURL");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }
}
