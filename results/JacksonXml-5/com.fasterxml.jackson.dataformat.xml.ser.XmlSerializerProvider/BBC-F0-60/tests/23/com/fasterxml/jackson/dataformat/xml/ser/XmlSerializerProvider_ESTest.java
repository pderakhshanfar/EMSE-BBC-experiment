/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:48:12 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.stax.WstxInputFactory;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.SimpleOutputElement;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataOutput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.time.Month;
import java.time.YearMonth;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoChronology;
import java.time.chrono.MinguoDate;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Locale;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.namespace.QName;
import javax.xml.stream.util.StreamReaderDelegate;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockYearMonth;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoChronology;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.ctc.wstx.sw.BaseNsStreamWriter", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1518), (-225), objectMapper0, simpleNsStreamWriter0);
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
      Class<IOException> class0 = IOException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0, jsonSerializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "M03I{", writerConfig0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 0, 246, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("M03I{", "M03I{");
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      System.setCurrentTimeMillis(3);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid white space character (0x7f) in text to output (in xml 1.1, could output as a character entity)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("", "");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("8", "8");
      serializationConfig0.withRootName(propertyName0);
      WriterConfig.createJ2MEDefaults();
      Object object0 = new Object();
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      try { 
        xmlSerializerProvider1._serializeXmlNull((JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PropertyName propertyName0 = new PropertyName("G", "G");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, simpleNsStreamWriter0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashSet> class0 = HashSet.class;
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) serializationConfig1, (JavaType) collectionType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("8", "8");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, simpleNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1, serializationConfig2, beanSerializerFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0);
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader2 = objectReader1.forType((JavaType) simpleType0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      JavaType javaType0 = typeFactory1.constructType((Type) simpleType0);
      xmlSerializerProvider2.serializeValue((JsonGenerator) toXmlGenerator0, (Object) toXmlGenerator0, javaType0, xmlSerializerProvider1.DEFAULT_NULL_KEY_SERIALIZER);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("Rs", "Rs");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig1, false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig1, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "XmlMapper does not with generators of type other than ToXmlGenerator; got: ", writerConfig0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(17);
      IOContext iOContext1 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext2, 0, 18, objectMapper0, simpleNsStreamWriter0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null);
      xmlSerializerProvider1._rootNameFromConfig();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("Rs", "Rs");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1590), objectMapper0, simpleNsStreamWriter0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null);
      xmlSerializerProvider0.copy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = PropertyName.construct("4X9l_jYyt|");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1590), objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) "HK5%[B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("s", "4X9l_jYyt|");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig1);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializationConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter1 = new SimpleNsStreamWriter(asciiXmlWriter0, "e\"2Kb\"`s", writerConfig0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls0);
      configOverrides0.setDefaultSetterInfo(jsonSetter_Value0);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, (-32768), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) writerConfig0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("Rs", "4X9l_jYyt|");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig1);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializationConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter1 = new SimpleNsStreamWriter(asciiXmlWriter0, "e\"2Kb\"`s", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 663, 3, objectMapper0, simpleNsStreamWriter1);
      xmlSerializerProvider0.copy();
      StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) stdTypeResolverBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("Rs", "4X9l_jYyt|");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig1);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializationConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter1 = new SimpleNsStreamWriter(asciiXmlWriter0, "e\"2Kb\"`s", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 663, 3, objectMapper0, simpleNsStreamWriter1);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) "Rs", (JavaType) null, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.TypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
      PropertyName propertyName0 = new PropertyName("Rs", "4X9l_jYyt|");
      SerializationConfig serializationConfig2 = serializationConfig1.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig2, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig1);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializationConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter1 = new SimpleNsStreamWriter(asciiXmlWriter0, "e\"2Kb\"`s", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 663, (-939), objectMapper0, simpleNsStreamWriter1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) "Rs", (JavaType) null, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.TypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      WriterConfig writerConfig1 = WriterConfig.createJ2MEDefaults();
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder1 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "JSON");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter1, writerConfig0, "JSON", false, byteArrayBuilder0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, printWriter0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 4, 99, objectMapper0, simpleNsStreamWriter0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null, (JavaType) null, (JsonSerializer<Object>) null);
      System.setCurrentTimeMillis(57343);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) xmlRootNameLookup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName("4hjzDcR.=|'>UC)IeJK", "4hjzDcR.=|'>UC)IeJK", "4hjzDcR.=|'>UC)IeJK");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "4hjzDcR.=|'>UC)IeJK", true, byteArrayBuilder0, (-14));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "4hjzDcR.=|'>UC)IeJK", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 5, (ObjectCodec) null, repairingNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, 3, 2394, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator1, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArrayBuilder0.NO_BYTES);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      xmlSerializerProvider1.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      xmlSerializerProvider1._serializeXmlNull(filteringGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      xmlSerializerProvider1.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      xmlSerializerProvider1.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) null);
      xmlSerializerProvider1.copy();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(1383);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      System.setCurrentTimeMillis((-2701L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(42);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1154);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1), objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._serializeXmlNull(jsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterConfig writerConfig1 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig1);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 239, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) nonNsStreamWriter0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      File file0 = MockFile.createTempFile("JSON", "[no message for ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig1, "item", true, byteArrayBuilder0, (-1260));
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig1);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 583, 717, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) bufferingXmlWriter0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      WriterConfig.createJ2MEDefaults();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayBuilder0, false);
      WriterConfig.createJ2MEDefaults();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      JsonGenerator jsonGenerator0 = tokenBuffer0.overrideStdFeatures((-1612), (-1612));
      xmlSerializerProvider1.serializeValue(jsonGenerator0, (Object) null);
      xmlSerializerProvider1._asXmlGenerator(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QName qName0 = new QName("4hjzDcR.=|'>UC)IeJK", "4hjzDcR.=|'>UC)IeJK", "4hjzDcR.=|'>UC)IeJK");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "4hjzDcR.=|'>UC)IeJK", true, byteArrayBuilder0, (-14));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "4hjzDcR.=|'>UC)IeJK", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-14), (ObjectCodec) null, repairingNsStreamWriter0);
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      SerializationConfig serializationConfig1 = serializationConfig0.withFilters(simpleFilterProvider0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      SerializationConfig serializationConfig2 = serializationConfig1.without(jsonGenerator_Feature0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      SerializationConfig serializationConfig3 = serializationConfig2.withoutFeatures(jsonGenerator_FeatureArray0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlBeanSerializerModifier xmlBeanSerializerModifier0 = new XmlBeanSerializerModifier();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(xmlBeanSerializerModifier0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1, serializationConfig3, serializerFactory0);
      xmlSerializerProvider2._rootNameFromConfig();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName(",\"o\"=");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, ",\"o\"=", true, byteArrayBuilder0, (-271));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, ",\"o\"=", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, qName0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, qName0, false);
      toXmlGenerator0.writeRaw("TPV,/Dld\"YS2=i;", (-271), 92);
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, 55296, (-13), (ObjectCodec) null, repairingNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator1, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      SerializationConfig serializationConfig1 = serializationConfig0.with((FormatFeature) toXmlGenerator_Feature0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      SerializationConfig serializationConfig2 = serializationConfig1.with(serializationFeature0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SerializationConfig serializationConfig3 = serializationConfig2.withView(class0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationConfig serializationConfig4 = serializationConfig3.withoutFeatures(serializationFeatureArray0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      xmlSerializerProvider0.createInstance(serializationConfig4, beanSerializerFactory0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(1000000000L);
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationConfig serializationConfig1 = serializationConfig0.with(serializationFeature0);
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationConfig serializationConfig2 = serializationConfig1.without(serializationFeature1, serializationFeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      SerializationConfig serializationConfig3 = serializationConfig2.with(jsonGenerator_Feature0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1, serializationConfig3, beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName("hjzDcR.=|q'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(42);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) ".3";
      objectArray0[2] = (Object) qName0;
      objectArray0[3] = (Object) ".3";
      objectArray0[4] = (Object) "hjzDcR.=|q'>UC)Ie+K";
      objectArray0[5] = (Object) qName0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) byteArrayBuilder0;
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, ".3", objectArray0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "XmlMapper does not with generators of type other than ToXmlGenerator; got: ", true, printStream0, 1744);
      WriterConfig writerConfig1 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig1);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, qName0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator1, qName0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "hjzDcR.=|'>UC)Ie+K", true, byteArrayBuilder0, (-287));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "hjzDcR.=|'>UC)Ie+K", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1939, (-3598), (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      Integer integer0 = new Integer(0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('B');
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(charArrayWriter1, writerConfig0, "JSON", false, byteArrayBuilder0, 0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Month> class0 = Month.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(integer0, class0, "JSON");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 1397, 2, objectMapper0, simpleNsStreamWriter0);
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSelfReferencedType();
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) objectMapper0, (JavaType) null, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      javaType0.getSuperClass();
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "KOVE_VfM5$CO0?]p5%", false, byteArrayBuilder0, (-1563));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer", writerConfig0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2537), (-285), (ObjectCodec) null, xMLStreamWriter2_0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider((XmlRootNameLookup) null);
      xmlSerializerProvider1._startRootArray(toXmlGenerator0, qName0);
      Random.setNextRandom(3);
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator1, qName0);
      xmlSerializerProvider0.copy();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser", "com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.jackson.core.json.ReaderBasedJsonParser", true, byteArrayBuilder0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "NM\"GY)8MmrD6KjyB", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1805, 1, (ObjectCodec) null, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      ToXmlGenerator toXmlGenerator2 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator1);
      ToXmlGenerator toXmlGenerator3 = toXmlGenerator2.enable(toXmlGenerator_Feature0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyName propertyName1 = propertyName0.internSimpleName();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      ObjectIdGenerator<String> objectIdGenerator0 = objectIdGenerators_StringIdGenerator0.forScope(class0);
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName1, objectIdGenerator0, false);
      JsonSerializer<Object> jsonSerializer0 = objectIdWriter0.serializer;
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator3, (Object) jsonMappingException0, (JavaType) resolvedRecursiveType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "KOVE_VfM5$CO0?]p5%", false, byteArrayBuilder0, (-1563));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer", writerConfig0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2537), (-285), (ObjectCodec) null, xMLStreamWriter2_0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider((XmlRootNameLookup) null);
      xmlSerializerProvider1._startRootArray(toXmlGenerator0, qName0);
      Random.setNextRandom(3);
      xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "hjzDcR.=|'>UC)Ie+K", false, byteArrayBuilder0, (-287));
      WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "hjzDcR.=|'>UC)Ie+K", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      writerConfig0.safeGetProperty("hjzDcR.=|'>UC)Ie+K");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      System.setCurrentTimeMillis(3);
      xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "hjzDcR.=|'>UC)Ie+K", false, byteArrayBuilder0, (-287));
      WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "hjzDcR.=|'>UC)Ie+K", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature0);
      JsonFactory jsonFactory5 = jsonFactory4.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory5.createParser("hjzDcR.=|'>UC)Ie+K");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      PropertyNamingStrategy.LowerCaseStrategy propertyNamingStrategy_LowerCaseStrategy0 = (PropertyNamingStrategy.LowerCaseStrategy)PropertyNamingStrategy.LOWER_CASE;
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseStrategy0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, false);
      tokenBuffer1.setCodec((ObjectCodec) null);
      Integer integer0 = new Integer(3049);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) tokenBuffer0, (Object) writerConfig0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      System.setCurrentTimeMillis((-1L));
      XmlSerializerProvider xmlSerializerProvider2 = null;
      try {
        xmlSerializerProvider2 = new XmlSerializerProvider((XmlSerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "hjzDcR.=|'>UC)Ie+K", false, byteArrayBuilder0, (-287));
      WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "hjzDcR.=|'>UC)Ie+K", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      writerConfig0.safeGetProperty("hjzDcR.=|'>UC)Ie+K");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName0);
      QName qName1 = new QName("K.7Pi", "f_n=@zRNtT`s2\"u.Ru");
      xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName1);
      YearMonth yearMonth0 = MockYearMonth.now();
      Month month0 = Month.from(yearMonth0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) month0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jacks,n.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jacks,n.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec((ObjectCodec) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue(jsonGenerator0, (Object) integer0, javaType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      QName qName0 = new QName("hjzDcR.=|'>UC)Ie+K");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "hjzDcR.=|'>UC)Ie+K", false, byteArrayBuilder0, (-287));
      WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "hjzDcR.=|'>UC)Ie+K", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      jsonFactory0.setCodec((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      writerConfig0.safeGetProperty("hjzDcR.=|'>UC)Ie+K");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1011, 1498, (ObjectCodec) null, repairingNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", true, byteArrayBuilder0, 2);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-181), (ObjectCodec) null, (Writer) null);
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) bufferingXmlWriter0, javaType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      xmlSerializerProvider0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, (DefaultDeserializationContext) null);
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = tokenBuffer0.disable(jsonGenerator_Feature0);
      xmlSerializerProvider0._asXmlGenerator(jsonGenerator0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._rootNameFromConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", true, byteArrayBuilder0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) jsonMappingException0, javaType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", true, byteArrayBuilder0, 2);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 1, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      xmlSerializerProvider0._wrapAsIOE(toXmlGenerator0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ToXmlGenerator toXmlGenerator0 = null;
      String string0 = "p\"";
      QName qName0 = new QName("p\"");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName((ToXmlGenerator) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      QName.valueOf("S");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1), objectMapper0, repairingNsStreamWriter0);
      xmlSerializerProvider1._asXmlGenerator(toXmlGenerator0);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      // Undeclared exception!
      try { 
        streamReaderDelegate0.getAttributeName(57343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.xml.stream.util.StreamReaderDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      QName qName0 = QName.valueOf("S");
      // Undeclared exception!
      try { 
        xmlSerializerProvider1._startRootArray((ToXmlGenerator) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", true, byteArrayBuilder0, 2);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "xmlInfo", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 1, 1, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator1, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      SerializationConfig serializationConfig0 = null;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      Class<IOException> class1 = IOException.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      objectMapper1.setConfig((SerializationConfig) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, byteArrayOutputStream0, byteArray0, 2, true);
      try { 
        xmlSerializerProvider0._asXmlGenerator(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      objectMapper0.enableDefaultTyping();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._serializeXmlNull(tokenBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      xmlSerializerProvider1.getGenerator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x^a-@l-Vl/tI");
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlRootNameLookup0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2812;
      intArray0[1] = (-551);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      xmlSerializerProvider2._wrapAsIOE((JsonGenerator) null, batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      xmlSerializerProvider0.getGenerator();
      JavaType javaType0 = null;
      Class<ToXmlGenerator> class0 = ToXmlGenerator.class;
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getUnknownTypeSerializer(class0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException(javaType0, "", "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, true);
      WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      try { 
        xmlSerializerProvider0.serializeValue(jsonGenerator0, (Object) "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      xmlSerializerProvider1.getGenerator();
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue(jsonGenerator0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      xmlSerializerProvider1.getGenerator();
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) null, (Object) xmlSerializerProvider0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.createInstance((SerializationConfig) null, (SerializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._rootNameFromConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonGenerator jsonGenerator0 = null;
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._asXmlGenerator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonGenerator jsonGenerator0 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlBeanSerializerModifier xmlBeanSerializerModifier0 = new XmlBeanSerializerModifier();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(xmlBeanSerializerModifier0);
      XmlSerializerProvider xmlSerializerProvider1 = null;
      try {
        xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, (SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.copy();
      MockFile mockFile0 = new MockFile("columnNr", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((File) mockFile0, jsonEncoding0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._wrapAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, false);
      Integer integer0 = new Integer((-2984));
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) tokenBuffer0, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V6qTxI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) bufferRecycler0;
      objectArray0[2] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", objectArray0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, printStream0, byteArray0, 128, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("V6qTxI", "tLi", 57343);
      xmlSerializerProvider0._wrapAsIOE(jsonGenerator0, sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      xmlSerializerProvider0.copy();
      xmlSerializerProvider0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("Cannot find a Value deserializer for abstract type ");
      OutputStream outputStream0 = null;
      jsonFactory3.createGenerator((OutputStream) null);
      SAXParseException sAXParseException0 = new SAXParseException("JSON", "", "Cannot find a Value deserializer for abstract type ", 0, 0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, byteArrayBuilder0.size());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, byteArrayBuilder0.size());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      Class<String> class0 = String.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      SimpleType simpleType0 = (SimpleType)objectMapper1.constructType(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], (JavaType) simpleType0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.findValueSerializer(javaTypeArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      URI uRI0 = MockURI.URI("JSON", "JSON", "&");
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not hierarchical
         //
         verifyException("java.io.File", e);
      }
  }
}
