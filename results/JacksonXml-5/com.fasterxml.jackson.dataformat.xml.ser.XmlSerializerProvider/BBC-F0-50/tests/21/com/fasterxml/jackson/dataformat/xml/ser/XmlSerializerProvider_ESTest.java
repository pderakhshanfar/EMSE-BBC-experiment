/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:46:57 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.ReaderConfig;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.dom.WstxDOMWrappingReader;
import com.ctc.wstx.io.SystemId;
import com.ctc.wstx.io.WstxInputLocation;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.util.SymbolTable;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleSerializers;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientException;
import java.time.chrono.MinguoEra;
import java.util.HashMap;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.namespace.QName;
import javax.xml.stream.Location;
import javax.xml.transform.dom.DOMSource;
import org.codehaus.stax2.ri.evt.CharactersEventImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      xmlSerializerProvider1.getGenerator();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0, jsonEncoding0);
      xmlSerializerProvider1.serializeValue(jsonGenerator0, (Object) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      xmlSerializerProvider1.getGenerator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      xmlSerializerProvider1._serializeXmlNull(jsonGenerator0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
      try { 
        serializationConfig0.withoutFeatures((SerializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      SerializationFeature[] serializationFeatureArray0 = null;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      xmlSerializerProvider1._rootNameFromConfig();
      xmlSerializerProvider0.getGenerator();
      try { 
        xmlSerializerProvider1._serializeXmlNull((JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      char[] charArray0 = new char[0];
      asciiXmlWriter0.writeRawAscii(charArray0, 0, (-970));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("", "", "");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -970
         //
         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._rootNameFromConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d\"h2KXEa~J?kn`;6O+");
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      Class<String> class0 = String.class;
      SerializationConfig serializationConfig2 = serializationConfig1.withView(class0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      SerializationConfig serializationConfig3 = serializationConfig2.withDefaultPrettyPrinter(defaultXmlPrettyPrinter0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig3, serializerFactory0);
      xmlSerializerProvider1.createInstance(serializationConfig1, serializerFactory0);
      xmlSerializerProvider1.getGenerator();
      try { 
        xmlSerializerProvider1._serializeXmlNull((JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      QName qName0 = new QName("JSON", "JSON");
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, repairingNsStreamWriter0);
      writerConfig0.doOutputCDataAsText(true);
      objectMapper0.writeValueAsBytes(writerConfig0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      toXmlGenerator0.writeNumber(bigDecimal0);
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <JSON>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      QName qName0 = new QName("JSON", "JSON");
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, repairingNsStreamWriter0);
      writerConfig0.doOutputCDataAsText(true);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
      Random.setNextRandom(1);
      xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper1, nonNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      toXmlGenerator0.writeStartArray(12);
      QName qName0 = new QName("L(JSkKGf_");
      xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L(JSkKGf_");
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider1.copy();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      QName qName0 = new QName("JSON", "");
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "H_EWA70}{", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, repairingNsStreamWriter0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) asciiXmlWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig1, false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig1);
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-56);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus1.getType();
      Integer integer0 = new Integer((-1210));
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      ObjectIdGenerator<MinguoEra> objectIdGenerator0 = (ObjectIdGenerator<MinguoEra>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, true);
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(true);
      JsonSerializer<Object> jsonSerializer0 = objectIdWriter1.serializer;
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) integer0, javaType0, (JsonSerializer<Object>) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper1, nonNsStreamWriter0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-65);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) jsonFactory1, javaType0, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      WriterConfig writerConfig1 = writerConfig0.createNonShared();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig1, false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig1);
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      byteArray0[3] = (byte)0;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus1.getType();
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) jsonFactory0, javaType0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper1, nonNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      String string0 = "L(JSkKGf\\_";
      QName qName0 = new QName("L(JSkKGf_");
      xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider0);
      QName qName1 = new QName("L(JSkKGf_");
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper1, nonNsStreamWriter0);
      try { 
        xmlSerializerProvider1._initWithRootName(toXmlGenerator1, qName1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-5365), 1520, objectMapper1, nonNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)15;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0, deserializationContext0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, tokenBuffer0, true);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus1.getType();
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) tokenBuffer0, (Object) "L(JSkKGf_", javaType0, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper1, nonNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      QName qName0 = new QName("L(JSkKGf_");
      xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider0);
      QName qName1 = new QName("L(JSkKGf_");
      xmlSerializerProvider2._initWithRootName(toXmlGenerator0, qName1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      mockIOException0.getStackTrace();
      // Undeclared exception!
      try { 
        xmlSerializerProvider2.serializeValue((JsonGenerator) toXmlGenerator0, (Object) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper1, nonNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      QName qName0 = new QName("[no message for ", "JSON");
      // Undeclared exception!
      try { 
        xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper1, nonNsStreamWriter0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      String string0 = "L(JSkKGf\\_";
      QName qName0 = new QName("L(JSkKGf_");
      xmlSerializerProvider1._initWithRootName(toXmlGenerator0, qName0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectMapper0, false);
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, (QName) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) nonNsStreamWriter0, javaType0, xmlSerializerProvider1.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.getLocation();
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1);
      XmlSerializerProvider xmlSerializerProvider3 = new XmlSerializerProvider(xmlRootNameLookup1);
      QName qName0 = new QName("U1+T}+BDlD$U*L>U");
      xmlSerializerProvider3._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider2._asXmlGenerator(toXmlGenerator0);
      xmlSerializerProvider3._startRootArray(toXmlGenerator0, qName0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      Location location0 = wstxDOMWrappingReader0.getLocation();
      CharactersEventImpl charactersEventImpl0 = new CharactersEventImpl(location0, "O8 ^f", true);
      charactersEventImpl0.getSchemaType();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, (QName) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.getLocation();
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1);
      XmlSerializerProvider xmlSerializerProvider3 = new XmlSerializerProvider(xmlRootNameLookup1);
      QName qName0 = new QName("U1+T}+BDlD$U*L>U");
      xmlSerializerProvider3._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider2._asXmlGenerator(toXmlGenerator0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) toXmlGenerator1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      WriterConfig writerConfig1 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter1 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter1 = new NonNsStreamWriter(asciiXmlWriter1, "JSON", writerConfig1);
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, (-2517), (-66), objectMapper0, nonNsStreamWriter1);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator2 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator1);
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator3 = toXmlGenerator2.disable(toXmlGenerator_Feature1);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator3, (Object) toXmlGenerator_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature1);
      BufferRecycler bufferRecycler0 = jsonFactory3._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory4 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper1, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator2 = toXmlGenerator1.disable(toXmlGenerator_Feature1);
      ToXmlGenerator.Feature toXmlGenerator_Feature2 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator3 = toXmlGenerator2.disable(toXmlGenerator_Feature2);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      ToXmlGenerator toXmlGenerator4 = xmlSerializerProvider1._asXmlGenerator(toXmlGenerator3);
      ToXmlGenerator toXmlGenerator5 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator2);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator4, (Object) toXmlGenerator5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      objectMapper1.writeValueAsString(writerConfig0);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "PHONE", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      wstxDOMWrappingReader0.getLocation();
      CharactersEventImpl charactersEventImpl0 = new CharactersEventImpl((Location) null, "", false);
      charactersEventImpl0.getSchemaType();
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.createInstance((SerializationConfig) null, (SerializerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator2 = toXmlGenerator1.disable(toXmlGenerator_Feature1);
      ToXmlGenerator toXmlGenerator3 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator1);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator2, (Object) toXmlGenerator3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
      ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
      WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
      Location location0 = wstxDOMWrappingReader0.getLocation();
      CharactersEventImpl charactersEventImpl0 = new CharactersEventImpl(location0, "O8 ^f", true);
      charactersEventImpl0.getSchemaType();
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider((XmlRootNameLookup) null);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonGenerator jsonGenerator0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SimpleModule simpleModule0 = new SimpleModule("");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "|nQn~|7*", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext1, 427, (-713), (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature1);
      xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator1, (Object) toXmlGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1297, 3, objectMapper1, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator2 = toXmlGenerator1.disable(toXmlGenerator_Feature1);
      ToXmlGenerator toXmlGenerator3 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator1);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator2, (Object) toXmlGenerator3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ToXmlGenerator toXmlGenerator0 = null;
      QName qName0 = QName.valueOf("");
      qName0.getLocalPart();
      qName0.getNamespaceURI();
      XmlSerializerProvider xmlSerializerProvider1 = null;
      try {
        xmlSerializerProvider1 = new XmlSerializerProvider((XmlSerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ToXmlGenerator toXmlGenerator0 = null;
      QName qName0 = QName.valueOf("");
      qName0.getLocalPart();
      qName0.getNamespaceURI();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray((ToXmlGenerator) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      xmlSerializerProvider1.invalidTypeIdException((JavaType) null, "#GA6", "[no message for ");
      SimpleModule simpleModule0 = new SimpleModule("[no message for ");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) filteringGeneratorDelegate0, (Object) xmlSerializerProvider1, (JavaType) null, xmlSerializerProvider1.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonGenerator jsonGenerator0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      JsonGenerator jsonGenerator0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException((JavaType) null, "[no message for ", "com.ctc.wstx.dtd.ChoiceContentSpec");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, jsonMappingException0);
      xmlSerializerProvider1._wrapAsIOE((JsonGenerator) null, sQLClientInfoException0);
      SimpleModule simpleModule0 = new SimpleModule("");
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) simpleModule0, (JavaType) null, xmlSerializerProvider1.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(911L);
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ToXmlGenerator toXmlGenerator0 = null;
      WstxInputLocation wstxInputLocation0 = WstxInputLocation.getEmptyLocation();
      String string0 = "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser";
      String string1 = null;
      int int0 = 0;
      WstxInputLocation wstxInputLocation1 = new WstxInputLocation(wstxInputLocation0, "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser", (String) null, 911L, 1, 0);
      String string2 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      URL uRL0 = MockURL.getFtpExample();
      SystemId systemId0 = SystemId.construct(uRL0);
      int int1 = (-312);
      WstxInputLocation wstxInputLocation2 = new WstxInputLocation(wstxInputLocation1, "", systemId0, 1, 1950, (-312));
      CharactersEventImpl charactersEventImpl0 = new CharactersEventImpl(wstxInputLocation2, "com.fasterxml.jackson.core.json.async.NonBlockingJsonParser", false);
      charactersEventImpl0.getSchemaType();
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName((ToXmlGenerator) null, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      XmlRootNameLookup xmlRootNameLookup1 = new XmlRootNameLookup();
      assertFalse(xmlRootNameLookup1.equals((Object)xmlRootNameLookup0));
      assertNotNull(xmlRootNameLookup1);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup1);
      assertFalse(xmlRootNameLookup1.equals((Object)xmlRootNameLookup0));
      assertNotNull(xmlSerializerProvider0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      assertFalse(xmlRootNameLookup1.equals((Object)xmlRootNameLookup0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)xmlSerializerProvider1.invalidTypeIdException((JavaType) null, "HS|++D/WP{-t6RbgZZX", "");
      assertFalse(xmlRootNameLookup1.equals((Object)xmlRootNameLookup0));
      assertFalse(xmlSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertEquals("HS|++D/WP{-t6RbgZZX", invalidTypeIdException0.getTypeId());
      assertNotSame(xmlRootNameLookup1, xmlRootNameLookup0);
      assertNotSame(xmlSerializerProvider0, xmlSerializerProvider1);
      assertNotSame(xmlSerializerProvider1, xmlSerializerProvider0);
      assertNotNull(invalidTypeIdException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, invalidTypeIdException0);
      assertFalse(xmlRootNameLookup1.equals((Object)xmlRootNameLookup0));
      assertFalse(xmlSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("HS|++D/WP{-t6RbgZZX", invalidTypeIdException0.getTypeId());
      assertEquals("java.sql.SQLClientInfoException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'HS|++D/WP{-t6RbgZZX' as a subtype of null: ", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'HS|++D/WP{-t6RbgZZX' as a subtype of null: ", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.forType((JavaType) null);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(objectReader2);
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader2, true);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(tokenBuffer0.isClosed());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteFormattedNumbers());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(4, deserializationFeatureArray0.length);
      assertNotNull(tokenBuffer0);
      
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.overrideStdFeatures((-1276), (-1276));
      xmlSerializerProvider1._wrapAsIOE(tokenBuffer1, sQLClientInfoException0);
      xmlSerializerProvider0._wrapAsIOE(tokenBuffer1, invalidTypeIdException0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer1, (Object) xmlRootNameLookup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNotNull(serializationConfig0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      serializationFeatureArray0[1] = serializationFeature1;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      SerializationConfig serializationConfig1 = serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertSame(serializationConfig1, serializationConfig0);
      assertSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertEquals(8, serializationFeatureArray0.length);
      assertNotNull(serializationConfig1);
      
      Class<String> class0 = String.class;
      SerializationConfig serializationConfig2 = serializationConfig1.withView(class0);
      assertFalse(serializationConfig2.equals((Object)serializationConfig1));
      assertFalse(serializationConfig2.equals((Object)serializationConfig0));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig2.getDefaultMergeable());
      assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig2.useRootWrapping());
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNull(serializationConfig2.getRootName());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNotSame(serializationConfig1, serializationConfig2);
      assertSame(serializationConfig1, serializationConfig0);
      assertNotSame(serializationConfig2, serializationConfig1);
      assertNotSame(serializationConfig2, serializationConfig0);
      assertNotSame(serializationConfig0, serializationConfig2);
      assertSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertEquals(8, serializationFeatureArray0.length);
      assertNotNull(serializationConfig2);
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      assertNotNull(defaultXmlPrettyPrinter0);
      
      SerializationConfig serializationConfig3 = serializationConfig2.withDefaultPrettyPrinter(defaultXmlPrettyPrinter0);
      assertFalse(serializationConfig1.equals((Object)serializationConfig2));
      assertFalse(serializationConfig2.equals((Object)serializationConfig1));
      assertFalse(serializationConfig2.equals((Object)serializationConfig0));
      assertFalse(serializationConfig3.equals((Object)serializationConfig1));
      assertFalse(serializationConfig3.equals((Object)serializationConfig0));
      assertFalse(serializationConfig3.equals((Object)serializationConfig2));
      assertFalse(serializationConfig0.equals((Object)serializationConfig2));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig2.getDefaultMergeable());
      assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig2.useRootWrapping());
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNull(serializationConfig2.getRootName());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig3.useRootWrapping());
      assertFalse(serializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig3.getDefaultMergeable());
      assertTrue(serializationConfig3.canOverrideAccessModifiers());
      assertNull(serializationConfig3.getRootName());
      assertEquals(2722236, serializationConfig3.getSerializationFeatures());
      assertTrue(serializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNotSame(serializationConfig1, serializationConfig2);
      assertNotSame(serializationConfig1, serializationConfig3);
      assertSame(serializationConfig1, serializationConfig0);
      assertNotSame(serializationConfig2, serializationConfig1);
      assertNotSame(serializationConfig2, serializationConfig0);
      assertNotSame(serializationConfig2, serializationConfig3);
      assertNotSame(serializationConfig3, serializationConfig1);
      assertNotSame(serializationConfig3, serializationConfig0);
      assertNotSame(serializationConfig3, serializationConfig2);
      assertNotSame(serializationConfig0, serializationConfig2);
      assertNotSame(serializationConfig0, serializationConfig3);
      assertSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertEquals(8, serializationFeatureArray0.length);
      assertNotNull(serializationConfig3);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertNotNull(serializerFactoryConfig0);
      
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertNotSame(beanSerializerFactory0, serializerFactory0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
      assertNotNull(serializerFactory0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig3, serializerFactory0);
      assertFalse(serializationConfig0.equals((Object)serializationConfig2));
      assertFalse(serializationConfig0.equals((Object)serializationConfig3));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationConfig1.equals((Object)serializationConfig2));
      assertFalse(serializationConfig1.equals((Object)serializationConfig3));
      assertFalse(serializationConfig2.equals((Object)serializationConfig1));
      assertFalse(serializationConfig2.equals((Object)serializationConfig0));
      assertFalse(serializationConfig2.equals((Object)serializationConfig3));
      assertFalse(serializationConfig3.equals((Object)serializationConfig1));
      assertFalse(serializationConfig3.equals((Object)serializationConfig0));
      assertFalse(serializationConfig3.equals((Object)serializationConfig2));
      assertFalse(beanSerializerFactory0.equals((Object)serializerFactory0));
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig2.getDefaultMergeable());
      assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig2.useRootWrapping());
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNull(serializationConfig2.getRootName());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig3.useRootWrapping());
      assertFalse(serializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig3.getDefaultMergeable());
      assertTrue(serializationConfig3.canOverrideAccessModifiers());
      assertNull(serializationConfig3.getRootName());
      assertEquals(2722236, serializationConfig3.getSerializationFeatures());
      assertTrue(serializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      assertEquals(8, serializationFeatureArray0.length);
      assertNotNull(xmlSerializerProvider1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider1.createInstance(serializationConfig1, serializerFactory0);
      assertFalse(xmlSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertFalse(serializationConfig0.equals((Object)serializationConfig2));
      assertFalse(serializationConfig0.equals((Object)serializationConfig3));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(serializationConfig1.equals((Object)serializationConfig2));
      assertFalse(serializationConfig1.equals((Object)serializationConfig3));
      assertFalse(serializationConfig2.equals((Object)serializationConfig1));
      assertFalse(serializationConfig2.equals((Object)serializationConfig0));
      assertFalse(serializationConfig2.equals((Object)serializationConfig3));
      assertFalse(serializationConfig3.equals((Object)serializationConfig1));
      assertFalse(serializationConfig3.equals((Object)serializationConfig0));
      assertFalse(serializationConfig3.equals((Object)serializationConfig2));
      assertFalse(beanSerializerFactory0.equals((Object)serializerFactory0));
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)xmlSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getRootName());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertNull(serializationConfig2.getDefaultMergeable());
      assertFalse(serializationConfig2.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig2.useRootWrapping());
      assertTrue(serializationConfig2.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig2.getSerializationFeatures());
      assertNull(serializationConfig2.getRootName());
      assertTrue(serializationConfig2.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig3.useRootWrapping());
      assertFalse(serializationConfig3.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig3.getDefaultMergeable());
      assertTrue(serializationConfig3.canOverrideAccessModifiers());
      assertNull(serializationConfig3.getRootName());
      assertEquals(2722236, serializationConfig3.getSerializationFeatures());
      assertTrue(serializationConfig3.isAnnotationProcessingEnabled());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider0.canOverrideAccessModifiers());
      assertNotSame(xmlSerializerProvider0, defaultSerializerProvider0);
      assertNotSame(xmlSerializerProvider0, xmlSerializerProvider1);
      assertNotSame(serializationConfig0, serializationConfig2);
      assertNotSame(serializationConfig0, serializationConfig3);
      assertSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertNotSame(serializationConfig1, serializationConfig2);
      assertNotSame(serializationConfig1, serializationConfig3);
      assertSame(serializationConfig1, serializationConfig0);
      assertNotSame(serializationConfig2, serializationConfig1);
      assertNotSame(serializationConfig2, serializationConfig0);
      assertNotSame(serializationConfig2, serializationConfig3);
      assertNotSame(serializationConfig3, serializationConfig1);
      assertNotSame(serializationConfig3, serializationConfig0);
      assertNotSame(serializationConfig3, serializationConfig2);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
      assertNotSame(xmlSerializerProvider1, xmlSerializerProvider0);
      assertNotSame(xmlSerializerProvider1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider1);
      assertEquals(8, serializationFeatureArray0.length);
      assertNotNull(defaultSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlRootNameLookup0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Nl}(\"[ * \u0004G)@Q-l", false);
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-1161), false);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1161), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertArrayEquals(new byte[] {(byte) (-54)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0.getCharacterEscapes();
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1161), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertArrayEquals(new byte[] {(byte) (-54)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNull(characterEscapes0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1161), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals((-1161), uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte) (-54)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) uTF8JsonGenerator1, (Object) jsonEncoding0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNotNull(jsonFactory1);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) beanDeserializerFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      JsonGenerator jsonGenerator0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.putIfAbsent("##irrelevant", clientInfoStatus0);
      String string0 = "com.ctc.wstx.dtd.ChoiceContentSpec";
      hashMap0.put("##irrelevant", (ClientInfoStatus) null);
      JsonMappingException jsonMappingException0 = xmlSerializerProvider0.invalidTypeIdException((JavaType) null, "[no message for ", "com.ctc.wstx.dtd.ChoiceContentSpec");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, jsonMappingException0);
      xmlSerializerProvider1._wrapAsIOE((JsonGenerator) null, sQLClientInfoException0);
      xmlSerializerProvider1._wrapAsIOE((JsonGenerator) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._asXmlGenerator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = beanSerializerFactory0.getFactoryConfig();
      SimpleSerializers simpleSerializers0 = new SimpleSerializers();
      SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withAdditionalKeySerializers(simpleSerializers0);
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig1);
      XmlSerializerProvider xmlSerializerProvider2 = null;
      try {
        xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1, (SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      XmlSerializerProvider xmlSerializerProvider2 = new XmlSerializerProvider(xmlSerializerProvider1);
      assertFalse(xmlSerializerProvider2.equals((Object)xmlSerializerProvider0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(booleanNode0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      ToXmlGenerator toXmlGenerator0 = xmlSerializerProvider0._asXmlGenerator(tokenBuffer0);
      assertNull(toXmlGenerator0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("d-hj2");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._serializeXmlNull(jsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._rootNameFromConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      xmlSerializerProvider0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) null);
      try { 
        xmlSerializerProvider0._asXmlGenerator(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLRecoverableException0);
      assertNotNull(iOException0);
  }
}
