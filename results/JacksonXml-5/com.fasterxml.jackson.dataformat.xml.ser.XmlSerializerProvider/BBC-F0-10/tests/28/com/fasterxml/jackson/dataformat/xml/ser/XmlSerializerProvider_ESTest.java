/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:55:41 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import javax.xml.namespace.QName;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XmlSerializerProvider_ESTest extends XmlSerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "2[7mM K_nayWw", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(3, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      
      QName qName0 = new QName("2[7mM K_nayWw", "2[7mM K_nayWw");
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator1, qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(3, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rt", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      assertNotSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertNotNull(serializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals("", serializationConfig1.getRootName());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      assertFalse(serializationConfig0.equals((Object)serializationConfig1));
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals("", serializationConfig1.getRootName());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig1.useRootWrapping());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      
      try { 
        xmlSerializerProvider1._serializeXmlNull(toXmlGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rc8", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("=$:Rc8", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("=$:Rc8", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      PropertyName propertyName0 = PropertyName.construct("=$:Rc8", "=$:Rc8");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=$:Rc8", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("=$:Rc8", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      assertNotSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertNotNull(serializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=$:Rc8", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("=$:Rc8", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig1.useRootWrapping());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertEquals("=$:Rc8", serializationConfig1.getRootName());
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      assertFalse(serializationConfig0.equals((Object)serializationConfig1));
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(propertyName0.hasSimpleName());
      assertEquals("=$:Rc8", propertyName0.getNamespace());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("=$:Rc8", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(serializationConfig1.useRootWrapping());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertEquals("=$:Rc8", serializationConfig1.getRootName());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) stdSubtypeResolver0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.TypeUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.createInstance(serializationConfig0, beanSerializerFactory0);
      assertNotSame(xmlSerializerProvider0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, xmlSerializerProvider0);
      assertFalse(defaultSerializerProvider0.equals((Object)xmlSerializerProvider0));
      assertNotNull(defaultSerializerProvider0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(defaultSerializerProvider0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNotSame(xmlSerializerProvider0, xmlSerializerProvider1);
      assertNotSame(xmlSerializerProvider1, xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNull(qName0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      assertNotSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertNotNull(serializationConfig1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(serializationConfig1.useRootWrapping());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals("", serializationConfig1.getRootName());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      assertFalse(serializationConfig0.equals((Object)serializationConfig1));
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(serializationConfig1.useRootWrapping());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals("", serializationConfig1.getRootName());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      
      QName qName0 = xmlSerializerProvider1._rootNameFromConfig();
      assertNotSame(xmlSerializerProvider0, xmlSerializerProvider1);
      assertNotSame(serializationConfig0, serializationConfig1);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertNotSame(xmlSerializerProvider1, xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider0.equals((Object)xmlSerializerProvider1));
      assertFalse(serializationConfig0.equals((Object)serializationConfig1));
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(qName0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.useRootWrapping());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(serializationConfig1.useRootWrapping());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals("", serializationConfig1.getRootName());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      assertNotNull(tokenBuffer0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteFormattedNumbers());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
      
      ToXmlGenerator toXmlGenerator0 = xmlSerializerProvider0._asXmlGenerator(tokenBuffer0);
      assertNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertEquals(31, tokenBuffer0.getFeatureMask());
      assertEquals((-1), tokenBuffer0.getOutputBuffered());
      assertEquals(0, tokenBuffer0.getFormatFeatures());
      assertEquals(0, tokenBuffer0.getHighestEscapedChar());
      assertFalse(tokenBuffer0.isClosed());
      assertFalse(tokenBuffer0.canWriteFormattedNumbers());
      assertTrue(tokenBuffer0.canOmitFields());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "]", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("]", repairingNsStreamWriter0.getEncoding());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, xmlSerializerProvider0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("]", repairingNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      QName qName0 = new QName("]", ") when resolving reference '");
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("]", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("]", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("]", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(2, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.inRoot());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "null", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("null", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "null", false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1341), (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("null", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1341), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("null", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1341), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertEquals((-1341), toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rt", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      assertNotNull(streamWriter2Delegate0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3961), 1, objectMapper0, streamWriter2Delegate0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-3961), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-3961), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals((-3961), toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, " ]_l", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(" ]_l", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(" ]_l", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ToXmlGenerator toXmlGenerator1 = xmlSerializerProvider0._asXmlGenerator(toXmlGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(" ]_l", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
      assertNotNull(stdTypeResolverBuilder0);
      assertNull(stdTypeResolverBuilder0.getTypeProperty());
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, stdTypeResolverBuilder0, true);
      assertNotNull(iOContext0);
      assertNull(stdTypeResolverBuilder0.getTypeProperty());
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "getTextXxx() methods can not be called on ", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("getTextXxx() methods can not be called on ", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2602), (-2602), objectMapper0, nonNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(stdTypeResolverBuilder0.getTypeProperty());
      assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("getTextXxx() methods can not be called on ", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2602), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2602), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      PropertyName propertyName0 = PropertyName.construct(",", ",");
      assertNotNull(propertyName0);
      assertEquals(",", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(",", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      assertNotSame(serializationConfig1, serializationConfig0);
      assertNotSame(serializationConfig0, serializationConfig1);
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertNotNull(serializationConfig1);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals(",", serializationConfig1.getRootName());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      assertEquals(",", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(",", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      assertFalse(serializationConfig1.equals((Object)serializationConfig0));
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertFalse(serializationConfig0.equals((Object)serializationConfig1));
      assertNotNull(xmlSerializerProvider1);
      assertTrue(serializationConfig1.canOverrideAccessModifiers());
      assertEquals(",", serializationConfig1.getRootName());
      assertNull(serializationConfig1.getDefaultMergeable());
      assertFalse(serializationConfig1.shouldSortPropertiesAlphabetically());
      assertTrue(serializationConfig1.useRootWrapping());
      assertTrue(serializationConfig1.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig1.getSerializationFeatures());
      assertTrue(xmlSerializerProvider1.canOverrideAccessModifiers());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      assertEquals(",", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals(",", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) propertyName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      assertNotNull(mockPrintStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "p#4ij~]8wS[;v.ID_T", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("p#4ij~]8wS[;v.ID_T", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 55296, objectMapper0, nonNsStreamWriter0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("p#4ij~]8wS[;v.ID_T", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals(55296, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      assertNotNull(qName0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("p#4ij~]8wS[;v.ID_T", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals(55296, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "p#4ij~]8wS[;v.ID_T", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("p#4ij~]8wS[;v.ID_T", repairingNsStreamWriter0.getEncoding());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("p#4ij~]8wS[;v.ID_T", repairingNsStreamWriter0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._startRootArray(toXmlGenerator0, qName0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "b?$Yhi(", true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, charArrayWriter0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._serializeXmlNull(writerBasedJsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._rootNameFromConfig();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "null", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("null", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "null", false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1341), (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("null", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-1341), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      QName qName0 = new QName("null", "us`@nh8e4Bfno");
      assertNotNull(qName0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "=$=Rt", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("=$=Rt", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("=$=Rt", "=$=Rt");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55296, 0, objectMapper0, nonNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("=$=Rt", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(55296, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "=$:Rt", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, asciiXmlWriter0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 117, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(117, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, 62, 56319, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(toXmlGenerator1.equals((Object)toXmlGenerator0));
      assertNotNull(toXmlGenerator1);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(62, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(56319, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      
      QName qName0 = new QName("=$:Rt", "=$:Rt");
      assertNotNull(qName0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      xmlSerializerProvider0._initWithRootName(toXmlGenerator1, qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(toXmlGenerator1, toXmlGenerator0);
      assertFalse(toXmlGenerator1.equals((Object)toXmlGenerator0));
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("=$:Rt", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(62, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(56319, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.isClosed());
      
      try { 
        xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._asXmlGenerator((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(jsonGeneratorDelegate0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      
      try { 
        xmlSerializerProvider0._asXmlGenerator(jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XmlMapper does not with generators of type other than ToXmlGenerator; got: com.fasterxml.jackson.core.util.JsonGeneratorDelegate
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      XmlSerializerProvider xmlSerializerProvider1 = null;
      try {
        xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, (SerializationConfig) null, beanSerializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlSerializerProvider xmlSerializerProvider0 = null;
      try {
        xmlSerializerProvider0 = new XmlSerializerProvider((XmlSerializerProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0);
      assertFalse(xmlSerializerProvider1.equals((Object)xmlSerializerProvider0));
      assertNotNull(xmlSerializerProvider1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
      
      IOException iOException0 = xmlSerializerProvider0._wrapAsIOE((JsonGenerator) null, sQLSyntaxErrorException0);
      assertNotNull(iOException0);
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLSyntaxErrorException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("", mockException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", sQLWarning0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      
      JsonMappingException jsonMappingException0 = (JsonMappingException)xmlSerializerProvider0._wrapAsIOE(jsonGeneratorDelegate0, sQLRecoverableException0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(jsonMappingException0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "2[7mM K_nayWw", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("2[7mM K_nayWw", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0._wrapAsIOE(toXmlGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      assertNotNull(xmlRootNameLookup0);
      
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      assertNotNull(xmlSerializerProvider0);
      
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) xmlRootNameLookup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rc8", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyName propertyName0 = PropertyName.construct("", "");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) rootNameLookup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "vu", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider((XmlRootNameLookup) null);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
      assertEquals(3, toXmlGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rt", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      try { 
        xmlSerializerProvider1._serializeXmlNull(toXmlGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "RTbmEa})gMTM.G>");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      xmlSerializerProvider1._serializeXmlNull(jsonGenerator0);
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyName propertyName0 = PropertyName.construct("file", "file");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      xmlSerializerProvider1.serializeValue((JsonGenerator) tokenBuffer0, (Object) null);
      assertNotSame(xmlSerializerProvider0, xmlSerializerProvider1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      Object object0 = new Object();
      JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getDefaultNullValueSerializer();
      xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, object0, (JavaType) null, jsonSerializer0);
      assertEquals(0, tokenBuffer0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, true);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) xmlRootNameLookup0, (JavaType) null, (JsonSerializer<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rc8", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) rootNameLookup0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      NamedType namedType0 = new NamedType(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, namedType0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockPrintWriter0, writerConfig0, "JSON", false, (OutputStream) null, 222);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-868), objectMapper0, nonNsStreamWriter0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyName propertyName0 = PropertyName.construct("JSON", "JSON");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1240);
      ObjectIdGenerator<MockFileInputStream> objectIdGenerator0 = (ObjectIdGenerator<MockFileInputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(placeholderForType0, propertyName0, objectIdGenerator0, false);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) jsonFactory0, objectIdWriter0.idType, (JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not set default namespace for non-namespace writer.
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) xmlRootNameLookup0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<InputStream> class0 = InputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      // Undeclared exception!
      try { 
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=$:Rt", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      Class<IOException> class0 = IOException.class;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, xmlSerializerProvider0, defaultDeserializationContext_Impl0);
      try { 
        objectMapper1.valueToTree((Object) xmlSerializerProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider[\"annotationIntrospector\"])
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      DefaultSerializerProvider defaultSerializerProvider0 = xmlSerializerProvider0.copy();
      assertNotSame(xmlSerializerProvider0, defaultSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
      XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "(7c, ", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, writerConfig0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, repairingNsStreamWriter0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      PropertyName propertyName0 = new PropertyName("(7c, ");
      SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
      XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      // Undeclared exception!
      try { 
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }
}
