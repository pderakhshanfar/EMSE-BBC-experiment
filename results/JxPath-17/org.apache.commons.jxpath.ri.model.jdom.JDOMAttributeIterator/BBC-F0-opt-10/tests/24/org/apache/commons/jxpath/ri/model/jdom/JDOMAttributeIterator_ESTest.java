/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 03:18:58 GMT 2021
 */

package org.apache.commons.jxpath.ri.model.jdom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.NodeIterator;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jdom.Element;
import org.jdom.Namespace;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JDOMAttributeIterator_ESTest extends JDOMAttributeIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName qName0 = new QName("Vh4t");
      Locale locale0 = new Locale("Vh4t");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Element element0 = new Element("Vh4t");
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      nodePointer1.createAttribute(jXPathContext0, qName0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName0);
      boolean boolean0 = jDOMAttributeIterator0.setPosition(1);
      assertEquals(1, jDOMAttributeIterator0.getPosition());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.compiler.NodeNameTest", "The attribute already has an existing parent \"");
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      NodeIterator nodeIterator0 = nodePointer1.attributeIterator(qName0);
      nodeIterator0.setPosition(16);
      int int0 = nodeIterator0.getPosition();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.compiler.NodeNameTest", "The attribute already has an existing parent \"");
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName0);
      jDOMAttributeIterator0.setPosition(Integer.MIN_VALUE);
      int int0 = jDOMAttributeIterator0.getPosition();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName0);
      jDOMAttributeIterator0.setPosition(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jDOMAttributeIterator0.getNodePointer();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JDOMAttributeIterator jDOMAttributeIterator0 = null;
      try {
        jDOMAttributeIterator0 = new JDOMAttributeIterator(variablePointer0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("xml", "|'<_isE;fDRwtb;Tt0r");
      JDOMAttributeIterator jDOMAttributeIterator0 = null;
      try {
        jDOMAttributeIterator0 = new JDOMAttributeIterator((NodePointer) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      Variables variables0 = jXPathContext0.getVariables();
      QName qName0 = new QName("*", "*");
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      JDOMAttributeIterator jDOMAttributeIterator0 = null;
      try {
        jDOMAttributeIterator0 = new JDOMAttributeIterator(variablePointer0, qName0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '*:*'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", "drg.apachV.commons.jxaath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", "drg.apachV.commons.jxaath.ri.compiler.NodeNameTest");
      Element element0 = new Element("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName0);
      boolean boolean0 = jDOMAttributeIterator0.setPosition((-550));
      assertEquals((-550), jDOMAttributeIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("D");
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "D", locale0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer0, qName0);
      boolean boolean0 = jDOMAttributeIterator0.setPosition(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", "drg.apachV.commons.jxaath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", "drg.apachV.commons.jxaath.ri.compiler.NodeNameTest");
      Element element0 = new Element("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      nodePointer1.createAttribute(jXPathContext0, qName0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName0);
      NodePointer nodePointer2 = jDOMAttributeIterator0.getNodePointer();
      assertNotNull(nodePointer2);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QName qName0 = new QName("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", "drg.apachV.commons.jxaath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", "drg.apachV.commons.jxaath.ri.compiler.NodeNameTest");
      Element element0 = new Element("drg.apachV.commons.jxaath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName0);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
      
      jDOMAttributeIterator0.getNodePointer();
      assertEquals(1, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt", "rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt");
      Element element0 = new Element("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      QName qName1 = new QName("*");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespace0);
      NodePointer nodePointer2 = nodePointer1.createAttribute(jXPathContext0, qName0);
      assertNotNull(nodePointer2);
      
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QName qName0 = new QName("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt", "rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt");
      Element element0 = new Element("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      QName qName1 = new QName("rg.lphV.comhons.jxaath.ri.ompilr.NodeNameTlt", "*");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespace0);
      NodePointer nodePointer2 = nodePointer1.createAttribute(jXPathContext0, qName0);
      assertNotNull(nodePointer2);
      
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeNameTest", "org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      QName qName1 = new QName("<<unknown namespace>>", "]93_s.xm4iQ{");
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName1, element0);
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("<<unknown namespace>>");
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      QName qName1 = new QName("xml", "http://www.w3.org/XML/1998/namespace");
      JDOMAttributeIterator jDOMAttributeIterator0 = new JDOMAttributeIterator(nodePointer1, qName1);
      assertEquals(0, jDOMAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      Namespace namespace0 = Namespace.getNamespace("org.apache.commons.jxpath.ri.compiler.NodeNameTest", "The attribute already has an existing parent \"");
      Element element0 = new Element("org.apache.commons.jxpath.ri.compiler.NodeNameTest", namespace0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, element0);
      NodeIterator nodeIterator0 = nodePointer1.attributeIterator(qName0);
      int int0 = nodeIterator0.getPosition();
      assertEquals(0, int0);
  }
}
