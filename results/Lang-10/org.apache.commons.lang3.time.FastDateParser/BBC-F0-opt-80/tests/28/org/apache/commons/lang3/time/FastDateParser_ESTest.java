/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 10:18:07 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8lEVK`sOD");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("W%4S8VD-m9XIs(G{", timeZone0, locale0);
      assertEquals("W%4S8VD-m9XIs(G{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("MTPLT");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("MTPLT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("33[H(w");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("d", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("33[H(w", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "3m[M(Mw");
      Locale locale0 = new Locale("3m[M(Mw");
      FastDateParser fastDateParser0 = new FastDateParser("3m[M(Mw", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("3m[M(Mw", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4977));
      assertEquals((-2977), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("=J:X", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8lEVK`sOD");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("am8lEVK`sOD", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8lEVK`sOD");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("am8lEVK`sOD", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h(SMw");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("h(SMw", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Q", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("JP");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("^ZC~n^8X3l_VI", timeZone0, locale0);
      assertEquals("^ZC~n^8X3l_VI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(12);
      Date date0 = fastDateParser0.parse("^Co.%r0E0$aN$C", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" ZVH3A>&", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTNET");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" ZVH3A>&", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("-18:00", parsePosition0);
      assertEquals(6, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" ZVH3A>&", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ECT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h(SMw");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("`0@ N^wW!6%>", timeZone0, locale0);
      assertEquals("`0@ N^wW!6%>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h(SMw");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("@Tx%qAD+K<NDG", timeZone0, locale0);
      assertEquals("@Tx%qAD+K<NDG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("0x*v_s", "0x*v_s", "o");
      FastDateParser fastDateParser0 = new FastDateParser("?rmn{", timeZone0, locale0);
      assertEquals("?rmn{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%)0E|aN$C");
      Locale locale0 = new Locale("^Co.%)0E|aN$C", "^Co.%)0E|aN$C", "^Co.%)0E|aN$C");
      FastDateParser fastDateParser0 = new FastDateParser(">x", timeZone0, locale0);
      assertEquals(">x", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=G!TLT");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("=G!TLT", timeZone0, locale0);
      assertEquals("=G!TLT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("0x*v_s", "0x*v_s", "o");
      FastDateParser fastDateParser0 = new FastDateParser("<", timeZone0, locale0);
      assertEquals("<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPLT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";-e:8U?V,Gt.U[j_I4", timeZone0, locale0);
      assertEquals(";-e:8U?V,Gt.U[j_I4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6P");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("6P", timeZone0, locale0);
      assertEquals("6P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("5Np+BTouGm3}yzBgZ", timeZone0, locale0);
      assertEquals("5Np+BTouGm3}yzBgZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("4`\"O", timeZone0, locale0);
      assertEquals("4`\"O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPLT");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("K1r:msj8jefhAkDfW", timeZone0, locale0);
      try { 
        fastDateParser0.parse("GMTPLT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTPLT\" does not match (\\p{IsNd}{1}+)1
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPRT");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("/5 &W", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPLT");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(".l4k,L4aNm", timeZone0, locale0);
      assertEquals(".l4k,L4aNm", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("-18:00", timeZone0, locale0);
      assertEquals("-18:00", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPLT");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8lEVK`sOD");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("*4$vOxg#Buo(a<1Y", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2705));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("am8lEVK`sOD", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1561);
      assertEquals(3461, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|a+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|a+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-652));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("D+|E+|F+|G+|H+|K+|M+|S+|a+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTPLT");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("S:[7{8CIdO!pN.:ON", timeZone0, locale0);
      assertEquals("S:[7{8CIdO!pN.:ON", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<qX>[?8-TV&!39e");
      Locale locale0 = new Locale("3_}p^]?+}7m", "<qX>[?8-TV&!39e", "p&d~tL&ua}^h~I.^");
      FastDateParser fastDateParser0 = new FastDateParser("2(}.=;7cT*M07X=Hm", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(32);
      assertEquals(2032, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8lEVK`sOD");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTVST", timeZone0, locale0);
      try { 
        fastDateParser0.parse("FNEgEwG0fe[&_");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"FNEgEwG0fe[&_\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" ZVH3A>&", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("+18:00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      Locale locale1 = Locale.JAPAN;
      FastDateParser fastDateParser1 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT*MIT");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMT*MIT", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "7v-e*1B@Ky1");
      FastDateParser fastDateParser1 = new FastDateParser("GMT*MIT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8lEVK`sOD");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("am8lEVK`sOD", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("7v-e*1B@Ky1", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h(SMw");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("_$f)~+i>", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT*MIT");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMT*MIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<qX>[?8-TV&!39e");
      Locale locale0 = new Locale("3_}p^]?+}7m", "<qX>[?8-TV&!39e", "p&d~tL&ua}^h~I.^");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("co+o 6XF/ZS", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "GMTCTT");
      FastDateParser fastDateParser0 = new FastDateParser("GMTCTT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("h(SMw");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(")`RI'M!|]js07", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("h(SMw");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"h(SMw\" does not match \\)`
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("^Co.%r0E0$aN$C", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("0x*v_s", "0x*v_s", "o");
      FastDateParser fastDateParser0 = new FastDateParser("0x*v_s", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("0x*v_s", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^Co.%r0E0$aN$C");
      Locale locale0 = new Locale("^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C", "^Co.%r0E0$aN$C");
      FastDateParser fastDateParser0 = new FastDateParser("^Co.%r0E0$aN$C", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(8);
      Object object0 = fastDateParser0.parseObject("^Co.%r0E0$aN$C", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone("  bw");
      FastDateParser fastDateParser0 = new FastDateParser("  bw", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[  bw,en_CA,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6P");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("[Iy|Nn:Z7.>R}zYK", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "3m[M(Mw");
      Locale locale0 = new Locale("3m[M(Mw");
      FastDateParser fastDateParser0 = new FastDateParser("3m[M(Mw", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("3(\\p{IsNd}++)\\[(\\p{IsNd}++)\\((\\p{IsNd}{1}+)(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("9WE3_v", timeZone0, locale0);
      assertEquals("9WE3_v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("am8EVsOD");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("~3?1Eyz Ih]", timeZone0, locale0);
      assertEquals("~3?1Eyz Ih]", fastDateParser0.getPattern());
  }
}
